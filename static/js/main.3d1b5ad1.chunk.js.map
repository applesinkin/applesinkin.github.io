{"version":3,"sources":["const/index.js","config/Alert.js","config/history.js","actions/defaults.js","actions/roles.js","utils/format.js","const/apiMethods.js","actions/accounts.js","actions/settings.js","reducers/accounts.js","reducers/setting.js","reducers/auth.js","actions/actionTypes.js","reducers/references.js","reducers/access_list.js","reducers/live_calls.js","reducers/prices.js","reducers/ranges.js","reducers/numbers.js","utils/storage.js","utils/helpers.js","utils/validate.js","utils/ObjectSet.js","reducers/roles.js","reducers/cdr.js","const/localStorageKeys.js","reducers/traffic_reports.js","reducers/auth_numbers.js","reducers/apiPage.js","reducers/payments.js","reducers/paymentDetails.js","reducers/sim_traffic_ranges.js","reducers/blocked_destinations.js","reducers/global_setting.js","reducers/page_logger.js","reducers/action_logs.js","reducers/google_otp_quarantined.js","reducers/google_otp_allocation.js","reducers/am_activities.js","reducers/account_managers.js","reducers/special_limit_terms.js","reducers/account_note.js","reducers/registration.js","reducers/ivr.js","reducers/ivr_cli.js","reducers/ivr_sounds.js","reducers/ivr_default.js","reducers/auth_dialer.js","reducers/client/numbers.js","reducers/client/test_calls.js","reducers/client/live_calls.js","reducers/client/cdr.js","reducers/client/traffic_stat.js","reducers/client/price.js","reducers/client/accesses.js","reducers/client/cli.js","reducers/client/api_page.js","reducers/dropdown_accounts.js","reducers/index.js","store/index.js","api/auth.js","actions/auth.js","api/index.js","utils/pageIdLogger.js","api/loginRoutes.js","actions/references.js","pages/Maintenance/Maintenance.js","hooks/useWindowWidth.js","components/base/BaseButton.js","definedMessages/common.js","definedMessages/accesses.js","definedMessages/validation.js","definedMessages/balanceInfo.js","definedMessages/numbers.js","definedMessages/liveCalls.js","definedMessages/pagination.js","definedMessages/testCalls.js","definedMessages/traffic.js","definedMessages/cdr.js","definedMessages/price.js","definedMessages/cli.js","definedMessages/ivr.js","definedMessages/paymentDetails.js","definedMessages/payments.js","definedMessages/modalResponseHandler.js","definedMessages/editProfile.js","definedMessages/index.js","components/base/BaseModal.js","components/CacheBooster.js","components/Modal/ModalEdit.js","components/EditProfile/ModalEditProfileConfirm.js","components/EditProfile/ModalEditProfile.js","store/storeHelpers.js","components/Navigation/styled.js","components/Navigation/UserProfileMenu.js","components/Navigation/MainMenu/MenuDesktop.js","components/Navigation/MainMenu/MenuMobile.js","components/Navigation/MainMenu/MainMenu.js","components/Navigation/ManagerInfo.js","components/Navigation/BalanceMenu.js","components/Navigation/Contacts/SkypeInfo.js","components/Navigation/Contacts/ContactList.js","components/Navigation/Contacts/ContactModal.js","components/Navigation/Navigation.js","components/Modal/Modal.js","components/Modal/ModalResponseHandler.js","components/MyForm/MyForm.js","hoc/Checkbox.js","components/Form/CustomField.js","components/Form/Text.js","components/Modal/ModalSendApi.js","components/ApiRequest.js","components/Form/NumberField.js","components/base/BaseForm.js","components/Form/CheckboxControl.js","components/Select/Select.js","components/Filters/ServicePlans.js","components/Filters/NumbersSelect.js","components/alert.js","components/Filters/SDE/index.js","pages/Account/Trunks/AllocatedNumbers/AllocateNumbersModal/NumberForm.js","components/Filters/WZ/index.js","components/Filters/DE/index.js","components/base/Pagination/Pagination.js","components/Table/RenderColumns.js","components/Table/ShowColumnPicker.js","components/base/BaseTable.js","components/Table/Table.js","components/Form/RateField.js","pages/Account/Trunks/AllocatedNumbers/AllocateNumbersModal/MassForm.js","components/base/Spacer.js","pages/Account/Trunks/AllocatedNumbers/AllocateNumbersModal/ListForm.js","pages/Account/Trunks/AllocatedNumbers/AllocateNumbersModal/SequenceForm.js","pages/Account/Trunks/AllocatedNumbers/AllocateNumbersModal/TemplateListForm.js","pages/Account/Trunks/AllocatedNumbers/AllocateNumbersModal/GoogleOTPForm.js","components/base/BaseNav.js","pages/Account/Trunks/AllocatedNumbers/AllocateNumbersModal/Tabs.js","components/TreePicker/TreePicker.js","components/TreePicker/index.js","components/Filters/DialerTrunk.js","components/Modal/ModalAllocationResult/styled.js","components/Modal/ModalAllocationResult/ListNotAllocatedNumbers.js","components/Modal/ModalAllocationResult/ModalAllocationResult.js","components/Filters/AccountsGetForm.js","components/Form/CustomSelectPicker.js","components/Filters/DialerTrunkDropdown.js","pages/Account/Trunks/AllocatedNumbers/AllocateNumbersModal/Modal.js","pages/NumberAllocation/NumberAllocation.js","components/Error/Error.js","components/VersionLabel/VersionLabel.js","actions/registration.js","components/SkypeWidget.js","components/Layout.js","components/Router/RouteWithLayout.js","components/Router/AuthRoute.js","pages/Payments/styled.js","pages/Payments/CommonTable.js","pages/Payments/PaymentsRequestSection/PaymentsRequestTable.js","components/base/FlexGrid.js","pages/Payments/PaymentsRequestSection/PaymentsRequestFilter.js","pages/Payments/ModalChangePaymentRequestStatus/ModalChangePaymentRequestStatus.js","pages/Payments/PaymentsRequestSection/PaymentsRequestSection.js","pages/Payments/PaymentsListSection/PaymentsListTable.js","components/Form/FieldDataRange.js","pages/Payments/PaymentsListSection/PaymentsListFilter.js","pages/Payments/PaymentsListSection/PaymentsListSection.js","pages/Payments/PaymentsTrafficReportsSection/PaymentsTrafficReportsTable.js","pages/Payments/PaymentsTrafficReportsSection/PaymentsTrafficReportsFilter.js","pages/Payments/PaymentsTrafficReportsSection/PaymentsTrafficReportsSection.js","pages/Payments/ModalRequestPayment/ModalRequestPayment.js","actions/paymentDetails.js","pages/PaymentDetails/PaymentDetailsTable.js","pages/PaymentDetails/ModalAddPaymentDetail/styled.js","pages/PaymentDetails/ModalAddPaymentDetail/fields.js","pages/PaymentDetails/ModalAddPaymentDetail/ModalAddPaymentDetail.js","pages/PaymentDetails/ModalRemovePaymentDetail.js","pages/PaymentDetails/PaymentDetails.js","pages/PaymentDetails/PaymentDetailsContainer.js","pages/Payments/ModalPaymentDetails/ModalPaymentDetails.js","components/PageTabs/PageTabs.js","pages/Payments/PaymentsHeader.js","components/Table/TableClientSort.js","pages/Payments/HawalaPaymentRequest/HawalaPaymentRequestTable.js","pages/NewAccount/CustomField.js","pages/Payments/HawalaPaymentRequest/HawalaPaymentRequestFilter.js","pages/Payments/HawalaPaymentRequest/ModalHawalaRequest.js","pages/Payments/HawalaPaymentRequest/ModalHawalaResult.js","pages/Payments/HawalaPaymentRequest/HawalaPaymentRequestApiFilter.js","pages/Payments/HawalaPaymentRequest/HawalaPaymentRequest.js","actions/payments.js","actions/dropdown_accounts.js","actions/account_managers.js","pages/Payments/PaymentsContainer.js","pages/Payments/Payments.js","pages/Accounts/AccountsTable.js","hoc/CheckerPicker.js","hoc/FilltersForm.js","pages/Accounts/styled.js","pages/Accounts/AccountsFilters.js","components/base/PanelLayout.js","pages/Accounts/AccountsApiFilters.js","pages/Accounts/Accounts.js","routes/routes.js","containers/Accounts.js","actions/numbers.js","actions/rates.js","pages/NewAccount/ContactCustomField.js","pages/NewAccount/Contacts.js","pages/NewAccount/Customers.js","pages/NewAccount/SaveModel.js","pages/NewAccount/CloseAccount.js","pages/NewAccount/OpenAccount.js","pages/NewAccount/CreateForm.js","pages/Account/General/TabGeneral.js","pages/Account/Rates/RatesTable.js","pages/Account/Rates/RatesFilters.js","pages/Account/Rates/ExportPrice.js","pages/Account/Rates/AddPrice.js","pages/Account/Rates/TabRates.js","components/Table/TableServerSort.js","components/Form/InputSearch.js","components/Filters/Search.js","pages/Account/Trunks/AllocatedNumbers/styled.js","pages/Account/Trunks/AllocatedNumbers/NumbersDownloadDropdown.js","pages/Account/Trunks/AllocatedNumbers/NumbersFilters.js","pages/Account/Trunks/styled.js","pages/Account/Trunks/AllocatedNumbers/AllocateNumbersModal/TrunksAllocation.js","pages/Account/Trunks/AllocatedNumbers/NumbersActions.js","pages/Account/Trunks/AllocatedNumbers/AllocateNumbersModal/ChangeRateModal.js","pages/Account/Trunks/RevokeNumbersModal.js","components/Form/CustomDatePicker.js","pages/Account/Trunks/MoveNumbersModal.js","pages/Account/Trunks/AllocatedNumbers/AllocatedNumbers.js","components/Filters/Protocols.js","pages/Account/Trunks/TrunkModal/TrunkForm.js","pages/Account/Trunks/TrunkModal/TrunkModal.js","pages/Account/Trunks/RevokeTrunkModal.js","pages/Account/Trunks/RemoveTrunkModal.js","pages/Account/Trunks/Trunks.js","pages/Account/Trunks/TabTrunks.js","pages/Account/TabSelfAllocation/LimitForm.js","pages/Account/TabSelfAllocation/DefaultLimitationDescription.js","pages/Account/TabSelfAllocation/FormSelfAllocation.js","pages/Account/TabSelfAllocation/TabSelfAllocation.js","pages/Account/AccountHeader.js","pages/Account/TabAccessListFilters/AccessListFilters/FormAddFilter/FormAddFilter.js","pages/Account/TabAccessListFilters/AccessListFilters/AccessListFiltersSettings/AccessListFiltersSettings.js","pages/Account/TabAccessListFilters/AccessListFilters/ModalRemoveFilter/ModalRemoveFilter.js","pages/Account/TabAccessListFilters/AccessListFilters/AccessListFiltersTable/AccessListFiltersTable.js","pages/Account/TabAccessListFilters/AccessListFilters/AccessListFiltersFilter/AccessListFiltersFilter.js","pages/Account/TabAccessListFilters/AccessListFilters/AccessListFilters.js","pages/Account/TabAccessListFilters/AccessListFilters/AccessListFiltersContainer.js","pages/Account/TabAccessListFilters/styled.js","pages/Account/TabAccessListFilters/TabAccessListFilters.js","actions/apiPage.js","pages/Account/ApiPage/ApiPageKeys.js","components/base/PageHeader.js","pages/Account/ApiPage/ApiKeyModal.js","pages/Account/ApiPage/ApiPage.js","pages/Account/ApiPage/ApiPageContainer.js","pages/Payments/PaymentsSectionHeader.js","pages/Account/TabPaymentManagement/PaymentsRequestSection.js","pages/Payments/CommonDateFilter.js","pages/Account/TabPaymentManagement/PaymentsListSection.js","pages/Account/TabPaymentManagement/PaymentsTrafficReportsSection.js","pages/Payments/FormPaymentSettings/FormPaymentSettings.js","pages/Account/TabPaymentManagement/TabPaymentManagementContainer.js","pages/Account/TabPaymentManagement/TabPaymentManagement.js","pages/Account/Notes/NotesForm.js","pages/Account/Notes/ModalNoteDeactivate.js","pages/Account/Notes/NotesList.js","actions/account_note.js","pages/Account/Notes/NotesContainer.js","pages/Account/Notes/Notes.js","pages/Account/Account.js","pages/Account/AccountContainer.js","pages/NewAccount/NewAccount.js","containers/CreateAccount.js","pages/AccessList/AccessListFilters.js","pages/AccessList/AccessListTable.js","components/ExportCsv.js","actions/access_list.js","pages/AccessList/AccessList.js","actions/live_calls.js","pages/LiveCalls/LiveCallsTable.js","pages/LiveCalls/LiveCallsAutoUpdateForm.js","pages/LiveCalls/LiveCallsHeader.js","pages/LiveCalls/StopCallModal.js","pages/LiveCalls/LiveCalls.js","pages/LiveCalls/LiveCallsContainer.js","pages/Prices/PriceFilters.js","pages/Prices/Ranges/FormRandom.js","pages/Prices/Ranges/FormTemplateList.js","pages/Prices/Ranges/FormNumbersList.js","pages/Prices/Ranges/ListNotCreatedRanges.js","pages/Prices/Ranges/ModalNewRangeResult.js","pages/Prices/Ranges/AddNewRange.js","pages/Prices/Ranges/RangesFilters.js","pages/Prices/Ranges/Ranges.js","pages/Prices/AddNewSubdestination.js","pages/Prices/ExportPrice.js","pages/Prices/ShowPrice.js","pages/Prices/EditPrice.js","actions/ranges.js","actions/prices.js","pages/Prices/Prices.js","pages/RangesAndNumbers/RangesFilters.js","pages/RangesAndNumbers/Numbers/NumbersFilters.js","pages/RangesAndNumbers/Numbers/Revoke.js","pages/RangesAndNumbers/Numbers/Allocate/AllocateForm.js","pages/RangesAndNumbers/Numbers/Allocate/Allocate.js","pages/RangesAndNumbers/Numbers/SetOrUnsetTest.js","pages/RangesAndNumbers/Numbers/Block.js","pages/RangesAndNumbers/Numbers/Unblock.js","pages/RangesAndNumbers/Numbers/Numbers.js","components/Loader/Loader.js","pages/RangesAndNumbers/ModalResult.js","pages/RangesAndNumbers/DeleteRanges.js","pages/RangesAndNumbers/Ranges.js","actions/cdr.js","pages/CDR/CDRTable.js","pages/CDR/CDRFilters.js","pages/CDR/CDRPage.js","actions/traffic_reports.js","pages/TrafficReports/TrafficReportsTable.js","components/Form/CheckboxBadge/CheckboxBadge.js","pages/TrafficReports/TrafficReportsFilters.js","pages/TrafficReports/TrafficReportsPage.js","actions/auth_numbers.js","pages/AuthNumbers/AuthNumbersFilter.js","pages/AuthNumbers/AuthNumbersTable.js","pages/AuthNumbers/AuthNumbers.js","components/Reload/Reload.js","pages/AccessListException/AccessListExceptionTable.js","pages/AccessListException/AccessListExceptionFilter.js","pages/AccessListException/AccessListExceptionAdd.js","pages/AccessListException/ModalExceptionRemove.js","pages/AccessListException/AccessListException.js","pages/SIMTrafficRanges/SIMTrafficRangesFilters.js","pages/SIMTrafficRanges/styled.js","actions/sim_traffic_ranges.js","pages/SIMTrafficRanges/SIMTrafficRangesTable.js","pages/SIMTrafficRanges/SIMTrafficRangesAddNewModal.js","pages/SIMTrafficRanges/SIMTrafficRangesPage.js","actions/blocked_destinations.js","pages/BlockedDestinations/BlockedDestinationsFilters.js","pages/BlockedDestinations/styled.js","pages/BlockedDestinations/BlockedDestinationsTable.js","pages/BlockedDestinations/BlockedDestinationsAdd.js","pages/BlockedDestinations/BlockedDestinationsPage.js","actions/action_logs.js","pages/ActionLogs/ActionLogsFilter.js","pages/ActionLogs/ActionLogsTable.js","pages/ActionLogs/ModalActionParams.js","pages/ActionLogs/ModalActionError.js","pages/ActionLogs/ActionLogsContainer.js","pages/ActionLogs/ActionLogs.js","pages/GoogleOtpQuarantined/GoogleOtpQuarantinedFilter.js","pages/GoogleOtpQuarantined/GoogleOtpQuarantinedTable.js","pages/GoogleOtpQuarantined/ModalRemoveNumbers.js","actions/google_otp_quarantined.js","pages/GoogleOtpQuarantined/GoogleOtpQuarantinedContainer.js","pages/GoogleOtpQuarantined/GoogleOtpQuarantined.js","pages/AmActivities/AmActivitiesFilter.js","pages/AmActivities/AmActivitiesTable.js","pages/AmActivities/AmActivities.js","actions/am_activities.js","pages/AmActivities/AmActivitiesContainer.js","pages/AccountManagers/ModalRemoveAccountManager.js","pages/AccountManagers/AccountManagersTable.js","pages/AccountManagers/AccountManagersCreateForm.js","pages/AccountManagers/AccountManagersContainer.js","pages/AccountManagers/AccountManagers.js","pages/Settings/SettingsJsonEditor.js","pages/Settings/SettingsContactEditor.js","pages/Settings/SettingsEditModal.js","pages/Settings/styled.js","pages/Settings/SettingsTable.js","actions/global_setting.js","pages/Settings/SettingsPage.js","pages/PriceRangeQuarantineSetting/ModalSettingSubmitApprove.js","pages/PriceRangeQuarantineSetting/ModalSettingRemove.js","pages/PriceRangeQuarantineSetting/PriceRangeQuarantineSettingTable.js","pages/PriceRangeQuarantineSetting/PriceRangeQuarantineSettingCreateForm.js","pages/PriceRangeQuarantineSetting/PriceRangeQuarantineSettingFilter.js","actions/special_limit_terms.js","pages/PriceRangeQuarantineSetting/PriceRangeQuarantineSettingContainer.js","pages/PriceRangeQuarantineSetting/PriceRangeQuarantineSetting.js","pages/RegistrationRequests/ModalRejectRegistration.js","pages/Login/RegistrationFormFields.js","pages/RegistrationRequests/RegistrationRequestsTable.js","pages/RegistrationRequests/RegistrationRequestsFilter.js","pages/RegistrationRequests/RegistrationRequestsContainer.js","pages/RegistrationRequests/RegistrationRequestsPage.js","pages/GoogleOtpAllocation/ModalGoogleOtpAllocationRemove.js","pages/GoogleOtpAllocation/GoogleOtpAllocationTable.js","pages/GoogleOtpAllocation/GoogleOtpAllocationCreateForm.js","pages/GoogleOtpAllocation/GoogleOtpAllocationFilter.js","actions/google_otp_allocation.js","pages/GoogleOtpAllocation/GoogleOtpAllocationContainer.js","pages/GoogleOtpAllocation/GoogleOtpAllocation.js","pages/Ivr/PageIvrs/BlockIvrList.js","pages/Ivr/PageIvrs/BlockIvrParameters.js","components/IvrListener/audioPlayer.js","components/IvrListener/Session.js","components/IvrListener/IvrListener.js","pages/Ivr/PageIvrs/BlockIvrActionList.js","pages/Ivr/PageIvrs/BlockIvrListFilter.js","actions/ivr.js","actions/ivr_sounds.js","pages/Ivr/PageIvrs/PageIvrsContainer.js","pages/Ivr/PageIvrs/PageIvrs.js","pages/Ivr/PageIvrSounds/BlockIvrSoundsFilter.js","pages/Ivr/PageIvrSounds/ModalAddSound.js","pages/Ivr/PageIvrSounds/ModalCancel.js","pages/Ivr/PageIvrSounds/PageIvrSounds.js","pages/Ivr/PageIvrSounds/PageIvrSoundsContainer.js","pages/Ivr/PageIvrSpecialCli/PageIvrSpecialCliFilter.js","components/Table/TableEditCells/ModalSubmitRowApprove.js","components/Table/TableEditCells/ModalRemoveRow.js","components/Table/TableEditCells/FormCreateRow.js","components/Table/TableEditCells/TableEditCells.js","pages/Ivr/PageIvrSpecialCli/PageIvrSpecialCliTable.js","actions/ivr_cli.js","pages/Ivr/PageIvrSpecialCli/PageIvrSpecialCliContainer.js","pages/Ivr/PageIvrSpecialCli/PageIvrSpecialCli.js","actions/ivr_default.js","pages/Ivr/PageIvrDefault/PageIvrDefault.js","pages/Ivr/PageIvrDefault/PageIvrDefaultContainer.js","pages/Ivr/Ivr.js","routes/RoutesAdmin.js","actions/client/defaults.js","actions/client/liveCalls.js","components/client/Pagination/styled.js","components/client/Pagination/Pagination.js","components/base/MenuShowColumns.js","components/client/Speaker/styled.js","components/client/Speaker/index.js","components/client/CustomizableTable/CustomizableTable.js","pagesClient/LiveCalls/LiveCallsTable.js","components/client/Form/CustomizableForm.js","pagesClient/LiveCalls/LiveCallsFilters.js","pagesClient/LiveCalls/LiveCallsApiFilters.js","pagesClient/LiveCalls/LiveCalls.js","pagesClient/LiveCalls/LiveCallsContainer.js","pagesClient/TestCalls/TestCallsTable.js","components/client/Form/CustomField/CustomField.js","pagesClient/TestCalls/TestCallsFilters.js","pagesClient/TestCalls/TestCalls.js","actions/client/testCalls.js","pagesClient/TestCalls/TestCallsContainer.js","pagesClient/Traffic/CDR/CDRTable.js","pagesClient/Traffic/CDR/CDRFilters.js","components/client/ButtonDownload/ButtonDownload.js","pagesClient/Traffic/CDR/CDR.js","actions/client/cdr.js","pagesClient/Traffic/CDR/CDRContainer.js","pagesClient/Traffic/TrafficStat/TrafficStatTable.js","pagesClient/Traffic/TrafficStat/TrafficStatFilters.js","pagesClient/Traffic/TrafficStat/TrafficStat.js","actions/client/trafficStat.js","pagesClient/Traffic/TrafficStat/TrafficStatContainer.js","components/base/BaseToggle.js","pagesClient/Traffic/Traffic.js","actions/client/price.js","actions/client/accesses.js","actions/client/numbers.js","pagesClient/Price/PriceFilters.js","pagesClient/Price/PriceTable.js","components/TrunksList/TrunksList.js","pagesClient/Price/PriceGetNumbersModal.js","components/client/Modal/ModalAllocationResult.js","components/client/SDE/SDE.js","pagesClient/Numbers/GoogleOTPAllocateModal/styled.js","pagesClient/Numbers/NumbersAllocateModal/FormWhisper.js","pagesClient/Numbers/GoogleOTPAllocateModal/GoogleOTPAllocateModal.js","components/client/Modal/ModalResponseHandler.js","pagesClient/Price/Price.js","pagesClient/Price/PriceContainer.js","pagesClient/Accesses/AccessesFilters.js","pagesClient/Accesses/AccessesTable.js","pagesClient/Accesses/AccessGetNumbersModal.js","pagesClient/Accesses/Accesses.js","pagesClient/Accesses/AccessesContainer.js","actions/client/cli.js","pagesClient/CLI/CLIFilters.js","pagesClient/CLI/CLITable.js","pagesClient/CLI/CLI.js","pagesClient/CLI/CLIContainer.js","pagesClient/IVR/IVR.js","actions/client/apiPage.js","pagesClient/ApiPage/ApiCurrentApiKey.js","pagesClient/ApiPage/ApiPageDocumentation.js","pagesClient/ApiPage/ApiPageKeys.js","pagesClient/ApiPage/apiExamples.js","pagesClient/ApiPage/ApiPageExamples.js","pagesClient/ApiPage/ApiPageSidebar.js","pagesClient/ApiPage/ApiPage.js","pagesClient/ApiPage/ApiPageContainer.js","pagesClient/PaymentDetails/PaymentDetailsTable.js","pagesClient/PaymentDetails/ModalAddPaymentDetail/styled.js","pagesClient/PaymentDetails/ModalAddPaymentDetail/Field.js","pagesClient/PaymentDetails/ModalAddPaymentDetail/fields.js","pagesClient/PaymentDetails/ModalAddPaymentDetail/ModalAddPaymentDetail.js","pagesClient/PaymentDetails/ModalRemovePaymentDetail.js","pagesClient/PaymentDetails/PaymentDetails.js","pagesClient/PaymentDetails/PaymentDetailsContainer.js","pagesClient/Payments/styled.js","pagesClient/Payments/PaymentsSectionHeader.js","pagesClient/Payments/CommonTable.js","pagesClient/Payments/PaymentsRequestSection/PaymentsRequestTable.js","pagesClient/Payments/ModalCancelPaymentRequest/ModalCancelPaymentRequest.js","pagesClient/Payments/PaymentsRequestSection/PaymentsRequestSection.js","pagesClient/Payments/PaymentsListSection/PaymentsListTable.js","pagesClient/Payments/CommonDateFilter.js","pagesClient/Payments/PaymentsListSection/PaymentsListSection.js","pagesClient/Payments/PaymentsTrafficReportsSection/PaymentsTrafficReportsTable.js","pagesClient/Payments/PaymentsTrafficReportsSection/PaymentsTrafficReportsSection.js","pagesClient/Payments/ModalRequestPayment/ModalRequestPayment.js","actions/auth_dialer.js","pagesClient/Payments/PaymentsContainer.js","pagesClient/Payments/Payments.js","pagesClient/Numbers/TrunkTable.js","components/client/Form/CustomNumber.js","pagesClient/Numbers/NumbersFilters/NumbersFiltersForm.js","pagesClient/Numbers/NumbersFilters/NumbersFilters.js","pagesClient/Numbers/AllocatedNumbersTable.js","pagesClient/Numbers/NumbersRevokeModal.js","pagesClient/Numbers/NumbersAllocateModal/styled.js","pagesClient/Numbers/NumbersAllocateModal/NumbersAllocateModal.js","pagesClient/Numbers/Numbers.js","pagesClient/Numbers/NumbersContainer.js","pagesClient/PaymentDetails/PaymentDetailConfirm.js","routes/RoutesClient.js","locales/index.js","locales-rsuite/index.js","pages/Login/styled.js","pages/Login/RegistrationField.js","pages/Login/RegistrationModal.js","components/LangSwitcher.js","pages/Login/Login.js","pages/ResetPassword/ResetPassword.js","context/themeContext.js","pages/EmailVerification/EmailVerificationResult.js","pages/EmailVerification/EmailVerification.js","App.js","serviceWorker.js","index.js","components/client/Form/CustomField/CustomField.module.css","components/base/Pagination/Pagination.module.css","components/Form/CheckboxBadge/CheckboxBadge.module.css","components/Table/Table.module.css","components/VersionLabel/VersionLabel.module.css","components/Loader/Loader.module.css","locales-rsuite/en_US.js","locales-rsuite/ar_EG.js"],"names":["SCREEN_MEDIA","min","max","APP_TYPE_DEFAULT","window","app_type","commentTypes","id","label","icon","color","PRICES","PRICE_RANGES","SPECIAL_RATES","API_PAGE_LIST","EOL","navigator","appVersion","indexOf","PAYMENT_LIST","IVR_CLI","IVR_SOUNDS","Alert","config","duration","createBrowserHistory","createAction","type","items","payload","setRoles","formatDateApiWithoutTime","datestr","replace","slice","splitList","str","split","filter","s","AM_ACTIVITIES_LIST_API","setAccounts","setCurrentApiRequestStr","setLoading","viewAccount","setViewAccount","setEditError","setEditErrorMessage","setViewAccountTrunk","setViewAccountTrunkLoading","setViewAccountAllocated","setViewAccountAllocatedLoading","setViewAccessListFiltersLoading","setViewAccessListFilters","setViewAccountUsers","setViewAccountUsersLoading","setInfoAccount","setAccountAccessListFiltersList","setAccountAccessListFiltersListLoading","setAccessListNotificationSettings","unsetAccountAccessListNotificationSettings","dispatchCurrentTrunkId","dispatchCurrentRangeNumber","setModifiedLimit","setDefaultFormCreateAccountAction","setRedirectTab","setRealtimePaymentStatus","getAccounts","filters","dispatch","api","add","account_note_last","then","account_list","map","x","name","account_manager","closed","active","deleted","balance","BALANCE","invoice_balance","BALANCE_INV","finally","getAccount","getFromApi","redirectOnError","target","account_id","response","undefined","account","history","push","permission_list","trunk_notificaton","getAccessListFiltersItems","access_list_filter_list","getAccessListNotificationSettings","access_list_notification","setCurrentTrunkId","setCurrentRangeNumber","number","setStatusAllocationModal","initialState","loading","accessList","accessListLoading","accountView","accountTrunk","accountTrunkLoading","accountAllocated","accountAllocatedCount","accountAllocatedNumbersTotalCount","allocatedNumbersPage","allocatedNumbersPerPage","localStorage","getItem","accountAllocatedLoading","accountUsers","accountUsersLoading","allocation_limit","editError","editErrorMessage","ranges","rangesLoading","accessListFiltersList","accessListFiltersListLoading","accessListNotificationSettings","currentRangeNumber","currentTrunkId","modifiedLimit","currentApiRequestStr","registeredAccount","redirectTab","realtimePaymentStatus","handlers","state","find","acc","setTimeout","store","count","trunk_number_count","page","per_page","trunk","trunkObj","rates","ratesLoading","showAllocation","isAuth","savedAuthInfo","JSON","parse","appTypeSaved","_","get","authInfo","auth","permissions","permissions_add","role","dialerInfo","secondAuthType","secondAuthLink","secondAuthEmail","maintenanceMode","appType","lang","rtl","session","site","readyForPayment","available_for_payment","price_list","currency_list","country_list","payment_terms_list","account_manager_list","worldzone_list","destination_list","subdestination_list","protocol_list","service_plan_list","service_plan_list_filtered","client_list","dialer_list","supplier_list","dialerTrunkList","defaultSPKey","admin_allocation_limit","client_allocation_limit","client_role_list","uploadLoadingDialer","support_contacts","contacts_text","references","PREFIX","access_list_exclusion","access_list_list","live_calls_list","loadingItem","service_plan_price_list","numbers","allocatedNumbersCount","getUserInfo","userInfo","error","console","Column","Table","HeaderCell","Cell","pipe","data","model","Object","keys","length","f","deleteEmpty","obj","k","Array","isArray","sortData","sortColumn","sortType","sort","a","b","comparisonResult","isString","toLowerCase","ID","Math","random","toString","substr","generateId","savePdfByTemplate","headers","template","summary","doc","JSPDF","textToParse","text","objectForParseText","emptyKeysObject","key","parsedText","setFontSize","size","addImage","imageData","y","w","h","options","autoTable","body","head","save","e","saveFileBlob","url","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","appendChild","click","revokeObjectURL","copyToClipboard","temp","value","select","execCommand","remove","CRUDitems","old_list","new_list","jsonStringOldItems","item","stringify","jsonStringNewItems","newAndChangesItems","includes","newAndChangesItemsIds","itemStringify","toStartDayUTCTime","date","Date","UTC","getFullYear","getMonth","getDate","toEndDayUTCTime","removeNilValues","respObject","forEach","isNil","responseErrorToString","errorString","isObject","isEmpty","each","errMessage","fieldKey","message","renderColumn","dataKey","headerStyle","width","props","style","canIMoveNumbersToAnotherTrunk","fromTrunk","toTrunk","sp_key","replaceUndefinedOrNull","calculateFixedSignsLength","formSigns","calculatedFixedSigns","fixedSign","pop","getRangeByNumber","numbers_count","repeat","log10","getRangeByNumberDigit","digit","createDownloadUrl","string","downloadBlobByUrl","downloadNumbersRangeFile","csvStringsArray","allocateByPrefixesStatus","csvDataArray","numbersFullArray","rowIndex","prefix","ratio","rest","pow","numberIndex","chunk","join","downloadPrefixesRangeFile","prefixesArray","firstNumber","lastNumber","prefixNumbers","randomizeArray","arr","chunkSize","chunksTotal","chunks","i","startItem","endItem","reduce","sum","current","downloadNumbersFile","isGoogleOtp","numbersOnlyArray","numbersOnlyData","compareObjects","object1","object2","keys1","keys2","every","index","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","getFormattedTime","date_","day","month","year","getISOTime","toISOString","getTime","getTimezoneOffset","removeTZFromDate","makeRangeFromPrefixesToCsv","csvContent","csvContentArray","csvHeaders","csvBodyPrefixes","prefixValue","makeNumbersFromPrefixesToCsv","fill","flat","compareTwoArrays","array1","array2","shuffleArray","array","j","floor","getBlobContent","log","readAsText","between","getRangeByDigit","arrayToObject","objectIsEmpty","prop","hasOwnProperty","getAllowedRangesByIntervalMonth","intervalMonth","startDate","endDate","dateRange","setMonth","createUrl","fileName","onDownloadCompleteOnlyNumbersCSV","trunkId","setUploadingLoading","getFileResponse","trunk_id","csvData","getCsvDataWithHeaders","csvHeaderList","csvBody","csvResult","line","unshift","onDownloadCompleteNumbersCSV","csvDataList","onDownloadCompletePrefixesCSV","csvPreparedData","csvContentList","countDecimals","formValid","values","hasError","fullPhoneRegex","ObjectSet","this","_set","Set","Symbol","iterator","strItem","_item","delete","clear","role_list","account_user_modify_method","account_user_remove_method","getRoles","list","perPage","auth_number_list","auth_number_list_setted","keyList","apiKey","paymentItems","paymentItemsLoading","paymentRequestItems","paymentRequestLoading","paymentTrafficReportsItems","paymentTrafficReportsLoading","hawalaItems","hawalaLoading","confirm_payment","confirm_status","status","codeList","price_range_priority_list","price_range_priority_count","allocation_block_list","allocation_block_count","global_setting_list","global_setting_count","pageId","referencesFetched","managerList","actionList","userList","account_user_manager_list","action_list","account_user_list","dateList","teamLeadList","billingList","isFetched","registration_list","registration_count","types","ivrDefault","ivr_default","numberTrunkLoading","numberTrunks","allocatedNumbersLoading","loadingAllocatedNumbers","allocatedNumbers","allAllocatedNumbers","allocated_numbers_by_template","allocated_google_otp_numbers","allocated_numbers_by_number_list","totalNumbersCount","uploadTrunkLoading","trunk_number_transaction","row_count","trunk_number_list","price_range_number_list","test_calls_list","cdr_full_test_list","cdr_full_test_count","cdr_list","summaries","cdr_full_list","cdr_full_count","cdr_full_summaries","trafficStat","group_list","group_count","group_summaries","trunk_list","allocated_numbers","ratecard_list","ratecard_count","trunks","cli_lookup","newItem","api_key","fetched","combineReducers","apiPage","action","handle","DEFAULT","accounts","settings","access_list","live_calls","prices","roles","cdr","global_setting","blocked_destinations","traffic_reports","auth_numbers","payments","paymentDetails","page_logger","sim_traffic_ranges","action_logs","google_otp_quarantined","google_otp_allocation","am_activities","account_managers","special_limit_terms","account_note","registration","ivr","ivr_cli","ivr_sounds","auth_dialer","client_numbers","client_test_calls","client_live_calls","client_cdr","client_traffic_stat","client_price","client_accesses","client_cli","client_api_page","dropdown_accounts","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","packageJson","version","notAuthApi","method","params","processErrorManual","loginAxios","post","jsonrpc","catch","setAuth","setUserLoginInfo","setMaintenanceModeAction","setSecondAuthType","setUserLocals","setMaintenanceMode","removeItem","baseUrl","process","codeError","1","2","3","4","_requestAxios","instanceAxios","axios","create","baseURL","timeout","interceptors","request","use","session_key","unsetAuth","responseError","code","isCancel","_loginAxios","requestAxios","requestFormDataAxios","configCopy","bodyFormData","FormData","append","files","_requestFormDataAxios","requestAxiosWithHeaders","checkVersionAxios","_checkVersionAxios","pageIdLogObject","pageMatch","path","lastTab","cancelToken","withHeaders","paramsCloned","APP_VERSION","token","currentPage","requestApi","page_id","reason_code","lastIndexOf","hash","generateApiUrl","getCsvResponse","responseType","setReferences","setAllReferences","getReferencesForReports","setDialerTrunk","styleContainer","minHeight","stylePanel","marginTop","maxWidth","minWidth","connect","ping","res","Error","ip","pingQuery","func","useEffect","Container","Header","Navbar","appearance","Content","FlexboxGrid","justify","Item","Panel","className","header","textAlign","Icon","paddingTop","useState","innerWidth","resizedWidth","setWidth","debouncedHandleResize","fn","ms","timer","clearTimeout","apply","arguments","customDebounce","addEventListener","removeEventListener","sm","buttonSizes","esm","StyledBaseButton","styled","Button","BaseButton","attrs","buttonStyle_","buttonStyle","isClient","theme","withShadow","css","bordered","ButtonContent","ButtonDefault","ButtonPrimary","ButtonSecondary","ButtonSubtle","ButtonClose","BorderBtn","children","ButtonRow","ButtonRowClient","ButtonRowRevoke","ButtonRowAllocate","ButtonRowEdit","as","IconButton","ButtonRowDownload","ButtonRowDelete","StyledButtonSideIcon","ButtonSideIcon","ButtonList","ButtonListAdd","ButtonListRemove","ButtonWrapper","div","ButtonToolbar","ButtonToolbar_","classPrefix","alignEnd","defineMessages","accept","defaultMessage","description","accessDestination","accessOrigin","address","allocate","allocatedNumbersAndRanges","allocatedNumberList","amount","areYouSure","availableNumbers","bNumber","billingIncrement","byName","calls","cancel","canceled","city","cli","close","completed","confirm","confirmation","confirmed","copied","copyJustNumbers","copyList","copyListAllocatedByPrefix","cost","country","created","currency","dateFrom","datetime","declined","destination","destinationDoesNotExist","destinationFilter","destinationOrService","details","dialerTraffic","doYouWantToChooseRecordsOnAllPages","download","downloadAllocatedNumbersAs","downloadAllocatedOnlyNumbersAs","downloadCompleteNumberListAs","downloadCompletePrefixesListAs","downloadList","downloadListNumbers","downloadListPrefixes","downloadNewAllocatedNumbers","downloadNewAllocatedNumbersAsRanges","downloadNumberListAs","downloadOnlyNumbers","downloadPrefixListAs","enterFiltersToActivateTheButton","filterPerDestination","filterPerDestinationOrService","fromDate","getNumbers","getNumbersForDestination","getNumbersForRange","hide","last7Days","lastName","managePaymentDetails","menu","minDuration","moreContacts","contacts","premiumyContacts","officialWebpage","officialFacebookPage","officialLinkedInPage","englishSupport","arabicSupport","skype","eMail","noContactData","noRateForThisDestination","numberIsQuarantined","numberIsUnavailable","numberList","numbersFromRangeCannotBeAllocated","numbersFromRangeCannotBeAllocatedSingle","onlyOnThisPage","or","origin","parameters","passed","password","paymentInfo","payout","payYourAttention","pending","phone","postalCode","price","randomOrder","range","rangeName","rate","ratecard","readyForPaymentInfo","region","rejected","required","revoke","revokeCountNumbers","selectTrunk","service","show","sipCause","structure","subdestination","subdestinations","submit","taxVATNumber","termPoint","testNumber","testNumbers","today","trafficPeriod","unableToCopyEmptyTable","yes","yesterday","aNumber","correctNumber","eachRowShouldBeSize","fileSizeShouldNotExceed","incorrectTemplate","maxLength","maxLengthDigits","maxLengthOfTemplate","maxNumber","minLengthDigits","minLengthOfTemplate","minNumber","numberMust","numberOfPhoneNumbersExceeds","numbersFromTemplateCannotBeAllocated","passwordLetters","passwordMinLength","pleaseEnterEmail","pleaseEnterValidNumber","pleaseEnterValidNumbers","pleaseEnterValidString","templateShouldBeSize","theNumberMustBeAMultipleOf","thisFieldIsRequired","tooFewNumbers","tooMuchNumbers","pendingAmount","currentBalance","paymentTerms","traffic","lastTraffic","trunkIsNotActive","googleOTPAllocation","allocatedNumbersTrunkTable","allocatePerTemplate","putListOfOwnNumbers","allocateNumbers","clickToEnable","eachPhoneNumberConditions","allocateNumbersForGoogleOTP","downloadCompleteList","downloadAllNumbers","newAllocatedNumbers","numbersWereAllocated","numbersWereNotAllocated","cannotBeAllocated","putTemplatePrefixForDestination","orChooseItFromList","rangeNumberSearch","rateRangeFrom","rateRange","to","from","zone","start_date","revokeNumbers","numbersWillBeRevoked","originatedFrom","rateTerm","terminationPoint","updateData","filterPerNumOrDest","rowsPerPage","total","calltime","exportReport","groupBy","cdrHistoryPeriodIs","exportPrice","exportPriceList","exportPriceListAs","filterPerPrefixOrRangeName","getNumbersModal","allTheTrafficMustBeClearedByTheCarrier","allTheTrafficWillBePaidOnMonthlyBasis","cliLookup","putYourCliMin","putYourCli","autorefreshPeriod","listenToIvr","passportScans","certificateOfIncorporation","beneficiaryName","beneficiaryLastName","accountIbanNumber","intermediateBankDetails","beneficiaryCountry","beneficiaryRegion","beneficiaryCity","beneficiaryAddress","beneficiaryPostalCode","bankName","bankCountry","bankRegion","bankCity","bankAddress","bankPostalCode","paypalId","walletNumber","saveChanges","paymentMethod","chooseOrganizationType","addNewPaymentDetails","modifyPaymentDetails","removePaymentDetail","alreadyHasBeenConfirmed","alreadyHasBeenRejected","alreadyHasBeenDeleted","cancelPaymentRequest","comment","paymentRequest","requestPayment","transferToAccountName","paid","accountTrunkRangeMismatchTemplate","accountTrunkRangeMismatchRange","notFoundFreeNumbersTemplate","notFoundFreeNumbersRange","notFoundFreeNumbersDestination","destinationIsNotAvailable","numbersForSubdestCannotBeAllocated","youHaveExceededTheLimit","tooMuchNumbersPerSubdestination","numbersCannotBeAllocated","actionIsProhibited","tooMuchSimultaneousOperations","numbersAreTemporarilyUnavailable","tooMuchNumbersPerRange","invalidOperation","incorrectNumberAmount","wrongTemplate","operationCode","tooMuchNumbersPerOne","numbersCannotBeAllocatedToTrunk","editProfile","email","surname","send","nothingToUpdate","changePassword","confirmPassword","dontChangePassword","equalPasswordsAlert","confirmProfileChanges","typeCurrentPassword","profileDataHasSuccessfullyChanged","common","accesses","validation","balanceInfo","liveCalls","pagination","testCalls","modalResponseHandler","BaseModal","Modal","CustomModalClient","title","disabled","extraDisabled","showFooter","confirmButtonText","confirmButtonStyle","cancelButtonText","cancelButtonStyle","focusTarget","onClose","onConfirm","extraDialogClassName","checkBefore","formatMessage","useIntl","onHide","dialogClassName","Title","Body","Footer","autoFocus","onClick","m","setShow","useWindowWidth","checkVersion","interval","setInterval","clearInterval","showCacheNotification","storageVersion","now","meta","isMetaVersionGreater","versionA","versionB","versionsA","versionsB","Number","shift","isNaN","semverGreaterThan","setItem","handleClose","location","reload","backdrop","maxHeight","fontSize","onSuccess","successButton","closeButton","successButtonProps","showCloseSuccessButtons","onSuccessClose","styles","whisper","Whisper","placement","trigger","speaker","Tooltip","closeModal","StringType","Schema","Types","marginRight","form","modifyAccountRequest","formValue","onChangeFormValue","disabledButton","onDisableButton","useContext","RtlContext","formModel","Model","old_password","isRequired","getComputedStyle","documentElement","ModalEdit","check","comparedData","formData","clearedData","onSubmit","Form","ref","onChange","checkedData","checker","Message","left","right","marginBottom","border","getPropertyValue","align","FormControl","placeholder","errorMessage","user","defaultFormProfileValue","showChangePassword","onChangeShowChangePassword","preparedData","onChangePreparedData","showConfirmEditModal","onChangeConfirmEditModal","passwordEqual","onEqualPasswords","formProfileValue","onChangeProfileFormValue","formPasswordValue","onChangePasswordFormValue","formProfileError","onChangeProfileErrorValue","formPasswordError","onChangePasswordErrorValue","profile","onDisabledButton","clearFormState","formProfileModel","pattern","formPasswordModel","minLength","checkFormError","errorObj","clearPassword","formError","assign","entries","formDefaultValue","showIcon","confirm_password","ModalEditProfileConfirm","checkPermissionsFor","permissionMethods","getState","StyledDropdown","Dropdown","savedUser","onChangeShowEditProfileModal","localMessages","UserDropdown","menuStyle","borderTopLeftRadius","borderTopRightRadius","UserInfo","AccountBadge","badgeColor","account_name","eventKey","onSelect","componentClass","Link","User","S","Badge","Nav","itemContent","NavLink","withRouter","pathname","MenuDropdown","useLocation","isSubMenuActive","isActive","activeKey","subItem","logoutUser","registrationCount","AppTypeContext","divider","content","unlogin","noCaret","toggleClassName","openAllocationModal","windowWidth","intl","menuDataAdmin","useMemo","isTest","filterMenuItems","checkedMethods","clientMenu","myNumbers","hideOnTest","report","ratesAndNumbers","MenuDesktop","MenuMobile","isMobile","showContactModal","setShowContactModal","managerInfo","managerName","managerEmail","showWhisper","onShowWhisper","StyledTooltip","yourAccountManager","MobileStyledTextButton","messages","StyledIcon","StyledAccountManagerInfo","createExternalLink","StyledTextButton","accountInfo","currencyIcon","currency_name","payment_terms","VOLUME_1_OUT","VOLUME_7_OUT","VOLUME_30_OUT","hideOnMobile","paymentStatusCountState","onChangePaymentStatusCount","paymentStatusHasChecked","paymentStatusCount","Wrapper","enterable","StyledDivider","StyledItem","StyledPaymentLink","li","Divider","supportContacts","accountManagerInfo","supportName","supportSkypeLogin","contactList","StyledList","contact","List","dangerouslySetInnerHTML","__html","contactText","StyledModal","confirmButton","keyboard","ContactList","logout","updatedInfo","modifyPasswordRequest","getRegistrationCount","getRealtimePaymentStatus","showEditProfileModal","TopNavbar","UserProfileMenu","ModalEditProfile","NavbarInfo","BalanceMenu","SkypeInfo","StyledBadge","ContactModal","linkString","StyledExternalLink","footer","successText","successButtonColor","onEntered","display","justifyContent","reasonCodes","ModalResponseHandler","changeRandom","random_number","subDest","sde_key","reasonCode","reasonHash","handleSuccess","colspan","getMessage","ModalButtonToolbar","NumberType","validationKeys","str30","str_required","num_required","number_list","addRule","valueList","row","template_list","isValid","regex","trim","match","isInteger","allocate_by_prefix","google_numbers","numbers_amount","numbers_by_prefix","in_template_list_range","in_template_range","replacedValue","start_number","MyForm","_props","formRef","update","checkResultKey","noCheck","noSend","addData","updateRef","activeTrunk","layout","fieldsToRemove","spAuth","unsendFields","deepCloned","optionFields","childrenModel","fieldsValues","_formValue","setFormValue","React","newFormValue","numberLog10","cleanErrorForFiled","responseHandlerModalShow","setResponseHandlerModalShow","responseHandlerModalParams","setResponseHandlerModalParams","showResponseHandlerModal","_children","Children","cloneFormChildren","formControl","validationKey","newProps","checked","elementChildren","isValidElement","cloneElement","modelData","getFormValue","getFieldType","not_allocated_numbers","FormGroup","accepter","CheckboxHOC","Checkbox","inverse","widthValues","CustomField","labelWidth","useBr","style_","withCheckbox","mr","styleFormGroupExternal","styleFormGroup","propsLabel","ControlLabel","errorPlacement","HelpBlock","PureComponent","str40","Text","Input","API_Modal","checkFirstAll","setDisabled","formRefs","copyChild","child","all","results","ApiRequest","canSend","onFaultResult","NumberField","calculated","setValue","InputNumber","step","v","BaseInputField","BaseInputNumberField","BaseSelectPicker","SelectPicker","BaseDateRangePicker","DateRangePicker","BaseCheckboxField","CheckboxControl","Select","ServicePlans","filtered","block","labelKey","valueKey","searchable","cleanable","NumbersSelect","Info","rotate","ErrorMessage","SDE_Component","SDE","defaultNumberList","showResult","setCsvContent","setPriceRangeNumbers","setHideBufferButtons","setSummaryState","allocationLimit","getTrunkNumberCsvById","setTransactionId","setTotalNumbersForced","setNotAllocatedNumbers","setMethod","valueTemplate","setValueTemplate","valueSde","setValueSde","pickedInput","changeInput","valueForm","setValueForm","showRateInput","onChangeShowRateInput","customRateValue","onChangeCustomRateValue","setFieldsToRemove","handleFormChange","newFormValues","templateInput","StyledField","sdeInput","allocationLimitCondition","fieldRate","cursor","margin","transactionId","summaryInfo","trunk_number_transaction_id","StyledToggleWrapper","StyledToggle","checkedChildren","unCheckedChildren","defaultChecked","Fieldset","Infinity","setAllocateByPrefixesStatus","fieldset","Toggle","perPageModel","hidePerPage","activePage","onChangePage","onChangePerPage","handleChange","debounce","wrapper","StyledPagination","maxButtons","pages","ceil","first","last","defaultValue","Pagination","dateOptions","timeOptions","hour12","hour","minute","second","dataFormatters","toLocaleDateString","toLocaleString","dateObj","toLocaleTimeString","columns","cutDate","flexGrow","formatData","headerProps","restProps","minWidthMobile","dataFormatter","isFunction","setSeconds","getSeconds","setHours","convertDateToYesterday","ShowColumnPicker","isOpen","setOpen","useRef","pickerData","fullLabel","handleClickOutside","event","menuBodyEl","contains","CheckPicker","open","MyTable","isselected","selectAll","selectedlist","setState","setSelectParent","getItems","setSelected","onToggle","useSelectedData","row_key","onCheckPrevented","preventCheck","forceUpdate","onToggleAll","ispagination","isSelectedAll","partialSelectedAll","Notification","closeAll","gettingSelectItem","getHeight","height","rowHeight","heightValues","innerHeight","h30","h25","isSetObject","allColumnsKeys","column","columnsKeys","hideDefault","columnSelectorLSKey","isSelectColumnsDropdownOpen","showColumnsKeys","stateChecked","configureColumns","prevProps","prevState","snapshot","clearSelected","active_id","onRowClick","ActionCell","extraHeight","_columns","RenderedColumns","propTables","rowClassName","rowClass","virtualized","dataEnabled","BaseTable","has","position","top","fixed","Component","Ok","No","RateField","_Table","columnsMobile","activeTab","showFilters","setShowFilters","setData","fullprice_for_account","paddingBottom","isOpened","FiltersFuncs","StyledTable","shouldUpdateScroll","selected","stateItems","currentItems","wordWrap","de_key","wz_key","rate_from","rate_to","allfilters","FiltersSubdestination","rowData","StyledNumberField","Spacer","timerid","setNumberList","rateField","FormWrapper","rows","resize","valueStartNumber","setValueStartNumber","templateList","setTemplateList","StyledTextarea","classPreffix","spOtpType","tabItems","dropdownTitle","StyledHeader","BaseNav","TreePicker","_React$Component","_this","call","menuRef","treeViewRef","positionRef","listRef","triggerRef","toggleRef","getFocusableMenuItems","filterData","_this$props","childrenKey","_this$props$disabledI","disabledItemValues","loop","nodes","node","nodeData","_extends","refKey","some","disabledItem","shallowEqual","getExpandState","getElementByDataKey","ele","nodeRefs","Element","querySelector","addTreePrefix","cache","CellMeasurerCache","fixedWidth","dragNode","bindNodeRefs","getPositionInstance","getToggleInstance","addPrefix","defaultClassPrefix","selectActiveItem","getActiveItem","handleSelect","focusNextItem","_node$focus","_this$getItemsAndActi","getItemsAndActiveIndex","activeIndex","nextIndex","focus","focusPreviousItem","_node$focus2","_this$getItemsAndActi2","prevIndex","handleCloseDropdown","_this$triggerRef$curr","_this$triggerRef$curr2","handleOpenDropdown","_this$triggerRef$curr3","_this$triggerRef$curr4","_this$handleOpenDropd","_this2","_this$handleCloseDrop","_this3","handleToggleDropdown","handleToggle","_this$props2","onExpand","expandItemValues","nextExpandItemValues","toggleExpand","expand","_isUndefined","unserializeLists","createConcatChildrenFunction","_this$toggleRef$curre","_this$props3","activeNode","selectedValue","onFocus","handleKeyDown","onMenuKeyDown","down","up","enter","del","handleClean","handleToggleKeyDown","_this$state","keyCode","HTMLElement","handleSearch","_this$props4","onSearch","searchKeyword","getFilterData","_this$props$onChange","_this$props5","handleOnOpen","_this$props$onOpen","_this$props6","_node$focus3","onOpen","handleOnClose","_this$props7","handleDragStart","_this$props8","onDragStart","draggable","dragging","dragNodeKeys","getDragNodeKeys","handleDragEnter","_this$state2","_this$props9","onDragEnter","d","dropNodePosition","calDropNodePosition","dragOverNodeKey","handleDragOver","_this$state3","_this$props10","onDragOver","lastDropNodePosition","handleDragLeave","onDragLeave","handleDragEnd","onDragEnd","handleDrop","_this$props11","onDrop","dropData","getDropData","measureRowRenderer","_ref","parent","CellMeasurer","columnIndex","renderVirtualNode","_value","_valueKey","_props$searchKeyword","_searchKeyword","nextData","concat","_nextExpandItemValues","getExpandItemValues","flattenNodes","getValue","expandAll","getExpandAll","getActiveNode","serializeList","treeDeprecatedWarning","_inheritsLoose","_proto","prototype","componentDidMount","getDerivedStateFromProps","nextProps","nextState","_isArray","compareArray","componentDidUpdate","_prevProps","updateDataChange","updateValueChange","updateExpandItemValuesChange","updateSearchKeywordChange","forceUpdateGrid","_this$state4","newState","_this$props12","focusNode","_this4","getActiveElementOption","_options$i$childrenKe","_isEmpty","activeElement","getAttribute","activeItem","_get2","_get","layer","word","_ref2","searchBy","setVisible","visible","shouldDisplay","getFlattenTreeData","_this5","_this$props13","flattenTree","formatted","curNode","parentKeys","getNodeParents","parentNode","showNode","shouldShowNodeByExpanded","getTreeNodeProps","_this$state5","_this$props14","locale","_this$props14$disable","renderTreeNode","renderTreeIcon","dragOver","TREE_NODE_DROP_POSITION","DRAG_OVER","dragOverTop","DRAG_OVER_TOP","dragOverBottom","DRAG_OVER_BOTTOM","onTreeToggle","onRenderTreeNode","onRenderTreeIcon","_this$props15","_omit","dropNode","createUpdateDataFunction","createUpdateTreeDataFunction","inline","_node$focus4","_this6","_ref3","_extends2","_this7","isExpand","renderDropdownMenu","_this$props16","_this$props16$height","renderExtraFooter","renderMenu","menuClassName","menuAutoWidth","keyword","classes","classNames","MenuWrapper","autoWidth","SearchBar","searchPlaceholder","renderTree","renderNode","_this8","_this$props17","getExpandWhenSearching","_isString","_isNumber","visibleChildren","hasVisibleChildren","nodeProps","hasChildren","_classNames","openClass","childrenClass","TreeNode","innerRef","bind","_classNames2","_this9","_this$props18","n","noResultsText","dataItem","treeHeight","treeWidth","listHeight","onKeyDown","AutoSizer","defaultHeight","defaultWidth","_ref4","rowCount","rowRenderer","renderDragNode","_this$props19","dragNodeContent","_isFunction","render","_this$props20","toggleComponentClass","renderValue","onExited","onClean","_objectWithoutPropertiesLoose","_this$state6","hasValidValue","_isNil","getToggleWrapperClassName","selectedElement","hasValue","unhandled","getUnhandledProps","PickerToggleTrigger","pickerProps","mergeRefs","createChainedFunction","PickerToggle","defaultProps","listPickerDefaultProps","polyfill","withLocale","findIndexByTrunkId","disabledTrunk","onClear","treeRef","createRef","isExpanded","setIsExpanded","accountsId","acc_uuid","itemIndex","focusItem","trunksList","emptyAccounts","account_manager_name","tr_name","acc_name","sp_name","tr_option_google_otp","StyledTreeHeader","ResultString","StyledTreeHeaderClear","ExpandButton","StyledTree","p","span","RsuiteToolbar","CancelButton","RsuiteDropdown","Loader","RsuiteLoader","RsuiteList","statusLabels","7","10","StyledPanel","collapsible","hover","AllocationResult","totalNumbersForced","allocatedByPrefix","hideBufferButtons","showFullList","allocatedByOTP","notAllocatedNumbers","loaderDownloadButton","onLoadDownloadButton","downloadNumberByTransaction","downloadFunction","prefixStatus","convertPrefixToNumbers","onCompleteDownload","onCompleteDownloadPrefixes","numberCsvListItems","onlyNumbersData","success","accFiltersModel","getAccountList","accountSearchQuery","setFilteredAccounts","additionalParams","currentQuery","is_test","fetchingTrigger","returnAll","StyledInputGroup","InputGroup","Addon","customMenuClassName","filteredAccountsId","_name","sp_auth","sp_otp_type","tr_active","tr_key","tr_uuid","StyledFormField","CustomSelectPicker","renderMenuItem","renderMenuGroup","groupTitle","getForm","NumberForm","MassForm","TemplateListForm","SequenceForm","GoogleOTPForm","getDialerTrunk","_activeTrunk","_trunk_id","_sp_key","_sp_auth","_spOtpType","isDialerTrunkFiltered","_account_id","setActiveTab","setActiveTrunk","setSpAuth","setSpOtpType","setSpKey","setTrunkId","setAccountId","setShowResult","filteredAccounts","filteredAccountsLoading","setFilteredAccountsLoading","summaryState","useLayoutEffect","handleChangeDialerTrunk","clearChosenTrunkInfo","ModalSendApi","Tabs","spKey","AccountsGetFormWrapper","DialerTrunk","DialerTrunkDropdown","accountId","ErrorBoundary","info","VersionLabel","versionLabel","setRegistrationList","setRegistrationCount","SkypeButton","arabic","Popover","method_list","dataToSave","account_user","account_user_id","realtime_status","payment_not_viewed_count","showModalInterface","showModalColor","routeMatch","useRouteMatch","classList","NumberAllocation","RouteWithLayout","Layout","component","headerHeight","FlexBlock","SectionTitle","h2","FormModal","Label","Field","FieldAmountWrapper","FormRow","FormItem","grow","FormGroup_","Currency","StyledTableActions","StyledTableButton","ToggleButton","tableActions","renderedColumns","columnMobileFix","autoHeight","handleCancelPaymentRequest","handleApprovePaymentRequest","handleManagePaymentDetails","withFilters","payment_detail_info","move_to_account_name","CommonTable","md","FlexGrid","vSpace","hSpace","noWrap","FlexGridItem","shrink","defaultFilter","onChangeFilters","is_managed","sticky","CheckboxGroup","setShowModalPaymentDetail","setActiveAccountId","getPaymentRequestList","approvePaymentRequest","selectedRequest","setSelectedRequest","setFilter","showModalCancelPaymentRequest","setShowModalCancelPaymentRequest","showModalApprovePaymentRequest","setShowModalApprovePaymentRequest","account_id_list","handleApprovePayment","payment_request_id","filterValue","accountIdList","handleCancelPayment","PaymentsRequestFilter","PaymentsRequestTable","ModalChangePaymentRequestStatus","showOneCalendar","setDate","FieldDataRange","getPaymentList","dateStart","dateEnd","end_date","PaymentsListFilter","start_end_date","PaymentsListTable","openModalRequestPayment","checkedStatus","date_from","date_to","agr_send","dateTo","filtersDefaultValue","dialer_id","group_checkbox","filteredData","ArrayType","setStatus","globalSettings","daysInterval","billing_interval_multy_account_days","start","end","dayCount","daysCount","getTrafficReportsList","setCheckedStatus","PaymentsTrafficReportsFilter","PaymentsTrafficReportsTable","paymentDetailsItems","currencyName","handleShowModalAddPaymentDetail","dropdownVisibility","amountLimit","amountLimitMin","payment_detail_id","move_to_account_id","formIsChanged","setFormIsChanged","handleSubmit","account1_id","dataGetList","closable","setPaymentMethodsList","setConfirmPayment","setConfirmStatus","getPaymentDetailsList","payment_detail_list","getPaymentDetailsSingle","createPaymentDetails","removePaymentDetails","Table_","PaymentDetailsTable","loadingEditButtonsSet","handleRemovePaymentDetails","handleEditPaymentDetails","statuses","customer_name","customer_last_name","FileUploader","listType","autoUpload","multiple","Group","LabelWrapper","TextareaAutosize","vAlign","FormColumns","FormColumn","FlexChild","labelId","customer_phone","tax_vat_number","ext_files","customer_cntr_code","bank_name","account_iban_number","swift_number","intermediate_bank_details","bank_cntr_code","beneficiary_name","beneficiary_last_name","hideOn","ot_key","pm_key","beneficiary_cntr_code","paypal_id","btc_wallet_number","hawala_description","customerFields","companyFields","otherTransferSystems","methodFields","modify","organizationTypeList","countryList","paymentMethodList","names","blobFile","activeFields","setActiveFields","setFormFields","personal","beneficiary","handleFormSubmit","fieldsValidity","fieldName","checkForField","field","fileBase64","fileKey","organizationType","cleanErrors","fieldsGroup","vertical","colWidth","fieldNames","fields","defaultLabel","conditionItem","label_","defaultFileList","renderFields","FieldInput","FieldSelectCountry","FieldFile","Uploader","selectedItem","PaymentDetails","allowGetList","showModalAddPaymentDetail","setShowModalAddPaymentDetail","showModalRemovePaymentDetail","setShowModalRemovePaymentDetail","setSelectedItem","isModify","setIsModify","addPaymentDefaultValue","setAddPaymentDefaultValue","loadingEditElementsSet","setLoadingEditElementsSet","editElements","payment_detail","fetchedData","file_id","flaser","StyledActionButtonWrapper","ActionButton","ModalRemovePaymentDetail","isLink","organization_type_list","payment_method_list","setAllowGetList","overflow","menuItems","savePageId","val","TableClientSortHOC","TableComponent","handleSortColumn","defaultSortType","defaultSortColumn","onSortColumn","paymentModels","clearSelectedData","setClearSelectedData","formRefMap","Map","tableRef","hawalaPaymentList","onChangeHawalaPaymentList","selectedData","setSelectedData","availablePayment","onChangeAvailablePayment","selectedItems","setSelectedItems","paymentValue","onChangePaymentValue","openEditAvailable","setOpenEditAvailable","formErrors","updateFormErrors","hawalaMethod","paid_only","limit","account_manager_id","payment_terms_name","paymentValueCopy","currentValue","set","selectedItemsKeys","selectedDataKeys","sd_key","resultData","useCallback","warning","selectAllItems","selectedList","selectedItemsCopy","selectedDataCopy","availablePaymentCopy","openEditAvailableCopy","currentAvailablePayment","parseFloat","checkMapValueExits","setAvailablePayment","newAvailableData","setShowEditAvailable","setDefaultPayment","defaultData","newFormError","flag","defaultDataSelected","StyledTableText","sortable","openEditAvailableIds","currentPaymentValue","currentFormError","formErrorHasError","formErrorMessage","StyledForm","formRefMapCopy","fillFormsMap","EditField","defaultPayment","StyledConfirmedPayment","StyledReturnButton","StyledTableClientSort","fillSelectedItems","uncheckedListToDelete","EditFieldError","ErrorMessageWrapper","TableClientSort","widthLabel","StyledFieldWrapper","paymentTermsList","StyledFormControl","getKeysFromSelectedItems","getValueFromSelectedItems","selectedAccounts","amountUsd","amountEur","toFixed","contact_email_list","txt","fetchData","getAccountManagersList","apiFilter","setApiFilter","requestedPayments","setRequestedPayments","modalRequestShow","setModalRequestShow","modalRequestLoading","setModalRequestLoading","modalResultShow","setModalResultShow","handleShowModalRequest","exportPayments","hawala_payment_detail","hawala","prev","payment_request","valueObject","HawalaPaymentRequestApiFilter","HawalaPaymentRequestFilter","StyledItemAutoMargin","HawalaPaymentRequestTable","ModalHawalaRequest","ModalHawalaResult","setPaymentRequestList","setPaymentRequestLoading","setPaymentList","setPaymentListLoading","setTrafficReportsList","setTrafficReportsLoading","setHawalaPaymentRequestList","setHawalaPaymentRequestLoading","payment_request_list","payment_list","invoice_list","modifyPaymentSettings","getDropdownAccounts","setAccountManagersList","setAccountManagersLoading","setAccountManagersReferences","setAccountManagersBillingList","paymentDetailsLoadinig","getHawalaPaymentRequestList","requestPaymentFormValue","setRequestPaymentFormValue","showModalRequestPayment","setShowModalRequestPayment","showModalPaymentDetail","setDropdownVisibility","setAmountLimitMin","activeAccountId","activeAccountBalance","setActiveAccountBalance","activeAccountCurrency","setActiveAccountCurrency","currentPaymentDetail","currentPaymentMethod","currentPaymentMethodLimit","openModalPaymentDetail","PaymentsHeader","PaymentsRequestSection","PaymentsListSection","PaymentsTrafficReportsSection","HawalaPaymentRequest","ModalRequestPayment","ModalPaymentDetails","ModalAddPaymentDetail","StyledAccountTableLink","numbers_with_traffic","created_at","not_verified_users","StyledAccountCellMobile","columnProps","AccountNotVerifiedUsersIcon","StyledAccountNotVerifiedUsersIcon","AccountNotesIcon","comments","setComments","timerId","setTimerId","getNotes","account_note_list","clearNotes","onMouseEnter","onMouseOut","CheckPickerHOC","_values","FilltersForm","FilltersFormHOC","getValues","proxy","Grid","noGutters","GridItem","isFullWidth","FormHOC","fluid","traffic_check","allocated_check","closed_check","account_managger","am_key","payment_term","pt_key","handleResize","onlyOpened","onChangeApiFilters","setAccountsCurrentApiRequestStr","inner_loading","accountsFirstFetched","showMobileFilters","PanelLayout","marginLeft","order","AccountsApiFilters","AccountsFilters","AccountsTable","ButtonAddAccount","Accounts","setNumbers","setNumbersCsv","setRates","contactModel","person","isEmail","test","messenger","initContact","updateContacts","addableIsChanged","formsRef","initialList","updateFormRef","contactChanged","formValues","updateFormValues","passwordRegExp","userModel","login","is_test_account","userModelTest","userDisabledEmailModel","userDisabledEmailModelTest","passwordModel","initUser","users","updateUsers","clientRoleList","adminRoleList","isTestAccount","passwordRef","verificationData","setVerificationData","resetPasswordData","setResetPassword","passwordModal","setShowPasswordModal","errorsPasswordForm","setErrorsPasswordForm","passwordState","setPasswordState","passwordUserObject","setPasswordUserObject","onCloseModal","sendVerification","clean_password","r","is_account_manager","changedClass","email_disabled","login_disabled","StyledCheckPicker","VerificationColumn","email_verified","StyledActionButtonVerified","StyledActionButtonSenVerification","StyledActionButtonResetPassword","resetCustomerPassword","onShowPasswordModal","onChangePasswordForm","FormButton","passwordLength","numberChars","specialChars","upperChars","lowerChars","allChars","randPasswordArray","generatePassword","textToCopy","StyledActionButton","AccountCreate","is_dailer","is_supplier","allocate_number","allocate_pattern","google_otp_autorevoke","cur_key","call_duration_max","parseInt","onUpdate","accountModel","styleRow","disabledCurrency","_onSubmit","onCancel","admin_role_list","isSeparatedPage","registration_key","formDefaultUsers","formDefaultContacts","formDefaultValueInit","formDefaultContactsInit","formDefaultUsersInit","setForm","formState","setFormState","activeState","setActiveState","formsContactRef","formsUsersRef","fieldIsChanged","radioIsPicked","radioKey","addableObjectInitial","addableObject","addedNew","addable","changed","accountManagerList","RadioGroup","Radio","HeaderList","unValidContacts","Contacts","unValidUsers","ButtonFooter","validContact","validUsers","CloseAccount","OpenAccount","Paragraph","Placeholder","AccountForm","cur","paymentsTerms","pt","account_contact_list","getAccountUsers","_users","newAndChangesUsers","deletedUsers","_contacts","newAndChangesContacts","deletedContacts","createMethod","modifyMethod","removeMethod","account_contact_id","search","onClickDelete","onClickEdit","_data","getData","filtersModel","exportFile","AddPrice","updateItems","withDate","float","ModalForm","setWithDate","update_allocated_numbers","DatePicker","oneTap","setItems","setTotal","deleteModal","setDeleteModal","deleteID","setDeleteId","deleteId","account_price_id","editModal","setEditModal","rateToEdit","setRateToEdit","editDisabled","setEditDisabled","setFormRef","editId","RatesFiltersContainer","RatesFilters","ExportPrice","RatesTable","TableServerSortHOC","TableServerSort","onSort","forwardedRef","forwardRef","InputSearch","Search","NumbersDownloadDropdown","onDownloadNumbersCsv","onDownloadOnlyNumbersCsv","StyledLoader","numbersFiltersModel","currentDisplay","onChangeGroup","downloadLoading","downloadDisabled","searchRef","searchInput","onChangeSearchInput","startDateState","onChangeStartDate","equalSignState","onChangeEqualSign","equalObject","NumbersFiltersForm","readOnly","equalSign","start_date_inequation","filterObject","paddingLeft","actual","paddingRight","inputRef","onBlur","FooterActions_","FooterActions__","FooterActions","HeaderTrunkActions_","HeaderTrunkActions__","HeaderTrunkActions","forsed_open","hideBtn","actions","selectedAction","setSelectedAction","actionIndex","ButtonCss","handler","initialValues","targetPrice","subDestinationsList","setSend","setRate","setEndDate","changeRateModel","sde_name","stateItem","trunk_numbers","getCount","entity","numbersCount","trunkToModeId","setTrunkToMoveId","trunk1_id","CustomDatePicker","displayWhen","_selectedList","footerActionsDisabled","footerActionsLoading","filterState","showChangeRateModal","currentSubDestinationsList","showRevokeModal","showMoveModal","showAllocatedNumbersModal","searchLoading","isDownloadInProgress","getFilters","getSelectedList","countAll","setFocusOnInput","input","_reactInternalFiber","firstEffect","stateNode","clearSelectedNumbers","getInitialValues","filterAll","trn_key_list","pr_key_list","sde_key_list","getCurrentEntityName","proxyFilters","getRowKey","updateSelectedList","rowKey","getDataForChangeRate","subdestination_name","acc_key","keepSelectedItems","updatedCollection","getSelectedNumbersCount","allocatedNumbersTotalCount","handleOpenChangeRateModal","getSubDestinations","initialData","closeAllocatedNumbersModal","trunksLoading","currentTrunk","convertDataInColumn","disabledActions","readonly","el","NumbersActions","hidden","ChangeRateModal","RevokeNumbersModal","MoveNumbersModal","protocols","formDialerModel","tprefix","port","prt_key","updateFormRef2","is_default","onChangeDefault","chosenSpKey","setChosenSpKey","defaultFormValue","is_default_term_point","option_google_otp","otp_type","verticalAlign","StyledGrid","DialerForm","dialerForm","todayDate","isToday","trunkData","trunkList","setTrunk1","endDateObg","getHours","getMinutes","mobileColumns","service_plan_name","dataTrunk","currentTop","showModal","showRemoveTrunkModal","showRevokeTrunkModal","onClickTrunk","setTrunk","showTrunk","onDownloadNumbers","onEditTrunk","onRevokeTrunk","onRemoveTrunk","closedTrunksShow","abs","onAllocateNumbers","setClosedTrunksShow","getTrunks","transformedData","StyledFilter","TrunkModal","scrollTopValue","RevokeTrunkModal","RemoveTrunkModal","edit","StyledActionCell","showClosedTrunks","numbersTableReadonly","group","limitState","onChangeLimitState","cleanedFields","accountLimitKeys","defaultAllocationLimits","cleanLimit","onChangeFormError","fillLimitFormRef","formLimitRefs","limitKey","once","daily","daily_sde","limitLabels","charAt","toUpperCase","combineModel","combine","Name","InlineFormLimits","onCheck","elem","BoxLimitFields","CleanLimitButton","SaveLimitButton","defaultLimitKeys","LimitList","autoScroll","limits","LimitListItem","Option","Value","modelOnce","modelDaily","modelDailySde","SelfAllocationUpdateAll","SelfAllocationUpdateSingleLimit","cleanTimer","reloadPage","allocationLimits","setAllocationRestrictions","setModifiedLimitId","splice","objectsKeys","combinedLimitObject","accKey","combinedLimitObjectKeys","allocationLimitsCleanable","limitObject","rule","onCleanFields","selfAllocationUpdateObject","selfAllocationUpdateSingleLimitObject","modifyTimer","accountModelCombined","object","DefaultLimitationDescription","LimitForm","defaultAllocationRules","defaultAllocationRulesKeys","accountAllocationRules","accountAllocationRulesKeys","freqKey","clKey","accountData","combinedData","combinedDataClone","prepareDefaultObj","StyledFLexBoxItem","SelfAllocationForm","FormSelfAllocation","FormAddFilter","memo","rate_min","setFields","a_sde_key","a_prefix","b_sde_key","rate_min2","formControlItems","worldzoneList","destinationList","subdestinationList","preventDefault","addItem","formControlNames","tableColumnsElements","columnsElements","getDuringOptions","duringOptions","start_time","end_time","dr_key","dr_name","AccessListFiltersSettings","isDaily","setIsDaily","during","getDefaultFilters","tp_key","tp_name","padding","newData","sp_key_list","ModalAccessListFilterRemove","alf_key","access_list_filter","a_wz_key","a_de_key","b_wz_key","b_de_key","AccessListFiltersTable","onRemoveItem","onEditItem","formGroupsRefs","tableData","setTableData","currentEditedFilter","setCurrentEditedFilter","editedFiltersKeys","setEditedFiltersKeys","localLoading","searchedData","keyName","editedFilters","createFormGroupRefs","minRate","formsGroup","defaultFilters","handleEditFilter","modifyItem","handleRemoveFilter","currentItemData","showModalItemRemove","onChangeFilter","isLoading","editedItemId","showModalItemEdit","getNotificationSettings","unsetNotificationSettings","itemsLoading","modifyNotificationSettings","notificationSettings","onItemShowEdit","handleFilterShowEdit","ModalRemoveFilter","AccessListFiltersContainer","createNewAccessListFiltersItem","modifyAccessListFiltersItem","removeAccessListFiltersItem","modifyAccessListNotificationSettings","reposone","itemsPage","itemsPerPage","unsetAccessListNotificationSettings","compose","promise","setKeyList","setCreateKey","setModifyKey","setDeleteKey","getKeyList","account_apikey_list","rangeSchemaRanges","ip_range_start","ip_range_end","ip_range_start_values","ip_range_end_values","sumFirstIp","sumSecondIp","idx","firstIpValue","secondIpValue","rangeSchema","rangeSchemaCreate","modifyApiKey","deleteApiKey","addedNewApiKey","onAddedNewApiKey","apiKeyList","onChangeApiKeyList","refTextAreaDict","formApiKey","onChangeFormApiKey","activeDeleteModal","onChangeActiveDeleteModal","apiKeyDeleteModal","onChangeApiKeyDeleteModal","newObject","StyledApiList","ApiListItem","initItemData","ApiButtonsPanel","StyledButtonPanel","reverse","ApiKeyOptions","rangeRows","onChangeRangeRows","createFormError","onChangeCreateFormError","rangeChecker","onCheckRange","valueSuccess","onChangeValueSuccess","helpModal","onShowHelpModal","someHasError","setSomeHasError","newRangeValue","onChangeNewRange","newRangeChecker","onCheckNewRange","newActiveValue","onChangeNewActive","containError","showCreateButton","newCreateFormError","oldError","newList","createFormErrorList","rangeCheckerList","nextCreateFormError","nextRangeChecker","newRangeHasError","StyledNewRangeListItem","StyledPageHeader","onSuccessMethod","apiKeyData","createModal","onCreateModal","formActive","onChangeFormActive","createFormHasError","clasName","onChangeCreateModal","formChangeActive","createApiKey","PageHeader","ApiPageKeys","ApiKeyModal","ApiPageContainer","account_apikey","callback","showTable","setShowTable","PaymentsSectionHeader","CommonDateFilter","default_allow_hawala","allow_hawala","account_options","pause_payouts","auto_accept_our_stat","accountBalance","FormPaymentSettings","amountDiff","currentItem","getPaymentAmountLimit","getAccountNoteList","createAccountNote","formLoading","setFormLoading","notesList","removeAccountNote","deactivationNoteId","setDeactivationNoteId","showDeactivationNoteModal","setShowDeactivationNoteModal","deactivationNoteLoading","setDeactivationNoteLoading","handleRemoveNote","hideModal","noteProps","currentType","onRemove","ModalNoteDeactivate","center","Note","accn_key","author","NoteBody","moment","format","setAccountNoteList","setAccountNoteLoading","notesLoading","account_note_count","accountNoteId","account_note_key","NotesForm","NotesList","getRates","getAccountAllocatedNumbers","tabTrunks","getAccountTrunk","getAccess","getAccessListFilter","getApiKeys","storagedAcctiveTab","tab","URLSearchParams","hasData","nextContext","loadingReferences","accountLoading","isGeneralTabDependencyLoading","AccountHeader","protocol_name","sort1","sort1_desc","group_price_range_list","group_subdestination_list","group_price_range_count","group_subdestination_count","group_price_range_number_count","group_subdestination_number_count","pr_key","price_range","price_ranges","allocated_numbers_and_ranges","transaction_id","getStore","account_price_list","Account","NewAccount","checkData","goBack","reg_key","setUpFormDefaultValues","createAccount","CreateAccount","changedServicePlan","onChangeServicePlan","flexGrid","a_service","a_number","b_subdestination_name","b_template","paymentColumns","term","payment_terms_rate_list","termsRate","CancelToken","source","setAccessList","setAccessExclusionList","setAccessExclusionLoading","AccessList","filtersObj","getAccessList","currentServicePlan","defaultSortOTP","defaultSort","ExportCsv","AccessListTable","access_list_count","setLiveCalls","setLoadingItem","acc_name_orig","rate_orig","a_subdestination_name","b_number","rate_term","acc_name_term","termination_point","onStop","onDataUpdated","call_key","StyledCloseButton","StyledContent","autoUpdateFormValue","onChangeAutoUpdateValue","StyledUpdateBlock","LiveCallsAutoUpdateForm","SearchKeysIncluses","SearchKeysStarts","timerOnInputChange","searchValue","startsWith","onConfirmStopCallModal","stopCall","onCancelStopCallModal","getLiveCalls","onTableDataUpdate","updateDataTimer","savedAutoUpdate","timerValue","LiveCallsHeader","LiveCallsTable","StopCallModal","live_call_list","ip_term","port_term","tprefix_term","CALL_KEY","LiveCalls","p_key","SdeWrapper","wrap","test_number_options","test_number_option","newNumbersCount","rejectedNumbers","test_trunk_number_list","ListNotCreatedRanges","listData","formMethods","setNewNumbersCount","formMethod","setFormMethod","resultDataRejected","setResultDataRejected","setResultData","showResultModal","setShowResultModal","new_numbers_count","rejected_numbers","price_range_list","FormRandom","FormTemplateList","FormNumbersList","ModalNewRangeResult","onUpdateRef","Ranges","filterform","getRanges","onClickList","query","queryString","AddNewRange","disabledRanges","touched","setTouched","sdeList","setSdeList","setSdeKey","isEntered","setIsEntered","field1","field2","noGenerateRange","_rates","rateObj","TablePayments","otpType","onDownloadPricesPdf","getTemplate","csvDataArrayData","StyledButtonToolbar","ShowPrice","setCount","setPage","ratecard_standart_list","ratecard_otp_list","ratecard_standart_count","ratecard_otp_count","test_number","_filters","_str","Filters","FormHoc","styleF","borderRight","styleT","EditPrice","ratesValue","ptValue","setPtValue","account_with_special_price","accountWithExtraKey","select_object","getUpdatedPtValue","ptValueItem","numberControlProps","calculatedHeight","checkboxProps","new_rates","heightResize","current_selected","setRanges","price_range_count","allocated","setServicePlanPriceList","Prices","ptActiveTermRates","addTermColumns","newColumns","onClickPrice","rangesFilters","servicePlanList","getPrices","selectFirstPrice","onEditPrice","ptRates","first_sde_key","handleChangeRangesFilters","rangesPage","rangesCount","sde_list","Top","onEdit","termsList","service_plan_price_count","table_name","defaultValues","setSde","show_unallocated_numbers","show_allocated_numbers","show_test_numbers","show_block_allocation_numbers","show_only_block_allocation_numbers","Box","getList","_disabled","numbersKeysList","selectedAll","prn_key_list","price_range_numbers","selectedCount","toUTCDateTime","custom_rate","sdeKey","showRate","setShowRate","getAutoPrice","trunkAccountId","fullprice","StyledRateLabel","StyledRateField","StyledIconClose","StyledRateShowLabel","dialers","setDialers","AllocateForm","SetOrUnsetTest","isSetTest","numbersList","Numbers","onChangeNumberFilters","numbersPerPage","trunk_name","isRange","numbersLoading","numbersPage","includedNumber","prn_key","disabledBlockedNumbersButtonSign","hasNoZeroPrefixNumbers","Revoke","updateRanges","Allocate","Block","Unblock","loaderWrapper","isLocal","ReactDOM","createPortal","getElementById","price_range_list_with_not_owned_numbers","rangesToDelete","setRangesToDelete","showModalFaultResult","setShowModalFaultResult","modalFaultResultData","setModalFaultResultData","apiMethod","tree","dialer_allocated_numbers_list","dialer","Tag","data-range-id","changeExpandTree","all_numbers","rangeId","getElementsByClassName","treeNode","iconNode","nodeByRangeId","onFetchResult","Tree","ModalResult","refNumbers","refRangesTable","number_filters","clearNumberFilters","onClickRange","rangesPerPage","urlParams","only_with_unallocated_numbers","_ranges","pickedRange","DeleteRanges","blocked","price_range_number_allocated_count","setCDRList","mapDispatchToProps","getCDRList","cdrList","setSort","noMoneyMatch","dialer_name","originatorList","dialerList","supplierList","onApplyFilters","setFilters","CDRPage","getTrafficReports","reportsData","tableColumns","setTableColumns","getReportsItems","CheckboxBadge","wrapperClassName","CheckboxBadgeWrapper","displayName","allowedRange","grouping","setGrouping","allowedRanges","cdr_full__interval_month","groupCheckboxes","radioCheckboxes","changedCheckbox","difference","valuesWithoutRadio","disabledDate","savedFilters","storagedFilters","setAuthNumbers","textFieldStyles","textFieldWidth","textFieldMarginBottom","getAuthNumbers","numberState","dataSetted","autoHeightTable","getAuthHeightTable","refStorage","updateTableValues","an_key","inputError","inputMessage","filledTextArea","servicePlanListOTP","servicePlan","onMouseOver","copy","formsNumbersRef","onError","formCheck","refTextArea","defaultHeightTable","columnOptions","formEditRef","editState","editFormValue","editSpKeyValue","onAddAuthNumber","onEditAuthNumber","onPickDeleteNumber","permission","columnOption","addColumns","dataField","emptyField","numberValue","duplicateNumber","duplicateDescription","uploaderIcons","AuthNumbers","dataNumber","addAuthNumber","auth_number","editAuthNumber","onDeleteAuthNumber","deleteAuthNumber","handleChangeCSV","csvList","csvFile","getFilteredData","filterName","dataValue","postFunction","showDeleteModal","onDeletePostFunction","downloadAuthNumbers","alertFirstErrorFromUpload","errorBody","errorKeys","errorMessageList","csv","setAnyLoading","StyledFlexboxGrid","StyledFlexboxGridItem","StyledUploader","uploader","inserted_rows","pulse","numberId","addUploadAuthNumbers","jsonData","styleLoader","transform","bil_acc_orig","bil_acc_term","currentEditedFieldKeyList","setCurrentEditedFieldKeyList","editedFieldKeyList","setEditedFieldKeyList","inited","setInited","disabledEditedFields","setDisabledEditedFields","tableDataList","matchedString","dataMatch","setDisabledItemForm","setEnabledItemForm","previewParts","originator","clientList","terminator","formFields","StyledTextField","hasRequiredException","setRequiredException","checkAtLeastOneException","StyledFieldsWrapper","StyledSubmitWrapper","AccessListException","handleShowModalRemove","showModalRemove","modalRemoveData","removeExceptionList","onRemoveAccessExclusionItem","getAccessExclusionList","onEditAccessExclusionItem","onAddAccessExclusionItem","AccessListExceptionTable","AccessListExceptionAdd","ModalExceptionRemove","access_list_exclusion_list","alx_key","setPriceRangesPriorityList","setPossiblePricePriorityList","addNewPriceRangePriority","deletePriceRangePriority","dataList","setSubdestinationAddNewModal","getPriceRangesPriorityList","prefixToDelete","setPrefixToDelete","getListItems","sde","handleAddNew","SIMTrafficRangesAddNewModal","getPossiblePriceRangePriorityList","formModal","codeListState","onChangeCodeListState","onHasError","generatedCodeList","randomCodeList","modal","code_list","priceRangesPriorityList","subdestinationAddNewModal","transformedList","nextValue","prefix_list","setBlockedDestinationsList","accountList","CustomCell","actionSelectData","option","onEditItemList","onAddItem","deleteKeyList","onDeleteKeys","checkedKeys","onChangeCheckedKeys","changedData","onChangedData","dir","substring","combinedNumber","curr","acc_id","duplicateList","duplicate","ab_key","sp_duplicates","dataObject","tableRow","duplicateKeys","absentRows","existRows","existRowKeys","existRowsComparable","dataObjectComparable","is","dataToEdit","sp","nextCheckedKeys","clearEditField","CheckCell","currentLabel","BlockedDestinationsPage","getBlockedDestinationsList","blockedDestinationsList","onAddBlockDestinationsItem","onEditBlockDestinationsItem","onRemoveBlockDestinationsItem","onEditBlockDestinationsItemList","BlockedDestinationsTable","BlockedDestinationsAdd","ab_key_list","setLogsList","setLogsListLoading","getReferences","siteList","toggleParamsModal","toggleErrorModal","account_user_name","StyledButton","currentLogItem","src","sortKeys","accountsFetched","getLogsList","site_list","account_user_id_list","log_action_list","log_action_count","showParamsModal","setShowParamsModal","showErrorModal","setShowErrorModal","setCurrentLogItem","ActionLogsFilter","ActionLogsTable","ModalActionParams","ModalActionError","subDestinationList","setGoogleOtpQuarantinedList","setGoogleOtpQuarantinedListLoading","getGoogleOtpQuarantinedList","price_range_quarantine_list","price_range_quarantine_count","removeGoogleOtpQuarantinedNumbers","prq_key_list","delete_all","showRemoveNumbersModal","setShowRemoveNumbersModal","removeNumbersLoading","setRemoveNumbersLoading","GoogleOtpQuarantinedFilter","GoogleOtpQuarantinedTable","ModalRemoveNumbers","setDateRange","account_user_manager_name","session_cnt","first_action","last_action","activity_duration","allocations","expandedRowData","handleExpanded","dailyItemsLength","setDailyItemsLength","days","extendedData","expandedData","inner_header","inner","ExpandCell","dateNow","setAmActivitiesList","setAmActivitiesLoading","setAmActivitiesDateListItem","removeAmActivitiesDateListItem","removeAmActivitiesDateList","getAmActivitiesList","account_manager_user_id_list","account_user_manager_id_list","statistic_by_account_user_manager","getAmActivitiesDateList","account_user_manager_id","statistic_by_account_user_manager_date","AmActivitiesFilter","AmActivitiesTable","modifyAccountManager","handleRowEdit","removeAccountManager","forms","setForms","rowsLoading","setRowsLoading","showRemoveModal","setShowRemoveModal","removeData","setRemoveData","removeDataLoading","setRemoveDataLoading","changeForm","formsCopy","currentForm","modifyRow","setItemEditing","deleteRow","account_user_teamlead_id","account_user_teamlead","editableRow","billingItem","ACM_KEY","rowLoading","ModalRemoveAccountManager","billing_acm_key","managersList","createAmLoading","setCreateAmLoading","disabledBillingList","billingAM","manager","getAccountManagersReferences","account_user_teamlead_list","getAccountManagersBillingList","billing_account_manager_list","createAccountManager","AccountManagersTable","AccountManagersCreateForm","JSONEditorDemo","mode","onChangeText","jsoneditor","JSONEditor","container","json","destroy","SettingsContactEditor","blocksFromHTML","stateFromHTML","String","EditorState","createWithContent","createEmpty","contactState","onChangeContactState","StyledEditorContainer","editorClassName","toolbarClassName","editorState","onEditorStateChange","stateToHTML","getCurrentContent","toolbar","inDropdown","SettingsEditModal","dataObj","isJson","onChangeFormState","setDescription","showDescriptionEdit","setShowDescriptionEdit","onShowResult","onCompareData","errorMessageState","onChangeErrorMessage","editSchemaNotJson","s_as_integer","s_as_string","comparePreviewAdaptive","finalData","preventOverflow","editable","parsedData","FieldTextArea","StyledCompare","FieldTextAreaAutoResize","StyledEditButton","StyledKeyValue","StyledValue","StyledLabel","settingTypes","getDataKey","0","editModalData","onChangeEditData","typeName","comingValues","typeStr","st","setSettingList","getSettingList","onEditSettingItem","settingList","formModelPeriodTraffic","period_traffic","formModelPeriodAllocation","period_allocation","formModelPeriodAutoRevoke","period_autorevoke","getPriceRangeQuarantineSettingList","modifyPriceRangeQuarantineSetting","removePriceRangeQuarantineSetting","refs","editedRows","setEditedRows","setModalRemoveData","modalApproveData","setModalApproveData","showModalApprove","setShowModalApprove","modalApproveLoading","setModalApproveLoading","editedRowsCopy","rowsLoadingCopy","editedRowData","rowForms","setRowEditing","setRowLoading","onApprovedSubmit","fieldProps","currentRefsCopy","ModalSettingRemove","ModalSettingSubmitApprove","setPriceRangeQuarantineSettingList","setPriceRangeQuarantineSettingLoading","price_range_quarantine_setting","createPriceRangeQuarantineSetting","prqs_key","google_quarantine_period_allocation","google_quarantine_period_traffic","PriceRangeQuarantineSettingFilter","PriceRangeQuarantineSettingTable","PriceRangeQuarantineSettingCreateForm","cntr_code","month_traffic_minute","traffic_type","selectableFields","select_comment","select_traffic_type","registrationFormFields","currencyList","getRegistrationList","setDefaultFormCreateAccount","rejectRegistration","onSetRedirectTab","dataListState","onChangeDataList","allRequestStatusList","processed","getColumnKeyValueString","dataListValue","trafficTypeValue","rejected_at","rejected_manager_name","existingLink","linkedAccountName","rejectedDate","fillZeroDateValue","hours","minutes","dateFormat","showRejectModal","setShowRejectModal","keyValueObj","StyledKeyValueColumn","StyledColumnItem","tooltip","ModalRejectRegistration","registrationList","approveRegistration","RegistrationRequestsFilter","RegistrationRequestsTable","range_numbers_default","range_numbers_max","autorevoke_hours","getGoogleOtpAllocationList","modifyGoogleOtpAllocation","removeGoogleOtpAllocation","formErrorState","formValueState","hasDifferences","checkedFormData","existErrorData","updateFormErrorState","defaultItem","ModalGoogleOtpAllocationRemove","setGoogleOtpAllocationList","setGoogleOtpAllocationListLoading","otp_allocation2","createGoogleOtpAllocation","oa_key","GoogleOtpAllocationFilter","GoogleOtpAllocationTable","GoogleOtpAllocationCreateForm","activeIvr","handleSelectIvr","handleSelectIvrCreate","StyledTreeWrapper","defaultExpandAll","StyledButtonCreateIvr","activeIvrActionList","activeActionId","activeActionType","actionData","shaded","BlockHeader","FormSection","FormSectionTitle","h5","ParameterNumberField","FILES","require","initialized","SOUNDS","audio","Audio","volume","play","relativeVolume","sound","initialize","pause","currentTime","stop","Session","ringing","_localClonedStream","localVideo","peerconnection","connection","localStream","getLocalStreams","remoteStream","getRemoteStreams","clone","srcObject","_handleRemoteStream","on","direction","stream","JsSIP","Utils","closeMediaStream","remoteVideo","autoPlay","muted","DEFAULT_SETTINGS","display_name","authorization_user","uri","registrar_server","contact_uri","instance_id","session_timers","use_preloaded_route","socket","via_transport","pcConfig","rtcpMuxPolicy","iceServers","callstats","enabled","AppID","AppSecret","Phone","_ua","isInCall","ivrId","ivr_id","listen","handleRegister","callUri","WebSocketInterface","UA","sockets","handleOutgoingCall","mediaConstraints","video","rtcOfferConstraints","offerToReceiveAudio","offerToReceiveVideo","audioPlayer","cause","terminate","ButtonPlay","handleStopSession","fetchIvrRegisterData","ivrTypes","submitIvr","removeIvr","setName","showNameEditField","setShowNameEditField","setActiveIvrActionList","setActiveActionId","isNew","action_name","sound_name","action_type","activeActionData","StyledHeaderItem","StyledListItem","StyledListItemContent","currentIndex","handleChangeType","StyledListButton","actionCloned","handleAddAction","handleRemoveAction","ButtonGroup","stopPropagation","currentElement","handleDecreasePosition","handleIncreasePosition","BlockIvrParameters","setIvrList","setIvrTypes","getIvrList","ivr_list","setIvrSoundList","getIvrSoundList","ivr_sound_list","ivrList","ivrCliList","getIvrTypes","ivr_action_type_list","setActiveIvr","submitIvrDataLoading","setSubmitIvrDataLoading","filteredIvrList","toLower","BlockIvrListFilter","BlockIvrList","submitLoading","BlockIvrActionList","activeSoundId","setFiles","dt","DataTransfer","ivr_sound_id","apiFormData","fileList","removable","StyledAudioPlayer","AudioPlayer","IvrAudio","modalNewSoundShow","setModalNewSoundShow","modalCancelShow","setModalCancelShow","setActiveSoundId","BlockIvrSoundsFilter","flexShrink","filename","url_source","showJumpControls","customProgressBarSection","RHAP_UI","CURRENT_TIME","PROGRESS_BAR","DURATION","customControlsSection","MAIN_CONTROLS","ModalAddSound","ModalCancel","onDataUpdate","ModalSubmitRowApprove","idKey","onModifyRow","onRemoveRow","checkParamsBeforeModify","handleModifyRow","handleApprovedSubmit","handleDeleteRow","customValue","FormCreateRow","ModalRemoveRow","formModelPrefix","formModelDescription","formModelIvr","getIvrCliList","handleRemove","StyledButtonPlay","TableEditCells","setIvrCliList","ivr_cli_list","ivr_name","PageIvrSpecialCliFilter","PageIvrSpecialCliTable","setDefaultIvr","getDefaultIvr","changeDefaultIvr","exact","Payments","AccountView","RangesNumbers","TrafficReportsPage","Reload","SIMTrafficRangesPage","ActionLogs","GoogleOtpQuarantined","AmActivities","AccountManagers","SettingsPage","PriceRangeQuarantineSetting","RegistrationRequests","GoogleOtpAllocation","Ivr","_setValue","PaginationContainer","PaginationForm","PaginationFormGroup","PaginationFormGroupCount","PaginationFormField","PaginationTotal","limitWidth","savedPerPage","hideTotalCount","boundaryLinks","ellipsis","next","MenuShowColumnsIcon","SpeakerContainer","Speaker","cancelText","CustomizableTable","onChangeColumnsTable","onChangeColumns","onOpenColumnChangeMenu","columnMenuShow","getColumnsFromIds","id_list","pickedColumns","onToggleItem","isChecked","isPaginated","gettingSelectedItem","isSelect","selectedRows","savedTableColumns","onSaveColumnsTable","isChangedColumns","actionColumn","defaultPerPage","calculatedOuterHeight","twoStaged","extraRows","defaultColumns","savedDefaultColumns","everyRowsChecked","columnChecked","calculatedTableHeight","defaultTableRowsHeight","CheckPickerPortal","idList","comparedColumns","injectIntl","offsetHeight","is_test_call","CustomizableForm","savedTableFilter","number_destination","curPage","filterApi","test_calls","paginatedData","getPaginatedData","curPerPage","pageNumber","idListToSave","onUpdateData","LiveCallsApiFilters","StyledActionButtonIcon","formGroupClasses","formGroup","todayDateStart","todayDateEnd","changedFormValue","changeFormData","calendarPlacement","getDialerTestCalls","setActiveFiltersCount","combineFilters","savedFilter","dateFilters","activeFilters","activeFiltersCount","pickedFilter","combinedFilter","Toggler","Drawer","TestCallsTable","setTestCalls","TestCalls","validatedData","onDownload","iconName","buttonText","tooltipText","speakerPlacement","CDR","exportCDR","tprefix_dialer","uploadLoading","dataWithSummaries","summariesData","setUploadLoading","renderColumns","dataLabels","groupsList","filtersDataGroup","filtersData","checkbox","TrafficStat","getTrafficStat","sum_duration","TrafficStatTable","BaseToggle","Traffic","changeTypeTrafficCDR","typeTrafficCDR","startTab","setPriceList","setTrunkList","setLoadingAllocatedNumbersDialer","getTrunkListDialer","setAccessLoadingAllocatedNumbers","allocateByAccess","random_order","setViewNumberTrunk","setNumberTrunkLoading","setViewNumberAllocatedLoading","setViewNumberAllocated","setAllNumberAllocated","setLoadingAllocatedNumbers","setAllocatedNumbersByNumberList","setAllocatedNumbersByTemplate","setAllocatedGoogleOTPNumbers","trunkNumberTransaction","setTrunkNumberTransaction","transactionObject","downloadNumbers","allocateGoogleOTPTrunkNumbers","PriceFilters","filtersModelInner","filteredPriceList","parsedAccountInfo","accountInfoIsTest","priceList","curList","onShowGetNumbersModal","setShowGoogleOTPModal","accountDialerState","actionShowFlag","nonTestColumns","range_name","firstElement","StyledTooltipIcon","available_numbers","testColumns","allTermList","priceRange","uniqueTermList","renderTrunksListItem","TrunksListItem","onSend","priceData","randomNumber","onChangeRandomNumber","onChangeTrunkId","MAX_NUMBER","other","formSchemaInner","clearForm","setReasonModalProps","isRandom","subdest","numbersAmount","reason_hash","priceTrunks","maxNumbersCalculated","formSchema","checkForm","FormParts","FormPart","TrunkField","TrunksList","FlexBox","FormLabel","FormFieldWrapper","background","extraColumns","downloadNumbersTxt","trunkAllocatedByOTP","methodName","prefixViewNumbers","isEnetered","method2","getCsvBodyWithHeaders","onlyNumbers","dataArr","numberListNotAllocated","uploadLoadSetting","combinedTitle","csvDataPrefixes","getCsvBody","csvOnlyNumbers","NumbersField","colored","onAllocateGoogleOTP","activeField","requestedField","setRequestedField","removedField","setRemovedField","google_otp","trunkSelectData","onSetRequestedField","fieldsToCheck","templateField","sdeField","FormWhisper","trunkName","widthDesktopMin","Price","setShowGetNumbersModal","showGetNumbersModal","setShowAllocatedNumbersModal","filterIsNotNull","filter_param","newFilter","getPriceList","currentPerPage","exportPricePdf","setUploadingPriceLoading","requestMethod","allocateByPriceRange","setModalResponseHandler","onAllocationGetResult","showGoogleOTPModal","csvContentLoading","onResponseHandlerSuccess","csvNumberList","encodedUri","encodeURI","showModalResponseHandler","setRandomNumber","reasonModalProps","clearAllocatedData","setGoogleOTPFormValue","googleOTPFormValue","exportPriceDropdown","currencyKey","av_numbers","getTrunkList","priceLoading","loadingGoogleOTPAllocation","loadingAllocation","loadingAccessAllocation","uploadLoadingSetting","PriceTable","PriceGetNumbersModal","GoogleOTPAllocateModal","setLoadingData","load","onChangeSpKey","onShowGoogleOTPModal","StyledTrunkField","Accesses","downloadAccesses","showNewNumbersModal","onShowNewNumbersModal","cancelTokenAccessesList","accessesList","accessesLoading","AccessesFilters","AccessesTable","AccessGetNumbersModal","csv_result_key","setCLIList","testData","newNumber","calculatedTableRows","round","DEFAULT_PER_PAGE_DIALER","overflowY","CLI","getCLIList","changeTab","CLIList","CLILoading","CLIFilters","CLITable","loadingData","borderRadius","setGeneratedApiKey","setKeyListLoading","CurrentApiKey","pickedApiKey","methods","refTextAreaObj","topAnchorVisible","onChangeFixedTopAnchor","ApiCurrentApiKey","Affix","BriefList","method_api","scroll","scrollIntoView","behaviour","api_link","copy_link","method_http","appereace","fontStyle","fontWeight","opacity","param","paramProps","cloneParams","displayDataTypes","displayObjectSize","pickApiKey","generateNewApiKey","activeKeyList","generateModal","onGenerateModal","onChangeActiveKey","updatedActiveKeyList","visibility","pythonExample","jsExample","selectedPage","examples","examples_python","examples_js","langProperty","language","colorBrewer","example","optionsCode","optionsResultList","resultRow","apiTurn","setApiTurn","apiNavigation","overflowX","anchors","anchor","toggleMobileSidebarShow","mobileSidebarShow","SidebarMenuToggle","circle","SidebarMenuDrawer","ApiPageSidebar","main","ApiPageDocumentation","apiMethods","ApiPageExamples","res_api_key","ApiPage","FieldOrganizationType","FieldPaymentMethod","customer_cntr_name","bank_cntr_name","beneficiary_cntr_name","customerConfirmFields","companyConfirmFields","paypalFields","bitcoinFields","hawalaFields","otherTransferSystemsFields","otherTransferSystemsConfirmFields","accountInfoStorage","setCurrentTop","scrollTop","onScroll","scrollX","scrollY","setReadyForPayment","ModalCancelPaymentRequest","paymentList","showDetails","startDateYmd","trafficReports","setDialerInfo","setAllocationLimit","setAccountReadyForPaymentAction","onShowNumbersModal","permissionList","onChangeActiveTrunk","isScrolled","fixedColumnPlacement","StyledButtonRowClient","handleClickRow","InputButton","validCharsRegex","CustomNumber","newValue","floatedValue","stepRange","fixedValue","rate_max","StyledGridItem","NumberFieldWrapper","showFiltersDrawer","setShowFiltersDrawer","worldzone_name","setRef","FormDivider","FormTitle","FormToggle","form_left","form_right","onAllocateNumberList","onAllocateNumbersTemplate","selectedTrunkId","leftFormValue","onChangeLeftFormValue","rightFormValue","onChangeRightFormValue","formDisableState","onChangeFocusForm","formResponse","onChangeFocusResponseForm","onChangeLeftFormError","onChangeRightFormError","allocatedMethodChecked","onChangeAllocatedMethod","isTableReady","setIsTableReady","MAX_ROWS","formLeftSchema","formRightSchema","num_list","stringRowList","onCheckFormError","errorChanger","chosenResponseFunction","chosenRequest","chosenResponseDataRef","randomNumberValue","onSubmitFromValue","schema","TemplateForm","ListForm","break","wrapt","onCopyList","onGetTrunkNumbers","getTrunkNumbers","activeTrunkId","getActiveFilter","allocateTrunkNumbersByTemplate","setShowNumbersModal","setShowNumbersListModal","allocateTrunkNumbersByNumberList","showNumbersModal","showNumbersListModal","setShowNumbersRevokeModal","showNumbersRevokeModal","handleRevokeNumbersSubmit","getRowKeyList","numbersRevokeModalLoading","downloadNumberList","downloadNumberListTxt","setTableRef","setTemplateFormValue","templateFormValue","setListFormValue","listFormValue","downloadCompleteNumbersCSV","allocated_numbers_google","storagedPerPage","firstTrunkId","selectedAllocatedNumbers","filtersValue","getNumberTrunksList","filteredTrunks","allocated_numbers_num_list","allocated_numbers_temp","activeFilter","revokeButton","AllocatedNumbersTable","NumbersRevokeModal","NumbersAllocateModal","onCopy","permittedMethods","getAllAllocatedNumbers","downloadFilteredNumbers","confirmPayment","confirmStatus","confirmPaymentDetails","Fingerprint2","preprocessor","components","objectUserData","httpAgent","apiWithHeaders","user_data","tokenId","confirmForm","formField","statusHeader","PaymentDetailConfirm","IVR","en","ar","FormModalWrapper","RegistrationSubmitButton","RegistrationCancelButton","RegistrationButtonWrapper","CommentIcon","GroupExtendedComment","FieldNumber","GroupNumber","FieldSelect","FieldSelectComment","otherMessage","onSetOtherMessage","showOtherMessage","onShowOtherMessage","registerCreate","getAllReferences","recaptchaRef","trafficState","onChangeTraffic","verifyToken","setVerifyCaptcha","registerBody","setRegisteredBody","reset","execute","sitekey","onResolved","onResolveCaptcha","LangSwitcher","Switcher","lang_key","lang_name","loginModel","secondAuthModel","second_password","loginUser","second_authentication_type","sessionSite","sessionLang","sessionLRtl","showPassword","onChangeShowPassword","showRegistration","onShowRegistrationModal","emailPending","setEmailPending","isError","Provider","StyledContainer","StyledMenuUserInfo","StyledMenuCompanyInfo","pullRight","StyledNavItem","StyledSignUpButton","resetPasswordFormModel","requestFormModel","ResetPassword","isTokenValid","checkToken","handleSubmitResetRequest","handleSubmitNewPassword","colors","themeAdmin","brand1","brand2","primary","secondary","bg","statusBadge","activeRow","themeClient","StyledMessage","ContentReject","ContentSuccess","setSuccess","tokenResetPassword","setTokenResetPassword","token_reset_password","EmailVerificationResult","createContext","getPermission","resp","getAccountDialerInfo","setBodyClassNames","locales","rsMessages","localesRsuite","themeContext","Maintenance","Login","EmailVerification","CacheBooster","Boolean","hostname","serviceWorker","ready","unregister","module","exports","_interopRequireDefault","__esModule","default","Calendar","sunday","monday","tuesday","wednesday","thursday","friday","saturday","ok","seconds","formattedMonthPattern","formattedDayPattern","_default","more","emptyMessage","TablePagination","lengthMenuInfo","totalInfo","Picker","checkAll","InputPicker","createOption","progress","complete","emptyFile","upload"],"mappings":"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","file":"static/js/main.3d1b5ad1.chunk.js","sourcesContent":["// media queries\r\nexport const SCREEN_MEDIA = {\r\n    xxs: {min: 0, max: 479.98},\r\n    xs: {min: 480, max: 575.98},\r\n    sm: {min: 576, max: 767.98},\r\n    md: {min: 768, max: 991.98},\r\n    lg: {min: 992, max: 1199.98},\r\n    xl: {min: 1200, max: 1399.98},\r\n};\r\n\r\nexport const APP_TYPE_CLIENT = 2;\r\nexport const APP_TYPE_ADMIN = 4;\r\n\r\nexport const APP_TYPE_DEFAULT = window.app_type ? +window.app_type : 4;\r\n\r\nexport const commentTypes = [\r\n    {id: 0, label: 'Very important', icon: \"exclamation-circle\", color: \"#f85071\"},\r\n    {id: 1, label: 'Info', icon: \"info-circle\", color: \"#1E90FF\"},\r\n    {id: 2, label: 'Notice', icon: \"commenting\", color: \"#8256C8\"},\r\n];\r\n\r\nexport const valueAllocationLimit = 1000;\r\nexport const valueAllocationLimitByPrefix = 1000000;\r\nexport const valueAllocationLimitGoogleOTP = 10000;\r\nexport const valueAllocationLimitList = 100000;\r\n\r\nexport const SP_KEY__GOOGLE_OTP = 6;\r\nexport const SP_OTP_TYPE = 1;\r\n\r\nexport const SET_MAINTENANCE_MODE = 'SET_MAINTENANCE_MODE';\r\n\r\nexport const PAGE_LOGGER = 'PAGE_LOGGER';\r\n\r\nexport const ACCOUNTS = 'ACCOUNTS';\r\nexport const VIEW_ACCOUNT = 'accounts::VIEW';\r\nexport const SET_VIEW_ACCOUNT = 'accounts::SET_VIEW';\r\nexport const SET_INFO_ACCOUNT = 'accounts::SET_INFO';\r\n\r\nexport const DROPDOWN_ACCOUNTS = 'DROPDOWN_ACCOUNTS';\r\n\r\nexport const SET_TRUNK_ACCOUNT = 'accounts::SET_TRUNK';\r\nexport const SET_VIEW_ACCOUNT_AFTER_DELETE = 'accounts::SET_TRUNK_AFTER_DELETE';\r\nexport const ADD_TRUNK_ACCOUNT = 'accounts::ADD_TRUNK';\r\n\r\nexport const SET_ACCESS_LIST_FILTERS_LOADING = 'accounts::SET_ACCESS_LIST_FILTERS_LOADING';\r\nexport const SET_ACCESS_LIST_FILTERS = 'accounts::SET_ACCESS_LIST_FILTERS';\r\n\r\nexport const SET_ACCOUNT_ACCESS_LIST_FILTERS_LIST = 'accounts::SET_ACCOUNT_ACCESS_LIST_FILTERS_LIST';\r\nexport const SET_ACCOUNT_ACCESS_LIST_FILTERS_LIST_LOADING = 'accounts::SET_ACCOUNT_ACCESS_LIST_FILTERS_LIST_LOADING';\r\n\r\nexport const SET_ACCESS_LIST_NOTIFICATION_SETTINGS = 'accounts::SET_ACCESS_LIST_NOTIFICATION_SETTINGS';\r\nexport const UNSET_ACCESS_LIST_NOTIFICATION_SETTINGS = 'accounts::UNSET_ACCESS_LIST_NOTIFICATION_SETTINGS';\r\nexport const MODIFY_ACCESS_LIST_NOTIFICATION_SETTINGS = 'accounts::MODIFY_ACCESS_LIST_NOTIFICATION_SETTINGS';\r\n\r\nexport const SET_USERS_ACCOUNT = 'accounts::SET_ACCOUNTS';\r\nexport const SET_USERS_ACCOUNT_LOADING = 'accounts::SET_ACCOUNTS_LOADING';\r\n\r\nexport const SET_EDIT_ERROR = 'accounts::SET_EDIT_ERROR';\r\nexport const SET_EDIT_ERROR_MESSAGE = 'accounts::SET_EDIT_ERROR_MESSAGE';\r\n\r\nexport const SET_TRUNK_ACCOUNT_LOADING = 'accounts::SET_TRUNK_LOADIING';\r\nexport const SET_ALLOCATED_ACCOUNT = 'accounts::SET_ALLOCATED';\r\nexport const SET_ALLOCATED_ACCOUNT_LOADING = 'accounts::SET_ALLOCATED_LOADING';\r\n\r\nexport const SETTINS_MODAL_SHOW = 'settings::MODAL';\r\nexport const SET_SIDEBAR = 'settings::SIDEBAR';\r\nexport const SETTINS_MODAL_COLOR_SHOW = 'settings::MODAL_COLOR';\r\nexport const SET_COLOR = 'settings::COLOR';\r\n\r\nexport const SET_LIMIT_MODIFIED = 'settings::SET_LIMIT_MODIFIED';\r\n\r\nexport const SET_AUTH = 'auth::SET_AUTH';\r\nexport const SET_LOADING_INFO = 'auth::SET_LOADING';\r\n\r\nexport const ACCESS_LIST = 'ACCESS_LIST';\r\n\r\nexport const LIVE_CALLS = 'live_calls';\r\nexport const LIVE_CALLS_LIST = 'live_call:get_list';\r\nexport const SET_LIVE_CALLS_LIST = 'live_calls::SET_LIVE_CALLS';\r\n\r\nexport const PRICES = 'service_plan_price:get_list_actual';\r\nexport const SET_SERVICE_PLAN_PRICE = 'SET_SERVICE_PLAN_PRICE';\r\n\r\nexport const SET_CURRENT_TRUNK_ID = 'SET_CURRENT_TRUNK_ID';\r\nexport const SET_CURRENT_RANGE_NUMBER = 'SET_CURRENT_RANGE_NUMBER';\r\n\r\nexport const REFERENCES_DIALER_TRUNK = 'REFERENCES_DIALER_TRUNK';\r\n\r\nexport const PRICE_RANGES = 'price_range:get_list';\r\nexport const SET_RANGES = 'price_range:SET_RANGES';\r\n\r\nexport const SPECIAL_RATES = 'account::special_rates';\r\n\r\nexport const  PRICE_NUMBERS = 'price_numbers';\r\nexport const  SET_NUMBERS = 'set_price_numbers';\r\nexport const  SET_NUMBERS_CSV = 'set_price_numbers_csv';\r\n\r\nexport const AUTH_NUMBERS = 'auth_numbers';\r\n\r\nexport const SET_ROLES = 'atx/roles/SET_ROLES';\r\n\r\nexport const SET_NUMBER_ALLOCATION_MODAL = 'atx/settings/SET_NUMBER_ALLOCATION_MODAL';\r\n\r\nexport const ALERT_DISPLAY_DURATION = 5000;\r\n\r\nexport const DEFAULT_AUTH_PATH_ADMIN = '/accounts';\r\nexport const DEFAULT_AUTH_PATH_CLIENT = '/live-calls';\r\nexport const DEFAULT_AUTH_PATH_CLIENT_TEST = '/live-calls';\r\nexport const DEFAULT_NOT_AUTH_PATH = '/login';\r\nexport const SET_USER_LOGIN_INFO = 'SET_USER_LOGIN_INFO';\r\n\r\nexport const DEFAULT_SP_KEY = 1;\r\n\r\nexport const DEFAULT_PRT_KEY = 1;\r\nexport const OTP_SERVICE_PLAN_KEY = 3;\r\n\r\nexport const USD_CURRENCY_NAME = 'USD';\r\nexport const USD_DEFAULT_CURRENCY_KEY = 1;\r\n\r\nexport const EUR_CURRENCY_NAME = 'EUR';\r\nexport const EUR_DEFAULT_CURRENCY_KEY = 2;\r\n\r\nexport const DEFAULT_PER_PAGE_TINY = 5;\r\nexport const DEFAULT_PER_PAGE_SMALL = 10;\r\nexport const DEFAULT_PER_PAGE_MEDIUM = 15;\r\nexport const DEFAULT_PER_PAGE_BIG = 20;\r\n\r\nexport const API_PAGE = \"API_PAGE\";\r\nexport const API_PAGE_LIST  = \"account_apikey:get_list\";\r\nexport const API_CREATE_KEY = \"account_apikey:create\";\r\nexport const API_MODIFY_KEY = \"account_apikey:modify\";\r\nexport const API_DELETE_KEY = \"account_apikey:delete\";\r\n\r\nexport const DESC_SORT = 'desc';\r\nexport const ASC_SORT = 'asc';\r\nexport const DEFAULT_EQUAL_SIGN = 0;\r\nexport const MIN_RATE_VALUE = 0.0001;\r\n\r\nexport const EOL = navigator.appVersion.indexOf(\"Win\") !== -1 ? '\\n' : '\\r\\n';\r\n\r\nexport const DEFAULT_ERROR_MESSAGE = 'Something went wrong';\r\n\r\nexport const SET_LOADING_ACCESS_EXCLUSION = 'SET_LOADING_ACCESS_EXCLUSION';\r\n\r\n// Payments DUCKS\r\nexport const PAYMENTS = 'payments::PAYMENTS';\r\nexport const PAYMENT_LIST = 'payments::PAYMENTS_LIST';\r\nexport const PAYMENT_REQUEST_LIST = 'payments::PAYMENTS_REQUEST_LIST';\r\nexport const PAYMENT_TRAFFIC_REPORTS_LIST = 'payments::PAYMENTS_TRAFFIC_REPORTS_LIST';\r\nexport const PAYMENT_HAWALA_LIST = 'payments::PAYMENTS_HAWALA_LIST';\r\n\r\n// Payment Details DUCKS\r\nexport const PAYMENT_DETAIL = 'payment_detail';\r\n\r\n// Google OTP Quarantined ranges\r\nexport const GOOGLE_OTP_QUARANTINED_SET_LIST = 'GOOGLE_OTP_QUARANTINED_SET_LIST';\r\nexport const GOOGLE_OTP_QUARANTINED_SET_LOADING = 'GOOGLE_OTP_QUARANTINED_SET_LOADING';\r\n\r\n// Google OTP Allocation\r\nexport const GOOGLE_OTP_ALLOCATION_SET_LIST = 'GOOGLE_OTP_ALLOCATION_SET_LIST';\r\nexport const GOOGLE_OTP_ALLOCATION_SET_LOADING = 'GOOGLE_OTP_ALLOCATION_SET_LOADING';\r\n\r\n// Action Logs\r\nexport const ACTION_LOGS_LIST = 'ACTION_LOGS_LIST';\r\nexport const ACTION_LOGS_SET_LOADING = 'ACTION_LOGS_SET_LOADING';\r\nexport const ACTION_LOGS_REFERENCES = 'ACTION_LOGS_REFERENCES';\r\n\r\n// AM Activities\r\nexport const AM_ACTIVITIES_SET_LOADING = 'AM_ACTIVITIES_SET_LOADING';\r\nexport const AM_ACTIVITIES_LIST = 'AM_ACTIVITIES_LIST';\r\nexport const AM_ACTIVITIES_DATE_LIST_ITEM = 'AM_ACTIVITIES_DATE_LIST_ITEM';\r\nexport const AM_ACTIVITIES_DATE_LIST_ITEM_REMOVE = 'AM_ACTIVITIES_DATE_LIST_ITEM_REMOVE';\r\nexport const AM_ACTIVITIES_DATE_LIST_REMOVE = 'AM_ACTIVITIES_DATE_LIST_REMOVE';\r\n\r\n// Account Managers\r\nexport const ACCOUNT_MANAGERS_SET_LOADING = 'ACCOUNT_MANAGERS_SET_LOADING';\r\nexport const ACCOUNT_MANAGERS_LIST = 'ACCOUNT_MANAGERS_LIST';\r\nexport const ACCOUNT_MANAGERS_USER_LIST = 'ACCOUNT_MANAGERS_USER_LIST';\r\nexport const ACCOUNT_MANAGERS_REFERENCES = 'ACCOUNT_MANAGERS_REFERENCES';\r\nexport const ACCOUNT_MANAGERS_BIL = 'ACCOUNT_MANAGERS_BIL';\r\nexport const ACCOUNT_MANAGERS_MODIFY = 'ACCOUNT_MANAGERS_MODIFY';\r\n\r\n// Special limit terms\r\nexport const PRICE_RANGE_QUARANTINE_SETTING_LOADING = 'PRICE_RANGE_QUARANTINE_SETTING_LOADING';\r\nexport const PRICE_RANGE_QUARANTINE_SETTING_LIST = 'PRICE_RANGE_QUARANTINE_SETTING_LIST';\r\n\r\n// Account note\r\nexport const ACCOUNT_NOTE_LIST = 'ACCOUNT_NOTE_LIST';\r\nexport const ACCOUNT_NOTE_LOADING = 'ACCOUNT_NOTE_LOADING';\r\n\r\n//Registration\r\nexport const REGISTRATION_LIST = 'REGISTRATION_LIST';\r\nexport const REGISTRATION_COUNT = 'REGISTRATION_COUNT';\r\nexport const REGISTRATION_ACCOUNT = 'REGISTRATION_ACCOUNT';\r\n\r\nexport const REGISTRATION_REQUEST_STATUS_SENT = 0;\r\nexport const REGISTRATION_REQUEST_STATUS_APPROVED = 1;\r\nexport const REGISTRATION_REQUEST_STATUS_REJECTED = 2;\r\n\r\nexport const SET_DEFAULT_FORM_CREATE_ACCOUNT = 'SET_DEFAULT_FORM_CREATE_ACCOUNT';\r\n\r\nexport const SET_REDIRECT_TAB = 'SET_REDIRECT_TAB';\r\n\r\n// IVR\r\nexport const IVR = \"panel/IVR\";\r\nexport const IVR_CLI = \"panel/IVR_CLI\";\r\nexport const IVR_SOUNDS = \"panel/IVR_SOUNDS\";\r\nexport const IVR_DEFAULT = \"panel/IVR_DEFAULT\";\r\n\r\n\r\n\r\n/* CLIENT */\r\nexport const MIN_RATE_DIALER = 0;\r\nexport const MAX_RATE_DIALER = 9.9999;\r\n\r\nexport const MIN_PER_PAGE_DIALER = 1;\r\nexport const MAX_PER_PAGE_DIALER  = 10000;\r\nexport const DEFAULT_PER_PAGE_DIALER  = 15;\r\nexport const TWO_STAGE_DEFAULT_PER_PAGE_DIALER  = 11;\r\nexport const OTP_SERVICE_PLAN_KEY_DIALER  = 3;\r\nexport const SET_UPLOAD_LOADING_DIALER = 'SET_UPLOAD_LOADING_DIALER';\r\nexport const LOCAL_STORAGE_USER_INFO_DIALER = 'userInfo';\r\nexport const REFERENCES_SERVICE_PLAN_DIALER = 'references::SERVICE_PLAN';\r\n\r\nexport const LOCAL_STORAGE_NUMBERS_FILTERS_DIALER = 'numbersTableFilterObject';\r\nexport const LOCAL_STORAGE_NUMBERS_PER_PAGE_DIALER = 'numbersPerPage';\r\n\r\n// number\r\nexport const NUMBERS_DIALER = \"NUMBERS_DIALER\";\r\nexport const SET_ALL_ALLOCATED_NUMBER_DIALER = 'numbers::SET_ALL_ALLOCATED_NUMBER';\r\nexport const SET_ALLOCATED_NUMBER_DIALER = 'numbers::SET_ALLOCATED_NUMBER';\r\nexport const SET_TRUNK_NUMBER_DIALER = 'numbers::SET_TRUNKS';\r\nexport const SET_TRUNK_NUMBER_ALLOCATED_LOADING_DIALER = 'numbers::SET_TRUNK_ALLOCATED_LOADING';\r\nexport const SET_TRUNK_NUMBER_LOADING_DIALER = 'numbers::SET_TRUNK_LOADING';\r\nexport const SET_LOADING_NUMBERS_ALLOCATED_NUMBERS_DIALER = \"numbers::SET_LOADING_NUMBERS_ALLOCATED_NUMBERS\";\r\nexport const SET_UPLOAD_TRUNK_LOADING_DIALER = 'SET_UPLOAD_TRUNK_LOADING';\r\nexport const SET_TRUNK_NUMBER_TRANSACTION_DIALER = 'SET_TRUNK_NUMBER_TRANSACTION';\r\n\r\n\r\n// client auth\r\nexport const SET_ACCOUNT_DIALER_INFO = \"SET_ACCOUNT_DIALER_INFO\";\r\nexport const REFERENCES_ALLOCATION_LIMIT_LIST = 'REFERENCES_ALLOCATION_LIMIT_LIST';\r\nexport const SET_ACCOUNT_READY_FOR_PAYMENT = 'SET_ACCOUNT_READY_FOR_PAYMENT';\r\nexport const SET_USER_LOCALIZATION = 'SET_USER_LOCALIZATION';\r\n\r\n// client numbers\r\nexport const SET_ACCOUNT_TRUNKS_LOADING_CLIENT = 'SET_ACCOUNT_TRUNKS_LOADING_CLIENT';\r\nexport const SET_ACCOUNT_TRUNKS_CLIENT = 'SET_ACCOUNT_TRUNKS_CLIENT';\r\nexport const SET_UPLOAD_TRUNK_NUMBER_LOADING = 'SET_UPLOAD_TRUNK_NUMBER_LOADING';\r\n\r\n// client test calls\r\nexport const TEST_CALLS_DIALER = 'TEST_CALLS_DIALER';\r\nexport const LOCAL_STORAGE_TEST_CALLS_FILTERS_DIALER = 'testCallsTableFilterObject';\r\nexport const LOCAL_STORAGE_TEST_CALLS_PER_PAGE_DIALER = 'testCallsPerPage';\r\n\r\n// client live calls\r\nexport const LIVE_CALLS_DIALER = 'LIVE_CALLS_DIALER';\r\nexport const LOCAL_STORAGE_LIVE_CALLS_FILTERS_DIALER = 'liveCallsTableFilterObject';\r\nexport const LOCAL_STORAGE_LIVE_CALLS_PER_PAGE_DIALER = 'liveCallsPerPage';\r\nexport const LOCAL_STORAGE_LIVE_CALLS_COLUMNS_DIALER = 'liveCallsTableColumns';\r\n\r\n// client CDR\r\nexport const CDR_DIALER = 'CDR_DIALER';\r\nexport const LOCAL_STORAGE_CDR_FILTERS_DIALER = 'cdrTableFilterObject';\r\nexport const LOCAL_STORAGE_CDR_PER_PAGE_DIALER = 'cdrPerPage';\r\nexport const LOCAL_STORAGE_CDR_COLUMNS_DIALER = 'cdrTableColumns';\r\n\r\n// client Traffic\r\nexport const TRAFFIC_STAT_DIALER = 'TRAFFIC_STAT_DIALER';\r\nexport const LOCAL_STORAGE_TRAFFIC_STAT_FILTERS_DIALER = 'tsTableFilterObject';\r\nexport const LOCAL_STORAGE_TRAFFIC_STAT_PER_PAGE_DIALER = 'tsPerPage';\r\nexport const LOCAL_STORAGE_TRAFFIC_STAT_COLUMNS_DIALER = 'tsTableColumns';\r\n\r\n// client price\r\nexport const PRICE_DIALER = 'PRICE_DIALER';\r\nexport const LOCAL_STORAGE_PRICE_FILTERS_DIALER = 'priceTableFilterObject';\r\nexport const LOCAL_STORAGE_PRICE_PER_PAGE_DIALER = 'pricePerPage';\r\nexport const SET_LOADING_PRICE_ALLOCATED_NUMBERS_DIALER = 'price::SET_LOADING_PRICE_ALLOCATED_NUMBERS';\r\n\r\n// client accesses\r\nexport const ACCESS_LIST_DIALER = 'ACCESS_LIST_DIALER';\r\nexport const LOCAL_STORAGE_ACCESSES_FILTERS_DIALER = 'accessesTableFilterObject';\r\nexport const LOCAL_STORAGE_ACCESSES_PER_PAGE_DIALER = 'accessesPerPage';\r\nexport const SET_LOADING_ACCESS_ALLOCATED_NUMBERS_DIALER = 'access_list::SET_LOADING_ACCESS_ALLOCATED_NUMBERS';\r\n\r\n// cli\r\nexport const CLI_DIALER = 'CLI_DIALER';\r\nexport const LOCAL_STORAGE_CLI_FILTERS_DIALER = 'cliTableFilterObject';\r\n\r\n// Api page\r\nexport const API_PAGE_DIALER = 'API_PAGE_DIALER';\r\nexport const LOCAL_STORAGE_API_KEY_DIALER = 'apiPageKey';\r\n\r\n\r\n// PAYMENT MANAGEMENT HAWALA\r\nexport const HAWALA_PAYMENT_MININUM = 0.01;\r\nexport const HAWALA_NOT_RECOMMENDET_PAYMENT = 100;","import {ALERT_DISPLAY_DURATION} from \"const\";\r\nimport {Alert} from 'rsuite';\r\n\r\nAlert.config({duration: ALERT_DISPLAY_DURATION});","import {createBrowserHistory} from 'history';\r\n\r\nexport default createBrowserHistory({\r\n});","export const createAction =  (type) => (items) => ({\r\n    type,\r\n    payload: items\r\n});\r\n","import {\r\n    SET_ROLES\r\n} from '../const/';\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from  './defaults';\r\n\r\nexport const setRoles = createAction(SET_ROLES);","export const formatDateApi = (datestr) => {\r\n    return  datestr.\r\n            replace(/T/, ' ').\r\n            replace(/-/g, '/').\r\n            replace(/\\..+/, '')\r\n            // .\r\n            // slice(0,-3);\r\n}\r\n\r\n\r\nexport const  formatDateApiWithoutTime  = (datestr) => {\r\n    return  datestr.\r\n            replace(/T/, ' ').\r\n            replace(/-/g, '.').\r\n            // replace(/\\..+/, '')\r\n            slice(0,-9);\r\n};\r\n\r\nexport const splitList = (str) => {\r\n    const replaseStr = str.replace( /,/g,' ')\r\n        .replace( /\\r/g,' ')\r\n        .replace( /\\n/g,' ');\r\n    return replaseStr.split(' ').filter( s => s !== \"\");\r\n};\r\n\r\nexport const convertDataInColumn = (data, key, filter) => {\r\n    return data.map(column => {\r\n        if (column.hasOwnProperty(key)) {\r\n            return filter(column[key], column, key)\r\n        } else {\r\n            return column\r\n        }\r\n    })\r\n};","export const CDR_LIST_METHOD = 'cdr_full:get_list_admin';\r\nexport const TRAFFIC_REPORTS_METHOD = 'cdr_full:group_get_list_admin';\r\n\r\nexport const AUTH_NUMBERS_GET_LIST = 'auth_number:get_list';\r\nexport const AUTH_NUMBERS_ADD_UPLOAD = 'auth_number:add_upload';\r\nexport const AUTH_NUMBERS_ADD = 'auth_number:create';\r\nexport const AUTH_NUMBERS_EDIT = 'auth_number:modify';\r\nexport const AUTH_NUMBERS_DELETE = 'auth_number:remove';\r\n\r\nexport const REFERENCES_ADMIN = 'references_admin';\r\nexport const REFERENCES_CLIENT = 'references_client';\r\nexport const REFERENCES_FOR_REPORTS_METHOD = 'references_admin_report';\r\nexport const REFERENCES_ALL_METHOD = 'references_all';\r\n\r\nexport const ACCOUNT_USER_MODIFY_BY_SELF = 'account_user:modify_by_self';\r\nexport const ACCOUNT_USER_MODIFY_PASSWORD_BY_SELF = 'account_user:modify_password_by_self';\r\nexport const SET_REALTIME_PAYMENT_STATUS = 'account_user:get_realtime_status';\r\n\r\nexport const ACCOUNT_USER_GET_REALTIME_STATUS = 'account_user:get_realtime_status';\r\n\r\n/*Service plan methods*/\r\nexport const SP_CHANGE_RATE_METHOD = 'service_plan_price:change_rate';\r\nexport const SP_PRICE_NEW_SUBDESTINATION_METHOD = 'service_plan_price:new_subdestination';\r\n\r\nexport const ACCOUNT_CREATE_METHOD = 'account:create';\r\nexport const ACCOUNT_SETTINGS_MODIFY_API = 'account_setting:modify';\r\n\r\n// Payments API\r\nexport const PAYMENT_REQUEST_LIST_API = 'payment_request:get_list';\r\nexport const PAYMENT_LIST_API = 'payment__get_list_by_admin';\r\nexport const INVOICE_LIST_API = 'invoice__get_list_by_admin';\r\nexport const PAYMENT_REQUEST_CREATE_API = 'payment_request:create';\r\nexport const PAYMENT_REQUEST_CANCEL_API = 'payment_request:cancel';\r\nexport const PAYMENT_REQUEST_APPROVE_API = 'payment_request:approve';\r\nexport const PAYMENT_REQUEST_HAWALA_GET_LIST_API = 'payment_request__hawala_get_list';\r\n\r\nexport const PAYMENT_LIST_DIALER_API = 'payment__get_list';\r\nexport const INVOICE_LIST_DIALER_API = 'invoice__get_list';\r\n\r\n// Payment Details API\r\nexport const PAYMENT_DETAIL_LIST_API = 'payment_detail:get_list';\r\nexport const PAYMENT_DETAIL_GET_API = 'payment_detail:get';\r\nexport const PAYMENT_DETAIL_CREATE_API = 'payment_detail:create';\r\nexport const PAYMENT_DETAIL_MODIFY_API = 'payment_detail:modify';\r\nexport const PAYMENT_DETAIL_REMOVE_API = 'payment_detail:remove';\r\nexport const PAYMENT_DETAIL_CONFIRM_API = 'payment_detail:confirm';\r\nexport const PAYMENT_DETAIL_CONFIRM_STATUS_API = 'payment_detail_confirm_status';\r\n\r\n// Templates\r\nexport const TEMPLATE_GET = 'template:get';\r\n\r\n// Access Exception List\r\nexport const ACCESS_EXCLUSION_LIST = 'access_list_exclusion:get_list';\r\n\r\n// SIM Traffic Ranges\r\nexport const SIM_TRAFFIC_RANGES_GET_LIST = 'price_range_priority:get_list';\r\nexport const SIM_TRAFFIC_RANGES_ADD_NEW = 'price_range_priority:create';\r\nexport const SIM_TRAFFIC_RANGES_GET_POSSIBLE_LIST = 'price_range_priority:subdestination_code_get_list';\r\nexport const SIM_TRAFFIC_RANGES_REMOVE = 'price_range_priority:remove';\r\n\r\n// Blocked destinations\r\nexport const BLOCKED_DESTINATIONS_GET_LIST_API = 'allocation_block:get_list';\r\nexport const BLOCKED_DESTINATIONS_CREATE_API = 'allocation_block:create';\r\nexport const BLOCKED_DESTINATIONS_MODIFY_API = 'allocation_block:modify';\r\nexport const BLOCKED_DESTINATIONS_MODIFY_LIST_API = 'allocation_block:modify_list';\r\nexport const BLOCKED_DESTINATIONS_REMOVE_API = 'allocation_block:remove';\r\n\r\n// Global setting\r\nexport const GLOBAL_SETTING_GET_LIST_API = 'global_setting:get_list';\r\nexport const GLOBAL_SETTING_CREATE_API = 'global_setting:create';\r\nexport const GLOBAL_SETTING_MODIFY_API = 'global_setting:modify';\r\n\r\n// Google OTP Quarantined ranges\r\nexport const GOOGLE_OTP_QUARANTINED_GET_LIST_API = 'price_range_quarantine:get_list';\r\nexport const GOOGLE_OTP_QUARANTINED_REMOVE_NUMBERS_API = 'price_range_quarantine:remove';\r\n\r\n// Google OTP Allocation\r\nexport const GOOGLE_OTP_ALLOCATION_GET_LIST_API = 'otp_allocation2:get_list';\r\nexport const GOOGLE_OTP_ALLOCATION_CREATE_API = 'otp_allocation2:create';\r\nexport const GOOGLE_OTP_ALLOCATION_MODIFY_API = 'otp_allocation2:modify';\r\nexport const GOOGLE_OTP_ALLOCATION_REMOVE_API = 'otp_allocation2:remove';\r\n\r\n// Price ranges\r\nexport const PRICE_RANGE_GENERATE_BY_SDE_API = 'price_range__generate_by_sde';\r\nexport const PRICE_RANGE_GENERATE_BY_TEMPLATE_API = 'price_range__generate_by_templates';\r\nexport const PRICE_RANGE_GENERATE_BY_NUMBER_LIST_API = 'price_range__generate_by_number_list';\r\n\r\nexport const PRICE_RANGE_DELETE_API = 'price_range__delete';\r\nexport const PRICE_RANGE_DELETE_NOT_ALLOCATED_API = 'price_range__delete_not_allocated';\r\n\r\n// Action logs\r\nexport const ACTION_LOGS_GET_LIST_API = 'log_action:get_list';\r\nexport const ACTION_LOGS_GET_REFERENCES_API = 'log_action:references';\r\n\r\n// AM Activities\r\nexport const AM_ACTIVITIES_LIST_API = 'log_action:statistic_by_account_user_manager';\r\nexport const AM_ACTIVITIES_DATE_LIST_API = 'log_action:statistic_by_account_user_manager_date';\r\n\r\n// Account Managers\r\nexport const ACCOUNT_MANAGERS_LIST_API = 'account_manager:get_list';\r\nexport const ACCOUNT_MANAGERS_REFERENCES_API = 'account_manager:references';\r\nexport const ACCOUNT_MANAGERS_MODIFY_API = 'account_manager:modify';\r\nexport const ACCOUNT_MANAGERS_REMOVE_API = 'account_manager:remove';\r\nexport const ACCOUNT_MANAGERS_CREATE_API = 'account_manager:create';\r\nexport const ACCOUNT_MANAGERS_BIL_API = 'account_manager_bil__get_list';\r\n\r\n// Special limit terms\r\nexport const PRICE_RANGE_QUARANTINE_SETTING_GET_LIST_API = 'price_range_quarantine_setting:get_list';\r\nexport const PRICE_RANGE_QUARANTINE_SETTING_CREATE_API = 'price_range_quarantine_setting:create';\r\nexport const PRICE_RANGE_QUARANTINE_SETTING_MODIFY_API = 'price_range_quarantine_setting:modify';\r\nexport const PRICE_RANGE_QUARANTINE_SETTING_REMOVE_API = 'price_range_quarantine_setting:remove';\r\n\r\n// Account note\r\nexport const ACCOUNT_NOTE_GET_LIST_API = 'account_note:get_list';\r\nexport const ACCOUNT_NOTE_CREATE_API = 'account_note:create';\r\nexport const ACCOUNT_NOTE_DEACTIVATE_API = 'account_note:deactivate';\r\n\r\nexport const REGISTRATION_CREATE_API = 'registration:create';\r\nexport const REGISTRATION_GET_LIST_API = 'registration:get_list';\r\nexport const REGISTRATION_GET_COUNT_API = 'registration:get_count';\r\nexport const REGISTRATION_APPROVE_API = 'registration:approve';\r\nexport const REGISTRATION_REJECT_API = 'registration:reject';\r\nexport const REGISTRATION_ACCOUNT_API = 'registration:account';\r\n\r\n\r\n// client auth\r\nexport const ACCOUNT_GET_DIALER_API = 'account:get';\r\nexport const ACCOUNT_GET_TEST_DIALER_API = 'account:get_by_test_user';\r\n\r\n// client numbers\r\nexport const TRUNK_GET_LIST_API = 'trunk:get_list';\r\n\r\n// client allocation\r\nexport const ALLOCATION_PRICE_RANGE_DIALER_API = 'allocation:price_range';\r\nexport const ALLOCATION_NUMBER_LIST_DIALER_API = 'allocation:number_list_by_account_user';\r\nexport const ALLOCATION_TEMPLATE_DIALER_API = 'allocation:template_by_account_user';\r\nexport const ALLOCATION_GOOGLE_OTP_DIALER_API = 'allocation:google_otp_by_account_user';\r\nexport const ALLOCATION_SUBDESTINATION_DIALER_API = 'allocation:subdestination_by_account_user';\r\n\r\n// test calls\r\nexport const TEST_CALLS_LIST_DIALER_API = 'cdr_full:test_get_list';\r\n\r\n// live calls\r\nexport const LIVE_CALLS_LIST_DIALER_API = 'live_call:get_list_by_account_user';\r\n\r\n// cdr\r\nexport const CDR_LIST_DIALER_API = 'cdr_full:get_list';\r\nexport const TRAFFIC_STAT_LIST_DIALER_API = 'cdr_full:group_get_list';\r\n\r\n// price\r\nexport const RATECARD_LIST_ACCOUNT_DIALER = 'ratecard_standart:get_account_price';\r\nexport const RATECARD_LIST_OTP_ACCOUNT_DIALER = 'ratecard_otp:get_account_price';\r\nexport const RATECARD_LIST_DEFAULT_DIALER = 'ratecard_standart:get_default_price';\r\nexport const RATECARD_LIST_OTP_DEFAULT_DIALER = 'ratecard_otp:get_default_price';\r\n\r\n// access\r\nexport const ACCESS_LIST_ACCOUNT_PRICE_DIALER_API = 'access_list__get_list:account_price';\r\nexport const ACCESS_LIST_OTP_ACCOUNT_PRICE_DIALER_API = 'access_list_otp__get_list:account_price';\r\nexport const ACCESS_LIST_DEFAULT_PRICE_DIALER_API = 'access_list__get_list:default_price';\r\nexport const ACCESS_LIST_OTP_DEFAULT_PRICE_DIALER_API = 'access_list_otp__get_list:default_price';\r\n\r\n// cli\r\nexport const CLI_LIST_DIALER_API = 'cdr_short__cli_lookup';\r\nexport const CLI_LIST_OTP_DIALER_API = 'cdr_short__cli_lookup_otp';\r\n\r\n// api page\r\nexport const API_PAGE_LIST_DIALER_API = 'account_apikey:get_list';\r\nexport const API_GENERATE_NEW_DIALER_API = 'account_apikey:generate';\r\n\r\n// IVR\r\nexport const IVR_SOUND_LIST_API = 'ivr_sound:get_list'; // файл загружается через multipart/form-data обычный json передается через секцию json\r\nexport const IVR_SOUND_CREATE_API = 'ivr_sound:create';\r\nexport const IVR_SOUND_MODIFY_API = 'ivr_sound:modify'; // файл загружается через multipart/form-data обычный json передается через секцию json\r\nexport const IVR_SOUND_REMOVE_API = 'ivr_sound:remove';\r\n\r\nexport const IVR_LIST_API = 'ivr:get_list';\r\nexport const IVR_CREATE_API = 'ivr:create';\r\nexport const IVR_MODIFY_API = 'ivr:modify';\r\nexport const IVR_REMOVE_API = 'ivr:remove';\r\n\r\nexport const IVR_ACTION_TYPE_LIST_API = 'ivr:get_ivr_action_type_list'; // типы действий\r\n\r\nexport const IVR_CLI_LIST_API = 'ivr_cli:get_list';\r\nexport const IVR_CLI_CREATE_MODIFY_API = 'ivr_cli:create_modify';\r\nexport const IVR_CLI_REMOVE_API = 'ivr_cli:remove';\r\n\r\nexport const IVR_DEFAULT_API = 'ivr:get_default';\r\nexport const IVR_SET_DEFAULT_API = 'ivr:set_default';\r\nexport const IVR_RECALC_ALL_API = 'ivr__recalc_all';\r\nexport const IVR_LISTEN_API = 'ivr:listen';","import {\r\n    ACCOUNTS as PREFIX,\r\n    VIEW_ACCOUNT,\r\n    SET_VIEW_ACCOUNT,\r\n    ADD_TRUNK_ACCOUNT,\r\n    SET_ALLOCATED_ACCOUNT,\r\n    SET_TRUNK_ACCOUNT,\r\n    SET_TRUNK_ACCOUNT_LOADING,\r\n    SET_ALLOCATED_ACCOUNT_LOADING,\r\n    SET_USERS_ACCOUNT,\r\n    SET_USERS_ACCOUNT_LOADING,\r\n    SET_VIEW_ACCOUNT_AFTER_DELETE,\r\n    DESC_SORT,\r\n    SET_INFO_ACCOUNT,\r\n    SET_LOADING_INFO,\r\n    SET_EDIT_ERROR,\r\n    SET_EDIT_ERROR_MESSAGE,\r\n    SET_ACCOUNT_ACCESS_LIST_FILTERS_LIST,\r\n    SET_ACCOUNT_ACCESS_LIST_FILTERS_LIST_LOADING,\r\n    SET_ACCESS_LIST_NOTIFICATION_SETTINGS,\r\n    UNSET_ACCESS_LIST_NOTIFICATION_SETTINGS,\r\n    DEFAULT_AUTH_PATH_ADMIN,\r\n    SET_CURRENT_TRUNK_ID,\r\n    SET_LIMIT_MODIFIED,\r\n    SET_REDIRECT_TAB\r\n} from '../const/'\r\nimport {Alert} from 'rsuite';\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from  './defaults';\r\nimport { formatDateApiWithoutTime } from '../utils/format';\r\nimport {\r\n    ACCOUNT_USER_GET_REALTIME_STATUS,\r\n    ACCOUNT_USER_MODIFY_BY_SELF,\r\n    SET_REALTIME_PAYMENT_STATUS\r\n} from '../const/apiMethods'\r\nimport {LOCAL_STORAGE_USER_INFO} from '../const/localStorageKeys';\r\nimport {ACCOUNT_CREATE_METHOD} from \"const/apiMethods\";\r\nimport {SET_ACCESS_LIST_FILTERS, SET_ACCESS_LIST_FILTERS_LOADING, SET_CURRENT_RANGE_NUMBER, SET_DEFAULT_FORM_CREATE_ACCOUNT} from 'const';\r\nimport history from 'config/history';\r\nimport store from \"../store/index\";\r\n\r\n\r\n\r\nconst setAccounts = createAction('SET_ITEMS_'+PREFIX);\r\nconst setCurrentApiRequestStr = createAction('SET_CURRENT_API_REQUEST_STR_' + PREFIX);\r\n\r\nconst setLoading = createAction('SET_LOADING_'+PREFIX);\r\nconst viewAccount = createAction(VIEW_ACCOUNT);\r\nconst setViewAccount = createAction(SET_VIEW_ACCOUNT);\r\n\r\nconst setEditError = createAction(SET_EDIT_ERROR);\r\nconst setEditErrorMessage = createAction(SET_EDIT_ERROR_MESSAGE);\r\n\r\nconst setViewAccountTrunk = createAction(SET_TRUNK_ACCOUNT);\r\nconst setViewAccountTrunkAfterDelete = createAction(SET_VIEW_ACCOUNT_AFTER_DELETE)\r\n\r\nconst setViewAccountTrunkLoading = createAction(SET_TRUNK_ACCOUNT_LOADING);\r\nconst setViewAccountAllocated = createAction(SET_ALLOCATED_ACCOUNT);\r\nconst setViewAccountAllocatedLoading = createAction(SET_ALLOCATED_ACCOUNT_LOADING);\r\nconst addViewAccountTrunk = createAction(ADD_TRUNK_ACCOUNT);\r\n\r\nconst setViewAccessListFiltersLoading = createAction(SET_ACCESS_LIST_FILTERS_LOADING);\r\nconst setViewAccessListFilters = createAction(SET_ACCESS_LIST_FILTERS);\r\n\r\nconst setViewAccountUsers = createAction(SET_USERS_ACCOUNT);\r\nconst setViewAccountUsersLoading = createAction(SET_USERS_ACCOUNT_LOADING);\r\n\r\nconst setInfoAccount = createAction(SET_INFO_ACCOUNT);\r\nconst setLoadingInfo = createAction(SET_LOADING_INFO);\r\n\r\nconst setAccountAccessListFiltersList = createAction(SET_ACCOUNT_ACCESS_LIST_FILTERS_LIST);\r\nconst setAccountAccessListFiltersListLoading = createAction(SET_ACCOUNT_ACCESS_LIST_FILTERS_LIST_LOADING);\r\n\r\nconst setAccessListNotificationSettings = createAction(SET_ACCESS_LIST_NOTIFICATION_SETTINGS);\r\nconst unsetAccountAccessListNotificationSettings = createAction(UNSET_ACCESS_LIST_NOTIFICATION_SETTINGS);\r\n\r\nconst dispatchCurrentTrunkId = createAction(SET_CURRENT_TRUNK_ID);\r\nconst dispatchCurrentRangeNumber = createAction(SET_CURRENT_RANGE_NUMBER);\r\n\r\nconst setModifiedLimit = createAction(SET_LIMIT_MODIFIED);\r\nconst setDefaultFormCreateAccountAction = createAction(SET_DEFAULT_FORM_CREATE_ACCOUNT);\r\n\r\nconst setRedirectTab = createAction(SET_REDIRECT_TAB);\r\n\r\nconst setRealtimePaymentStatus = createAction(SET_REALTIME_PAYMENT_STATUS);\r\n\r\nexport const setAccountsCurrentApiRequestStr = (str) => (dispatch) => {\r\n    dispatch( setCurrentApiRequestStr(str) );\r\n}\r\n\r\nexport const unsetAccessListNotificationSettings = () => (dispatch) => {\r\n    dispatch( unsetAccountAccessListNotificationSettings() );\r\n};\r\n\r\nexport const getAccounts = (filters = null) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n\r\n    api('account:get_list', {\r\n        filter: filters || {},\r\n        add: {account_note_last: {}}\r\n    }).then(({account_list = []}) => {\r\n        dispatch(setAccounts({\r\n            items: account_list.map(\r\n                x => ({\r\n                    ...x,\r\n                    name: x.name || '',\r\n                    account_manager: x.account_manager || {},\r\n                    closed: !x.active || x.deleted,\r\n                    balance: x.BALANCE || 0,\r\n                    invoice_balance: x.BALANCE_INV || 0\r\n                })\r\n            ),\r\n            filter: filters\r\n        }));\r\n\r\n    }).finally(() => dispatch(setLoading(false)));\r\n};\r\n\r\nexport const getAccount = (id, getFromApi = true, redirectOnError = false) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n\r\n    if (!getFromApi) {\r\n        dispatch(viewAccount(id));\r\n    } else {\r\n        api('account:get', {target: {account_id: id}})\r\n            .then((response) => {\r\n                // debugger;\r\n               \r\n                if (response === undefined || !response.account) {\r\n                    dispatch(setLoading(false));\r\n                    \r\n                    if (redirectOnError)\r\n                        history.push(DEFAULT_AUTH_PATH_ADMIN);\r\n                    \r\n                    return;\r\n                }\r\n                    \r\n                const {account = {}} = response || {};\r\n                dispatch(\r\n                    setViewAccount({\r\n                        ...account,\r\n                        permission_list: account.permission_list || [],\r\n                        trunk_notificaton: account.trunk_notificaton || []\r\n                    }));\r\n            })\r\n            .finally(() => dispatch(setLoading(false)));\r\n    }\r\n};\r\n\r\nexport const getAccessListFilter = (id, filter, page = 1, per_page, sort = {}) => (dispatch) => {\r\n    dispatch(setViewAccessListFiltersLoading(true));\r\n\r\n    api('access:get_list', {target: {account_id: id}, filter, page, per_page, sort})\r\n        .then(({access_list}) => dispatch(setViewAccessListFilters(access_list)))\r\n};\r\n\r\nexport const getAccountTrunk = (id, callback) => (dispatch) => {\r\n    dispatch(setViewAccountTrunkLoading(true));\r\n\r\n    dispatch(setViewAccountAllocated({\r\n        items: [],\r\n        count: 0,\r\n        page: 1\r\n    }));\r\n\r\n    api('trunk:get_list',{target:  {account_id: id }})\r\n        .then( (r) => {\r\n            if (r === undefined) {\r\n                return;\r\n            }\r\n            dispatch( setViewAccountTrunk(\r\n                (r.trunk_list || []).map( trunk => ({\r\n                    ...trunk,\r\n                    type: trunk.is_default_term_point\r\n                        ? 'Default IVR'\r\n                        : `${trunk.protocol_name}/${trunk.ip}:${trunk.port} ${trunk.tprefix}`\r\n                }))\r\n            ));\r\n             callback && callback(r.trunk_list || [])\r\n            }\r\n        )\r\n        .finally(() => dispatch(setViewAccountTrunkLoading(false)));\r\n};\r\n\r\nexport const createAccountTrunk = (id, data) => (dispatch) => {\r\n    api('trunk:create', {\r\n        target: {account_id: id},\r\n        sp_key: data.sp_key,\r\n        prt_key: data.prt_key,\r\n        ...data\r\n    }).then(({trunk}) => trunk && dispatch(addViewAccountTrunk({...trunk, ...data})))\r\n};\r\n\r\nexport const editAccountTrunk = (id, trunk_id, data) => (dispatch) => {\r\n    api('trunk:modify', {\r\n        target: {account_id: id, trunk_id: trunk_id},\r\n        sp_key: data.sp_key,\r\n        prt_key: data.prt_key,\r\n        ...data\r\n    }).then(({trunk}) => trunk && dispatch(addViewAccountTrunk({...trunk, ...data})))\r\n};\r\n\r\nexport const removeAccountTrunk = (id, trunk_id, trunk1_id) => (dispatch) => {\r\n    dispatch(setViewAccountTrunkLoading(true));\r\n\r\n    api('trunk:get_list',{target:  {account_id: id }})\r\n        .then( ({ trunk_list = [] }) => {\r\n            if (trunk1_id) {\r\n                api('trunk:remove', {target: {account_id: id, trunk_id, trunk1_id}}).then(({trunk}) => {\r\n                    dispatch(setViewAccountTrunkAfterDelete(trunk.id))\r\n                })\r\n            } else {\r\n                api('trunk:remove', {target: {account_id: id, trunk_id}}).then(({trunk}) => {\r\n                    dispatch(setViewAccountTrunkAfterDelete(trunk.id))\r\n                });\r\n            }\r\n        })\r\n        .finally(() => dispatch(setViewAccountTrunkLoading(false)));\r\n\r\n};\r\n\r\nexport const getAccountAllocatedNumbers = (account_id, trunk_id, group, filter, page = 1, per_page, sort = {}) => (dispatch) => {\r\n    dispatch(setViewAccountAllocatedLoading(true));\r\n\r\n    let sort1, sort1_desc;\r\n\r\n    if (sort.column) {\r\n        sort1 = sort.column === 'name' ? 'price_range_name' : sort.column;\r\n        sort1_desc = sort.type && sort.type === DESC_SORT;\r\n    }\r\n\r\n    localStorage.setItem('allocatedNumbersPerPage', per_page);\r\n\r\n    api('trunk_number__get_list',{target:{trunk_id} , group, filter, page, per_page, sort1, sort1_desc}).then(\r\n        ({\r\n             trunk_number_list,\r\n             group_price_range_list,\r\n             group_subdestination_list,\r\n             row_count,\r\n             group_price_range_count,\r\n             group_subdestination_count,\r\n             trunk_number_count,\r\n             group_price_range_number_count,\r\n             group_subdestination_number_count\r\n         }) => dispatch(setViewAccountAllocated(\r\n            {\r\n                items: (trunk_number_list || group_price_range_list || group_subdestination_list || []).map(\r\n                    x => {\r\n                        if(group_price_range_list) {\r\n                            x.pr_key = x.price_range.pr_key;\r\n                            x.sde_key = x.price_range.sde_key;\r\n                            x.sp_key = x.price_range.sp_key;\r\n                            x.subdestination_name = x.price_range.subdestination_name;\r\n                        }\r\n\r\n                        if(!x.subdestination_name){\r\n                            x.subdestination_name = x.sde_name;\r\n                        }\r\n\r\n                        if(x.start_date && x.end_date)\r\n                            x.date = formatDateApiWithoutTime(x.start_date) + '-' + formatDateApiWithoutTime(x.end_date);\r\n                        if(x.price_range)\r\n                            x.name = x.price_range.name;\r\n\r\n                        if(x.price_ranges && x.trunk_numbers)\r\n                            x.allocated_numbers_and_ranges = x.trunk_numbers +'/'+ x.price_ranges;\r\n\r\n                        return x;\r\n                    }\r\n                ),\r\n                count: row_count || group_price_range_count || group_subdestination_count || 0,\r\n                trunk_number_count: trunk_number_count || group_price_range_number_count || group_subdestination_number_count,\r\n                page,\r\n                per_page\r\n            }\r\n            )))\r\n        .finally(() => dispatch(setViewAccountAllocatedLoading(false)));\r\n};\r\n\r\nexport const getAccountUsers = (account_id) => (dispatch) => {\r\n    dispatch(setViewAccountUsersLoading(true));\r\n    console.log(account_id);\r\n    api('account_user:get_list', {target: {account_id}} )\r\n        .then( (r) => {\r\n            if (r === undefined)\r\n                return;\r\n            dispatch(setViewAccountUsers(r.account_user_list || []))\r\n        })\r\n        .finally(() => dispatch(setViewAccountUsersLoading(false)));\r\n\r\n};\r\n\r\nexport const createAccount = (params) => dispatch => {\r\n    api(ACCOUNT_CREATE_METHOD, params).then( data => {\r\n        // console.log(data)\r\n    } )\r\n    // api('trunk_number__get_list',{target:  {account_id: id , trunk_id: trunk_id }}).then( ({ trunk_list = [] }) => dispatch(setViewAccountAllocated(trunk_list || [])))\r\n    // api('trunk_number__get_list',{target:  {account_id: id , trunk_id: trunk_id }}).then( responce => console.log(responce))\r\n};\r\n\r\nexport const modifyAccountRequest = ({name, surname, email, phone, password, old_password}) => (dispatch) => {\r\n    const user = localStorage.getItem(LOCAL_STORAGE_USER_INFO);\r\n    const userInfo = user && JSON.parse(user);\r\n\r\n    const params = {\r\n        ...(name ? {name: name} : {}),\r\n        ...(surname ? {surname: surname} : {}),\r\n        ...(phone ? {phone: phone} : {}),\r\n        ...(email ? {email: email} : {}),\r\n    };\r\n\r\n    const dataToSave = {...userInfo, ...params};\r\n\r\n    api(ACCOUNT_USER_MODIFY_BY_SELF, {\r\n        ...params,\r\n        ...(password ? {password: password} : {}),\r\n        old_password\r\n    }, true)\r\n        .then(response => {\r\n            if (response) {\r\n                dispatch(setEditError(false));\r\n                if (response && response.account_user) {\r\n                    const lang = store.getState().auth.lang;\r\n\r\n                    Alert.success(lang === \"en\" \r\n                        ? 'Profile data has successfully changed!' \r\n                        : \"تم تغيير بيانات الملف الشخصي بنجاح!\", 15000);\r\n                    \r\n                    dispatch(setInfoAccount({\r\n                        name: userInfo.name,\r\n                        surname: userInfo.surname,\r\n                        phone: userInfo.phone,\r\n                        email: userInfo.email,\r\n                        ...params\r\n                    }));\r\n                    localStorage.setItem(LOCAL_STORAGE_USER_INFO, JSON.stringify(dataToSave))\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            if (error.response && error.response.data.error.data.old_password) {\r\n                Alert.error('Wrong old password', 15000);\r\n\r\n                dispatch(setEditErrorMessage(\"Wrong old password\"))\r\n            }\r\n        })\r\n};\r\n\r\nexport const getRealtimePaymentStatus = (id) => (dispatch) => {\r\n    api(ACCOUNT_USER_GET_REALTIME_STATUS,{\r\n        target: {\r\n            account_user_id: id\r\n        }\r\n    }).then(response => {\r\n        dispatch(setRealtimePaymentStatus(\r\n            response.realtime_status\r\n            && response.realtime_status.hasOwnProperty('payment_not_viewed_count')\r\n            && response.realtime_status.payment_not_viewed_count) )\r\n    });\r\n};\r\n\r\n/* Account:AccessListFilters */\r\n\r\n// thunk \"Access List Filters\" get items\r\nexport const getAccessListFiltersItems = (id) => (dispatch) => {\r\n    dispatch( setAccountAccessListFiltersListLoading() );\r\n    api('access_list_filter:get_list',\r\n        {target: {account_id: id}}\r\n    ).then( ({access_list_filter_list}) => {\r\n        let payload = access_list_filter_list;\r\n        dispatch( setAccountAccessListFiltersList(payload) );\r\n    } )\r\n};\r\n\r\n// thunk \"Access List Filters\" create new item\r\nexport const createNewAccessListFiltersItem = (id, data) => (dispatch) => {\r\n    dispatch( setAccountAccessListFiltersListLoading() );\r\n\r\n    api(\r\n        'access_list_filter:create',\r\n        {\r\n            target: {\r\n                account_id: id\r\n            },\r\n            ...data,\r\n        }\r\n    ).then( response => {\r\n        dispatch( setAccountAccessListFiltersListLoading() );\r\n        dispatch( getAccessListFiltersItems(id) );\r\n    } );\r\n};\r\n\r\n\r\n// thunk \"Access List Filters\" modify item\r\nexport const modifyAccessListFiltersItem = (accountId, alf_key, data) => async (dispatch) => {\r\n\r\n    let promise = await api(\r\n        'access_list_filter:modify',\r\n        {\r\n            target: {\r\n                alf_key: alf_key\r\n            },\r\n            ...data,\r\n        }\r\n    )\r\n\r\n    return promise;\r\n};\r\n\r\n\r\n\r\n// thunk \"Access List Filters\" remove item\r\nexport const removeAccessListFiltersItem = (id, data) => (dispatch) => {\r\n    api('access_list_filter:remove',{\r\n        target: {\r\n            alf_key: data['alf_key']\r\n        }\r\n    });\r\n};\r\n\r\n// thunk \"Notifications\" get settings\r\nexport const getAccessListNotificationSettings = (id) => (dispatch) => {\r\n    api('access_list_notification:get',{\r\n        target: {\r\n            account_id: id\r\n        }\r\n    }).then(response => {\r\n        dispatch( setAccessListNotificationSettings(response.access_list_notification) )\r\n    });\r\n};\r\n\r\n\r\n// thunk \"Notifications\" modify settings\r\nexport const modifyAccessListNotificationSettings = (id, data) => async (dispatch) => {\r\n    let response = await api('access_list_notification:modify',{\r\n        target: {\r\n            account_id: id,\r\n        },\r\n        ...data\r\n    });\r\n\r\n    dispatch( getAccessListNotificationSettings(id) )\r\n\r\n    return response;\r\n};\r\n\r\nexport const setCurrentTrunkId = (id) => (dispatch) => {\r\n    dispatch(dispatchCurrentTrunkId(id))\r\n};\r\n\r\nexport const setCurrentRangeNumber = (number) => (dispatch) => {\r\n    dispatch(dispatchCurrentRangeNumber(number))\r\n};\r\n\r\nexport const setAllocationRestrictions = (id, data, key) => (dispatch) => {\r\n    api('account_setting:modify', {\r\n        target: {\r\n            account_id: id\r\n        },\r\n        ...data\r\n    }).then(\r\n        (response) => {\r\n            if (response) {\r\n                dispatch(setModifiedLimit(key));\r\n            }\r\n            if (Object.keys(response).length && key) {\r\n                Alert.success('Allocation Restrictions has been modified!')\r\n            }\r\n            if (Object.keys(response).length && !key) {\r\n                Alert.warning('Allocation limit has been changed to default!')\r\n            }\r\n        }\r\n    )\r\n};\r\n\r\nexport const setModifiedLimitId = (key) => (dispatch) => {\r\n    dispatch(setModifiedLimit(key))\r\n};\r\n\r\nexport const setDefaultFormCreateAccount = (data) => (dispatch) => {\r\n    dispatch(setDefaultFormCreateAccountAction(data))\r\n};\r\n\r\nexport const onSetRedirectTab = (tab) => (dispatch) => {\r\n    dispatch(setRedirectTab(tab))\r\n};","import {SET_NUMBER_ALLOCATION_MODAL} from '../const/';\r\nimport {createAction} from './defaults';\r\n\r\n\r\nconst setStatusAllocationModal = createAction(SET_NUMBER_ALLOCATION_MODAL);\r\nexport const openAllocationModal = () => (dispatch) => {\r\n    dispatch(setStatusAllocationModal(true));\r\n};\r\nexport const closeAllocationModal = () => (dispatch) => {\r\n    dispatch(setStatusAllocationModal(false));\r\n};","import {\r\n    ACCOUNTS as PREFIX,\r\n    VIEW_ACCOUNT,\r\n    SET_VIEW_ACCOUNT,\r\n    SET_TRUNK_ACCOUNT,\r\n    SET_ALLOCATED_ACCOUNT,\r\n    ADD_TRUNK_ACCOUNT,\r\n    SET_TRUNK_ACCOUNT_LOADING,\r\n    SET_ALLOCATED_ACCOUNT_LOADING,\r\n    SET_VIEW_ACCOUNT_AFTER_DELETE,\r\n    SET_USERS_ACCOUNT,\r\n    SET_USERS_ACCOUNT_LOADING,\r\n    SPECIAL_RATES,\r\n    DEFAULT_PER_PAGE_SMALL,\r\n    SET_ACCESS_LIST_FILTERS_LOADING,\r\n    SET_ACCOUNT_ACCESS_LIST_FILTERS_LIST,\r\n    SET_ACCOUNT_ACCESS_LIST_FILTERS_LIST_LOADING,\r\n    SET_ACCESS_LIST_NOTIFICATION_SETTINGS,\r\n    UNSET_ACCESS_LIST_NOTIFICATION_SETTINGS,\r\n    MODIFY_ACCESS_LIST_NOTIFICATION_SETTINGS, SET_LIMIT_MODIFIED, SET_DEFAULT_FORM_CREATE_ACCOUNT,\r\n    SET_REDIRECT_TAB\r\n} from '../const/'\r\nimport store from '../store/index';\r\nimport {getAccount} from '../actions';\r\nimport {\r\n    SET_ACCESS_LIST_FILTERS,\r\n    SET_EDIT_ERROR,\r\n    SET_EDIT_ERROR_MESSAGE,\r\n    SET_CURRENT_TRUNK_ID, SET_CURRENT_RANGE_NUMBER\r\n} from 'const';\r\nimport {\r\n    SET_REALTIME_PAYMENT_STATUS\r\n} from '../const/apiMethods'\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    accessList: [],\r\n    accessListLoading: false,\r\n    accountView: {},\r\n    accountTrunk:[],\r\n    accountTrunkLoading:false,\r\n    accountAllocated:[],\r\n    accountAllocatedCount: 0,\r\n    accountAllocatedNumbersTotalCount: 0,\r\n    allocatedNumbersPage: 1,\r\n    allocatedNumbersPerPage: +localStorage.getItem('allocatedNumbersPerPage') || DEFAULT_PER_PAGE_SMALL,\r\n    accountAllocatedLoading:false,\r\n    items: [],\r\n    accountUsers: [],\r\n    accountUsersLoading: false,\r\n    allocation_limit: {},\r\n    editError: false,\r\n    editErrorMessage: null,\r\n    ranges: [],\r\n    rangesLoading: false,\r\n\r\n    // Access List Filters data (NOT Access lists data! Be carefully)\r\n    accessListFiltersList: [],\r\n    accessListFiltersListLoading: true,\r\n    accessListNotificationSettings: null,\r\n\r\n    currentRangeNumber: null,\r\n    currentTrunkId: null,\r\n    modifiedLimit: null,\r\n\r\n    currentApiRequestStr: \"\",\r\n    registeredAccount: {},\r\n\r\n    redirectTab: null,\r\n    realtimePaymentStatus: 0\r\n};\r\n\r\nconst viewAccount = (state, id) => {\r\n    const accountView = state.items.find( acc => acc.id === id);\r\n    if(!accountView)\r\n        setTimeout(() => {\r\n            store.dispatch(getAccount(id, true, true))\r\n        }, 0);\r\n    return {...state, accountView: accountView || {}};\r\n};\r\n\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload}) => {\r\n        \r\n        if (payload.filter && payload.filter.str !== state.currentApiRequestStr) {\r\n            return state;\r\n        }\r\n\r\n        return {\r\n            ...state, \r\n            items: payload.items, \r\n            loading: false\r\n        }\r\n    },\r\n    ['SET_CURRENT_API_REQUEST_STR_' + PREFIX]: (state, {payload}) => ({...state, currentApiRequestStr: payload}),\r\n    ['SET_LOADING_'+PREFIX]: (state,{payload}) =>({...state, loading: payload}),\r\n    [VIEW_ACCOUNT]: (state, {payload:id}) => viewAccount(state, id),\r\n    [SET_VIEW_ACCOUNT]: (state, {payload: accountView}) => ({\r\n        ...state, accountView,\r\n        allocation_limit: accountView.allocation_limit,\r\n        loading: false\r\n    }),\r\n    [SET_TRUNK_ACCOUNT]: (state,{payload: accountTrunk}) => ({\r\n        ...state, accountTrunk,\r\n        accountTrunkLoading:false\r\n    }),\r\n    [SET_CURRENT_TRUNK_ID]: (state, {payload: id}) => ({\r\n        ...state, currentTrunkId: id\r\n    }),\r\n    [SET_CURRENT_RANGE_NUMBER]: (state, {payload: number}) => ({\r\n       ...state, currentRangeNumber: number\r\n    }),\r\n    [SET_TRUNK_ACCOUNT_LOADING]: (state,{payload: accountTrunkLoading}) => ({...state, accountTrunkLoading}),\r\n    [SET_ALLOCATED_ACCOUNT]: (state, {payload:{items, count, trunk_number_count, page, per_page}}) => ({\r\n        ...state,\r\n        accountAllocated: items,\r\n        accountAllocatedCount: count,\r\n        accountAllocatedNumbersTotalCount: trunk_number_count,\r\n        allocatedNumbersPage: page,\r\n        allocatedNumbersPerPage: per_page || DEFAULT_PER_PAGE_SMALL,\r\n        accountAllocatedLoading:false\r\n    }),\r\n    [SET_ALLOCATED_ACCOUNT_LOADING]: (state, {payload: accountAllocatedLoading}) => ({...state, accountAllocatedLoading}),\r\n    [ADD_TRUNK_ACCOUNT]: (state,{payload: trunk}) => ({\r\n        ...state,\r\n        accountTrunk: [\r\n            ...state.accountTrunk.filter( x => x.id !== trunk.id ),\r\n            trunk\r\n        ]\r\n    }),\r\n    [SET_VIEW_ACCOUNT_AFTER_DELETE]: (state, {payload: id}) => ({\r\n        ...state,\r\n        accountTrunk: state.accountTrunk.filter(trunkObj=>trunkObj.id !== id),\r\n        accountTrunkLoading:false\r\n    }),\r\n    [SET_USERS_ACCOUNT]: (state, {payload: accountUsers}) => ({\r\n        ...state,\r\n        accountUsers,\r\n        accountUsersLoading:false\r\n    }),\r\n    [SET_USERS_ACCOUNT_LOADING]: (state, {payload: accountUsersLoading}) => ({...state, accountUsersLoading}),\r\n    [SPECIAL_RATES]: (state,{payload}) =>({...state,rates:payload,ratesLoading: false}),\r\n    [SET_EDIT_ERROR]: (state, {payload}) => ({...state, editError: payload, loading: false}),\r\n    [SET_EDIT_ERROR_MESSAGE]: (state, {payload}) => ({...state, editErrorMessage: payload, editError: true, loading: false}),\r\n    [SET_ACCESS_LIST_FILTERS]: (state, {payload}) => ({...state, accessList: payload, accessListLoading: false}),\r\n    [SET_ACCESS_LIST_FILTERS_LOADING]: (state, {payload}) => ({...state, accessListLoading: payload}),\r\n    ['SET_LOADING_'+SPECIAL_RATES]: (state,{payload}) =>({...state,ratesLoading  : payload}),\r\n\r\n    [SET_ACCOUNT_ACCESS_LIST_FILTERS_LIST]: (state, {payload}) => ({\r\n        ...state,\r\n        accessListFiltersList: payload,\r\n        accessListFiltersListLoading: false\r\n    }),\r\n    [SET_ACCOUNT_ACCESS_LIST_FILTERS_LIST_LOADING]: (state, {payload}) => ({...state, accessListFiltersListLoading: true}),\r\n    [SET_ACCESS_LIST_NOTIFICATION_SETTINGS]: (state, {payload}) => {\r\n        return(\r\n            {\r\n                ...state,\r\n                accessListNotificationSettings: {...payload}\r\n            }\r\n        )\r\n    },\r\n    [UNSET_ACCESS_LIST_NOTIFICATION_SETTINGS]: (state) => {\r\n        return ({\r\n            ...state,\r\n            accessListNotificationSettings: null\r\n        })\r\n    },\r\n    [SET_LIMIT_MODIFIED]: (state, {payload}) => ({...state, modifiedLimit: payload}),\r\n    [SET_DEFAULT_FORM_CREATE_ACCOUNT]: (state, {payload}) => ({...state, registeredAccount: payload}),\r\n    [SET_REDIRECT_TAB]: (state, {payload}) => ({...state, redirectTab: payload}),\r\n    [SET_REALTIME_PAYMENT_STATUS]: (state, {payload}) => ({...state, realtimePaymentStatus: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default  (state = initialState, action) => {\r\n  const handle = handlers[action.type] || handlers.DEFAULT;\r\n  return handle(state,action)\r\n};\r\n","import {\r\n    SET_NUMBER_ALLOCATION_MODAL\r\n} from '../const/';\r\n\r\nconst initialState = {\r\n    showAllocation: false\r\n};\r\n\r\nconst handlers = {\r\n    [SET_NUMBER_ALLOCATION_MODAL]: (state, {payload: showAllocation}) => ({...state, showAllocation}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action)\r\n};\r\n","import _ from 'lodash';\r\nimport {\r\n    SET_AUTH,\r\n    SET_LOADING_INFO,\r\n    SET_USER_LOGIN_INFO,\r\n    SET_MAINTENANCE_MODE,\r\n    SET_ACCOUNT_DIALER_INFO,\r\n    APP_TYPE_DEFAULT,\r\n    SET_USER_LOCALIZATION\r\n} from '../const';\r\nimport {\r\n    NEED_SECOND_AUTH,\r\n    SET_PERMISSION,\r\n    SET_PERMISSION_ADD\r\n} from \"../actions/actionTypes\";\r\nimport {SET_INFO_ACCOUNT} from '../const';\r\n\r\n\r\nconst isAuth = !!localStorage.getItem('api_key');\r\nconst savedAuthInfo = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\r\nconst appTypeSaved = _.get(savedAuthInfo, 'session.site', APP_TYPE_DEFAULT);\r\nconst role = _.get(savedAuthInfo, 'session.account_user.role_list[0]', null);\r\n\r\nconst savedLang = localStorage.getItem('lang');\r\nconst savedRtl = localStorage.getItem('rtl') && JSON.parse( localStorage.getItem('rtl') ) ;\r\n\r\nconst initialState = {\r\n    authInfo: savedAuthInfo, // completed info\r\n    auth:  isAuth, // bool\r\n    loading: false,\r\n    permissions: [],\r\n    permissions_add: [],\r\n    role: role,\r\n    dialerInfo: null,\r\n\r\n    secondAuthType: null,\r\n    secondAuthLink: null,\r\n    secondAuthEmail: null,\r\n\r\n    maintenanceMode: false,\r\n    appType: appTypeSaved,\r\n    lang: savedLang || 'en',\r\n    rtl: savedRtl || false,\r\n};\r\n\r\nconst handlers = {\r\n    [SET_AUTH]: (state, {payload, appType}) => ({\r\n        ...state,\r\n        auth: payload,\r\n        appType: appType || APP_TYPE_DEFAULT,\r\n        loading: false,\r\n        secondAuthType: null,\r\n        secondAuthLink: null,\r\n        secondAuthEmail: null,\r\n        permissions: [],\r\n        permissions_add: [],\r\n    }),\r\n    [SET_USER_LOGIN_INFO]: (state, {payload}) => ({...state, authInfo: payload, appType: payload.session.site}),\r\n    [SET_USER_LOCALIZATION]: (state, {payload}) => ({...state, lang: payload.lang, rtl: payload.rtl}),\r\n    [SET_INFO_ACCOUNT]: (state, {payload}) => ({...state, authInfo: payload, loading: false}),\r\n    [SET_ACCOUNT_DIALER_INFO]: (state, {payload}) => ({\r\n        ...state,\r\n        dialerInfo: payload,\r\n        readyForPayment: payload.available_for_payment || 0\r\n    }),\r\n    [SET_LOADING_INFO]: (state, {payload}) => ({...state, loading: payload}),\r\n    [NEED_SECOND_AUTH]: (state, {payload}) => ({...state, ...payload}),\r\n    [SET_PERMISSION]: (state, {payload}) => ({...state, permissions: payload}),\r\n    [SET_PERMISSION_ADD]: (state, {payload}) => ({...state, permissions_add: payload}),\r\n    [SET_MAINTENANCE_MODE]: (state, {payload}) => ({...state, maintenanceMode: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default  (state = initialState, action) => {\r\n  const handle = handlers[action.type] || handlers.DEFAULT;\r\n  return handle(state,action)\r\n};\r\n\r\n\r\n\r\n","export const REFERENCES_SET_LISTS = 'REFERENCES_SET_LISTS';\r\nexport const REFERENCES_SET_LOADING = 'REFERENCES_SET_LOADING';\r\nexport const REFERENCES_ALL_SET_LISTS = 'REFERENCES_ALL_SET_LISTS';\r\n/* CDR */\r\nexport const CDR_SET_LOADING = 'CDR_SET_LOADING';\r\nexport const CDR_GET_LIST_SUCCESS = 'CDR_GET_LIST_SUCCESS';\r\n\r\n/* TRAFFIC REPORTS */\r\nexport const TRAFFIC_REPORTS_SET_LOADING = 'TRAFFIC_REPORTS_SET_LOADING';\r\nexport const TRAFFIC_REPORTS_GET_LIST_SUCCESS = 'TRAFFIC_REPORTS_GET_LIST_SUCCESS';\r\n\r\n/* AUTH */\r\nexport const NEED_SECOND_AUTH = 'NEED_SECOND_AUTH';\r\nexport const SET_PERMISSION = 'SET_PERMISSION';\r\nexport const SET_PERMISSION_ADD = 'SET_PERMISSION_ADD';\r\n\r\n/* SIM TRAFFIC RANGES */\r\nexport const SIM_TRAFFIC_RANGES_SET_LOADING = 'SIM_TRAFFIC_RANGES_SET_LOADING';\r\nexport const SIM_TRAFFIC_RANGES_SET_LIST = 'SIM_TRAFFIC_RANGES_SET_LIST';\r\n\r\n/* BLOCKED DESTINATIONS */\r\nexport const BLOCKED_DESTINATIONS_SET_LOADING = 'BLOCKED_DESTINATIONS_SET_LOADING';\r\nexport const BLOCKED_DESTINATIONS_SET_LIST = 'BLOCKED_DESTINATIONS_SET_LIST';\r\n\r\n/* GLOBAL SETTINGS */\r\nexport const GLOBAL_SETTING_SET_LOADING = 'GLOBAL_SETTING_SET_LOADING';\r\nexport const GLOBAL_SETTING_SET_LIST = 'GLOBAL_SETTING_SET_LIST';","import {\r\n    DEFAULT_SP_KEY,\r\n    REFERENCES_DIALER_TRUNK, SET_UPLOAD_LOADING_DIALER\r\n} from '../const/';\r\nimport {REFERENCES_ALL_SET_LISTS, REFERENCES_SET_LISTS, REFERENCES_SET_LOADING} from '../actions/actionTypes'\r\nimport _ from 'lodash';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    price_list: [],\r\n    currency_list: [],\r\n    country_list: [],\r\n    payment_terms_list: [],\r\n    account_manager_list: [],\r\n    worldzone_list: [],\r\n    destination_list: [],\r\n    subdestination_list: [],\r\n    protocol_list: [],\r\n    service_plan_list: [],\r\n    service_plan_list_filtered: [],\r\n    client_list: [],\r\n    dialer_list: [],\r\n    supplier_list: [],\r\n    dialerTrunkList: [],\r\n    defaultSPKey: DEFAULT_SP_KEY,\r\n    admin_allocation_limit: {},\r\n    client_allocation_limit: {},\r\n    client_role_list: [],\r\n    uploadLoadingDialer: false,\r\n    support_contacts: [],\r\n    contacts_text: null\r\n};\r\n\r\nconst handlers = {    \r\n    [REFERENCES_SET_LOADING]: (state,{payload}) =>({...state, loading: payload}),\r\n    [REFERENCES_SET_LISTS]: (state, {payload: references}) => ({\r\n        ...state,\r\n        ...references,\r\n        defaultSPKey: _.get(references, 'service_plan_list[0].sp_key', DEFAULT_SP_KEY),\r\n        client_allocation_limit: references.client_allocation_limit ? {...references.client_allocation_limit} : {},\r\n        loading: false\r\n    }),\r\n    [REFERENCES_ALL_SET_LISTS]: (state, {payload}) => ({\r\n        ...state,\r\n        ...payload\r\n    }),\r\n    [REFERENCES_DIALER_TRUNK]: (state, {payload: dialerTrunkList}) => ({...state, dialerTrunkList}),\r\n    [SET_UPLOAD_LOADING_DIALER]: (state, {payload}) => ({...state, uploadLoadingDialer: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default  (state = initialState, action) => {\r\n  const handle = handlers[action.type] || handlers.DEFAULT;\r\n  return handle(state,action)\r\n};\r\n","import {ACCESS_LIST as PREFIX, DEFAULT_PER_PAGE_MEDIUM} from '../const'\r\nimport {ACCESS_EXCLUSION_LIST} from 'const/apiMethods';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    count: 0,\r\n    page: 1,\r\n    per_page: +localStorage.getItem(PREFIX+'_per_page') || DEFAULT_PER_PAGE_MEDIUM,\r\n    access_list_exclusion: [],\r\n    loading:false\r\n};\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_'+PREFIX]: (state,{payload: {count, page, per_page, access_list_list} }) => ( {...state, count ,items:access_list_list, page, per_page, loading: false}),\r\n    ['SET_LOADING_'+PREFIX]: (state,{payload:loading}) =>({...state, loading}),\r\n    [ACCESS_EXCLUSION_LIST]: (state, {payload}) => ({...state, access_list_exclusion: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default  (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action)\r\n}","import {LIVE_CALLS as PREFIX} from '../const/';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    live_calls_list: [],\r\n    loadingItem: false,\r\n};\r\n\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_'+PREFIX]: (state,{payload:live_calls_list}) =>({...state, live_calls_list, loading: false}),\r\n    ['SET_LOADING_'+PREFIX]: (state,{payload}) =>({...state,loading: payload}),\r\n    ['SET_LOADING_ITEM_'+PREFIX]: (state,{payload}) =>({...state, loadingItem: payload}),\r\n    ['REMOVE_ITEM_'+PREFIX]: (state,{payload:id}) =>({...state, live_calls_list: state.live_calls_list.filter( x => x.id !== id),   loadingItem: false}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default  (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state,action)\r\n};\r\n","import {PRICES as PREFIX, SET_SERVICE_PLAN_PRICE} from '../const/';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    page: 1,\r\n    count: 0,\r\n    service_plan_price_list: []\r\n};\r\nconst handlers = {\r\n    [SET_SERVICE_PLAN_PRICE]: (state,{payload:{items,page,count}}) =>({...state,service_plan_price_list:items, count, page, loading: false}),\r\n    ['SET_LOADING_'+PREFIX]: (state,{payload}) =>({...state,loading: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default  (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state,action)\r\n};","import {DEFAULT_PER_PAGE_SMALL, PRICE_RANGES as PREFIX, SET_RANGES} from '../const/';\r\nconst initialState = {\r\n    loading: false,\r\n    page: 1,\r\n    count: 0,\r\n    per_page: +localStorage.getItem(PREFIX+'_per_page') ||  DEFAULT_PER_PAGE_SMALL,\r\n    ranges: []\r\n};\r\nconst handlers = {\r\n    [SET_RANGES]: (state,{payload:{items,page,count,per_page}}) =>({...state,ranges:items, count, page, per_page, loading: false}),\r\n    ['SET_LOADING_'+PREFIX]: (state,{payload}) =>({...state,loading: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default  (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state,action)\r\n};","import {DEFAULT_PER_PAGE_SMALL, PRICE_NUMBERS as PREFIX, SET_NUMBERS} from '../const/';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    page: 1,\r\n    count: 0,\r\n    numbers: [],\r\n    allocatedNumbersCount: 0,\r\n    per_page: +localStorage.getItem(PREFIX+'_per_page') || DEFAULT_PER_PAGE_SMALL\r\n};\r\nconst handlers = {\r\n    [SET_NUMBERS]: (state, {payload: {items, page, count, per_page, allocatedNumbersCount}}) => ({\r\n        ...state,\r\n        numbers: items,\r\n        count,\r\n        page,\r\n        per_page,\r\n        allocatedNumbersCount,\r\n        loading: false\r\n    }),\r\n    ['SET_LOADING_'+PREFIX]: (state,{payload}) =>({...state,loading: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default  (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state,action)\r\n};","import _ from \"lodash\";\r\n\r\nexport const getRoles = () => {\r\n    const userInfo = getUserInfo();\r\n    try {\r\n        return _.get(userInfo, 'session.account_user.role_list', []);\r\n    } catch (error) {\r\n        console.error(error)\r\n        return []\r\n    }\r\n    \r\n}\r\n\r\nexport const getUserInfo = () => {\r\n    const userInfo = localStorage.getItem('userInfo');\r\n    if (!userInfo) return {};\r\n\r\n    try {\r\n        return JSON.parse(userInfo);\r\n    } catch (error) {\r\n        console.error(error)\r\n        return {}\r\n    }\r\n} \r\n","import _ from 'lodash';\r\nimport {EOL} from 'const';\r\nimport {Table, Alert} from 'rsuite';\r\nimport React from 'react';\r\nimport {PDFDocument, rgb, StandardFonts} from 'pdf-lib';\r\nimport {jsPDF as JSPDF} from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\nimport {getFileResponse} from \"../api/loginRoutes\";\r\nimport {APP_TYPE_CLIENT, APP_TYPE_DEFAULT} from \"../const\";\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\nexport const pipe = (data, filters, model) => {\r\n    if (!Object.keys(filters).length) return data;\r\n\r\n    return data.filter(x => {\r\n        for (let f of Object.keys(filters)) {\r\n            if (!filters[f]) continue;\r\n            if (!model[f](x, filters[f], filters)) return false;\r\n        }\r\n        return true;\r\n    });\r\n};\r\n\r\nexport const deleteEmpty = obj => {\r\n\r\n    if (typeof (obj) != 'object') return obj;\r\n\r\n    for (let k of Object.keys(obj)) {\r\n        if (!obj[k] && obj[k] !== false)\r\n            delete obj[k];\r\n\r\n        if (Array.isArray(obj[k]) && !obj[k].length)\r\n            delete obj[k];\r\n    }\r\n\r\n    return obj;\r\n};\r\n\r\nexport const sortData = (data, sortColumn, sortType) => {\r\n    return data.sort((a, b) => {\r\n        const aVal = _.isString(a[sortColumn]) ? a[sortColumn].toLowerCase() : a[sortColumn];\r\n        const bVal = _.isString(b[sortColumn]) ? b[sortColumn].toLowerCase() : b[sortColumn];\r\n        const comparisonResult = aVal >= bVal ? 1 : -1;\r\n\r\n        return sortType === 'asc' ? comparisonResult : -comparisonResult;\r\n    });\r\n};\r\n\r\nexport const ID = () => '_' + Math.random().toString(36).substr(2, 9);\r\nexport const generateId = ID;\r\n\r\nexport const savePdfByTemplate = (data, headers, name, template, summary, account = {}) => {\r\n    const doc = new JSPDF();\r\n    const textToParse = template && template.text ? template.text.text : \"\";\r\n    const objectForParseText = summary;\r\n\r\n    const emptyKeysObject = {};\r\n    objectForParseText && Object.keys(objectForParseText).map(key => {\r\n        emptyKeysObject[`%${key}%`] = objectForParseText[key];\r\n    });\r\n    const parsedText = textToParse.replace(/%(\\w+)%/g, (_, key) => {\r\n        return emptyKeysObject[`%${key}%`];\r\n    });\r\n    try {\r\n        doc.setFontSize(template.setFontSize.size);\r\n        doc.addImage(template.addImage.imageData, 'base64', template.addImage.x, template.addImage.y, template.addImage.w, template.addImage.h);\r\n        doc.text(parsedText, template.text.x, template.text.y, template.text.options);\r\n        autoTable(doc, {\r\n            ...template.autoTable.options,\r\n            body: data,\r\n            head: headers\r\n        });\r\n        doc.save(`${name}.pdf`);\r\n    } catch (e) {\r\n        Alert.error('No template for you')\r\n    }\r\n\r\n};\r\n\r\n\r\nexport const saveFileBlob = (response, name) => {\r\n    const url = window.URL.createObjectURL(new Blob([response]));\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.setAttribute('download', name);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n\r\n    // clear object after downloading\r\n    setTimeout(function () {\r\n        URL.revokeObjectURL(url);\r\n    }, 0);\r\n};\r\n\r\n\r\n\r\n\r\nexport const copyToClipboard = (text) => {\r\n    const temp = document.createElement('textarea');\r\n    document.body.appendChild(temp);\r\n    temp.value = text;\r\n    temp.select();\r\n    document.execCommand('copy');\r\n    temp.remove();\r\n};\r\n\r\nexport const CRUDitems = (old_list, new_list) => {\r\n    const jsonStringOldItems = old_list.map(\r\n        item => JSON.stringify(item)\r\n    );\r\n    const jsonStringNewItems = new_list.map(\r\n        item => JSON.stringify(item)\r\n    );\r\n    const newAndChangesItems = new_list.filter(item => !jsonStringOldItems.includes(JSON.stringify(item)));\r\n    const newAndChangesItemsIds = newAndChangesItems.map(item => item.id);\r\n    const deletedItems = jsonStringOldItems\r\n        .filter(itemStringify => !jsonStringNewItems.includes(itemStringify))\r\n        .map(itemStringify => JSON.parse(itemStringify))\r\n        .filter(item => !newAndChangesItemsIds.includes(item.id));\r\n\r\n    return [newAndChangesItems, deletedItems];\r\n};\r\n\r\nexport const getFirstValueByName = (list, name, desiredKey, defaultValue = null) => {\r\n    const found = _.find(list, (item) => item.name === name);\r\n\r\n    return found ? found[desiredKey] : defaultValue;\r\n};\r\n\r\nexport const toUTCDateTime = (date) => {\r\n    return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));\r\n};\r\n\r\nexport const toStartDayUTCTime = (date) => {\r\n    return new Date(Date.UTC( date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0 ));\r\n};\r\n\r\nexport const toStartDayUTCTimeNextDay = (date) => {\r\n    return new Date(Date.UTC( date.getFullYear(), date.getMonth(), date.getDate() + 1, 0, 0, 0 ));\r\n};\r\n\r\nexport const toEndDayUTCTime = (date) => {\r\n    return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59));\r\n};\r\n\r\nexport const removeNilValues = (obj) => {\r\n    const respObject = {...obj};\r\n\r\n    Object.keys(respObject).forEach(key => {\r\n        //Remove keys with Undefined or Null values\r\n        if (_.isNil(respObject[key])) {\r\n            delete respObject[key];\r\n        }\r\n    });\r\n\r\n    return respObject;\r\n};\r\n\r\nexport const responseErrorToString = (error) => {\r\n    let errorString = '';\r\n\r\n    if (_.isObject(error.data) && !_.isEmpty(error.data)) {\r\n        _.each(error.data, (errMessage, fieldKey) => {\r\n            errorString += `${fieldKey}: ${errMessage}${EOL}`;\r\n        });\r\n    } else {\r\n        errorString = error.message;\r\n    }\r\n\r\n    return errorString;\r\n};\r\n\r\nexport const renderColumn = ({label, dataKey, value = null, headerStyle = null, width = 200, id, ...props}) => (\r\n    <Column key={id} width={width} {...props}>\r\n        <HeaderCell style={headerStyle}>{label}</HeaderCell>\r\n        <Cell dataKey={dataKey}>{value}</Cell>\r\n    </Column>\r\n);\r\n\r\nexport const hasError = (error) => {\r\n    return error && Object.keys(error).map(i => error[i]).some(value => value === true);\r\n};\r\n\r\nexport function canIMoveNumbersToAnotherTrunk(fromTrunk, toTrunk) {\r\n    return fromTrunk.id !== toTrunk.id && !toTrunk.closed && fromTrunk.sp_key === toTrunk.sp_key;\r\n}\r\n\r\nexport const replaceUndefinedOrNull = (key, value) => {\r\n    if (value === null || value === undefined) {\r\n        return undefined;\r\n    }\r\n\r\n    return value;\r\n};\r\n\r\nexport const calculateFixedSignsLength = (value) => {\r\n    const formSigns = value.toString().split('.');\r\n\r\n    let calculatedFixedSigns = 1;\r\n    if (value && formSigns.length > 1) {\r\n        const fixedSign = formSigns.pop();\r\n        calculatedFixedSigns = 1 / (10 ** fixedSign.length);\r\n    }\r\n    return calculatedFixedSigns;\r\n};\r\n\r\n\r\nexport const getRangeByNumber = (number, numbers_count) => {\r\n    return numbers_count > 1 ? `${number}${'0'.repeat(Math.log10(numbers_count))}-${number}${'9'.repeat(Math.log10(numbers_count))}` : number;\r\n};\r\nexport const getRangeByNumberDigit = (number, digit) => {\r\n    return digit > 0 ? `${number}${'0'.repeat(digit)}-${number}${'9'.repeat(digit)}` : number;\r\n};\r\n/* Mass allocation */\r\nconst createDownloadUrl = (string, type = '') => {\r\n    return window.URL.createObjectURL(new Blob([string], {type: type}));\r\n};\r\n\r\nconst downloadBlobByUrl = (url, name) => {\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.setAttribute('download', name);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n\r\n    setTimeout(function () {\r\n        URL.revokeObjectURL(url);\r\n    }, 0);\r\n};\r\n\r\nexport const downloadNumbersRangeFile = (csvStringsArray, allocateByPrefixesStatus = false, name = 'numbers.csv') => {\r\n    csvStringsArray.pop();\r\n    const csvDataArray = csvStringsArray.map((item) => item.split(';'));\r\n    const numbersFullArray = [];\r\n\r\n    for (let rowIndex = 0; rowIndex < csvDataArray.length; rowIndex++) {\r\n        const [prefix, ratio, ...rest] = csvDataArray[rowIndex];\r\n\r\n        // get header\r\n        if (rowIndex === 0) {\r\n            numbersFullArray.push(['Numbers', ...rest].join(';'));\r\n            continue;\r\n        }\r\n\r\n        const count = Math.pow(10, ratio);\r\n\r\n        if (allocateByPrefixesStatus) {\r\n\r\n            // push numbers\r\n            for (let numberIndex = 0; numberIndex < count; numberIndex++) {\r\n                const chunk = ratio > 1 ? (count + numberIndex + '').slice(1) : numberIndex;\r\n                const number = prefix + chunk;\r\n                numbersFullArray.push([number, ...rest].join(';'));\r\n            }\r\n\r\n        } else {\r\n            numbersFullArray.push([prefix, ...rest].join(';'));\r\n        }\r\n    }\r\n\r\n    const url = createDownloadUrl(numbersFullArray.join('\\r\\n'), 'text/csv;charset=utf-8;');\r\n    downloadBlobByUrl(url, name);\r\n};\r\n\r\n\r\nexport const downloadPrefixesRangeFile = (csvStringsArray, allocateByPrefixesStatus = false, name = 'numbers.csv') => {\r\n    csvStringsArray.pop();\r\n    const csvDataArray = csvStringsArray.map((item) => item.split(';'));\r\n    const prefixesArray = [];\r\n\r\n    for (let rowIndex = 0; rowIndex < csvDataArray.length; rowIndex++) {\r\n        const [prefix, ratio, ...rest] = csvDataArray[rowIndex];\r\n\r\n        // get header\r\n        if (rowIndex === 0) {\r\n            prefixesArray.push([prefix, ...rest].join(';'));\r\n            continue;\r\n        }\r\n\r\n        const count = Math.pow(10, ratio);\r\n        // push prefix\r\n        const firstNumber = prefix + ('0'.repeat(ratio));\r\n        const lastNumber = ratio > 0 ? prefix + (count - 1) : firstNumber;\r\n        const prefixNumbers = `${firstNumber}-${lastNumber}`;\r\n        prefixesArray.push([prefixNumbers, ...rest].join(';'));\r\n    }\r\n\r\n    const url = createDownloadUrl(prefixesArray.join('\\r\\n'), 'text/csv;charset=utf-8;');\r\n    downloadBlobByUrl(url, name);\r\n};\r\n\r\n\r\nexport const randomizeArray = (arr, chunkSize = 100) => {\r\n    const chunksTotal = arr.length / chunkSize;\r\n    const chunks = [];\r\n    for (let i = 0; i < chunksTotal; i++) {\r\n        const startItem = i * chunkSize;\r\n        const endItem = startItem + chunkSize;\r\n        const chunk = arr.slice(startItem, endItem);\r\n        chunk.sort(() => Math.random() - 0.5);\r\n        chunk.sort(() => Math.random() - 0.5);\r\n        chunks.push(chunk);\r\n    }\r\n\r\n    return chunks.reduce((sum, current) => {\r\n        return [...sum, ...current];\r\n    }, []);\r\n};\r\n\r\n\r\nexport const downloadNumbersFile = (csvStringsArray, allocateByPrefixesStatus = false, name = 'numbers.csv', isGoogleOtp = false) => {\r\n    csvStringsArray.pop();\r\n    const csvDataArray = csvStringsArray.map((item) => item.split(';'));\r\n\r\n    const numbersOnlyArray = [];\r\n\r\n    for (let rowIndex = 0; rowIndex < csvDataArray.length; rowIndex++) {\r\n        const [prefix, ratio, ...rest] = csvDataArray[rowIndex];\r\n\r\n        // get header\r\n        if (rowIndex === 0) {\r\n            continue;\r\n        }\r\n\r\n        const count = Math.pow(10, ratio);\r\n\r\n        if (allocateByPrefixesStatus) {\r\n\r\n            // push numbers\r\n            for (let numberIndex = 0; numberIndex < count; numberIndex++) {\r\n                const chunk = ratio > 1 ? (count + numberIndex + '').slice(1) : numberIndex;\r\n                const number = prefix + chunk;\r\n                numbersOnlyArray.push(number);\r\n            }\r\n\r\n            continue;\r\n\r\n        } else {\r\n            numbersOnlyArray.push(prefix);\r\n        }\r\n    }\r\n\r\n    if (isGoogleOtp) {\r\n        const numbersOnlyData = randomizeArray(numbersOnlyArray, 100);\r\n        const url = createDownloadUrl(numbersOnlyData.join('\\r\\n'), 'text/csv;charset=utf-8;');\r\n        downloadBlobByUrl(url, name);\r\n        return;\r\n    }\r\n\r\n    const url = createDownloadUrl(numbersOnlyArray.join('\\r\\n'), 'text/csv;charset=utf-8;');\r\n    downloadBlobByUrl(url, name);\r\n};\r\n\r\nexport const compareObjects = (object1, object2) => {\r\n    const keys1 = object1 ? Object.keys(object1) : {};\r\n    const keys2 = object2 ? Object.keys(object2) : {};\r\n\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let key of keys1) {\r\n        if (Array.isArray(object1[key]) && Array.isArray(object2[key])) {\r\n            return object1[key].length === object2[key].length && object1[key].every(function (value, index) {\r\n                return value === object2[key][index];\r\n            });\r\n        } else {\r\n            if (object1[key] !== object2[key]) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nexport const toBase64 = file => new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = error => reject(error);\r\n});\r\n\r\nexport const getFormattedTime = (date_) => {\r\n    const date = new Date(date_);\r\n    const day = date.getDate();\r\n    const month = date.getMonth() + 1;\r\n    const year = date.getFullYear();\r\n    return `${day < 10 ? '0' + day : day}.${month < 10 ? '0' + month : month}.${year}`;\r\n};\r\n\r\nexport const getISOTime = (date_, UTC = false) => {\r\n    const date = !UTC\r\n        ? new Date(date_.getTime() - (date_.getTimezoneOffset() * 60000)).toISOString()\r\n        : date_.toISOString();\r\n    return date;\r\n};\r\n\r\nexport const removeTZFromDate = (date) => {\r\n    const modifiedDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));\r\n    return modifiedDate;\r\n};\r\n\r\nexport const containsOnlyNumbers = (string) => {\r\n    return Number.isInteger(string) || /^\\d+$/.test(string);\r\n};\r\n\r\nexport const someFieldHasError = (object) => {\r\n    return Object.keys(object).map(key => Object.keys(object[key]).length).some(value => value > 0);\r\n};\r\nexport const makeRangeFromPrefixesToCsv = (csvContent) => {\r\n    const csvContentArray = csvContent ? csvContent.split('\\n').filter((value) => !!value) : [];\r\n    const csvHeaders = csvContentArray[0];\r\n    const csvBodyPrefixes = csvContentArray.slice(1).map(value => {\r\n        const prefixValue = value.split(';');\r\n\r\n        return [getRangeByNumberDigit(prefixValue[0], prefixValue[1]), ...prefixValue.slice(1)].join(';')\r\n    });\r\n    return [csvHeaders, ...csvBodyPrefixes].join('\\n');\r\n};\r\n\r\nexport const makeNumbersFromPrefixesToCsv = (csvContent) => {\r\n    const csvContentArray = csvContent ? csvContent.split('\\n').filter((value) => !!value) : [];\r\n    const csvHeaders = csvContentArray[0];\r\n    const csvBodyPrefixes = csvContentArray.slice(1).map(value => {\r\n        const prefixValue = value.split(';');\r\n\r\n        return Array(10 ** prefixValue[1]).fill(prefixValue).map((value, index) => {\r\n            const digit = prefixValue[1];\r\n            const count = Math.pow(10, digit);\r\n            const chunk = (count + index + '').slice(1);\r\n            return [`${value[0]}${chunk}`, ...value.slice(1)].join(';')\r\n        });\r\n    });\r\n    return [csvHeaders, ...csvBodyPrefixes.flat(1)].join('\\n');\r\n};\r\nexport const compareTwoArrays = (array1, array2) => {\r\n    return array1.length === array2.length && array1.sort().every((value, index) => {\r\n        const value1 = JSON.stringify(value);\r\n        const value2 = JSON.stringify(array2.sort()[index]);\r\n\r\n        return value1 === value2;\r\n    })\r\n};\r\n\r\nexport const generatePassword = (passwordLength=12) => {\r\n    const numberChars = \"0123456789\";\r\n    const specialChars = '#?!_@$%^&*';\r\n    const upperChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n    const lowerChars = \"abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    const allChars = numberChars + upperChars + lowerChars + specialChars;\r\n    let randPasswordArray = Array(passwordLength);\r\n    randPasswordArray[0] = numberChars;\r\n    randPasswordArray[1] = upperChars;\r\n    randPasswordArray[2] = lowerChars;\r\n    randPasswordArray[3] = specialChars;\r\n    randPasswordArray = randPasswordArray.fill(allChars, 3);\r\n    return shuffleArray(randPasswordArray.map((x) => { return x[Math.floor(Math.random() * x.length)] })).join('');\r\n};\r\n\r\nexport const shuffleArray = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        const temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n    return array;\r\n};\r\n\r\nexport const getBlobContent = (file) => new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    console.log(\"file\", file, typeof file);\r\n    reader.readAsText(file);\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = error => reject(error);\r\n});\r\n\r\nexport const isObject = (obj) => {\r\n    return obj === Object(obj);\r\n};\r\n\r\nexport const getDeepKeys = (object) => {\r\n    let keys = [];\r\n    for (let key in object) {\r\n        if (object.hasOwnProperty(key)) {\r\n            const keyValue = {key, value: key};\r\n            keys.push(keyValue);\r\n\r\n            if (typeof object[key] === \"object\") {\r\n                const subkeys = getDeepKeys(object[key]);\r\n                keys = keys.concat(subkeys.map((subkey) => {\r\n                    return {key: key + \".\" + subkey.key, value: subkey.key}\r\n                }));\r\n            }\r\n        }\r\n    }\r\n    return keys;\r\n};\r\n\r\n\r\nexport function customDebounce(fn, ms) {\r\n    let timer;\r\n    return _ => {\r\n        clearTimeout(timer);\r\n        timer = setTimeout(_ => {\r\n            timer = null;\r\n            fn.apply(this, arguments);\r\n        }, ms)\r\n    };\r\n};\r\n\r\n\r\nexport const semverGreaterThan = (versionA, versionB) => {\r\n    const versionsA = versionA.split(/\\./g);\r\n  \r\n    const versionsB = versionB.split(/\\./g);\r\n    while (versionsA.length || versionsB.length) {\r\n      const a = Number(versionsA.shift());\r\n      const b = Number(versionsB.shift());\r\n      // eslint-disable-next-line no-continue\r\n      if (a === b) continue;\r\n      // eslint-disable-next-line no-restricted-globals\r\n      return a > b || isNaN(b);\r\n    }\r\n    return false;\r\n  };\r\n\r\nexport const daysCount = (startDate, endDate) => {\r\n    const start = new Date(startDate);\r\n    const end = new Date(endDate);\r\n    let dayCount = 0;\r\n\r\n    while (end > start) {\r\n        dayCount++;\r\n        start.setDate(start.getDate() + 1);\r\n    }\r\n\r\n    return dayCount\r\n}\r\n\r\nexport const fieldSorter = (fields) => {\r\n    return ((a, b) => {\r\n        return fields\r\n            .map((key) => {\r\n                let dir = 1;\r\n                if (key[0] === '-') {\r\n                    dir = -1;\r\n                    key=key.substring(1);\r\n                }\r\n                if (a[key] > b[key]) return dir;\r\n                if (a[key] < b[key]) return -(dir);\r\n                return 0;\r\n            })\r\n            .reduce((item, data) => {\r\n                return item ? item : data;\r\n            }, 0);\r\n    });\r\n};\r\n\r\nexport const between = (value, min, max) => {\r\n    return value >= min && value <= max;\r\n};\r\n\r\nexport const getRangeByDigit = (number, digit) => {\r\n    return digit > 0 ? `${number}${'0'.repeat(digit)}-${number}${'9'.repeat(digit)}` : number\r\n};\r\n\r\nexport const arrayToObject = (array) => {\r\n    return array.reduce((acc, item) => {\r\n        const key = Object.keys(item)[0];\r\n        acc[key] = item[key];\r\n        return acc\r\n    }, {})\r\n};\r\nexport const arrayToObjectSpecialKey = (array, key) => {\r\n    return array.reduce((acc, item) => {\r\n        acc[item[key]] = item;\r\n        return acc\r\n    }, {})\r\n};\r\n\r\nexport const renderCsvDataToTableData = (data, headers) => {\r\n    const csvBody = data.length ? data.slice(1) : [];\r\n\r\n    return (\r\n        csvBody.map(line => {\r\n            const items = line.split(';');\r\n            const prefix = getRangeByDigit(items[0], items[1]);\r\n\r\n            const body = items.map((item, index) => {\r\n                if (between(index, 2, 5)) {\r\n                    return {[headers[index]]: item}\r\n                }\r\n                return null;\r\n            }).filter(value => value);\r\n\r\n            return {\r\n                [headers[0]]: prefix,\r\n                ...(arrayToObject(body))\r\n            }\r\n        })\r\n            .filter(obj => Object.keys(obj).some(key => obj[key]))\r\n    );\r\n};\r\n\r\n\r\nexport const objectIsEmpty = (obj) => {\r\n    if (!obj) return true;\r\n\r\n    for (const prop in obj) {\r\n        if (obj.hasOwnProperty(prop))\r\n            return false;\r\n    }\r\n    return true;\r\n};\r\n\r\n\r\nexport const getAllowedRangesByIntervalMonth = (intervalMonth = 3) => {\r\n    const startDate = new Date();\r\n    const endDate = new Date();\r\n    const dateRange =  [\r\n        new Date( startDate.setMonth(startDate.getMonth() - intervalMonth) + (1000 * 3600 * 24) ),\r\n        new Date( endDate.setMonth(endDate.getMonth() + 12) )\r\n    ];\r\n    return [\r\n        `${dateRange[0].getFullYear()}${('0' + (dateRange[0].getMonth() + 1)).slice(-2)}01`,\r\n        `${dateRange[1].getFullYear()}${('0' + (dateRange[1].getMonth() + 1)).slice(-2)}01`,\r\n    ]\r\n};\r\n\r\nexport const createUrl = (response, fileName = 'file.csv') => {\r\n    if (response !== undefined) {\r\n        const url = window.URL.createObjectURL(new Blob([response]));\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.setAttribute('download', fileName);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n    }\r\n};\r\n\r\nexport const onDownloadCompleteOnlyNumbersCSV = async (trunkId, setUploadingLoading, filter = null) => {\r\n    await getFileResponse('trunk_number__get_list', {\r\n        target: {\r\n            trunk_id: trunkId\r\n        },\r\n        filter: {...(filter ? filter : {})}\r\n    })\r\n        .then((response) => {\r\n            const csvText = response.text();\r\n            csvText.then((text) => {\r\n                const csvContent = makeNumbersFromPrefixesToCsv(text);\r\n                const csvDataList = csvContent.split('\\n').slice(1).map(data => {\r\n                    const line = data.split(';');\r\n                    return line[0]\r\n                });\r\n                const csvData = csvDataList.join('\\n');\r\n\r\n                saveFileBlob(csvData, 'allocated_numbers.csv');\r\n                setUploadingLoading(trunkId, false);\r\n            });\r\n        });\r\n};\r\n\r\n\r\nexport const setBodyClassNames = (userInfo = {}) => {\r\n    const appType = _.get(userInfo, 'session.site', APP_TYPE_DEFAULT);\r\n    if (appType === APP_TYPE_CLIENT) {\r\n        document.body.classList.remove(\"app-admin\");\r\n        document.body.classList.add(\"app-client\");\r\n    } else {\r\n        document.body.classList.remove(\"app-client\");\r\n        document.body.classList.add(\"app-admin\");\r\n    }\r\n};\r\n\r\n\r\nexport const getCsvDataWithHeaders = (csvData) => {\r\n    const csvHeaderList = csvData && csvData.length ? csvData[0].split(';') : [];\r\n    const csvBody = csvData && csvData.length ? csvData.slice(1) : [];\r\n    const csvResult = csvBody && csvBody.length ? csvBody.filter(value => !!value).map( line => {\r\n        const item = line.split(';');\r\n        return `${item[0]};${item.slice(2).join(';')}`\r\n    }) : [];\r\n    const csvHeaders = csvHeaderList && csvHeaderList.length ? [csvHeaderList[0], ...csvHeaderList.slice(2)].join(\";\") : \"\";\r\n    csvResult.unshift(csvHeaders);\r\n\r\n    return csvResult;\r\n};\r\n\r\n\r\nexport const onDownloadCompleteNumbersCSV = async (trunkId, setUploadingLoading, filter = null) => {\r\n    await getFileResponse('trunk_number__get_list', {\r\n        target: {\r\n            trunk_id: trunkId\r\n        },\r\n        filter: {...(filter ? filter : {})}\r\n    })\r\n        .then((response) => {\r\n            const csvText = response.text();\r\n            csvText.then((text) => {\r\n                const csvContent = makeNumbersFromPrefixesToCsv(text);\r\n                const csvHeaderList = csvContent.split('\\n')[0].split(';');\r\n                const csvDataList = csvContent.split('\\n').slice(1).map(line => {\r\n                    const items = line.split(';');\r\n                    return [items[0], ...items.slice(2)].join(';')\r\n                });\r\n                const csvHeaders = [csvHeaderList[0], ...csvHeaderList.slice(2)].join(';');\r\n                csvDataList.unshift(csvHeaders);\r\n                const csvData = csvDataList.join('\\n');\r\n\r\n                saveFileBlob(csvData, 'allocated_numbers.csv');\r\n                setUploadingLoading(trunkId, false);\r\n            });\r\n        });\r\n};\r\n\r\n\r\nexport const onDownloadCompletePrefixesCSV = async (trunkId, setUploadingLoading, filter = null) => {\r\n    await getFileResponse('trunk_number__get_list', {\r\n        target: {\r\n            trunk_id: trunkId\r\n        },\r\n        filter: {...(filter ? filter : {})}\r\n    })\r\n        .then((response) => {\r\n            const csvText = response.text();\r\n            csvText.then((text) => {\r\n                const csvPreparedData = text ? makeRangeFromPrefixesToCsv(text).split('\\n') : [];\r\n                const csvContentList = getCsvDataWithHeaders(csvPreparedData);\r\n                const csvHeaderList = csvContentList[0].split(';');\r\n                const csvDataList = csvContentList.slice(1).map(line => {\r\n                    const items = line.split(';');\r\n                    return [items[0], ...items.slice(1)].join(';')\r\n                });\r\n                const csvHeaders = [csvHeaderList[0], ...csvHeaderList.slice(1)].join(';');\r\n                csvDataList.unshift(csvHeaders);\r\n                const csvData = csvDataList.join('\\n');\r\n\r\n                saveFileBlob(csvData, 'allocated_numbers.csv');\r\n                setUploadingLoading(trunkId, false);\r\n            });\r\n        });\r\n};\r\n\r\n\r\nexport const countDecimals = (value) => {\r\n    if ((value % 1) !== 0)\r\n        return value.toString().split(\".\")[1].length;\r\n    return 0;\r\n};\r\n\r\n","export const formValid = data =>  !Object.values( data ).filter( x => x.hasError).length;\r\n\r\nexport const fullPhoneRegex = /^(\\+)?(\\(\\d{2,3}\\) ?\\d|\\d)(([ \\-]?\\d)|( ?\\(\\d{2,3}\\) ?)){5,12}\\d$/;\r\n\r\nexport const requiredOfValidator = function (arrayOfFieldsNames, errorMessage = 'One of these is required') {\r\n    return {\r\n        check: (value, data) => {\r\n            const fieldsNames = Object.keys(data);\r\n\r\n            if (value) {\r\n                return {\r\n                    hasError: false\r\n                }\r\n            }\r\n\r\n            for (let name of fieldsNames) {\r\n                if (arrayOfFieldsNames.includes(name) && data[name]) {\r\n                    return {\r\n                        hasError: false\r\n                    }\r\n                }\r\n            }\r\n\r\n            return {\r\n                hasError: true,\r\n                errorMessage: errorMessage\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport function generateRequiredOfValidator(fieldNamesArray) {\r\n    const schema = {};\r\n\r\n    fieldNamesArray.forEach((field, i) => {\r\n        let fieldNamesArrayClone = fieldNamesArray.slice();\r\n\r\n        fieldNamesArrayClone.splice(i, 1);\r\n\r\n        schema[field] = requiredOfValidator(fieldNamesArrayClone);\r\n    });\r\n\r\n    console.log(schema);\r\n\r\n    return schema;\r\n}","export class ObjectSet {\r\n\r\n    constructor() {\r\n        this._set = new Set();\r\n        this[Symbol.iterator] = this._set.values();\r\n    }\r\n\r\n\r\n    add(item) {\r\n        const strItem = JSON.stringify(item);\r\n        for(let _item of this._set){\r\n            if(JSON.stringify(_item) === strItem){\r\n                return _item;\r\n            }\r\n        }\r\n        return this._set.add(item)\r\n    }\r\n\r\n    has(item){\r\n        const strItem = JSON.stringify(item);\r\n        for(let _item of this._set){\r\n            if(JSON.stringify(_item) === strItem)\r\n                return true; \r\n        }\r\n        return false;\r\n    }\r\n\r\n    values() {\r\n        return this._set.values();\r\n    }\r\n\r\n    delete(item) {\r\n        const strItem = JSON.stringify(item);\r\n        for(let _item of this._set){\r\n            if(JSON.stringify(_item) === strItem){\r\n                return this._set.delete(_item)\r\n            } \r\n        }\r\n    }\r\n    clear() {\r\n        this._set.clear()\r\n    }\r\n}\r\n","import {\r\n    SET_ROLES\r\n} from '../const/';\r\nimport { getRoles } from '../utils';\r\n\r\n\r\nconst setRoles = (state, role_list) => {\r\n    let account_user_modify_method = '';\r\n    let account_user_remove_method = '';\r\n\r\n    // if(role_list.includes('AM_TL_ADMIN')){\r\n        account_user_modify_method = 'account_user:modify_by_account_manager';\r\n        account_user_remove_method = 'account_user:remove_by_account_manager';\r\n    // }\r\n    \r\n    return  {...state, role_list, account_user_modify_method, account_user_remove_method}\r\n}\r\n\r\nconst initialState = {\r\n    role_list: [],\r\n    account_user_modify_method: '',\r\n    account_user_remove_method: '',\r\n    ...setRoles({}, getRoles())\r\n};\r\n\r\n\r\nconst handlers = {    \r\n    [SET_ROLES]: (state,{payload: role_list}) => setRoles(state, role_list || []),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default  (state = initialState, action) => {\r\n  const handle = handlers[action.type] || handlers.DEFAULT;\r\n  return handle(state,action)\r\n};\r\n","import {CDR_GET_LIST_SUCCESS, CDR_SET_LOADING} from \"../actions/actionTypes\";\r\nimport {CDR_PER_PAGE} from \"../const/localStorageKeys\";\r\nimport {DEFAULT_PER_PAGE_BIG, DEFAULT_PER_PAGE_MEDIUM} from \"../const\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    list: [],\r\n    count: 0,\r\n    perPage: +localStorage.getItem(CDR_PER_PAGE) || DEFAULT_PER_PAGE_BIG,\r\n    page: 1\r\n};\r\n\r\n\r\nconst handlers = {\r\n    [CDR_SET_LOADING]: (state, {payload}) =>({...state, loading: payload}),\r\n    [CDR_GET_LIST_SUCCESS]: (state, {payload}) =>({...state, ...payload, loading: false}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state,action)\r\n};\r\n","export const CDR_PER_PAGE = 'CDR_PER_PAGE';\r\n\r\nexport const LOCAL_STORAGE_USER_INFO = 'userInfo';\r\n\r\nexport const LOCAL_STORAGE_TRAFFIC_STAT_FILTERS = 'payments/LOCAL_STORAGE_TRAFFIC_STAT_FILTERS';\r\nexport const LOCAL_STORAGE_PAYMENTS_TRAFFIC_REPORTS_FILTERS = 'payments/LOCAL_STORAGE_PAYMENTS_TRAFFIC_REPORTS_FILTERS';\r\nexport const LOCAL_STORAGE_PAYMENTS_LIST_FILTERS = 'payments/LOCAL_STORAGE_PAYMENTS_LIST_FILTERS';\r\n\r\nexport const LOCAL_STORAGE_SIM_TRAFFIC_RANGES_FILTERS = 'LOCAL_STORAGE_SIM_TRAFFIC_RANGES_FILTERS';\r\nexport const LOCAL_STORAGE_LIVE_CALLS_AUTO_UPDATE = 'LOCAL_STORAGE_LIVE_CALLS_AUTO_UPDATE';\r\n\r\nexport const LOCAL_STORAGE_CHECKED_PAYMENT_STATUS = 'LOCAL_STORAGE_CHECKED_PAYMENT_STATUS';","import {\r\n    TRAFFIC_REPORTS_GET_LIST_SUCCESS,\r\n    TRAFFIC_REPORTS_SET_LOADING\r\n} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    list: [],\r\n    count: 0,\r\n    perPage: 1000,\r\n    page: 1\r\n};\r\n\r\n\r\nconst handlers = {\r\n    [TRAFFIC_REPORTS_SET_LOADING]: (state, {payload}) =>({...state, loading: payload}),\r\n    [TRAFFIC_REPORTS_GET_LIST_SUCCESS]: (state, {payload}) =>({...state, ...payload, loading: false}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state,action)\r\n};\r\n","import {AUTH_NUMBERS as PREFIX} from '../const/';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    auth_number_list: [],\r\n    auth_number_list_setted: false,\r\n    loadingItem: false,\r\n};\r\n\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_'+PREFIX]: (state,{payload: auth_number_list}) =>({...state, auth_number_list, loading: false, auth_number_list_setted: true}),\r\n    ['SET_LOADING_'+PREFIX]: (state,{payload}) =>({...state,loading: payload}),\r\n    ['SET_LOADING_ITEM_'+PREFIX]: (state,{payload}) =>({...state, loadingItem: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default  (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state,action)\r\n};\r\n","import {\r\n    API_PAGE as PREFIX,\r\n    API_MODIFY_KEY,\r\n    API_DELETE_KEY, API_CREATE_KEY\r\n} from '../const';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    count: 0\r\n};\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload: {keyList}}) => ({\r\n        ...state,\r\n        items: keyList,\r\n        count: keyList.length,\r\n    }),\r\n    [API_CREATE_KEY]: (state, {payload: {apiKey}}) => ({...state}),\r\n    [API_MODIFY_KEY]: (state, {payload: {apiKey}}) => ({...state}),\r\n    [API_DELETE_KEY]: (state, {payload: {apiKey}}) => ({...state}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {\r\n    PAYMENTS as PREFIX,\r\n    PAYMENT_LIST,\r\n    PAYMENT_REQUEST_LIST,\r\n    PAYMENT_TRAFFIC_REPORTS_LIST,\r\n    PAYMENT_HAWALA_LIST\r\n} from '../const';\r\n\r\nconst initialState = {\r\n    paymentItems: [],\r\n    paymentItemsLoading: false,\r\n    paymentRequestItems: [],\r\n    paymentRequestLoading: false,\r\n    paymentTrafficReportsItems: [],\r\n    paymentTrafficReportsLoading: false,\r\n    hawalaItems: [],\r\n    hawalaLoading: false,\r\n};\r\n\r\nconst handlers = {\r\n\r\n    ['SET_LOADING_' + PAYMENT_REQUEST_LIST]: (state, {payload}) => ({...state, paymentRequestLoading: payload}),\r\n    ['SET_ITEMS_' + PAYMENT_REQUEST_LIST]: (state, {payload: {items}}) => ({\r\n        ...state,\r\n        paymentRequestItems: items,\r\n        paymentRequestLoading: false\r\n    }),\r\n\r\n    ['SET_LOADING_' + PAYMENT_LIST]: (state, {payload}) => ({...state, paymentItemsLoading: payload}),\r\n    ['SET_ITEMS_' + PAYMENT_LIST]: (state, {payload: {items}}) => ({\r\n        ...state,\r\n        paymentItems: items,\r\n        paymentItemsLoading: false\r\n    }),\r\n\r\n    ['SET_LOADING_' + PAYMENT_TRAFFIC_REPORTS_LIST]: (state, {payload}) => ({...state, paymentTrafficReportsLoading: payload}),\r\n    ['SET_ITEMS_' + PAYMENT_TRAFFIC_REPORTS_LIST]: (state, {payload: {items}}) => ({\r\n        ...state,\r\n        paymentTrafficReportsItems: items,\r\n        paymentTrafficReportsLoading: false\r\n    }),\r\n\r\n    ['SET_LOADING_' + PAYMENT_HAWALA_LIST]: (state, {payload}) => ({...state, hawalaLoading: payload}),\r\n    ['SET_ITEMS_' + PAYMENT_HAWALA_LIST]: (state, {payload: {items}}) => ({\r\n        ...state,\r\n        hawalaItems: items,\r\n        hawalaLoading: false\r\n    }),\r\n    \r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {\r\n    PAYMENT_DETAIL as PREFIX,\r\n} from '../const';\r\nimport {\r\n    PAYMENT_DETAIL_CONFIRM_API,\r\n    PAYMENT_DETAIL_CONFIRM_STATUS_API\r\n} from '../const/apiMethods';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    loading: true,\r\n    confirm_payment: {},\r\n    confirm_status: null\r\n};\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload: {items}}) => ({\r\n        ...state,\r\n        items: items,\r\n        loading: false\r\n    }),\r\n    [PAYMENT_DETAIL_CONFIRM_API]: (state, {payload: {items}}) => ({...state, confirm_payment: items, loading: false}),\r\n    [PAYMENT_DETAIL_CONFIRM_STATUS_API]: (state, {payload: {status}}) => ({...state, confirm_status: status}),\r\n    ['SET_LOADING_' + PREFIX]: (state, {payload}) => ({...state, loading: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {\r\n    SIM_TRAFFIC_RANGES_SET_LIST,\r\n    SIM_TRAFFIC_RANGES_SET_LOADING\r\n} from \"../actions/actionTypes\";\r\nimport {SIM_TRAFFIC_RANGES_GET_POSSIBLE_LIST} from 'const/apiMethods';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    list: [],\r\n    codeList: [],\r\n    count: 0,\r\n    perPage: 10000,\r\n    page: 1\r\n};\r\n\r\n\r\nconst handlers = {\r\n    [SIM_TRAFFIC_RANGES_SET_LOADING]: (state, {payload}) => ({...state, loading: payload}),\r\n    [SIM_TRAFFIC_RANGES_SET_LIST]: (state, {payload}) => ({...state, list: payload.price_range_priority_list, count: payload.price_range_priority_count, page: payload.page, per_page: payload.per_page, loading: false}),\r\n    [SIM_TRAFFIC_RANGES_GET_POSSIBLE_LIST]: (state, {payload}) => ({...state, codeList: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state,action)\r\n};\r\n","import {\r\n    BLOCKED_DESTINATIONS_SET_LIST,\r\n    BLOCKED_DESTINATIONS_SET_LOADING\r\n} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    list: [],\r\n    count: 0\r\n};\r\n\r\n\r\nconst handlers = {\r\n    [BLOCKED_DESTINATIONS_SET_LOADING]: (state, {payload}) => ({...state, loading: payload}),\r\n    [BLOCKED_DESTINATIONS_SET_LIST]: (state, {payload}) => ({\r\n        ...state,\r\n        list: payload.allocation_block_list || [],\r\n        count: payload.allocation_block_count || 0,\r\n        loading: false\r\n    }),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state,action)\r\n};\r\n","import {\r\n    GLOBAL_SETTING_SET_LIST,\r\n    GLOBAL_SETTING_SET_LOADING\r\n} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    list: [],\r\n    count: 0\r\n};\r\n\r\n\r\nconst handlers = {\r\n    [GLOBAL_SETTING_SET_LOADING]: (state, {payload}) => ({...state, loading: payload}),\r\n    [GLOBAL_SETTING_SET_LIST]: (state, {payload}) => ({...state, list: payload.global_setting_list, count: payload.global_setting_count, loading: false}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state,action)\r\n};\r\n","import {PAGE_LOGGER} from '../const';\r\n\r\nconst initialState = {\r\n    pageId: null\r\n};\r\n\r\nconst handlers = {\r\n    [PAGE_LOGGER]: (state, {payload}) => ({\r\n        ...state,\r\n        pageId: payload\r\n    }),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {\r\n    ACTION_LOGS_LIST,\r\n    ACTION_LOGS_SET_LOADING,\r\n    ACTION_LOGS_REFERENCES\r\n} from '../const';\r\n\r\nconst initialState = {\r\n    list: [],\r\n    count: 0,\r\n    page: 1,\r\n    perPage: 100,\r\n    loading: true,\r\n    \r\n    referencesFetched: false,\r\n    managerList: [],\r\n    actionList: [],\r\n    userList: [],\r\n};\r\n\r\nconst handlers = {\r\n    [ACTION_LOGS_SET_LOADING]: (state, {payload}) => ({...state, loading: payload}),\r\n    [ACTION_LOGS_LIST]: (state, {payload: {list, count, page, perPage}}) => ({\r\n        ...state,\r\n        list: list,\r\n        count: count,\r\n        loading: false,\r\n        page: page,\r\n        perPage: perPage,\r\n    }),\r\n    [ACTION_LOGS_REFERENCES]: (state, {payload: {account_user_manager_list, action_list, account_user_list}}) => ({\r\n        ...state,\r\n        managerList: account_user_manager_list,\r\n        actionList: action_list,\r\n        userList: account_user_list,\r\n        referencesFetched: true,\r\n    }),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {\r\n    GOOGLE_OTP_QUARANTINED_SET_LOADING,\r\n    GOOGLE_OTP_QUARANTINED_SET_LIST,\r\n} from '../const';\r\n\r\nconst initialState = {\r\n    list: [],\r\n    loading: true\r\n};\r\n\r\nconst handlers = {\r\n    [GOOGLE_OTP_QUARANTINED_SET_LOADING]: (state, {payload}) => ({...state, loading: payload}),\r\n    [GOOGLE_OTP_QUARANTINED_SET_LIST]: (state, {payload: {list}}) => ({\r\n        ...state,\r\n        list: list,\r\n        loading: false\r\n    }),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {\r\n    GOOGLE_OTP_ALLOCATION_SET_LOADING,\r\n    GOOGLE_OTP_ALLOCATION_SET_LIST,\r\n} from '../const'\r\n\r\nconst initialState = {\r\n    list: [],\r\n    count: 0,\r\n    page: 1,\r\n    perPage: 10,\r\n    loading: true\r\n};\r\n\r\nconst handlers = {\r\n    [GOOGLE_OTP_ALLOCATION_SET_LOADING]: (state, {payload}) => ({...state, loading: payload}),\r\n    [GOOGLE_OTP_ALLOCATION_SET_LIST]: (state, {payload: {list, count, page, perPage}}) => ({\r\n        ...state,\r\n        list: list,\r\n        count: count,\r\n        loading: false,\r\n        page: page,\r\n        perPage: perPage,\r\n    }),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {\r\n    AM_ACTIVITIES_SET_LOADING,\r\n    AM_ACTIVITIES_LIST,\r\n    AM_ACTIVITIES_DATE_LIST_ITEM,\r\n    AM_ACTIVITIES_DATE_LIST_ITEM_REMOVE,\r\n    AM_ACTIVITIES_DATE_LIST_REMOVE,\r\n} from '../const';\r\n\r\nconst initialState = {\r\n    list: [],\r\n    dateList: [],\r\n    loading: true,\r\n};\r\n\r\nconst handlers = {\r\n    [AM_ACTIVITIES_SET_LOADING]: (state, {payload}) => ({...state, loading: payload}),\r\n    [AM_ACTIVITIES_LIST]: (state, {payload: {list}}) => ({\r\n        ...state,\r\n        list: list,\r\n        dateList: [],\r\n        loading: false,\r\n    }),\r\n\r\n    [AM_ACTIVITIES_DATE_LIST_ITEM_REMOVE]: (state, {payload}) => ({\r\n        ...state,\r\n        dateList: state.dateList.filter(item => item.id !== payload),\r\n    }),\r\n        \r\n    [AM_ACTIVITIES_DATE_LIST_ITEM]: (state, {payload: {list, id}}) => ({\r\n        ...state, \r\n        dateList: [...state.dateList, {list, id}],\r\n        loading: false,\r\n    }),\r\n\r\n    [AM_ACTIVITIES_DATE_LIST_REMOVE]: (state) => ({\r\n        ...state,\r\n        dateList: [],\r\n    }),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {\r\n    ACCOUNT_MANAGERS_SET_LOADING,\r\n    ACCOUNT_MANAGERS_LIST,\r\n    ACCOUNT_MANAGERS_USER_LIST,\r\n    ACCOUNT_MANAGERS_REFERENCES,\r\n    ACCOUNT_MANAGERS_BIL,\r\n} from '../const';\r\n\r\nconst initialState = {\r\n    list: [],\r\n    loading: true,\r\n    userList: [],\r\n    teamLeadList: [],\r\n    billingList: [],\r\n};\r\n\r\nconst handlers = {\r\n    [ACCOUNT_MANAGERS_SET_LOADING]: (state, {payload}) => ({...state, loading: payload}),\r\n    [ACCOUNT_MANAGERS_LIST]: (state, {payload: {list}}) => ({\r\n        ...state,\r\n        list: list,\r\n        loading: false,\r\n    }),\r\n    [ACCOUNT_MANAGERS_USER_LIST]: (state, {payload: {userList}}) => ({\r\n        ...state,\r\n        userList: userList,\r\n    }),\r\n    [ACCOUNT_MANAGERS_REFERENCES]: (state, {payload: {userList, teamLeadList}}) => ({\r\n        ...state,\r\n        userList: userList,\r\n        teamLeadList: teamLeadList,\r\n    }),\r\n    [ACCOUNT_MANAGERS_BIL]: (state, {payload: {list}}) => ({\r\n        ...state,\r\n        billingList: list,\r\n    }),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {\r\n    PRICE_RANGE_QUARANTINE_SETTING_LOADING,\r\n    PRICE_RANGE_QUARANTINE_SETTING_LIST,\r\n} from '../const';\r\n\r\nconst initialState = {\r\n    list: [],\r\n    loading: true,\r\n};\r\n\r\nconst handlers = {\r\n    [PRICE_RANGE_QUARANTINE_SETTING_LOADING]: (state, {payload}) => ({...state, loading: payload}),\r\n    [PRICE_RANGE_QUARANTINE_SETTING_LIST]: (state, {payload: {list}}) => ({\r\n        ...state,\r\n        list: list,\r\n        loading: false,\r\n    }),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {\r\n    ACCOUNT_NOTE_LOADING,\r\n    ACCOUNT_NOTE_LIST,\r\n} from '../const';\r\n\r\nconst initialState = {\r\n    list: [],\r\n    count: 0,\r\n    loading: true,\r\n    isFetched: false,\r\n};\r\n\r\nconst handlers = {\r\n    [ACCOUNT_NOTE_LOADING]: (state, {payload}) => ({...state, loading: payload}),\r\n    [ACCOUNT_NOTE_LIST]: (state, {payload: {list, count}}) => ({\r\n        ...state,\r\n        list: list,\r\n        count: count,\r\n        loading: false,\r\n        isFetched: true,\r\n    }),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {\r\n    REGISTRATION_LIST,\r\n    REGISTRATION_COUNT, REGISTRATION_ACCOUNT\r\n} from '../const/'\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    registration_list: [],\r\n    registration_count: 0\r\n};\r\n\r\nconst handlers = {\r\n    [REGISTRATION_LIST]: (state, {payload}) => ({...state, ...payload, loading: false}),\r\n    [REGISTRATION_COUNT]: (state, {payload}) => ({...state, ...payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default  (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state,action)\r\n};\r\n","import {\r\n    IVR as PREFIX,\r\n} from '../const';\r\n\r\nconst initialState = {\r\n    list: [],\r\n    loading: true,\r\n    types: [],\r\n};\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload: {list}}) => ({...state, list: list}),\r\n    ['SET_LOADING_' + PREFIX]: (state, {payload}) => ({...state, loading: payload}),\r\n    ['SET_TYPES_' + PREFIX]: (state, {payload: {types}}) => ({...state, types: types}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {\r\n    IVR_CLI as PREFIX,\r\n} from '../const';\r\n\r\nconst initialState = {\r\n    list: [],\r\n    loading: true,\r\n};\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload: {list}}) => ({...state, list: list}),\r\n    ['SET_LOADING_' + PREFIX]: (state, {payload}) => ({...state, loading: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {\r\n    IVR_SOUNDS as PREFIX,\r\n} from '../const';\r\n\r\nconst initialState = {\r\n    list: [],\r\n    loading: false,\r\n};\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload: {list}}) => ({...state, list: list}),\r\n    ['SET_LOADING_' + PREFIX]: (state, {payload}) => ({...state, loading: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {\r\n    IVR_DEFAULT as PREFIX,\r\n} from '../const';\r\n\r\nconst initialState = {\r\n    ivrDefault: null,\r\n    loading: true,\r\n};\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload: {ivr_default}}) => ({...state, ivrDefault: ivr_default}),\r\n    ['SET_LOADING_' + PREFIX]: (state, {payload}) => ({...state, loading: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {\r\n    REFERENCES_ALLOCATION_LIMIT_LIST,\r\n    SET_ACCOUNT_DIALER_INFO, SET_ACCOUNT_READY_FOR_PAYMENT\r\n} from '../const';\r\n\r\nconst initialState = {\r\n    dialerInfo: null,\r\n    readyForPayment: 0,\r\n    allocation_limit: {}\r\n};\r\n\r\nconst handlers = {\r\n    [SET_ACCOUNT_DIALER_INFO]: (state, {payload}) => ({\r\n        ...state,\r\n        dialerInfo: payload,\r\n        readyForPayment: payload.available_for_payment || 0\r\n    }),\r\n    [REFERENCES_ALLOCATION_LIMIT_LIST]: (state, {payload: allocation_limit}) => ({...state, allocation_limit}),\r\n    [SET_ACCOUNT_READY_FOR_PAYMENT]: (state, {payload}) => ({...state, readyForPayment: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default  (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state,action)\r\n};\r\n\r\n\r\n\r\n","import {\r\n    NUMBERS_DIALER as PREFIX,\r\n    SET_ALL_ALLOCATED_NUMBER_DIALER,\r\n    SET_ALLOCATED_NUMBER_DIALER,\r\n    SET_TRUNK_NUMBER_DIALER,\r\n    SET_TRUNK_NUMBER_ALLOCATED_LOADING_DIALER,\r\n    SET_TRUNK_NUMBER_LOADING_DIALER,\r\n\r\n    SET_LOADING_NUMBERS_ALLOCATED_NUMBERS_DIALER,\r\n    SET_UPLOAD_TRUNK_LOADING_DIALER,\r\n    SET_TRUNK_NUMBER_TRANSACTION_DIALER\r\n} from '../../const';\r\nimport {\r\n    ALLOCATION_NUMBER_LIST_DIALER_API,\r\n    ALLOCATION_TEMPLATE_DIALER_API,\r\n    ALLOCATION_GOOGLE_OTP_DIALER_API\r\n} from \"../../const/apiMethods\";\r\n\r\nconst initialState = {\r\n    items: [],\r\n    loading: false,\r\n    numberTrunkLoading: false,\r\n    numberTrunks: [],\r\n    allocatedNumbersLoading: false,\r\n    loadingAllocatedNumbers: false,\r\n    allocatedNumbers: [],\r\n    allAllocatedNumbers: [],\r\n    allocated_numbers_by_template: [],\r\n    allocated_google_otp_numbers: [],\r\n    allocated_numbers_by_number_list: [],\r\n    count: 0,\r\n    totalNumbersCount: 0,\r\n    page: 1,\r\n    per_page: 10,\r\n    template: {},\r\n    uploadTrunkLoading: {},\r\n    trunk_number_transaction: {}\r\n};\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload}) => ({...state, items: payload, loading: false}),\r\n    ['SET_LOADING_' + PREFIX]: (state, {payload}) => ({...state, loading: payload}),\r\n    [SET_LOADING_NUMBERS_ALLOCATED_NUMBERS_DIALER]: (state, {payload}) => ({...state, loadingAllocatedNumbers: payload}),\r\n    [SET_TRUNK_NUMBER_DIALER]: (state, {payload: numberTrunks}) => ({...state, numberTrunks, numberTrunkLoading: false}),\r\n    [SET_TRUNK_NUMBER_LOADING_DIALER]: (state, {payload: accountTrunkLoading}) => ({...state, accountTrunkLoading}),\r\n    [SET_ALLOCATED_NUMBER_DIALER]: (state, {payload: {items, trunk_number_count, row_count, page, per_page}}) => ({\r\n        ...state,\r\n        allocatedNumbers: items,\r\n        allocatedNumbersLoading: false,\r\n        count: row_count,\r\n        totalNumbersCount: trunk_number_count,\r\n        page,\r\n        per_page\r\n    }),\r\n    [SET_UPLOAD_TRUNK_LOADING_DIALER]: (state, {payload}) => ({...state, uploadTrunkLoading: {...state.uploadTrunkLoading, ...payload}}),\r\n    [SET_ALL_ALLOCATED_NUMBER_DIALER]: (state, {payload: {trunk_number_list}}) => ({\r\n        ...state,\r\n        allAllocatedNumbers: trunk_number_list\r\n    }),\r\n    [SET_TRUNK_NUMBER_ALLOCATED_LOADING_DIALER]: (state, {payload: allocatedNumbersLoading}) => ({\r\n        ...state,\r\n        allocatedNumbersLoading\r\n    }),\r\n    [ALLOCATION_NUMBER_LIST_DIALER_API]: (state, {payload: {price_range_number_list}}) => ({\r\n        ...state,\r\n        allocated_numbers_by_number_list: price_range_number_list,\r\n        loadingAllocatedNumbers: false\r\n    }),\r\n    [ALLOCATION_TEMPLATE_DIALER_API]: (state, {payload: {price_range_number_list}}) => ({\r\n        ...state,\r\n        allocated_numbers_by_template: price_range_number_list,\r\n        loadingAllocatedNumbers: false\r\n    }),\r\n    [ALLOCATION_GOOGLE_OTP_DIALER_API]: (state, {payload: {price_range_number_list}}) => ({\r\n        ...state,\r\n        allocated_google_otp_numbers: price_range_number_list,\r\n        loadingAllocatedNumbers: false\r\n    }),\r\n    [SET_TRUNK_NUMBER_TRANSACTION_DIALER]: (state, {payload}) => ({\r\n        ...state,\r\n        trunk_number_transaction: payload\r\n    }),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {TEST_CALLS_DIALER as PREFIX} from '../../const';\r\nimport {ID} from '../../utils/helpers';\r\nimport {DEFAULT_PER_PAGE_DIALER} from '../../const';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    test_calls_list: [],\r\n    count: 0,\r\n    page: 1,\r\n    per_page: DEFAULT_PER_PAGE_DIALER\r\n};\r\n\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload: {cdr_full_test_list = [], cdr_full_test_count = 0, page, per_page}}) => ({\r\n        ...state,\r\n        test_calls_list: [\r\n            ...cdr_full_test_list.map(x => {\r\n                x.id = ID();\r\n                return x;\r\n            })\r\n        ],\r\n        loading: false,\r\n        count: cdr_full_test_count,\r\n        page,\r\n        per_page\r\n    }),\r\n    ['SET_LOADING_' + PREFIX]: (state, {payload}) => ({...state, loading: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n};\r\n","import {ID} from '../../utils/helpers';\r\nimport {\r\n    DEFAULT_PER_PAGE_DIALER,\r\n    LIVE_CALLS_DIALER as PREFIX\r\n} from '../../const';\r\n\r\nconst initialState = {\r\n    loading: true,\r\n    live_calls_list: [],\r\n    count: 0,\r\n    page: 1,\r\n    per_page: DEFAULT_PER_PAGE_DIALER,\r\n};\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload: {live_calls_list}}) => ({\r\n        ...state,\r\n        live_calls_list: [\r\n            ...live_calls_list.map(x => {\r\n                x.id = ID();\r\n                return x;\r\n            })\r\n        ],\r\n    }),\r\n    ['SET_LOADING_' + PREFIX]: (state, {payload}) => {\r\n        return ({...state, loading: payload})\r\n    },\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n};\r\n","import {CDR_DIALER as PREFIX} from '../../const';\r\nimport {ID} from '../../utils/helpers';\r\nimport {DEFAULT_PER_PAGE_DIALER} from '../../const';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    cdr_list: [],\r\n    count: 0,\r\n    page: 1,\r\n    per_page: DEFAULT_PER_PAGE_DIALER,\r\n    summaries: {},\r\n};\r\n\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload: {cdr_full_list, cdr_full_count, cdr_full_summaries, page, per_page}}) => ({\r\n        ...state,\r\n        cdr_list: [\r\n            ...cdr_full_list.map(x => {\r\n                x.id = ID();\r\n                return x;\r\n            })\r\n        ],\r\n        loading: false,\r\n        count: cdr_full_count,\r\n        summaries: {\r\n           ...cdr_full_summaries\r\n        },\r\n        page,\r\n        per_page\r\n    }),\r\n    ['SET_LOADING_' + PREFIX]: (state, {payload}) => ({...state, loading: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n};\r\n","import {TRAFFIC_STAT_DIALER as PREFIX} from '../../const';\r\nimport {ID} from '../../utils/helpers';\r\nimport {DEFAULT_PER_PAGE_DIALER} from '../../const';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    trafficStat: [],\r\n    count: 0,\r\n    page: 1,\r\n    per_page: DEFAULT_PER_PAGE_DIALER,\r\n    summaries: {}\r\n};\r\n\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload: {group_list, group_count, page, per_page, group_summaries}}) => ({\r\n        ...state, \r\n        trafficStat: [\r\n            ...group_list.map(x => {\r\n                x.id = ID();\r\n                return x;\r\n            })\r\n        ], \r\n        loading: false, \r\n        count: group_count,\r\n        summaries: {\r\n            ...group_summaries\r\n        },\r\n        page, \r\n        per_page\r\n    }),\r\n    ['SET_LOADING_' + PREFIX]: (state, {payload}) => ({...state, loading: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n};\r\n","import {\r\n    PRICE_DIALER as PREFIX,\r\n    REFERENCES_SERVICE_PLAN_DIALER,\r\n    SET_LOADING_PRICE_ALLOCATED_NUMBERS_DIALER,\r\n    SET_TRUNK_NUMBER_DIALER,\r\n    DEFAULT_PER_PAGE_DIALER\r\n} from '../../const';\r\nimport {ALLOCATION_PRICE_RANGE_DIALER_API} from \"../../const/apiMethods\";\r\n\r\nconst initialState = {\r\n    items: [],\r\n    count: 0,\r\n    trunk_list: [],\r\n    allocated_numbers: [],\r\n    service_plan_list: [],\r\n    page: 1,\r\n    per_page: DEFAULT_PER_PAGE_DIALER,\r\n    loading: false,\r\n    loadingAllocatedNumbers: false\r\n};\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload: {ratecard_list, ratecard_count, page, per_page}}) => ({\r\n        ...state,\r\n        items: ratecard_list,\r\n        count: ratecard_count,\r\n        page,\r\n        per_page,\r\n        loading: false\r\n    }),\r\n    ['SET_LOADING_' + PREFIX]: (state, {payload}) => ({...state, loading: payload}),\r\n    [SET_LOADING_PRICE_ALLOCATED_NUMBERS_DIALER]: (state, {payload}) => ({...state, loadingAllocatedNumbers: payload}),\r\n    [SET_TRUNK_NUMBER_DIALER]: (state, {payload: trunks}) => ({...state, trunk_list: trunks}),\r\n    [ALLOCATION_PRICE_RANGE_DIALER_API]: (state, {payload: {price_range_number_list}}) => ({\r\n        ...state,\r\n        allocated_numbers: price_range_number_list,\r\n        loadingAllocatedNumbers: false\r\n    }),\r\n    [REFERENCES_SERVICE_PLAN_DIALER]: (state, {payload:  service_plan_list}) => ({...state,  service_plan_list}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n\r\n}","import {\r\n    ACCESS_LIST_DIALER as PREFIX,\r\n    REFERENCES_SERVICE_PLAN_DIALER,\r\n    SET_LOADING_ACCESS_ALLOCATED_NUMBERS_DIALER\r\n} from '../../const';\r\nimport {DEFAULT_PER_PAGE_DIALER} from '../../const';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    service_plan_list: [],\r\n    count: 0,\r\n    page: 1,\r\n    per_page: DEFAULT_PER_PAGE_DIALER,\r\n    loading: false,\r\n    loadingAllocatedNumbers: false\r\n};\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload: {count, page, access_list_list, per_page}}) => ({\r\n        ...state,\r\n        count,\r\n        items: access_list_list,\r\n        page,\r\n        loading: false,\r\n        per_page\r\n    }),\r\n    ['SET_LOADING_' + PREFIX]: (state, {payload}) => ({...state, loading: payload}),\r\n    [SET_LOADING_ACCESS_ALLOCATED_NUMBERS_DIALER]: (state, {payload}) => ({...state, loadingAllocatedNumbers: payload}),\r\n    [REFERENCES_SERVICE_PLAN_DIALER]: (state, {payload:  service_plan_list}) => ({...state,  service_plan_list}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n\r\n}","import {\r\n    CLI_DIALER as PREFIX\r\n} from '../../const';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    count: 0,\r\n    loading: false\r\n};\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload: {cli_lookup}}) => ({\r\n        ...state,\r\n        items: cli_lookup,\r\n        count: cli_lookup.length,\r\n        loading: false\r\n    }),\r\n    ['SET_LOADING_' + PREFIX]: (state, {payload}) => ({...state, loading: payload}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {\r\n    API_PAGE_DIALER as PREFIX,\r\n} from '../../const';\r\nimport {API_GENERATE_NEW_DIALER_API} from \"../../const/apiMethods\";\r\n\r\nconst initialState = {\r\n    items: [],\r\n    count: 0,\r\n    newItem: null,\r\n    loading: true\r\n};\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload: {keyList}}) => ({\r\n        ...state,\r\n        items: keyList,\r\n        count: keyList.length,\r\n        newItem: state.newItem ? state.newItem : keyList.length && keyList.filter(key => key.active).length ? keyList.filter(key => key.active)[0].api_key : null,\r\n        loading: false\r\n    }),\r\n    ['SET_LOADING_' + PREFIX]: (state, {payload}) => ({...state, loading: payload}),\r\n    [API_GENERATE_NEW_DIALER_API]: (state, {payload: {apiKey}}) => ({...state, newItem: apiKey}),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import {DROPDOWN_ACCOUNTS as PREFIX} from \"../const\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    fetched: false,\r\n    items: [],\r\n};\r\n\r\n\r\nconst handlers = {\r\n    ['SET_ITEMS_' + PREFIX]: (state, {payload}) => ({\r\n        ...state,\r\n        items: payload.items,\r\n        loading: true,\r\n        fetched: true,\r\n    }),\r\n    DEFAULT: state => state\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state,action)\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport accounts from './accounts';\r\nimport settings from './setting';\r\nimport auth from './auth';\r\nimport references from './references';\r\nimport access_list from './access_list'\r\nimport live_calls from \"./live_calls\";\r\nimport prices from \"./prices\";\r\nimport ranges from \"./ranges\";\r\nimport numbers from \"./numbers\";\r\nimport roles from './roles';\r\nimport cdr from './cdr';\r\nimport traffic_reports from \"reducers/traffic_reports\";\r\nimport auth_numbers from './auth_numbers';\r\nimport apiPage from './apiPage';\r\nimport payments from './payments';\r\nimport paymentDetails from './paymentDetails';\r\nimport sim_traffic_ranges from './sim_traffic_ranges';\r\nimport blocked_destinations from './blocked_destinations';\r\nimport global_setting from './global_setting';\r\nimport page_logger from \"./page_logger\";\r\nimport action_logs from \"./action_logs\";\r\nimport google_otp_quarantined from \"./google_otp_quarantined\";\r\nimport google_otp_allocation from \"./google_otp_allocation\";\r\nimport am_activities from \"./am_activities\";\r\nimport account_managers from \"./account_managers\";\r\nimport special_limit_terms from \"./special_limit_terms\";\r\nimport account_note from \"./account_note\";\r\nimport registration from \"./registration\";\r\nimport ivr from \"./ivr\";\r\nimport ivr_cli from \"./ivr_cli\";\r\nimport ivr_sounds from \"./ivr_sounds\";\r\nimport ivr_default from \"./ivr_default\";\r\n\r\n// client\r\nimport auth_dialer from \"./auth_dialer\";\r\nimport client_numbers from \"./client/numbers\";\r\nimport client_test_calls from \"./client/test_calls\";\r\nimport client_live_calls from \"./client/live_calls\";\r\nimport client_cdr from \"./client/cdr\";\r\nimport client_traffic_stat from \"./client/traffic_stat\";\r\nimport client_price from \"./client/price\";\r\nimport client_accesses from \"./client/accesses\";\r\nimport client_cli from \"./client/cli\";\r\nimport client_api_page from \"./client/api_page\";\r\n\r\n\r\n// simple\r\nimport dropdown_accounts from \"./dropdown_accounts\";\r\n\r\n\r\nexport default combineReducers({\r\n    apiPage,\r\n    accounts,\r\n    settings,\r\n    auth,\r\n    references,   \r\n    access_list,\r\n    live_calls,\r\n    prices,\r\n    ranges,\r\n    numbers,\r\n    roles,\r\n    cdr,\r\n    global_setting,\r\n    blocked_destinations,\r\n    traffic_reports,\r\n    auth_numbers,\r\n    payments,\r\n    paymentDetails,\r\n    page_logger,\r\n    sim_traffic_ranges,\r\n    action_logs,\r\n    google_otp_quarantined,\r\n    google_otp_allocation,\r\n    am_activities,\r\n    account_managers,\r\n    special_limit_terms,\r\n    account_note,\r\n    registration,\r\n    ivr,\r\n    ivr_cli,\r\n    ivr_sounds,\r\n    ivr_default,\r\n\r\n    // client\r\n    auth_dialer,\r\n    client_numbers,\r\n    client_test_calls,\r\n    client_live_calls,\r\n    client_cdr,\r\n    client_traffic_stat,\r\n    client_price,\r\n    client_accesses,\r\n    client_cli,\r\n    client_api_page,\r\n\r\n    // simple\r\n    dropdown_accounts\r\n});","import {applyMiddleware, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(rootReducer, {}, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;","import {loginAxios, requestAxios} from './';\r\n\r\nimport {Alert} from \"rsuite\";\r\nimport {responseErrorToString} from \"utils\";\r\nimport packageJson from \"../../package.json\";\r\n\r\nconst appVersion = 'atx_admin/' + packageJson.version;\r\n\r\n\r\nexport const login = (data) => {\r\n    return loginAxios.post('',\r\n        {\r\n            jsonrpc: \"2.0\",\r\n            method: \"account_user_login\",\r\n            params: {...data},\r\n            id: null,\r\n        },\r\n        {\r\n            headers: {\r\n                \"X-App-Version\": appVersion,\r\n            }\r\n        }\r\n    )\r\n};\r\n\r\n\r\nexport const logout = () => {\r\n    return requestAxios.post('',\r\n        {\r\n            jsonrpc: \"2.0\",\r\n            method: \"account_user_session_logout\",\r\n            id: null,\r\n        },\r\n        {\r\n            headers: {\r\n                \"X-App-Version\": appVersion,\r\n            }\r\n        }\r\n    )\r\n        .then(response => response)\r\n        .catch(e => false)\r\n};\r\n\r\n\r\nexport const notAuthApi = (method, params = {}, processErrorManual = true) => {\r\n    return loginAxios.post('',\r\n        {\r\n            jsonrpc: \"2.0\",\r\n            method,\r\n            params,\r\n            id: null\r\n        },\r\n        {\r\n            headers: {\r\n                \"X-App-Version\": appVersion,\r\n            }\r\n        }\r\n    )\r\n        .then(response => (response && response.data && response.data.result) || {})\r\n        .catch((e) => {\r\n            if (processErrorManual) {\r\n                return Promise.reject(e);\r\n            } else if (e.response) {\r\n                Alert.error(responseErrorToString(e.response.data.error));\r\n            }\r\n        })\r\n};\r\n","import {\r\n    DEFAULT_AUTH_PATH_ADMIN,\r\n    DEFAULT_NOT_AUTH_PATH,\r\n    SET_AUTH,\r\n    SET_LOADING_INFO,\r\n    SET_USER_LOGIN_INFO,\r\n    SET_MAINTENANCE_MODE,\r\n    SET_USER_LOCALIZATION,\r\n    APP_TYPE_DEFAULT,\r\n    APP_TYPE_CLIENT, APP_TYPE_ADMIN, DEFAULT_AUTH_PATH_CLIENT_TEST, DEFAULT_AUTH_PATH_CLIENT\r\n} from '../const';\r\nimport {DEFAULT_ERROR_MESSAGE, SET_INFO_ACCOUNT} from '../const';\r\nimport {login, logout} from '../api/auth';\r\nimport {createAction} from  './defaults';\r\nimport { setRoles } from './index';\r\nimport history from '../config/history';\r\nimport {NEED_SECOND_AUTH, SET_PERMISSION, SET_PERMISSION_ADD} from \"../actions/actionTypes\";\r\nimport {api} from \"../api/loginRoutes\";\r\nimport {Alert} from 'rsuite';\r\nimport _ from 'lodash';\r\nimport {LOCAL_STORAGE_USER_INFO} from '../const/localStorageKeys';\r\n\r\n\r\nexport const setAuth = (payload, appType = false) => ({type: SET_AUTH, payload, appType});\r\nconst setLoading = createAction(SET_LOADING_INFO);\r\nconst setInfoAccount = createAction(SET_INFO_ACCOUNT);\r\nconst setUserLoginInfo = createAction(SET_USER_LOGIN_INFO);\r\nconst setMaintenanceModeAction = createAction(SET_MAINTENANCE_MODE);\r\nconst setSecondAuthType = createAction(NEED_SECOND_AUTH);\r\nconst setUserLocals = createAction(SET_USER_LOCALIZATION);\r\n\r\n\r\nexport const setMaintenanceMode = (value) => (dispatch) => {\r\n    dispatch( setMaintenanceModeAction(value) );\r\n    if (value) {\r\n        localStorage.removeItem('api_key');\r\n        localStorage.removeItem(LOCAL_STORAGE_USER_INFO);\r\n        dispatch( setAuth(false) );\r\n        dispatch( setInfoAccount(null) );\r\n    }\r\n};\r\n\r\n\r\nexport const loginUser = ({lang = \"en\", ...data}) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    return login(data)\r\n        .then((response) => {\r\n\r\n            if (!response) {\r\n                return;\r\n            }\r\n\r\n            const result = _.get(response, 'data.result', {});\r\n            const secondAuthType = result.second_authentication_type;\r\n\r\n            if (secondAuthType) {\r\n                dispatch(setSecondAuthType({\r\n                    secondAuthType: secondAuthType === 1\r\n                        ? 'email'\r\n                        : 'phone',\r\n                    secondAuthLink: secondAuthType === 1\r\n                        ? result.email\r\n                        : result.phone,\r\n                    secondAuthEmail: result.email\r\n                }));\r\n                return;\r\n            }\r\n\r\n            const sessionSite = result.session.site;\r\n            const sessionLang = sessionSite === APP_TYPE_ADMIN ? 'en' : lang;\r\n            const sessionLRtl = sessionLang === \"ar\";\r\n            const isTest = result.session.account.is_test;\r\n\r\n            // save data in LocalStorage\r\n            localStorage.setItem('lang', sessionLang);\r\n            localStorage.setItem('rtl', sessionLRtl);\r\n            localStorage.setItem('api_key', result.session.session_key);\r\n            localStorage.setItem('userInfo', JSON.stringify(result));\r\n\r\n            dispatch( setAuth(true, sessionSite) );\r\n            dispatch( setRoles(result.session.account_user.role_list) );\r\n            dispatch( setUserLoginInfo(result) );\r\n            dispatch( setUserLocals({lang: sessionLang, rtl: sessionLRtl}) );\r\n\r\n            if (sessionSite === APP_TYPE_ADMIN) {\r\n                history.push(DEFAULT_AUTH_PATH_ADMIN);\r\n                return;\r\n            }\r\n\r\n            if (isTest) {\r\n                history.push(DEFAULT_AUTH_PATH_CLIENT_TEST);\r\n                return;\r\n            }\r\n\r\n            history.push(DEFAULT_AUTH_PATH_CLIENT);\r\n            return response;\r\n\r\n        })\r\n        .catch((error) => {\r\n\r\n            dispatch(setAuth(false));\r\n\r\n            const reasonCode = _.get(error, 'response.data.error.reason_code', null);\r\n            if (!reasonCode) {\r\n                Alert.error(_.get(error, 'response.data.error.data.error_type', DEFAULT_ERROR_MESSAGE));\r\n            }\r\n\r\n            return error;\r\n            // return Promise.reject(error);\r\n\r\n        })\r\n        .finally(() => {\r\n            dispatch(setLoading(false));\r\n        })\r\n};\r\n\r\n\r\nexport const getPermission = () => (dispatch) => {\r\n    api('permitted_methods').then((resp) => {\r\n        dispatch({\r\n            type: SET_PERMISSION,\r\n            payload: resp\r\n        })\r\n    });\r\n    api('permitted_methods_add').then((resp) => {\r\n       dispatch({\r\n           type: SET_PERMISSION_ADD,\r\n           payload: resp\r\n       })\r\n    })\r\n};\r\n\r\n\r\nexport const logoutUser = () => async (dispatch) => {\r\n    await logout();\r\n\r\n    localStorage.removeItem('api_key');\r\n    localStorage.removeItem(LOCAL_STORAGE_USER_INFO);\r\n    dispatch( setAuth(false) );\r\n    dispatch( setInfoAccount(null) );\r\n\r\n    history.push(DEFAULT_NOT_AUTH_PATH);\r\n};\r\n\r\n\r\nexport const ping = () => async (dispatch) => {\r\n    const res = await api('ping');\r\n\r\n    if (res instanceof Error || !res.ip)\r\n        return false;\r\n\r\n    dispatch( setMaintenanceModeAction(false) );\r\n    return true;\r\n};","import axios from 'axios';\r\nimport {Alert} from 'rsuite';\r\nimport store from '../store/index';\r\nimport {setAuth, setMaintenanceMode} from '../actions/auth';\r\nimport _ from 'lodash';\r\nimport { APP_TYPE_CLIENT, APP_TYPE_DEFAULT } from 'const';\r\n\r\n\r\nconst baseUrl = process.env.REACT_APP_API_URL;\r\nconst codeError = {\r\n    1: 'Authentication error',      // authentication\r\n    2: 'No Permission',             // authorization\r\n    3: 'Validation error',          // validation\r\n    4: 'Data error',                // data\r\n    DEFAULT: 'Server error'\r\n};\r\n\r\n\r\n\r\n// login instance\r\n\r\nconst _loginAxios = () => {\r\n\r\n    const instanceAxios = axios.create({\r\n        baseURL: APP_TYPE_DEFAULT === APP_TYPE_CLIENT ? `${baseUrl}/headers` : baseUrl,\r\n        headers: {\r\n            \"Content-Type\": 'application/json'\r\n        }\r\n    });\r\n\r\n    instanceAxios.interceptors.response.use(function (response) {\r\n        if (response.data.error) {\r\n            return null;\r\n        }\r\n        return response;\r\n    }, function (error) {\r\n        \r\n        if (error.response.status === 423) {\r\n            Alert.error(\"Operation failed. Try again in few seconds\");\r\n            return null;\r\n        }\r\n\r\n        if (error.response.status === 503) {\r\n            store.dispatch( setMaintenanceMode(true) );\r\n            return null;\r\n        }\r\n        return Promise.reject(error);\r\n    });\r\n\r\n    return instanceAxios;\r\n};\r\n\r\n\r\n\r\n// version check instance\r\n\r\nconst _checkVersionAxios = () => {\r\n    const instanceAxios = axios.create({\r\n        headers: {\r\n            \"Content-Type\": 'application/json'\r\n        }\r\n    });\r\n\r\n    instanceAxios.interceptors.response.use(\r\n        function (response) {\r\n            if (response.data.error || response.status === 404) {\r\n                return null;\r\n            }\r\n            return response;\r\n        }, function (error) {\r\n            return Promise.reject(error);\r\n        }\r\n    );\r\n\r\n    return instanceAxios;\r\n};\r\n\r\n\r\n\r\n// common request instance\r\n\r\nconst _requestAxios = (headers = false) => {\r\n\r\n    const url = headers ? `${baseUrl}/headers` : baseUrl;\r\n    let instanceAxios = axios.create({\r\n        baseURL: url,\r\n        headers: {\r\n            \"Content-Type\": 'application/json'\r\n        },\r\n        timeout: 3600000\r\n    });\r\n\r\n\r\n    /* Request Interceptor */\r\n    instanceAxios.interceptors.request.use(function (config) {\r\n\r\n        const session_key = localStorage.getItem('api_key');\r\n        if(session_key) {\r\n            config.baseURL = `${url}?method=${config.data.method}`;\r\n            config.headers = {...config.headers, 'Session-Key': session_key}\r\n        } else {\r\n            unsetAuth();\r\n        }\r\n\r\n        return config;\r\n\r\n    }, function (error) {\r\n        return Promise.reject(error);\r\n    });\r\n\r\n\r\n    /* Response Interceptor */\r\n    instanceAxios.interceptors.response.use(function (response) {\r\n\r\n        const responseError = _.get(response, 'data.error');\r\n        if (responseError) {\r\n            if (responseError.code === 1 || responseError.code === 2) {\r\n                unsetAuth();\r\n            } else {\r\n                Alert.error(codeError[responseError.code] || codeError.DEFAULT);\r\n            }\r\n            return null;\r\n        }\r\n        return response;\r\n\r\n    }, function (error) {\r\n\r\n        // on cancelled request\r\n        if ( axios.isCancel(error) ) {\r\n            return error;\r\n        }\r\n\r\n        const {response} = error;\r\n        \r\n        if (response.status === 423) {\r\n            Alert.error(\"Operation failed. Try again in few seconds\");\r\n            return null;\r\n        }\r\n\r\n        // on enabled maintenance\r\n        if (response.status === 503) {\r\n            store.dispatch( setMaintenanceMode(true) );\r\n            return null;\r\n        }\r\n\r\n        const responseError = _.get(response, 'data.error');\r\n\r\n        if (responseError) {\r\n            if (responseError.code === 1) {\r\n                unsetAuth();\r\n                return null;\r\n            }\r\n\r\n            if (responseError.code === 2) {\r\n                Alert.error(\"No authorization permission\");\r\n                return null;\r\n            }\r\n        }\r\n\r\n        return Promise.reject(error);\r\n\r\n    });\r\n\r\n    return instanceAxios;\r\n};\r\n\r\n\r\n\r\n// form data request instance\r\n\r\nconst _requestFormDataAxios = () => {\r\n\r\n    const url = baseUrl;\r\n    let instanceAxios = axios.create({\r\n        baseURL: url,\r\n        headers: {\r\n            \"Content-Type\": 'multipart/form-data'\r\n        },\r\n        timeout: 3600000\r\n    });\r\n\r\n\r\n    /* Request Interceptor */\r\n    instanceAxios.interceptors.request.use(function (config) {\r\n\r\n        const configCopy = {...config};\r\n        const session_key = localStorage.getItem('api_key');\r\n        if(session_key) {\r\n            configCopy.baseURL = `${url}?method=${configCopy.data.method}`;\r\n            configCopy.headers = {...configCopy.headers, 'Session-Key': session_key}\r\n        } else {\r\n            unsetAuth();\r\n        }\r\n\r\n        const bodyFormData = new FormData();\r\n        bodyFormData.append('file', configCopy.data.params.files[0]);\r\n        delete configCopy.data.params.files;\r\n        bodyFormData.append( 'json', JSON.stringify(configCopy.data) );\r\n        configCopy.data = bodyFormData;\r\n\r\n        return configCopy;\r\n\r\n    }, function (error) {\r\n        return Promise.reject(error);\r\n    });\r\n\r\n    return instanceAxios;\r\n};\r\n\r\n\r\nconst unsetAuth = () => {\r\n    store.dispatch( setAuth(false) );\r\n    if (localStorage.getItem('api_key'))\r\n        localStorage.removeItem('api_key');\r\n};\r\n\r\n\r\n\r\nexport const loginAxios = _loginAxios();\r\nexport const requestAxios = _requestAxios();\r\nexport const requestFormDataAxios = _requestFormDataAxios();\r\nexport const requestAxiosWithHeaders = _requestAxios(true);\r\nexport const checkVersionAxios = _checkVersionAxios();","export const pageIdLogObject = {\r\n    pageMatch: {\r\n        path: null,\r\n    },\r\n    lastTab: null,\r\n};","import {checkVersionAxios, requestAxios, requestAxiosWithHeaders, requestFormDataAxios} from '.';\r\nimport {responseErrorToString} from \"utils\";\r\nimport {Alert} from 'rsuite';\r\nimport axios from \"axios\";\r\nimport {pageIdLogObject} from \"../utils/pageIdLogger\";\r\nimport {APP_VERSION} from \"../index\";\r\nimport _ from \"lodash\";\r\n\r\n\r\n\r\n\r\nexport const api = (method = '', params = {}, processErrorManual, cancelToken, withHeaders = false) => {\r\n\r\n    const paramsCloned = {...params};\r\n    const config = {\r\n        headers: {\"X-App-Version\": 'atx_admin/' + APP_VERSION}\r\n    };\r\n\r\n    // cancelToken as f argument is deprecated. use params property \"cancelToken\" instead\r\n    if (cancelToken) {\r\n        config.cancelToken = cancelToken.token;\r\n    }\r\n\r\n    if (paramsCloned.cancelToken) {\r\n        config.cancelToken = paramsCloned.cancelToken.token;\r\n        delete paramsCloned.cancelToken;\r\n    }\r\n\r\n    const currentPage = pageIdLogObject.pageMatch.path;\r\n    const requestApi = withHeaders ? requestAxiosWithHeaders : requestAxios;\r\n    return requestApi.post('',\r\n        {\r\n            jsonrpc: \"2.0\",\r\n            method,\r\n            params: paramsCloned,\r\n            page_id: currentPage,\r\n            id: null\r\n        },\r\n        config\r\n    )\r\n    .then(response => {\r\n        if (axios.isCancel(response))\r\n            return response;\r\n\r\n        const result = _.get(response, 'data.result', {});\r\n\r\n        if ( result.reason_code && method.lastIndexOf(\"allocation:\") === 0 ) {\r\n            result.hash = response.data.hash;\r\n        }\r\n\r\n        return (response && response.data && response.data.result) || {}\r\n    })\r\n        .catch((error) => {\r\n\r\n            if (error && !error.response) {\r\n                return error;\r\n            }\r\n\r\n            if (processErrorManual) {\r\n                return error.response.data;\r\n            } else {\r\n\r\n                if ( error.response && error.response.data.error.reason_code && method.lastIndexOf(\"allocation:\") === 0 ) {\r\n                    const data = error.response.data.error;\r\n                    return {\r\n                        ...data,\r\n                        hash: error.response.data.hash\r\n                    };\r\n                }\r\n\r\n                if (!error.response || error.response.status !== 503)\r\n                    Alert.error(responseErrorToString(error.response.data.error));\r\n            }\r\n        })\r\n};\r\n\r\n\r\n\r\n\r\nexport const apiFormData = (method = '', params = {}, processErrorManual) => {\r\n\r\n    const paramsCloned = {...params};\r\n    return requestFormDataAxios.post(\"\",\r\n        {\r\n            jsonrpc: \"2.0\",\r\n            method,\r\n            params: paramsCloned,\r\n            page_id: pageIdLogObject.pageMatch.path,\r\n            id: null\r\n        }\r\n    )\r\n    .then(response => (\r\n        response && response.data && response.data.result) || {}\r\n    )\r\n    .catch((error) => {\r\n        if (error && !error.response) {\r\n            return error;\r\n        }\r\n        if (processErrorManual) {\r\n            return error.response.data;\r\n        } else {\r\n            if (!error.response || error.response.status !== 503) {\r\n                Alert.error(responseErrorToString(error.response.data.error));\r\n            }\r\n        }\r\n    })\r\n};\r\n\r\n\r\n\r\n\r\nexport const generateApiUrl = ({method, path = ''}) => {\r\n    return `${process.env.REACT_APP_API_URL}${path}?method=${method}`\r\n};\r\n\r\n\r\n\r\n\r\nexport const getCsvResponse = (method, params) => {\r\n    const currentPage = pageIdLogObject.pageMatch.path;\r\n\r\n    return requestAxios.post(\r\n        generateApiUrl({method, path: '/csv'}),\r\n        {\r\n            jsonrpc: '2.0',\r\n            method,\r\n            params,\r\n            page_id: currentPage,\r\n            id: null,\r\n        },\r\n        {\r\n            responseType: 'text/csv',\r\n            headers: {\r\n                \"X-App-Version\": 'atx_admin/' + APP_VERSION,\r\n            }\r\n        }\r\n\r\n        )\r\n        .then( response => (response && response.data) )\r\n        .catch( e => null )\r\n};\r\n\r\n\r\n\r\n\r\nexport const getFileResponse = (method, params) => {\r\n    const currentPage = pageIdLogObject.pageMatch.path;\r\n\r\n    return requestAxios.post(\r\n        generateApiUrl({method, path: '/csv'}),\r\n        {\r\n            jsonrpc: '2.0',\r\n            method,\r\n            params,\r\n            page_id: currentPage,\r\n            id: null,\r\n        },\r\n        {\r\n            responseType: 'blob',\r\n            headers: {\r\n                \"X-App-Version\": 'atx_admin/' + APP_VERSION,\r\n            }\r\n        }\r\n\r\n    )\r\n    .then( response => (response && response.data) )\r\n    .catch( e => null )\r\n};\r\n\r\n\r\n\r\n\r\nexport const apiWithHeaders = (method, params) => {\r\n    const currentPage = pageIdLogObject.pageMatch.path;\r\n    console.log(\"+++ awh \", currentPage, method);\r\n    return requestAxiosWithHeaders.post(``,\r\n        {\r\n            jsonrpc: '2.0',\r\n            params,\r\n            method,\r\n            page_id: currentPage,\r\n            id: null\r\n        },\r\n        {headers: {\r\n                \"X-App-Version\": 'atx_client/' + APP_VERSION,\r\n                httpAgent: 123\r\n            }})\r\n        .then(response => (response && response.data && response.data.result) || {})\r\n        .catch(e => e)\r\n};\r\n\r\n\r\n\r\n\r\nexport const getAppVersion = () => {\r\n    return checkVersionAxios.get(`/meta.json?timestamp=${Date.now()}`)\r\n        .then( (response) => response && response.data && response.data.version\r\n            ? response.data\r\n            : null\r\n        )\r\n        .catch( e => null )\r\n};","import {REFERENCES_DIALER_TRUNK} from '../const/';\r\nimport {REFERENCES_ALL_SET_LISTS, REFERENCES_SET_LISTS, REFERENCES_SET_LOADING} from './actionTypes';\r\n\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from './defaults';\r\nimport {\r\n    REFERENCES_FOR_REPORTS_METHOD,\r\n    REFERENCES_ADMIN,\r\n    REFERENCES_CLIENT,\r\n    REFERENCES_ALL_METHOD,\r\n} from '../const/apiMethods';\r\nimport {APP_TYPE_ADMIN} from \"../const\";\r\n\r\n\r\nconst setLoading = createAction(REFERENCES_SET_LOADING);\r\nconst setReferences = createAction(REFERENCES_SET_LISTS);\r\nconst setAllReferences = createAction(REFERENCES_ALL_SET_LISTS);\r\n\r\n\r\n// GET APP REFERENCES\r\nexport const getReferences = (appType = APP_TYPE_ADMIN) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    const method = appType === APP_TYPE_ADMIN ? REFERENCES_ADMIN : REFERENCES_CLIENT;\r\n    api(method)\r\n        .then((references) => {\r\n            dispatch(setReferences(references));\r\n        })\r\n        .finally(() => dispatch(setLoading(false)));\r\n};\r\n\r\n\r\n\r\nexport const getReferencesForReports = () => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n\r\n    api(REFERENCES_FOR_REPORTS_METHOD)\r\n        .then((references) => {\r\n            dispatch(setReferences(references));\r\n        })\r\n        .finally(() => dispatch(setLoading(false)));\r\n};\r\n\r\nconst setDialerTrunk = createAction(REFERENCES_DIALER_TRUNK);\r\n\r\nexport const getDialerTrunk = () => (dispatch) => {\r\n    api('trunk_list_for_accounts')\r\n        .then(({trunk_list = []}) => {\r\n            dispatch(setDialerTrunk(trunk_list.map(\r\n                x =>({\r\n                    ...x,\r\n                    trunk_id: x.tr_uuid,\r\n                    _name:`${x.acc_name}\\\\${x.tr_name}\\\\${x.sp_name}`\r\n                })\r\n            )));\r\n        })\r\n};\r\n\r\nexport const getAllReferences = () => (dispatch) => {\r\n    api(REFERENCES_ALL_METHOD).then((response) => {\r\n            dispatch(setAllReferences(response));\r\n            dispatch(setLoading(false));\r\n\r\n    })\r\n};","import React, {useEffect} from \"react\";\r\nimport {Container, Content, FlexboxGrid, Header, Icon, Navbar, Panel} from \"rsuite\";\r\nimport {connect} from \"react-redux\";\r\nimport {ping} from \"../../actions/auth\";\r\n\r\nconst styleContainer = {\r\n    minHeight: '100vh'\r\n};\r\n\r\nconst stylePanel = {\r\n    marginTop: '20vh',\r\n    width: '100%',\r\n    maxWidth: '500px',\r\n    minWidth: '340px'\r\n};\r\n\r\n\r\nconst Maintenance = ({ping, maintenanceMode}) => {\r\n\r\n    const pingQuery = (func) => {\r\n        setTimeout( async () => {\r\n            const result = await func();\r\n            if (!result) {\r\n                pingQuery(func);\r\n            }\r\n        }, 15000 );\r\n    };\r\n\r\n    useEffect( () => {\r\n        if (!maintenanceMode)\r\n            return;\r\n\r\n        pingQuery(ping);\r\n    }, [maintenanceMode, ping, pingQuery]);\r\n\r\n    return (\r\n        <Container style={styleContainer}>\r\n            <Header>\r\n                <Navbar appearance=\"inverse\">\r\n                    <Navbar.Header></Navbar.Header>\r\n                </Navbar>\r\n            </Header>\r\n            <Content>\r\n                <FlexboxGrid justify=\"center\" style={{width: '100%'}}>\r\n                    <FlexboxGrid.Item style={stylePanel}>\r\n                        <Panel\r\n                            className=\"panel__noShadow\"\r\n                            header={<h3>The site is under maintenance</h3>}\r\n                            style={{\r\n                                width: '100%',\r\n                                textAlign: 'center',\r\n                            }}\r\n                        >\r\n                            <Icon\r\n                                style={{\r\n                                    fill: 'red',\r\n                                }}\r\n                                icon=\"gears2\"\r\n                                size=\"5x\"\r\n                            />\r\n                            <p style={{paddingTop: '30px'}}>Premiumy is currently under maintenance. We should be back shortly. Thank you for your patience.</p>\r\n                        </Panel>\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n            </Content>\r\n        </Container>\r\n    )\r\n};\r\n\r\nconst mapState = ({auth}) => ({\r\n    maintenanceMode: auth.maintenanceMode\r\n});\r\nexport default connect(mapState, {ping})(Maintenance);","import {useEffect, useState} from \"react\";\r\nimport {customDebounce} from \"../utils\";\r\n\r\n\r\nexport default () => {\r\n\r\n    const [resizedWidth, setWidth] = useState(window.innerWidth);\r\n\r\n    useEffect(() => {\r\n\r\n        const debouncedHandleResize = customDebounce(function handleResize() {\r\n            setWidth(window.innerWidth);\r\n        }, 300);\r\n\r\n        window.addEventListener('resize', debouncedHandleResize);\r\n        return () => {\r\n            window.removeEventListener('resize', debouncedHandleResize);\r\n        };\r\n    }, []);\r\n\r\n    return resizedWidth;\r\n}","import React from 'react';\r\nimport {Button, Icon, IconButton, ButtonToolbar as ButtonToolbar_} from 'rsuite';\r\nimport styled, {css} from 'styled-components';\r\nimport {APP_TYPE_CLIENT, SCREEN_MEDIA} from \"../../const\";\r\n\r\nconst {sm} = SCREEN_MEDIA;\r\n\r\nconst buttonSizes = {\r\n    sm: '6px 12px',\r\n    esm: '2px 14px',\r\n};\r\n\r\n\r\n/* Base Buttons */\r\nconst StyledBaseButton = styled(Button)`\r\n    outline: none;\r\n`;\r\n\r\n\r\n\r\n/* Default Buttons*/\r\n\r\nexport const BaseButton = styled(StyledBaseButton).attrs(props => ({\r\n    buttonStyle_: props.buttonStyle || 'default',\r\n    isClient: props.theme.appType === APP_TYPE_CLIENT\r\n}))`\r\n    && {\r\n        border-radius: 5px;\r\n        color: #ffffff;\r\n        background-color: var(--color-grey);\r\n        box-shadow: ${props => props.withShadow \r\n            ? 'rgba(0, 0, 0, 0.16) 0px 4px 4px' \r\n            : 'none'\r\n        }\r\n        \r\n        ${props => props.isClient && css`\r\n            box-shadow: none;\r\n            min-width: ${props => props.minWidth || props.minWidth === 0 || '160'}px;\r\n        `}\r\n        \r\n        &:focus,\r\n        &:hover,\r\n        &:focus:hover,\r\n        &:active:hover,\r\n        &:active:focus, \r\n        &:active.focus {\r\n            background-color: #f7f7fa;\r\n            color: var(--color-text);\r\n        }\r\n        \r\n        ${props => {\r\n            switch (props.buttonStyle) {\r\n                case \"default\":\r\n                    return css`\r\n                        color: var(--color-text);\r\n                        background-color: #f7f7fa;\r\n                        border-color: #f7f7fa;\r\n                        \r\n                        &:focus,\r\n                        &:hover,\r\n                        &:focus:hover,\r\n                        &:active:hover,\r\n                        &:active:focus, \r\n                        &:active.focus {\r\n                            color: var(--color-text);\r\n                            background-color: #e5e5ea;\r\n                            border-color: #e5e5ea;\r\n                        }\r\n                    `;\r\n                    \r\n                case \"secondary\":\r\n                    return css `\r\n                        color: #ffffff;\r\n                        background-color: var(--color-primary);\r\n                        border-color: var(--color-primary);\r\n                        \r\n                        &:focus,\r\n                        &:hover,\r\n                        &:focus:hover,\r\n                        &:active:hover,\r\n                        &:active:focus, \r\n                        &:active.focus {\r\n                            color: #ffffff;\r\n                            background-color: var(--color-primary-hover);\r\n                            border-color: var(--color-primary-hover);\r\n                        }\r\n                    `;\r\n                    \r\n                case \"primary\":\r\n                    return css `\r\n                        color: #ffffff;\r\n                        background-color: var(--color-secondary);\r\n                        border-color: var(--color-secondary);\r\n                        \r\n                        &:focus,\r\n                        &:hover,\r\n                        &:focus:hover,\r\n                        &:active:hover,\r\n                        &:active:focus, \r\n                        &:active.focus {\r\n                            color: #ffffff;\r\n                            background-color: var(--color-secondary-hover);\r\n                            border-color: var(--color-secondary-hover);\r\n                        }\r\n                    `;\r\n\r\n                case \"error\":\r\n                    return css `\r\n                        color: #ffffff;\r\n                        background-color: var(--color-error);\r\n                        border-color: var(--color-error);\r\n                        \r\n                        &:hover {\r\n                            color: #575757;\r\n                            background-color: #f7f7fa;\r\n                            border-color: #f7f7fa;\r\n                        }\r\n\r\n                        &:focus,\r\n                        &:focus:hover,\r\n                        &:active:hover,\r\n                        &:active:focus, \r\n                        &:active.focus {\r\n                            color: var(--color-text);\r\n                            background-color: #e5e5ea;\r\n                            border-color: #e5e5ea;\r\n                        }\r\n                    `;\r\n            }\r\n        }}\r\n        \r\n        ${props => props.bordered && css`\r\n            background-color: transparent;\r\n            border-style: solid;\r\n            border-width: 2px;\r\n            color: #363434;\r\n            \r\n            &:focus,\r\n            &:hover,\r\n            &:focus:hover,\r\n            &:active:hover,\r\n            &:active:focus, \r\n            &:active.focus {\r\n                color: #363434;\r\n                background-color: #e5e5ea;\r\n            }\r\n        `}\r\n\r\n        &.rs-btn-disabled,\r\n        &:disabled {\r\n            color: #ffffff !important;\r\n            background: #939191 !important;\r\n            opacity: 0.3 !important;\r\n            \r\n            ${props => !props.isClient && css`\r\n                &:hover {\r\n                    opacity: 0.45 !important;\r\n                }\r\n            `}\r\n\r\n        }\r\n        \r\n        @media (max-width: ${sm.max}px) {\r\n            padding: ${props => buttonSizes[props.size] || '12px 18px'};\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ButtonContent = styled(BaseButton).attrs((props) => ({\r\n    size: props.theme.appType !== APP_TYPE_CLIENT ? \"lg\" : \"md\",\r\n    withShadow: true\r\n}))``;\r\n\r\n\r\nexport const ButtonDefault = styled(ButtonContent).attrs(() => ({\r\n    buttonStyle: 'default'\r\n}))``;\r\n\r\nexport const ButtonPrimary = styled(ButtonContent).attrs(() => ({\r\n    buttonStyle: 'primary'\r\n}))``;\r\n\r\nexport const ButtonSecondary = styled(ButtonContent).attrs(() => ({\r\n    buttonStyle: 'secondary'\r\n}))``;\r\n\r\nexport const ButtonSubtle = styled(ButtonContent)`\r\n    &&&& {\r\n        color: #8e8e93;\r\n        background-color: transparent;\r\n        \r\n        &:hover {\r\n            color: #575757;\r\n            background-color: #f7f7fa;\r\n        }\r\n        \r\n        &:focus,\r\n        &:focus:hover,\r\n        &:active:hover,\r\n        &:active:focus, \r\n        &:active.focus {\r\n            color: var(--color-text);\r\n            background-color: #e5e5ea;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ButtonClose = styled(ButtonContent).attrs(() => ({\r\n    buttonStyle: 'error'\r\n}))``;\r\n\r\nexport const BorderBtn = ({children, ...props}) => (\r\n    <BaseButton {...props} bordered>{children}</BaseButton>\r\n);\r\n\r\nexport const ButtonCancel = ({children, ...props}) => (\r\n    <BaseButton {...props} buttonStyle={\"default\"}>{children}</BaseButton>\r\n);\r\n\r\n\r\n\r\n/* Row Buttons */\r\n\r\nexport const ButtonRow = styled(StyledBaseButton).attrs((props) => ({\r\n    appearance: \"primary\",\r\n    size: props.size || \"xs\",\r\n}))`\r\n    background-color: #20BA88;\r\n    margin-right: 15px;\r\n`;\r\n\r\nexport const ButtonRowClient = styled(ButtonRow)`\r\n    &&& {\r\n        background-color: var(--color-brand2) !important;\r\n        font-size: 14px;\r\n        \r\n        &:hover {\r\n            background-color: #5f2bb3 !important;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ButtonRowRevoke = (props) => (\r\n    <ButtonRow {...props}><b>R</b></ButtonRow>\r\n);\r\n\r\nexport const ButtonRowAllocate = (props) => (\r\n    <ButtonRow {...props}><b>A</b></ButtonRow>\r\n);\r\n\r\nexport const ButtonRowEdit = (props) => (\r\n    <ButtonRow\r\n        {...props}\r\n        as={IconButton}\r\n        icon={<Icon icon=\"edit\"/>}\r\n    />\r\n);\r\n\r\nexport const ButtonRowDownload = (props) => (\r\n    <ButtonRow\r\n        {...props}\r\n        as={IconButton}\r\n        icon={<Icon icon=\"cloud-download\"/>}\r\n    />\r\n);\r\n\r\nexport const ButtonRowDelete = (props) => (\r\n    <ButtonRow\r\n        {...props}\r\n        as={IconButton}\r\n        icon={<Icon icon=\"trash\"/>}\r\n    />\r\n);\r\n\r\n\r\n\r\n/* Misc buttons */\r\n\r\nconst StyledButtonSideIcon = styled(StyledBaseButton)`\r\n    && {\r\n        background: transparent;\r\n        color: #363434;\r\n        padding: 3px 8px;\r\n        border: 2px solid #20BA88;\r\n        position: relative;\r\n        padding-left: 35px;\r\n        \r\n        i {\r\n            position: absolute;\r\n            background: #20BA88;\r\n            top: 0;\r\n            left: 0;\r\n            color: #fff;\r\n            width: 26px;\r\n            height: 30px;\r\n            display: inline-block;\r\n            line-height: 26px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ButtonSideIcon = ({children, icon, ...props}) => (\r\n    <StyledButtonSideIcon {...props}>\r\n        <Icon icon={icon}/>\r\n        {children}\r\n    </StyledButtonSideIcon>\r\n);\r\n\r\n\r\nexport const ButtonList = styled(IconButton).attrs(() => ({\r\n    size: \"xs\"\r\n}))`\r\n    &&& {\r\n        background: #fff;\r\n        border: 2px solid #20BA88;\r\n        border-radius: 100%;\r\n        margin-left: 5px;\r\n        margin-right: 15px;\r\n        color: #000;\r\n        padding: 0;\r\n        width: 24px;\r\n        height: 24px;\r\n        \r\n        .rs-icon {\r\n            line-height: 17px;\r\n            font-size: 10px;\r\n            height: 20px;\r\n            width: 20px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ButtonListAdd = (props) => (\r\n    <ButtonList\r\n        {...props}\r\n        icon={<Icon icon=\"plus\" />}\r\n    />\r\n);\r\n\r\nexport const ButtonListRemove = (props) => (\r\n    <ButtonList\r\n        {...props}\r\n        icon={<Icon icon=\"minus\" />}\r\n    />\r\n);\r\n\r\nexport const ButtonWrapper = styled.div.attrs(() => ({\r\n    className: 'button-wrapper'\r\n}))`\r\n    & {\r\n        margin-bottom: -10px;\r\n        margin-left: -5px;\r\n        margin-right: -5px;\r\n        \r\n        & > .rs-btn,\r\n        & > .rs-btn-toolbar {\r\n            display: inline-block;\r\n            margin-bottom: 10px;\r\n            margin-left: 5px;\r\n            margin-right: 5px;\r\n            vertical-align: top;\r\n        }\r\n        \r\n        ${props => props.justify === \"end\" && css`\r\n            text-align: right;\r\n            \r\n            .app-client & {\r\n                text-align: left;\r\n            }\r\n        `}\r\n    }\r\n`;\r\n\r\nexport const ButtonToolbar = styled(ButtonToolbar_).attrs(props => ({\r\n    classPrefix: 'button-toolbar',\r\n    size: (props.size || 10) / 2,\r\n}))`\r\n    & {\r\n        margin-left: -${props => props.size + 'px'};\r\n        margin-right: -${props => props.size + 'px'};\r\n        \r\n        & > a,\r\n        & > .rs-btn {\r\n            display: inline-block;\r\n            margin-left: ${props => props.size + 'px'};\r\n            margin-right: ${props => props.size + 'px'};\r\n        }\r\n    }\r\n\r\n    ${props => props.alignEnd && css`\r\n        && {\r\n            text-align: right;\r\n\r\n            .rtl & {\r\n                text-align: left;\r\n            }\r\n        }\r\n    `}\r\n\r\n    .rs-table & {\r\n        margin-top: -3px;\r\n    }\r\n`;\r\n\r\n\r\nexport const ButtonFixedBottom = styled(ButtonPrimary)`\r\n    && {\r\n        border-radius: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        padding-bottom: 17px;\r\n        padding-top: 17px;\r\n        position: fixed;\r\n        width: 100%;\r\n        z-index: 10;\r\n    }\r\n`;","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n\r\n    // a\r\n    accept: {\r\n        id: 'common.accept',\r\n        defaultMessage: \"Accept\",\r\n        description: 'common: Accept'\r\n    },\r\n    accessDestination: {\r\n        id: 'common.accessDestination',\r\n        defaultMessage: 'Access destination',\r\n        description: 'common: Access destination'\r\n    },\r\n    accessOrigin: {\r\n        id: 'common.accessOrigin',\r\n        defaultMessage: 'Access origin',\r\n        description: 'common: Access origin'\r\n    },\r\n    action: {\r\n        id: 'common.action',\r\n        defaultMessage: 'Action',\r\n        description: 'common: Action'\r\n    },\r\n    active: {\r\n        id: 'common.active',\r\n        defaultMessage: 'Active',\r\n        description: 'common: Active'\r\n    },\r\n    address: {\r\n        id: 'common.address',\r\n        defaultMessage: 'Address',\r\n        description: 'common: Address'\r\n    },\r\n    allocate: {\r\n        id: 'common.allocate',\r\n        defaultMessage: 'Allocate',\r\n        description: 'common: Allocate'\r\n    },\r\n    allocatedNumbers: {\r\n        id: 'common.allocatedNumbers',\r\n        defaultMessage: 'Allocated numbers',\r\n        description: 'common: Allocated numbers'\r\n    },\r\n    allocatedNumbersAndRanges: {\r\n        id: 'common.allocatedNumbersAndRanges',\r\n        defaultMessage: 'Allocated numbers and ranges',\r\n        description: 'common: Allocated numbers and ranges'\r\n    },\r\n    allocatedNumberList: {\r\n        id: \"common.allocatedNumberList\",\r\n        defaultMessage: \"Allocated number list\",\r\n        description: 'Access, AccessNewNumbersModal: Allocated number list'\r\n    },\r\n    amount: {\r\n        id: 'common.amount',\r\n        defaultMessage: 'Amount',\r\n        description: 'common: Amount'\r\n    },\r\n    areYouSure: {\r\n        id: 'common.areYouSure',\r\n        defaultMessage: 'Are you sure?',\r\n        description: 'common: Are you sure?'\r\n    },\r\n    availableNumbers: {\r\n        id: 'common.availableNumbers',\r\n        defaultMessage: 'Available numbers',\r\n        description: 'common: Available numbers'\r\n    },\r\n\r\n\r\n    // b\r\n    bNumber: {\r\n        id: 'common.bNumber',\r\n        defaultMessage: 'B-number',\r\n        description: 'common: B-number'\r\n    },\r\n    billingIncrement: {\r\n        id: 'common.billingIncrement',\r\n        defaultMessage: 'Billing increment',\r\n        description: 'common: Billing increment'\r\n    },\r\n    byName: {\r\n        id: 'common.byName',\r\n        defaultMessage: 'by {name}',\r\n        description: 'common: by {name}'\r\n    },\r\n\r\n\r\n    // c\r\n    calls: {\r\n        id: 'common.calls',\r\n        defaultMessage: 'Calls',\r\n        description: 'common: Calls'\r\n    },\r\n    cancel: {\r\n        id: 'common.cancel',\r\n        defaultMessage: 'Cancel',\r\n        description: 'common: Cancel'\r\n    },\r\n    canceled: {\r\n        id: 'common.canceled',\r\n        defaultMessage: 'Canceled',\r\n        description: 'common: Canceled'\r\n    },\r\n    city: {\r\n        id: 'common.city',\r\n        defaultMessage: 'City',\r\n        description: 'common: City'\r\n    },\r\n    cli: {\r\n        id: 'common.cli',\r\n        defaultMessage: 'CLI',\r\n        description: 'common: CLI'\r\n    },\r\n    close: {\r\n        id: 'common.close',\r\n        defaultMessage: 'Close',\r\n        description: 'common: Close'\r\n    },\r\n    completed: {\r\n        id: 'common.completed',\r\n        defaultMessage: 'Completed',\r\n        description: 'common: Completed'\r\n    },\r\n    confirm: {\r\n        id: 'common.confirm',\r\n        defaultMessage: 'Confirm',\r\n        description: 'common: Confirm'\r\n    },\r\n    confirmation: {\r\n        id: 'common.confirmation',\r\n        defaultMessage: 'Confirmation',\r\n        description: 'common: Confirmation'\r\n    },\r\n    confirmed: {\r\n        id: 'common.confirmed',\r\n        defaultMessage: 'Confirmed',\r\n        description: 'common: Confirmed'\r\n    },\r\n    copied: {\r\n        id: 'common.copied',\r\n        defaultMessage: 'Copied!',\r\n        description: 'common: Copied!'\r\n    },\r\n    copyJustNumbers: {\r\n        id: 'common.copyJustNumbers',\r\n        defaultMessage: 'Copy just numbers',\r\n        description: 'common: Copy just numbers'\r\n    },\r\n    copyList: {\r\n        id: 'common.copyList',\r\n        defaultMessage: 'Copy list',\r\n        description: 'common: Copy list'\r\n    },\r\n    copyListAllocatedByPrefix: {\r\n        id: 'common.copyListAllocatedByPrefix',\r\n        defaultMessage: 'Copy list allocated by prefix',\r\n        description: 'common: Copy list allocated by prefix'\r\n    },\r\n    cost: {\r\n        id: 'common.cost',\r\n        defaultMessage: 'Cost',\r\n        description: 'common: Cost'\r\n    },\r\n    country: {\r\n        id: 'common.country',\r\n        defaultMessage: 'Country',\r\n        description: 'common: Country'\r\n    },\r\n    created: {\r\n        id: 'common.created',\r\n        defaultMessage: 'Created',\r\n        description: 'common: Created'\r\n    },\r\n    currency: {\r\n        id: 'common.currency',\r\n        defaultMessage: 'Currency',\r\n        description: 'common: Currency'\r\n    },\r\n\r\n\r\n    // d\r\n    date: {\r\n        id: 'common.date',\r\n        defaultMessage: 'Date',\r\n        description: 'common: Date'\r\n    },\r\n    dateFrom: {\r\n        id: 'common.dateFrom',\r\n        defaultMessage: 'Date from',\r\n        description: 'common: Date from'\r\n    },\r\n    datetime: {\r\n        id: 'common.datetime',\r\n        defaultMessage: 'Datetime',\r\n        description: 'common: Datetime'\r\n    },\r\n    declined: {\r\n        id: 'common.declined',\r\n        defaultMessage: 'Declined',\r\n        description: 'common: Declined'\r\n    },\r\n    description: {\r\n        id: 'common.description',\r\n        defaultMessage: 'Description',\r\n        description: 'common: Description'\r\n    },\r\n    destination: {\r\n        id: 'common.destination',\r\n        defaultMessage: 'Destination',\r\n        description: 'common: Destination'\r\n    },\r\n    destinationDoesNotExist: {\r\n        id: 'common.destinationDoesNotExist',\r\n        defaultMessage: 'destination does not exist',\r\n        description: 'common: destination does not exist'\r\n    },\r\n    destinationFilter: {\r\n        id: 'common.destinationFilter',\r\n        defaultMessage: 'Access origin or number',\r\n        description: 'common: Access origin or number'\r\n    },\r\n    destinationOrService: {\r\n        id: 'common.destinationOrService',\r\n        defaultMessage: 'Access origin, number or service',\r\n        description: 'common: Access origin, number or service'\r\n    },\r\n    details: {\r\n        id: 'common.details',\r\n        defaultMessage: 'Details',\r\n        description: 'common: Details'\r\n    },\r\n    dialerTraffic: {\r\n        id: 'common.dialerTraffic',\r\n        defaultMessage: 'Dialer traffic',\r\n        description: 'common: Dialer traffic'\r\n    },\r\n    doYouWantToChooseRecordsOnAllPages: {\r\n        id: 'common.doYouWantToChooseRecordsOnAllPages',\r\n        defaultMessage: 'Do you want to choose records on all pages according to clause of filter?',\r\n        description: 'common: Do you want to choose records on all pages according to clause of filter?'\r\n    },\r\n    download: {\r\n        id: 'common.download',\r\n        defaultMessage: 'Download',\r\n        description: 'common: Download'\r\n    },\r\n    downloadAllocatedNumbersAs: {\r\n        id: 'common.downloadAllocatedNumbersAs',\r\n        defaultMessage: 'Download allocated numbers as {type}',\r\n        description: 'common: Download allocated numbers as {type}'\r\n    },\r\n    downloadAllocatedOnlyNumbersAs: {\r\n        id: 'common.downloadAllocatedOnlyNumbersAs',\r\n        defaultMessage: 'Download only numbers as {type}',\r\n        description: 'common: Download only numbers as {type}'\r\n    },\r\n    downloadCompleteNumberListAs: {\r\n        id: 'common.downloadCompleteNumberListAs',\r\n        defaultMessage: 'Download complete number list as {type}',\r\n        description: 'common: Download complete number list as {type}'\r\n    },\r\n    downloadCompletePrefixesListAs: {\r\n        id: 'common.downloadCompletePrefixesListAs',\r\n        defaultMessage: 'Download complete prefixes list as {type}',\r\n        description: 'common: Download complete prefixes list as {type}'\r\n    },\r\n    downloadList: {\r\n        id: 'common.downloadList',\r\n        defaultMessage: 'Download list',\r\n        description: 'common: Download list'\r\n    },\r\n    downloadListNumbers: {\r\n        id: 'common.downloadListNumbers',\r\n        defaultMessage: 'Download new allocated numbers',\r\n        description: 'common: Download new allocated numbers'\r\n    },\r\n    downloadListPrefixes: {\r\n        id: 'common.downloadListPrefixes',\r\n        defaultMessage: 'Download new allocated numbers as ranges',\r\n        description: 'common: Download new allocated numbers as ranges'\r\n    },\r\n    downloadNewAllocatedNumbers: {\r\n        id: 'common.downloadNewAllocatedNumbers',\r\n        defaultMessage: 'Download new allocated numbers',\r\n        description: 'common: Download new allocated numbers'\r\n    },\r\n    downloadNewAllocatedNumbersAsRanges: {\r\n        id: 'common.downloadNewAllocatedNumbersAsRanges',\r\n        defaultMessage: 'Download new allocated numbers as ranges',\r\n        description: 'common: Download new allocated numbers as ranges'\r\n    },\r\n    downloadNumberListAs: {\r\n        id: 'common.downloadNumberListAs',\r\n        defaultMessage: 'Download number list as {type}',\r\n        description: 'common: Download number list as {type}'\r\n    },\r\n    downloadOnlyNumbers: {\r\n        id: 'common.downloadOnlyNumbers',\r\n        defaultMessage: 'Download only numbers',\r\n        description: 'common: Download only numbers'\r\n    },\r\n    downloadPrefixListAs: {\r\n        id: 'common.downloadPrefixListAs',\r\n        defaultMessage: 'Download prefix list as {type}',\r\n        description: 'common: Download prefix list as {type}'\r\n    },\r\n    duration: {\r\n        id: 'common.duration',\r\n        defaultMessage: 'Duration',\r\n        description: 'common: Duration'\r\n    },\r\n\r\n\r\n    enterFiltersToActivateTheButton: {\r\n        id: \"tooltip.enterFiltersToActivateTheButton\",\r\n        defaultMessage: \"Enter filters to activate the button\",\r\n        description: 'tooltip: Enter filters to activate the button'\r\n    },\r\n\r\n\r\n    // f\r\n    filterPerDestination: {\r\n        id: 'common.filterPerDestination',\r\n        defaultMessage: 'Filter per access destination',\r\n        description: 'common: Filter per access destination'\r\n    },\r\n    filterPerDestinationOrService: {\r\n        id: 'common.filterPerDestinationOrService',\r\n        defaultMessage: 'Filter per access destination or service',\r\n        description: 'common: Filter per access destination or service'\r\n    },\r\n    fromDate: {\r\n        id: 'common.fromDate',\r\n        defaultMessage: 'From Date',\r\n        description: 'common: From Date'\r\n    },\r\n\r\n\r\n    // g\r\n    getNumbers: {\r\n        id: 'common.getNumbers',\r\n        defaultMessage: 'Get numbers',\r\n        description: 'common: Get numbers'\r\n    },\r\n    getNumbersForDestination: {\r\n        id: 'common.getNumbersForDestination',\r\n        defaultMessage: 'Get numbers for destination {name}',\r\n        description: 'common: Get numbers for destination {name}'\r\n    },\r\n    getNumbersForRange: {\r\n        id: 'common.getNumbersForRange',\r\n        defaultMessage: 'Get numbers for range {name}',\r\n        description: 'common: Get numbers for range {name}'\r\n    },\r\n\r\n    // h\r\n    hide: {\r\n        id: 'common.hide',\r\n        defaultMessage: 'Hide',\r\n        description: 'common: Hide'\r\n    },\r\n\r\n\r\n    // l\r\n    last7Days: {\r\n        id: 'common.last7Days',\r\n        defaultMessage: 'Last 7 days',\r\n        description: 'common: Last 7 days'\r\n    },\r\n    lastName: {\r\n        id: 'common.lastName',\r\n        defaultMessage: 'Last name',\r\n        description: 'common: Last name'\r\n    },\r\n\r\n\r\n    // m\r\n    managePaymentDetails: {\r\n        id: 'common.managePaymentDetails',\r\n        defaultMessage: 'Manage payment details',\r\n        description: 'common: Manage payment details'\r\n    },\r\n    menu: {\r\n        id: 'common.menu',\r\n        defaultMessage: 'Menu',\r\n        description: 'common: Menu'\r\n    },\r\n    minDuration: {\r\n        id: 'common.minDuration',\r\n        defaultMessage: 'Min. duration',\r\n        description: 'common: Min. duration'\r\n    },\r\n\r\n    moreContacts: {\r\n        id: 'common.moreContacts',\r\n        defaultMessage: 'More contacts',\r\n        description: 'common: More contacts'\r\n    },\r\n    contacts: {\r\n        id: 'common.contacts',\r\n        defaultMessage: 'Contacts',\r\n        description: 'common: Contacts'\r\n    },\r\n    premiumyContacts: {\r\n        id: 'common.premiumyContacts',\r\n        defaultMessage: 'Premiumy contacts',\r\n        description: 'common: Premiumy contacts'\r\n    },\r\n    officialWebpage: {\r\n        id: 'common.officialWebpage',\r\n        defaultMessage: 'Official webpage',\r\n        description: 'common: Official webpage'\r\n    },\r\n    officialFacebookPage: {\r\n        id: 'common.officialFacebookPage',\r\n        defaultMessage: 'Official facebook page',\r\n        description: 'common: Official facebook page'\r\n    },\r\n    officialLinkedInPage: {\r\n        id: 'common.officialLinkedInPage',\r\n        defaultMessage: 'Official linked in page',\r\n        description: 'common: Official linked in page'\r\n    },\r\n    englishSupport: {\r\n        id: 'common.englishSupport',\r\n        defaultMessage: 'English Support',\r\n        description: 'common: English Support'\r\n    },\r\n    arabicSupport: {\r\n        id: 'common.arabicSupport',\r\n        defaultMessage: 'Arabic Support',\r\n        description: 'common: Arabic Support'\r\n    },\r\n    skype: {\r\n        id: 'common.skype',\r\n        defaultMessage: 'Skype',\r\n        description: 'common: Skype'\r\n    },\r\n    eMail: {\r\n        id: 'common.eMail',\r\n        defaultMessage: 'E-mail',\r\n        description: 'common: E-mail'\r\n    },\r\n\r\n\r\n    // n\r\n    name: {\r\n        id: 'common.name',\r\n        defaultMessage: 'Name',\r\n        description: 'common: Name'\r\n    },\r\n    noContactData: {\r\n        id: 'common.noContactData',\r\n        defaultMessage: 'No contact data',\r\n        description: 'common: No contact data'\r\n    },\r\n    noRateForThisDestination: {\r\n        id: 'common.noRateForThisDestination',\r\n        defaultMessage: 'no rate for this destination',\r\n        description: 'common: no rate for this destination'\r\n    },\r\n    number: {\r\n        id: 'common.number',\r\n        defaultMessage: 'Number',\r\n        description: 'common: Number'\r\n    },\r\n    numberIsQuarantined: {\r\n        id: 'common.numberIsQuarantined',\r\n        defaultMessage: 'number is quarantined',\r\n        description: 'common: number is quarantined'\r\n    },\r\n    numberIsUnavailable: {\r\n        id: 'common.numberIsUnavailable',\r\n        defaultMessage: 'number is unavailable',\r\n        description: 'common: number is unavailable'\r\n    },\r\n    numberList: {\r\n        id: 'common.numberList',\r\n        defaultMessage: 'Number list',\r\n        description: 'common: Number list'\r\n    },\r\n    numbers: {\r\n        id: 'common.numbers',\r\n        defaultMessage: 'Numbers',\r\n        description: 'common: Numbers'\r\n    },\r\n    numbersFromRangeCannotBeAllocated: {\r\n        id: 'common.numbersFromRangeCannotBeAllocated',\r\n        defaultMessage: 'numbers from this range cannot be allocated to this trunk',\r\n        description: 'common: numbers from this range cannot be allocated to this trunk'\r\n    },\r\n    numbersFromRangeCannotBeAllocatedSingle: {\r\n        id: 'common.numbersFromRangeCannotBeAllocatedSingle',\r\n        defaultMessage: 'numbers from this range cannot be allocated to this trunk',\r\n        description: 'common: numbers from this range cannot be allocated to this trunk'\r\n    },\r\n\r\n\r\n    // o\r\n    onlyOnThisPage: {\r\n        id: 'common.onlyOnThisPage',\r\n        defaultMessage: 'No, only on this page',\r\n        description: 'common: No, only on this page'\r\n    },\r\n    or: {\r\n        id: 'common.or',\r\n        defaultMessage: 'or',\r\n        description: 'common: or'\r\n    },\r\n    origin: {\r\n        id: 'common.origin',\r\n        defaultMessage: 'Origin',\r\n        description: 'common: Origin'\r\n    },\r\n\r\n\r\n    // p\r\n    parameters: {\r\n        id: 'common.parameters',\r\n        defaultMessage: 'Parameters',\r\n        description: 'common: Parameters'\r\n    },\r\n    passed: {\r\n        id: 'common.passed',\r\n        defaultMessage: 'Passed',\r\n        description: 'common: Passed'\r\n    },\r\n    password: {\r\n        id: 'common.password',\r\n        defaultMessage: 'Password',\r\n        description: 'common: Password'\r\n    },\r\n    paymentDetails: {\r\n        id: 'common.paymentDetails',\r\n        defaultMessage: 'Payment Details',\r\n        description: 'common: Payment Details'\r\n    },\r\n    paymentInfo: {\r\n        id: 'common.paymentInfo',\r\n        defaultMessage: 'Payment Info',\r\n        description: 'common: Payment Info'\r\n    },\r\n    payments: {\r\n        id: 'common.payments',\r\n        defaultMessage: 'Payments',\r\n        description: 'common: Payments'\r\n    },\r\n    payout: {\r\n        id: 'common.payout',\r\n        defaultMessage: 'Payout',\r\n        description: 'common: Payout'\r\n    },\r\n    payYourAttention: {\r\n        id: \"common.payYourAttention\",\r\n        defaultMessage: \"Pay your attention that allocated numbers will be activated during 10 minutes after allocation. Don't dial these numbers before.\",\r\n        description: \"Allocation Modals: Pay your attention that allocated numbers will be activated during 10 minutes after allocation. Don't dial these numbers before.\"\r\n    },\r\n    pending: {\r\n        id: 'common.pending',\r\n        defaultMessage: 'Pending',\r\n        description: 'common: Pending'\r\n    },\r\n    phone: {\r\n        id: 'common.phone',\r\n        defaultMessage: 'Phone',\r\n        description: 'common: Phone'\r\n    },\r\n    postalCode: {\r\n        id: 'common.postalCode',\r\n        defaultMessage: 'Postal code',\r\n        description: 'common: Postal code'\r\n    },\r\n    prefix: {\r\n        id: 'common.prefix',\r\n        defaultMessage: 'Prefix',\r\n        description: 'common: Prefix'\r\n    },\r\n    price: {\r\n        id: 'common.price',\r\n        defaultMessage: 'Price',\r\n        description: 'common: Price'\r\n    },\r\n\r\n\r\n    // r\r\n    randomOrder: {\r\n        id: 'common.randomOrder',\r\n        defaultMessage: 'Random order',\r\n        description: 'common: Random order'\r\n    },\r\n    range: {\r\n        id: 'common.range',\r\n        defaultMessage: 'Range',\r\n        description: 'common: Range'\r\n    },\r\n    rangeName: {\r\n        id: 'common.rangeName',\r\n        defaultMessage: 'Range name',\r\n        description: 'common: Range name'\r\n    },\r\n    ranges: {\r\n        id: 'common.ranges',\r\n        defaultMessage: 'Ranges',\r\n        description: 'common: Ranges'\r\n    },\r\n    rate: {\r\n        id: 'common.rate',\r\n        defaultMessage: 'Rate',\r\n        description: 'common: Rate'\r\n    },\r\n    ratecard: {\r\n        id: 'common.ratecard',\r\n        defaultMessage: 'Ratecard',\r\n        description: 'common: Ratecard'\r\n    },\r\n    readyForPaymentInfo: {\r\n        id: 'common.readyForPaymentInfo',\r\n        defaultMessage: '{count} is available for payment now. You cannot request more than this amount',\r\n        description: 'common: {count} is available for payment now. You cannot request more than this amount'\r\n    },\r\n    region: {\r\n        id: 'common.region',\r\n        defaultMessage: 'Region',\r\n        description: 'common: Region'\r\n    },\r\n    rejected: {\r\n        id: 'common.rejected',\r\n        defaultMessage: 'Rejected',\r\n        description: 'common: Rejected'\r\n    },\r\n    required: {\r\n        id: 'common.required',\r\n        defaultMessage: 'Required',\r\n        description: 'common: Required'\r\n    },\r\n    revoke: {\r\n        id: 'common.revoke',\r\n        defaultMessage: 'Revoke',\r\n        description: 'common: Revoke'\r\n    },\r\n    revokeCountNumbers: {\r\n        id: 'common.revokeCountNumbers',\r\n        defaultMessage: 'Revoke {count} items',\r\n        description: 'common: Revoke {count} items'\r\n    },\r\n\r\n\r\n    // s\r\n    selectTrunk: {\r\n        id: 'common.selectTrunk',\r\n        defaultMessage: 'Select trunk',\r\n        description: 'common: Select trunk'\r\n    },\r\n    service: {\r\n        id: 'common.service',\r\n        defaultMessage: 'Service',\r\n        description: 'common: Service'\r\n    },\r\n    show: {\r\n        id: 'common.show',\r\n        defaultMessage: 'Show',\r\n        description: 'common: Show'\r\n    },\r\n    sipCause: {\r\n        id: 'common.sipCause',\r\n        defaultMessage: 'SIP cause',\r\n        description: 'common: SIP cause'\r\n    },\r\n    status: {\r\n        id: 'common.status',\r\n        defaultMessage: 'Status',\r\n        description: 'common: Status'\r\n    },\r\n    structure: {\r\n        id: 'common.structure',\r\n        defaultMessage: 'Structure',\r\n        description: 'common: Structure'\r\n    },\r\n    subdestination: {\r\n        id: 'common.subdestination',\r\n        defaultMessage: 'Subdestination',\r\n        description: 'common: Subdestination'\r\n    },\r\n    subdestinations: {\r\n        id: 'common.subdestinations',\r\n        defaultMessage: 'Subdestinations',\r\n        description: 'common: Subdestinations'\r\n    },\r\n    submit: {\r\n        id: 'common.submit',\r\n        defaultMessage: 'Submit',\r\n        description: 'common: Submit'\r\n    },\r\n\r\n\r\n    // t\r\n    taxVATNumber: {\r\n        id: 'common.taxVATNumber',\r\n        defaultMessage: 'Tax/VAT number',\r\n        description: 'common: Tax/VAT number'\r\n    },\r\n    template: {\r\n        id: 'common.template',\r\n        defaultMessage: 'Template',\r\n        description: 'common: Template'\r\n    },\r\n    termPoint: {\r\n        id: 'common.termPoint',\r\n        defaultMessage: 'Term point',\r\n        description: 'common: Term point'\r\n    },\r\n    testNumber: {\r\n        id: 'common.testNumber',\r\n        defaultMessage: 'Test number',\r\n        description: 'common: Test number'\r\n    },\r\n    testNumbers: {\r\n        id: 'common.testNumbers',\r\n        defaultMessage: 'Test numbers',\r\n        description: 'common: Test numbers'\r\n    },\r\n    today: {\r\n        id: 'common.today',\r\n        defaultMessage: 'Today',\r\n        description: 'common: Today'\r\n    },\r\n    trafficPeriod: {\r\n        id: 'common.trafficPeriod',\r\n        defaultMessage: 'Traffic period',\r\n        description: 'common: Traffic period'\r\n    },\r\n    trunk: {\r\n        id: 'common.trunk',\r\n        defaultMessage: 'Trunk',\r\n        description: 'common: Trunk'\r\n    },\r\n    type: {\r\n        id: 'common.type',\r\n        defaultMessage: 'Type',\r\n        description: 'common: Type'\r\n    },\r\n\r\n\r\n    // u\r\n    unableToCopyEmptyTable: {\r\n        id: 'common.unableToCopyEmptyTable',\r\n        defaultMessage: 'Unable to copy empty table',\r\n        description: 'common: Unable to copy empty table'\r\n    },\r\n\r\n\r\n    // y\r\n    yes: {\r\n        id: 'common.yes',\r\n        defaultMessage: 'Yes',\r\n        description: 'common: Yes'\r\n    },\r\n    yesterday: {\r\n        id: 'common.yesterday',\r\n        defaultMessage: 'Yesterday',\r\n        description: 'common: Yesterday'\r\n    },\r\n\r\n    aNumber: {id: \"common.aNumber\", defaultMessage: \"A-number\", description: 'common: A-number'},\r\n})","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n    accessList: {id: 'accesses.accessList', defaultMessage: 'ACCESS LIST', description: 'Accesses: ACCESS LIST'},\r\n})","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n    correctNumber: {\r\n        id: 'validation.correctNumber',\r\n        defaultMessage: 'Enter the correct number',\r\n        description: 'common: Enter the correct number'\r\n    },\r\n    eachRowShouldBeSize: {\r\n        id: 'validation.eachRowShouldBeSize',\r\n        defaultMessage: 'Each row should be greater than {minNumber} and less than {maxNumber}',\r\n        description: 'common: Each row should be greater than {minNumber} and less than {maxNumber}'\r\n    },\r\n    fileSizeShouldNotExceed: {\r\n        id: 'validation.fileSizeShouldNotExceed',\r\n        defaultMessage: 'File size should not exceed {size} MB',\r\n        description: 'common: File size should not exceed {size} MB'\r\n    },\r\n    incorrectTemplate: {\r\n        id: 'validation.incorrectTemplate',\r\n        defaultMessage: 'Incorrect template',\r\n        description: 'common: Incorrect template'\r\n    },\r\n    maxLength: {\r\n        id: 'validation.maxLength',\r\n        defaultMessage: 'The maximum of this field is {count} {count, plural, one {character} other {characters}}',\r\n        description: 'common: The maximum of this field is {count} {count, plural, one {character} other {characters}}'\r\n    },\r\n    maxLengthDigits: {\r\n        id: 'validation.maxLengthDigits',\r\n        defaultMessage: 'The maximum of this field is {count} {count, plural, one {digit} other {digits}}',\r\n        description: 'common: The maximum of this field is {count} {count, plural, one {digit} other {digits}}'\r\n    },\r\n    maxLengthOfTemplate: {\r\n        id: 'validation.maxLengthOfTemplate',\r\n        defaultMessage: 'The maximum length of template is {count}',\r\n        description: 'common: The maximum length of template is {count}'\r\n    },\r\n    maxNumber: {\r\n        id: 'validation.maxNumber',\r\n        defaultMessage: 'The maximum number is {number}',\r\n        description: 'common: The maximum number is {number}'\r\n    },\r\n    minLengthDigits: {\r\n        id: 'validation.minLengthDigits',\r\n        defaultMessage: 'The minimum of this field is {count} {count, plural, one {digit} other {digits}}',\r\n        description: 'common: The minimum of this field is {count} {count, plural, one {digit} other {digits}}'\r\n    },\r\n    minLengthOfTemplate: {\r\n        id: 'validation.minLengthOfTemplate',\r\n        defaultMessage: 'The minimum length of template is {count}',\r\n        description: 'common: The minimum length of template is {count}'\r\n    },\r\n    minNumber: {\r\n        id: 'validation.minNumber',\r\n        defaultMessage: 'The minimum number is {number}',\r\n        description: 'common: The minimum number is {number}'\r\n    },\r\n    numberMust: {\r\n        id: 'validation.numberMust',\r\n        defaultMessage: 'The number must not begin with 0 and must contain only digits',\r\n        description: 'common: The number must not begin with 0 and must contain only digits'\r\n    },\r\n    numberOfPhoneNumbersExceeds: {\r\n        id: 'validation.numberOfPhoneNumbersExceeds',\r\n        defaultMessage: 'The number of entered telephone numbers exceeds {number} rows',\r\n        description: 'common: The number of entered telephone numbers exceeds {number} rows'\r\n    },\r\n    numbersFromTemplateCannotBeAllocated: {\r\n        id: 'validation.numbersFromTemplateCannotBeAllocated',\r\n        defaultMessage: 'Numbers from template \"{template}\" cannot be allocated',\r\n        description: 'common: Numbers from template \"{template}\" cannot be allocated'\r\n    },\r\n    passwordLetters: {\r\n        id: 'validation.passwordLetters',\r\n        defaultMessage: 'At least one number and uppercase and lowercase letter',\r\n        description: 'common: At least one number and uppercase and lowercase letter'\r\n    },\r\n    passwordMinLength: {\r\n        id: 'validation.passwordMinLength',\r\n        defaultMessage: 'Password must be at least {count} {count, plural, one {character} other {characters}}',\r\n        description: 'common: Password must be at least {count} {count, plural, one {character} other {characters}}'\r\n    },\r\n    pleaseEnterEmail: {\r\n        id: 'validation.pleaseEnterEmail',\r\n        defaultMessage: 'Please enter an email address',\r\n        description: 'common: Please enter an email address'\r\n    },\r\n    pleaseEnterValidNumber: {\r\n        id: 'validation.pleaseEnterValidNumber',\r\n        defaultMessage: 'Please enter a valid number',\r\n        description: 'common: Please enter a valid number'\r\n    },\r\n    pleaseEnterValidNumbers: {\r\n        id: 'validation.pleaseEnterValidNumbers',\r\n        defaultMessage: 'Please enter valid numbers',\r\n        description: 'common: Please enter valid numbers'\r\n    },\r\n    pleaseEnterValidString: {\r\n        id: 'validation.pleaseEnterValidString',\r\n        defaultMessage: 'Please enter a valid string',\r\n        description: 'common: Please enter a valid string'\r\n    },\r\n    templateShouldBeSize: {\r\n        id: 'validation.templateShouldBeSize',\r\n        defaultMessage: 'Template should be greater than {minNumber} and less than {maxNumber}',\r\n        description: 'common: Template should be greater than {minNumber} and less than {maxNumber}'\r\n    },\r\n    theNumberMustBeAMultipleOf: {\r\n        id: 'validation.theNumberMustBeAMultipleOf',\r\n        defaultMessage: 'The number must be a multiple of {value}',\r\n        description: 'common: The number must be a multiple of {value}'\r\n    },\r\n    thisFieldIsRequired: {\r\n        id: 'validation.thisFieldIsRequired',\r\n        defaultMessage: 'This field is required',\r\n        description: 'common: This field is required'\r\n    },\r\n    tooFewNumbers: {\r\n        id: 'validation.tooFewNumbers',\r\n        defaultMessage: 'Too few numbers',\r\n        description: 'common: Too few numbers'\r\n    },\r\n    tooMuchNumbers: {\r\n        id: 'validation.tooMuchNumbers',\r\n        defaultMessage: 'Too much numbers',\r\n        description: 'common: Too much numbers'\r\n    },\r\n})","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n    pendingAmount: {\r\n        id: \"balanceInfo.pendingAmount\",\r\n        defaultMessage: \"Pending amount\",\r\n        description: 'Balance info: Pending amount'\r\n    },\r\n    currentBalance: {\r\n        id: \"balanceInfo.currentBalance\",\r\n        defaultMessage: \"Current balance\",\r\n        description: 'Balance info: Current balance'\r\n    },\r\n    readyForPayment: {\r\n        id: \"balanceInfo.readyForPayment\",\r\n        defaultMessage: \"Ready for payment\",\r\n        description: 'Balance info: Ready for payment'\r\n    },\r\n    paymentTerms: {\r\n        id: \"balanceInfo.paymentTerms\",\r\n        defaultMessage: \"Payment terms\",\r\n        description: 'Balance info: Payment terms'\r\n    },\r\n    traffic: {\r\n        id: \"balanceInfo.traffic\",\r\n        defaultMessage: \"Traffic\",\r\n        description: 'Balance info: Traffic'\r\n    },\r\n    lastTraffic: {\r\n        id: \"balanceInfo.lastTraffic\",\r\n        defaultMessage: \"Traffic for last 1/3/7 days\",\r\n        description: 'Balance info: Traffic for last 1/3/7 days'\r\n    },\r\n    allocatedNumbers: {\r\n        id: \"balanceInfo.allocatedNumbers\",\r\n        defaultMessage: \"Allocated numbers\",\r\n        description: 'Balance info: Allocated numbers'\r\n    },\r\n    ranges: {\r\n        id: \"balanceInfo.ranges\",\r\n        defaultMessage: \"Ranges\",\r\n        description: 'Balance info: Ranges'\r\n    },\r\n})","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n    name: {\r\n        id: 'numbers.trunkTable.name',\r\n        defaultMessage: 'Name',\r\n        description: 'Numbers, trunk table: Name'\r\n    },\r\n    type: {\r\n        id: 'numbers.trunkTable.type',\r\n        defaultMessage: 'Type',\r\n        description: 'Numbers, trunk table: Type'\r\n    },\r\n    price: {\r\n        id: 'numbers.trunkTable.price',\r\n        defaultMessage: 'Price',\r\n        description: 'Numbers, trunk table: Price'\r\n    },\r\n    trunkIsNotActive: {\r\n        id: 'numbers.trunkTable.trunkIsNotActive',\r\n        defaultMessage: 'Trunk is not active',\r\n        description: 'Numbers, trunk table: Trunk is not active'\r\n    },\r\n    googleOTPAllocation: {\r\n        id: 'numbers.trunkTable.googleOTPAllocation',\r\n        defaultMessage: 'Google OTP allocation',\r\n        description: 'Numbers, trunk table: Google OTP allocation'\r\n    },\r\n    allocatedNumbersTrunkTable: {\r\n        id: 'numbers.trunkTable.allocatedNumbersTrunkTable',\r\n        defaultMessage: 'Allocated Numbers',\r\n        description: 'Numbers, trunk table: Allocated Numbers'\r\n    },\r\n    allocatePerTemplate: {\r\n        id: \"numbers.allocatePerTemplate\",\r\n        defaultMessage: \"Allocate per template\",\r\n        description: \"Numbers, ModalAllocationNumbers: Allocate per template\"\r\n    },\r\n    putListOfOwnNumbers: {\r\n        id: \"numbers.putListOfOwnNumbers\",\r\n        defaultMessage: \"Put list of own numbers in the field below\",\r\n        description: \"Numbers, ModalAllocationNumbers: Put list of own numbers in the field below\"\r\n    },\r\n    allocateNumbers: {\r\n        id: \"numbers.allocateNumbers\",\r\n        defaultMessage: \"Allocate numbers\",\r\n        description: \"Numbers, ModalAllocationNumbers: Allocate numbers\"\r\n    },\r\n    clickToEnable: {\r\n        id: \"numbers.clickToEnable\",\r\n        defaultMessage: \"CLICK TO <colored>ENABLE</colored>\",\r\n        description: \"Numbers, ModalAllocationNumbers: CLICK TO ENABLE\"\r\n    },\r\n    eachPhoneNumberConditions: {\r\n        id: \"numbers.eachPhoneNumberConditions\",\r\n        defaultMessage: \"Each phone number<break></break>in a separate row with<break></break><wrapt>ENTER</wrapt> button\",\r\n        description: \"Numbers, ModalAllocationNumbers: Each phone number in a separate row with ENTER button\"\r\n    },\r\n\r\n\r\n    allocateNumbersForGoogleOTP: {\r\n        id: \"numbers.googleOTPAllocateModal.allocateNumbersForGoogleOTP\",\r\n        defaultMessage: \"Allocate numbers for Google OTP\",\r\n        description: 'ModalAllocationGoogleOtp: Allocate numbers for Google OTP'\r\n    },\r\n    downloadCompleteList: {\r\n        id: \"numbers.listModal.downloadCompleteList\",\r\n        defaultMessage: \"Download complete list of allocated numbers\",\r\n        description: 'Numbers, NumbersAllocateListModal: Download complete list of allocated numbers'\r\n    },\r\n    downloadAllNumbers: {\r\n        id: \"numbers.listModal.downloadAllNumbers\",\r\n        defaultMessage: \"Download all numbers\",\r\n        description: 'Numbers, NumbersAllocateListModal: Download all numbers'\r\n    },\r\n    newAllocatedNumbers: {\r\n        id: \"numbers.listModal.newAllocatedNumbers\",\r\n        defaultMessage: \"New allocated numbers\",\r\n        description: 'Numbers, NumbersAllocateListModal: New allocated numbers'\r\n    },\r\n    numbersWereAllocated: {\r\n        id: \"numbers.listModal.numbersWereAllocated\",\r\n        defaultMessage: \"{count} numbers were allocated\",\r\n        description: 'Numbers, NumbersAllocateListModal: {count} numbers were allocated'\r\n    },\r\n    numbersWereNotAllocated: {\r\n        id: \"numbers.listModal.numbersWereNotAllocated\",\r\n        defaultMessage: \"{count} numbers were not allocated\",\r\n        description: \"Numbers, NumbersAllocateListModal: {count} numbers were not allocated\",\r\n    },\r\n    cannotBeAllocated: {\r\n        id: \"numbers.listModal.cannotBeAllocated\",\r\n        defaultMessage: \"\\\"{number}\\\" cannot be allocated\",\r\n        description: \"Numbers, NumbersAllocateListModal: \\\"{number}\\\" cannot be allocated\",\r\n    },\r\n    putTemplatePrefixForDestination: {\r\n        id: 'numbers.googleOTPAllocateModal.putTemplatePrefixForDestination',\r\n        defaultMessage: 'Put template/prefix for destination',\r\n        description: 'ModalAllocationGoogleOtp: Put template/prefix for destination'\r\n    },\r\n    orChooseItFromList: {\r\n        id: 'numbers.googleOTPAllocateModal.orChooseItFromList',\r\n        defaultMessage: 'or choose it from list',\r\n        description: 'ModalAllocationGoogleOtp: or choose it from list'\r\n    },\r\n    rangeNumberSearch: {id: \"numbers.filters.rangeNumberSearch\", defaultMessage: \"Range/Number search\", description: 'Numbers, filters: Range/Number search'},\r\n    rateRangeFrom: {id: \"numbers.filters.rateRangeFrom\", defaultMessage: \"Rate range from\", description: 'Numbers, filters: Rate range from'},\r\n    rateRange: {id: \"numbers.filters.rateRange\", defaultMessage: \"Rate range\", description: 'Numbers, filters: Rate range'},\r\n    to: { id: \"numbers.filters.to\", defaultMessage: \"to\", description: 'Numbers, filters: to' },\r\n    from: { id: \"from.filters.from\", defaultMessage: \"from\", from: 'Numbers, filters: from' },\r\n    zone: { id: \"numbers.allocatedNumbersTable.zone\", defaultMessage: \"Zone\", description: 'Numbers, allocated numbers table: Zone' },\r\n    range: { id: \"numbers.allocatedNumbersTable.range\", defaultMessage: \"Range\", description: 'Numbers, allocated numbers table: Range' },\r\n    number: { id: \"numbers.allocatedNumbersTable.number\", defaultMessage: \"Number\", description: 'Numbers, allocated numbers table: Number' },\r\n    start_date: { id: \"numbers.allocatedNumbersTable.start_date\", defaultMessage: \"From date\", description: 'Numbers, allocated numbers table: From date' },\r\n    rate: { id: \"numbers.allocatedNumbersTable.rate\", defaultMessage: \"Rate\", description: 'Numbers, allocated numbers table: Rate' },\r\n\r\n    revokeNumbers: {id: \"NumbersRevokeModal.revokeNumbers\", defaultMessage: \"Revoke numbers\", description: 'common: Revoke numbers'},\r\n    numbersWillBeRevoked: {id: \"NumbersRevokeModal.numbersWillBeRevoked\", defaultMessage: \"{count} numbers will be revoked and you will loose them. Do you really want to do that?\", description: 'NumbersRevokeModal: {count} numbers will be revoked and you will loose them. Do you really want to do that?'},\r\n    \r\n    payYourAttention: {\r\n        id: \"allocationModals.payYourAttention\",\r\n        defaultMessage: \"Pay your attention that allocated numbers will be activated during 10 minutes after allocation. Don't dial these numbers before.\",\r\n        description: \"Allocation Modals: Pay your attention that allocated numbers will be activated during 10 minutes after allocation. Don't dial these numbers before.\"\r\n    },\r\n})\r\n","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n    aNumber: {id: \"liveCalls.aNumber\", defaultMessage: \"A-number\", description: 'Live calls: A-number'},\r\n    originatedFrom: {id: \"liveCalls.originatedFrom\", defaultMessage: \"Originated from\", description: 'Live calls: Originated from'},\r\n    bNumber: {id: \"liveCalls.bNumber\", defaultMessage: \"B-number\", description: 'Live calls: B-number'},\r\n    destination: {id: \"liveCalls.destination\", defaultMessage: \"Destination\", description: 'Live calls: Destination'},\r\n    range: {id: \"liveCalls.range\", defaultMessage: \"Range\", description: 'Live calls: Range'},\r\n    rateTerm: {id: \"liveCalls.rateTerm\", defaultMessage: \"Rate term\", description: 'Live calls: Rate term'},\r\n    duration: {id: \"liveCalls.duration\", defaultMessage: \"Duration\", description: 'Live calls: Duration'},\r\n    terminationPoint: {id: \"liveCalls.terminationPoint\", defaultMessage: \"Termination point\", description: 'Live calls: Termination point'},\r\n    termPoint: {id: \"liveCalls.termPoint\", defaultMessage: \"Term point\", description: 'Live calls: Term point'},\r\n    updateData: {id: \"liveCalls.updateData\", defaultMessage: \"Update data\", description: 'Live calls: Update data'},\r\n    filterPerNumOrDest: {\r\n        id: \"liveCalls.filterPerNumOrDest\",\r\n        defaultMessage: \"Filter per numbers/destinations\",\r\n        description: 'Live calls: Filter per numbers/destinations'\r\n    }\r\n})","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n    rowsPerPage: { id: \"pagination.rowsPerPage\", defaultMessage: \"Rows per page\", description: 'Pagination: Rows per page' },\r\n    total: { id: \"pagination.total\", defaultMessage: \"total\", description: 'Pagination: total' },\r\n})\r\n","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n    aNumber: { id: \"testCalls.aNumber\", defaultMessage: \"A-number\", description: 'Test calls: A-number' },\r\n    bNumber: { id: \"testCalls.bNumber\", defaultMessage: \"B-number\", description: 'Test calls: B-number' },\r\n    duration: {id: \"testCalls.duration\", defaultMessage: \"Duration\", description: 'Test calls: Duration'},\r\n    datetime: { id: \"testCalls.datetime\", defaultMessage: \"Datetime\", description: 'Test calls: Datetime' },\r\n    calltime: { id: \"testCalls.calltime\", defaultMessage: \"Call time\", description: 'Test calls: Call time' },\r\n    originatedFrom: { id: \"testCalls.originatedFrom\", defaultMessage: \"Originated from\", description: 'Test calls: Originated from' },\r\n    destination: { id: \"testCalls.destination\", defaultMessage: \"Destination\", description: 'Test calls: Destination' },\r\n    range: { id: \"testCalls.range\", defaultMessage: \"Range\", description: 'Test calls: Range' },\r\n})","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n    exportReport: { id: \"traffic.exportReport\", defaultMessage: \"Export Report\", description: 'traffic: Export Report' },\r\n    dateFrom: {id: \"traffic.cdrFilters.dateFrom\", defaultMessage: \"Date from\", description: 'Traffic, CDRFilters: Date from'},\r\n    groupBy: { id: \"traffic.groupBy\", defaultMessage: \"Group by\", description: 'traffic: Group by' },\r\n    trafficStat: { id: \"traffic.trafficStat\", defaultMessage: \"Traffic stat\", description: 'Traffic: Traffic stat' },\r\n    cdr: { id: \"traffic.cdr\", defaultMessage: \"CDR\", description: 'Traffic: CDR' },\r\n})","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n    cdrHistoryPeriodIs: {id: \"cdr.cdrHistoryPeriodIs\", defaultMessage: \"CDR history period is {count} month\", description: 'Traffic, CDRFilters: CDR history period is {count} month'},\r\n})","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n    exportPrice: { id: \"price.exportPrice\", defaultMessage: \"Export price\", description: 'Price: Export price' },\r\n    exportPriceList: { id: \"price.exportPriceList\", defaultMessage: \"Export price list\", description: 'Price: Export price list' },\r\n    exportPriceListAs: { id: \"price.exportPriceListAs\", defaultMessage: \"Export price list as {type}\", description: 'Price: Export price list as {type}' },\r\n    filterPerPrefixOrRangeName: {\r\n        id: \"price.filterPerPrefixOrRangeName\",\r\n        defaultMessage: \"Filter per prefix or range name\",\r\n        description: 'Price: Filter per prefix or range name'\r\n    },\r\n    rangeName: {id: \"price.rangeName\",\r\n        defaultMessage: \"Range name\",\r\n        description: 'Price: Range name'\r\n    },\r\n    getNumbersModal: {id: \"price.getNumbersModal\", defaultMessage: \"Numbers(max {count})\", description: 'Price, PriceGetNumbersModal: Numbers(max value)'},\r\n    getNumbersForRange: {id: \"price.getNumbersForRange\", defaultMessage: \"Get numbers for range\", description: 'Price, PriceGetNumbersModal: Get numbers for range'},\r\n    allTheTrafficMustBeClearedByTheCarrier: {\r\n        id: \"priceTable.allTheTrafficMustBeClearedByTheCarrier\",\r\n        defaultMessage: \"Warning: All the traffic must be cleared by the carrier. Premiumy reserves the right to withhold the payment in case of dispute. All pbx traffic is subjected to be paid on 30/45 payment terms.\",\r\n        description: \"PriceTable: Warning: All the traffic must be cleared by the carrier. Premiumy reserves the right to withhold the payment in case of dispute. All pbx traffic is subjected to be paid on 30/45 payment terms.\"\r\n    },\r\n    allTheTrafficWillBePaidOnMonthlyBasis: {\r\n        id: \"priceTable.allTheTrafficWillBePaidOnMonthlyBasis\",\r\n        defaultMessage: \"All the traffic with less than {count} seconds duration will be paid on monthly basis\",\r\n        description: \"PriceTable: All the traffic with less than {count} seconds duration will be paid on monthly basis\"\r\n    },\r\n})","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n    cliLookup: {id: \"cli.cliLookup\", defaultMessage: \"CLI Lookup\", description: 'CLI: CLI Lookup'},\r\n    putYourCliMin: {id: \"cli.putYourCliMin\", defaultMessage: \"Put your CLI (min {count} digits)\", description: 'CLI: Put your CLI (min {count} digits)'},\r\n    putYourCli: {id: \"cli.putYourCli\", defaultMessage: \"Put your CLI\", description: 'CLI: Put your CLI'},\r\n    autorefreshPeriod: {id: \"cli.autorefreshPeriod\", defaultMessage: \"Autorefresh period\", description: 'CLI: Autorefresh period'},\r\n})","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n    listenToIvr: { id: \"ivr.listenToIvr\", defaultMessage: \"Listen to IVR audio file\", description: 'IVR: Listen to IVR audio file' },\r\n})","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n    passportScans: {id: \"paymentDetails.passportScans\", defaultMessage: \"Passport scans\", description: \"ModalAddPayments: Passport scans\"},\r\n    certificateOfIncorporation: {id: \"paymentDetails.certificateOfIncorporation\", defaultMessage: \"Certificate of Incorporation\", description: \"ModalAddPayments: Certificate of Incorporation\"},\r\n\r\n    beneficiaryName: {id: \"paymentDetails.beneficiaryName\", defaultMessage: \"Beneficiary name\", description: \"ModalAddPayments: Beneficiary name\"},\r\n    beneficiaryLastName: {id: \"paymentDetails.beneficiaryLastName\", defaultMessage: \"Beneficiary last name\", description: \"ModalAddPayments: Beneficiary last name\"},\r\n    accountIbanNumber: {id: \"paymentDetails.accountIbanNumber\", defaultMessage: \"Account number/IBAN\", description: \"ModalAddPayments: Account number/IBAN\"},\r\n    intermediateBankDetails: {id: \"paymentDetails.intermediateBankDetails\", defaultMessage: \"Intermediate bank details\", description: \"ModalAddPayments: Intermediate bank details\"},\r\n    beneficiaryCountry: {id: \"paymentDetails.beneficiaryCountry\", defaultMessage: \"Beneficiary country\", description: \"ModalAddPayments: Beneficiary country\"},\r\n    beneficiaryRegion: {id: \"paymentDetails.beneficiaryRegion\", defaultMessage: \"Beneficiary region\", description: \"ModalAddPayments: Beneficiary region\"},\r\n    beneficiaryCity: {id: \"paymentDetails.beneficiaryCity\", defaultMessage: \"Beneficiary city\", description: \"ModalAddPayments: Beneficiary city\"},\r\n    beneficiaryAddress: {id: \"paymentDetails.beneficiaryAddress\", defaultMessage: \"Beneficiary address\", description: \"ModalAddPayments: Beneficiary address\"},\r\n    beneficiaryPostalCode: {id: \"paymentDetails.beneficiaryPostalCode\", defaultMessage: \"Beneficiary postal code\", description: \"ModalAddPayments: Beneficiary postal code\"},\r\n\r\n    bankName: {id: \"paymentDetails.bankName\", defaultMessage: \"Bank name\", description: \"ModalAddPayments: Bank name\"},\r\n    bankCountry: {id: \"paymentDetails.bankCountry\", defaultMessage: \"Bank country\", description: \"ModalAddPayments: Bank country\"},\r\n    bankRegion: {id: \"paymentDetails.bankRegion\", defaultMessage: \"Bank region\", description: \"ModalAddPayments: Bank region\"},\r\n    bankCity: {id: \"paymentDetails.bankCity\", defaultMessage: \"Bank city\", description: \"ModalAddPayments: Bank city\"},\r\n    bankAddress: {id: \"paymentDetails.bankAddress\", defaultMessage: \"Bank address\", description: \"ModalAddPayments: Bank address\"},\r\n    bankPostalCode: {id: \"paymentDetails.bankPostalCode\", defaultMessage: \"Bank postal code\", description: \"ModalAddPayments: Bank postal code\"},\r\n\r\n    paypalId: {id: \"paymentDetails.paypalId\", defaultMessage: \"Paypal ID\", description: \"ModalAddPayments: Paypal ID\"},\r\n    walletNumber: {id: \"paymentDetails.walletNumber\", defaultMessage: \"Wallet number\", description: \"ModalAddPayments: Wallet number\"},\r\n    message: {id: \"paymentDetails.message\", defaultMessage: \"Message\", description: \"ModalAddPayments: Message\"},\r\n\r\n    saveChanges: {id: \"paymentDetails.saveChanges\", defaultMessage: \"Save changes\", description: 'ModalAddPayments: Save changes'},\r\n    paymentMethod: {id: \"paymentDetails.paymentMethod\", defaultMessage: \"Payment method\", description: 'ModalAddPayments: Payment method'},\r\n    chooseOrganizationType: {id: \"paymentDetails.chooseOrganizationType\", defaultMessage: \"Choose organization type\", description: 'ModalAddPayments: Choose organization type'},\r\n    addNewPaymentDetails: {id: \"paymentDetails.addNewPaymentDetails\", defaultMessage: \"Add new payment details\", description: 'ModalAddPayments: Add new payment details'},\r\n    modifyPaymentDetails: {id: \"paymentDetails.modifyPaymentDetails\", defaultMessage: \"Modify payment details\", description: 'ModalAddPayments: Modify payment details'},\r\n    removePaymentDetail: {\r\n        id: \"paymentDetails.removePaymentDetail\",\r\n        defaultMessage: \"Remove payment detail\",\r\n        description: \"ModalRemovePaymentDetail: Remove payment detail\"\r\n    },\r\n    alreadyHasBeenConfirmed: {id: \"paymentDetails.alreadyHasBeenConfirmed\", defaultMessage: \"Already has been confirmed\", description: 'ModalAddPayments: Already has been confirmed'},\r\n    alreadyHasBeenRejected: {id: \"paymentDetails.alreadyHasBeenRejected\", defaultMessage: \"Already has been rejected\", description: 'ModalAddPayments: Already has been rejected'},\r\n    alreadyHasBeenDeleted: {id: \"paymentDetails.alreadyHasBeenDeleted\", defaultMessage: \"Already has been deleted\", description: 'ModalAddPayments: Already has been deleted'},\r\n})","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n    cancelPaymentRequest: {\r\n        id: \"payments.cancelPaymentRequest\",\r\n        defaultMessage: \"Cancel payment request\",\r\n        description: 'Payments: Cancel payment request'\r\n    },\r\n    comment: {id: \"payments.comment\", defaultMessage: \"Comment\", description: 'Payments: Comment'},\r\n    paymentInfo: {id: \"payments.paymentInfo\", defaultMessage: \"Payment info\", description: 'Payments: Payment info'},\r\n    paymentRequest: {id: \"payments.paymentRequest\", defaultMessage: \"Payment request\", description: 'Payments: Payment request'},\r\n    managePaymentDetails: {id: \"payments.managePaymentDetails\", defaultMessage: \"Manage payment details\", description: 'Payments: Manage payment details'},\r\n    requestPayment: {id: \"payments.requestPayment\", defaultMessage: \"Request payment\", description: 'Payments: Request payment'},\r\n    transferToAccountName: {id: \"payments.transferToAccountName\", defaultMessage: \"Transfer to account {account_name}\", description: \"Payments: Transfer to account {account_name}\"},\r\n    pending: {id: \"payments.pending\", defaultMessage: \"Pending\", description: 'Payments: Pending'},\r\n    readyForPayment: {id: \"payments.readyForPayment\", defaultMessage: \"Ready for payment\", description: 'Payments: Ready for payment'},\r\n    paid: {id: \"payments.paid\", defaultMessage: \"Paid\", description: 'Payments: Paid'},\r\n\r\n})","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n    numbersFromTemplateCannotBeAllocated: {\r\n        id: \"validation.numbersFromTemplateCannotBeAllocated\",\r\n        defaultMessage: \"Numbers from template \\\"{template}\\\" cannot be allocated\",\r\n        description: \"validation: Numbers from template \\\"{template}\\\" cannot be allocated\"\r\n    },\r\n    accountTrunkRangeMismatchTemplate: {\r\n        id: \"modalResponseHandler.accountTrunkRangeMismatchTemplate\",\r\n        defaultMessage: \"Numbers from template \\\"{template}\\\" cannot be allocated to trunk \\\"{trunkName}\\\". Please try another trunk.\",\r\n        description: \"ModalResponseHandler: Numbers from template {template} cannot be allocated to trunk \\\"{trunkName}\\\". Please try another trunk.\"\r\n    },\r\n    accountTrunkRangeMismatchRange: {\r\n        id: \"modalResponseHandler.accountTrunkRangeMismatchRange\",\r\n        defaultMessage: \"Numbers from range \\\"{range}\\\" cannot be allocated to trunk \\\"{trunkName}\\\". Please try another trunk.\",\r\n        description: \"ModalResponseHandler: Numbers from range {range} cannot be allocated to trunk \\\"{trunkName}\\\". Please try another trunk.\"\r\n    },\r\n    notFoundFreeNumbersTemplate: {\r\n        id: \"modalResponseHandler.notFoundFreeNumbersTemplate\",\r\n        defaultMessage: \"We cannot allocate {numbersAmount} numbers from template \\\"{template}\\\" successively. Please decrease number amount or use random order\",\r\n        description: \"ModalResponseHandler: We cannot allocate {numbersAmount} numbers from template \\\"{template}\\\" successively. Please decrease number amount or use random order\"\r\n\r\n    },\r\n    notFoundFreeNumbersRange: {\r\n        id: \"modalResponseHandler.notFoundFreeNumbersRange\",\r\n        defaultMessage: \"We cannot allocate {numbersAmount} numbers from range \\\"{range}\\\" successively. Please decrease number amount or use random order\",\r\n        description: \"ModalResponseHandler: We cannot allocate {numbersAmount} numbers from template \\\"{range}\\\" successively. Please decrease number amount or use random order\"\r\n    },\r\n    notFoundFreeNumbersDestination: {\r\n        id: \"modalResponseHandler.notFoundFreeNumbersDestination\",\r\n        defaultMessage: \"We cannot allocate {numbersAmount} numbers for destination \\\"{subDest}\\\" successively. Please decrease number amount or use random order\",\r\n        description: \"ModalResponseHandler: We cannot allocate {numbersAmount} numbers for destination \\\"{subDest}\\\" successively. Please decrease number amount or use random order\"\r\n    },\r\n    destinationIsNotAvailable: {\r\n        id: \"modalResponseHandler.destinationIsNotAvailable\",\r\n        defaultMessage: \"This destination is not available for allocation. Please contact to your account manager.\",\r\n        description: \"ModalResponseHandler: This destination is not available for allocation. Please contact to your account manager.\"\r\n    },\r\n    numbersForSubdestCannotBeAllocated: {\r\n        id: \"modalResponseHandler.numbersForSubdestCannotBeAllocated\",\r\n        defaultMessage: \"Numbers for \\\"{subDest}\\\" cannot be allocated\",\r\n        description: \"ModalResponseHandler: Numbers for \\\"{subDest}\\\" cannot be allocated.\"\r\n    },\r\n    youHaveExceededTheLimit: {\r\n        id: \"modalResponseHandler.youHaveExceededTheLimit\",\r\n        defaultMessage: \"You have exceeded the limit for self-allocation numbers\",\r\n        description: \"ModalResponseHandler: You have exceeded the limit for self-allocation numbers.\"\r\n    },\r\n    tooMuchNumbersPerSubdestination: {\r\n        id: \"modalResponseHandler.tooMuchNumbersPerSubdestination\",\r\n        defaultMessage: \"You're trying to allocate too much numbers per subdestination\",\r\n        description: \"ModalResponseHandler: You're trying to allocate too much numbers per subdestination\"\r\n    },\r\n    numbersCannotBeAllocated: {\r\n        id: \"modalResponseHandler.numbersCannotBeAllocated\",\r\n        defaultMessage: \"Numbers cannot be allocated\",\r\n        description: \"ModalResponseHandler: Numbers cannot be allocated\"\r\n    },\r\n\r\n\r\n\r\n    actionIsProhibited: {\r\n        id: \"modalResponseHandler.actionIsProhibited\",\r\n        defaultMessage: \"Action is prohibited\",\r\n        description: \"ModalResponseHandler: Action is prohibited\"\r\n    },\r\n    tooMuchSimultaneousOperations: {\r\n        id: \"modalResponseHandler.tooMuchSimultaneousOperations\",\r\n        defaultMessage: \"Too much simultaneous operations\",\r\n        description: \"ModalResponseHandler: Too much simultaneous operations\"\r\n    },\r\n    numbersAreTemporarilyUnavailable: {\r\n        id: \"modalResponseHandler.numbersAreTemporarilyUnavailable\",\r\n        defaultMessage: \"Numbers are temporarily unavailable\",\r\n        description: \"ModalResponseHandler: Numbers are temporarily unavailable\"\r\n    },\r\n    tooMuchNumbersPerRange: {\r\n        id: \"modalResponseHandler.tooMuchNumbersPerRange\",\r\n        defaultMessage: \"Too much numbers per range\",\r\n        description: \"ModalResponseHandler: Too much numbers per range\"\r\n    },\r\n    invalidOperation: {\r\n        id: \"modalResponseHandler.invalidOperation\",\r\n        defaultMessage: \"Invalid operation\",\r\n        description: \"ModalResponseHandler: Invalid operation\"\r\n    },\r\n    incorrectNumberAmount: {\r\n        id: \"modalResponseHandler.incorrectNumberAmount\",\r\n        defaultMessage: \"Incorrect number amount\",\r\n        description: \"ModalResponseHandler: Incorrect number amount\"\r\n    },\r\n    wrongTemplate: {\r\n        id: \"modalResponseHandler.wrongTemplate\",\r\n        defaultMessage: \"Wrong template\",\r\n        description: \"ModalResponseHandler: Wrong template\"\r\n    },\r\n    operationCode: {\r\n        id: \"modalResponseHandler.operationCode\",\r\n        defaultMessage: \"Operation code\",\r\n        description: \"ModalResponseHandler: Operation code\"\r\n    },\r\n    tooMuchNumbersPerOne: {\r\n        id: \"modalResponseHandler.tooMuchNumbersPerOne\",\r\n        defaultMessage: \"You're trying to allocate to much numbers per one\",\r\n        description: \"ModalResponseHandler: You're trying to allocate too much numbers per one\"\r\n    },\r\n    numbersCannotBeAllocatedToTrunk: {\r\n        id: \"modalResponseHandler.numbersCannotBeAllocatedToTrunk\",\r\n        defaultMessage: \"Numbers cannot be allocated to trunk \\\"{trunkName}\\\". Please try another trunk.\",\r\n        description: \"ModalResponseHandler: Numbers cannot be allocated to trunk \\\"{trunkName}\\\". Please try another trunk.\"\r\n    },\r\n    numbersFromRangeCannotBeAllocated: {\r\n        id: \"modalResponseHandler.numbersFromRangeCannotBeAllocated\",\r\n        defaultMessage: \"Numbers from range \\\"{range}\\\" cannot be allocated.\",\r\n        description: \"ModalResponseHandler: Numbers from range \\\"{range}\\\" cannot be allocated.\"\r\n    },\r\n})","import {defineMessages} from \"react-intl\";\r\n\r\nexport default defineMessages({\r\n    editProfile: { id: \"editProfile\", defaultMessage: \"Edit Profile\", description: 'Edit Profile modal title' },\r\n    email: { id: \"editProfile.email\", defaultMessage: \"Email\", description: 'Edit Profile email' },\r\n    name: { id: \"editProfile.name\", defaultMessage: \"Name\", description: 'Edit Profile name' },\r\n    surname: { id: \"editProfile.surname\", defaultMessage: \"Surname\", description: 'Edit Profile surname' },\r\n    phone: { id: \"editProfile.phone\", defaultMessage: \"Phone\", description: 'Edit Profile phone' },\r\n    send: { id: \"editProfile.send\", defaultMessage: \"Send\", description: 'Edit Profile send' },\r\n    nothingToUpdate: { id: \"editProfile.nothingToUpdate\", defaultMessage: \"Nothing to update\", description: 'Edit Profile Nothing to update' },\r\n    password: { id: \"editProfile.password\", defaultMessage: \"Password\", description: 'Edit Profile Password' },\r\n    changePassword: { id: \"editProfile.changePassword\", defaultMessage: \"Change password\", description: 'Edit Profile Change password' },\r\n    confirm: { id: \"editProfile.confirm\", defaultMessage: \"Confirm\", description: 'Edit Profile Confirm' },\r\n    confirmPassword: { id: \"editProfile.confirmPassword\", defaultMessage: \"Confirm password\", description: 'Edit Profile Confirm password' },\r\n    dontChangePassword: { id: \"editProfile.dontChangePassword\", defaultMessage: \"Don't change password\", description: 'Edit Profile Don\\'t change password' },\r\n    equalPasswordsAlert: { id: \"editProfile.equalPasswordsAlert\", defaultMessage: \"Password and confirm password should be equal!\", description: 'Edit Profile Password and confirm password should be equal!' },\r\n    confirmProfileChanges: { id: \"editProfile.confirmProfileChanges\", defaultMessage: \"Confirm profile changes\", description: 'Edit Profile Confirm profile changes' },\r\n    typeCurrentPassword: { id: \"editProfile.typeCurrentPassword\", defaultMessage: \"Type current password if you want to confirm changes\", description: 'Edit Profile Type current password if you want to confirm changes' },\r\n    profileDataHasSuccessfullyChanged: { id: \"editProfile.profileDataHasSuccessfullyChanged\", defaultMessage: \"Profile data has successfully changed!\", description: 'Edit Profile Profile data has successfully changed!' },\r\n})","import common from \"./common\";\r\nimport accesses from \"./accesses\";\r\nimport validation from \"./validation\";\r\nimport balanceInfo from \"./balanceInfo\";\r\nimport numbers from \"./numbers\";\r\nimport liveCalls from \"./liveCalls\";\r\nimport pagination from \"./pagination\";\r\nimport testCalls from \"./testCalls\";\r\nimport traffic from \"./traffic\";\r\nimport cdr from \"./cdr\";\r\nimport price from \"./price\";\r\nimport cli from \"./cli\";\r\nimport ivr from \"./ivr\";\r\nimport paymentDetails from \"./paymentDetails\";\r\nimport payments from \"./payments\";\r\nimport modalResponseHandler from \"./modalResponseHandler\";\r\nimport editProfile from \"./editProfile\";\r\n\r\nexport default {\r\n    ...common,\r\n    ...accesses,\r\n    ...validation,\r\n    ...balanceInfo,\r\n    ...numbers,\r\n    ...liveCalls,\r\n    ...pagination,\r\n    ...testCalls,\r\n    ...traffic,\r\n    ...cdr,\r\n    ...price,\r\n    ...cli,\r\n    ...ivr,\r\n    ...paymentDetails,\r\n    ...payments,\r\n    ...modalResponseHandler,\r\n    ...editProfile\r\n};","import {Modal} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport {ButtonPrimary, ButtonSubtle} from \"./BaseButton\";\r\nimport React from \"react\";\r\nimport {useIntl} from \"react-intl\";\r\nimport m from \"../../definedMessages\";\r\n\r\n\r\nexport const BaseModal = styled(Modal)`\r\n    && {\r\n        margin: 7.5% auto 0 auto;\r\n        max-width: 100%;\r\n        width: ${props => props.width || '600'}px;\r\n        \r\n        .rs-modal-header {\r\n            position: absolute;\r\n            width: 100%;\r\n            top: -25px;\r\n            \r\n            .rs-modal-title {\r\n                color: #FFF;\r\n            }\r\n            \r\n            .rs-modal-header-close {\r\n                right: 24px;\r\n                top: 0;\r\n                color: #fff;\r\n            }\r\n            \r\n            @media (max-width: 800px) {\r\n                left: 0;\r\n                padding-left: 20px;\r\n                padding-right: 0;\r\n            }\r\n        }\r\n        \r\n        .rs-modal-body {\r\n            margin-top: 0;\r\n            padding-top: 30px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CustomModalRefactored = (\r\n    {\r\n        show,\r\n        title,\r\n        children,\r\n\r\n        // footer\r\n        loading = false,\r\n        disabled = false,\r\n        extraDisabled = false,\r\n        showFooter = false,\r\n        confirmButtonText,\r\n        confirmButtonStyle,\r\n        cancelButtonText,\r\n        cancelButtonStyle,\r\n        focusTarget = null,\r\n\r\n        // callbacks\r\n        onClose,\r\n        onConfirm,\r\n\r\n        // crutches\r\n        extraDialogClassName = \"\",\r\n        checkBefore,\r\n\r\n        ...props\r\n    }\r\n) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            onHide={onClose}\r\n            dialogClassName={extraDialogClassName}\r\n            {...props}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>{title}</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <BaseModal.Body>\r\n                {children}\r\n            </BaseModal.Body>\r\n\r\n            {showFooter &&\r\n                <BaseModal.Footer>\r\n                    <ButtonPrimary\r\n                        appearance={confirmButtonStyle}\r\n                        loading={loading}\r\n                        disabled={disabled || extraDisabled}\r\n                        autoFocus={focusTarget === \"success\"}\r\n                        minWidth={0}\r\n                        className=\"button-confirm\"\r\n                        onClick={() => {\r\n                            if (checkBefore && !checkBefore())\r\n                                return false;\r\n                            onConfirm && onConfirm();\r\n                        }}\r\n                    >\r\n                        {confirmButtonText || \"Ok\"}\r\n                    </ButtonPrimary>\r\n\r\n                    <ButtonSubtle\r\n                        appearance={cancelButtonStyle}\r\n                        disabled={extraDisabled}\r\n                        autoFocus={focusTarget === \"close\"}\r\n                        minWidth={0}\r\n                        className=\"button-cancel\"\r\n                        onClick={onClose}\r\n                    >\r\n                        {cancelButtonText || formatMessage(m.cancel)}\r\n                    </ButtonSubtle>\r\n\r\n                </BaseModal.Footer>\r\n            }\r\n\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport const CustomModalClient = styled(CustomModalRefactored)`\r\n    && {\r\n        margin: 7.5% auto 0 auto;\r\n        max-width: 100%;\r\n        width: ${props => props.width || '600'}px;\r\n\r\n        .rs-modal-header {\r\n            padding-right: 0;\r\n            display: flex;\r\n            flex-direction: row-reverse;\r\n\r\n            .rs-modal-header-close {\r\n                position: static;\r\n            }\r\n        }\r\n        \r\n        .rs-modal-body {\r\n            margin-top: 0;\r\n            padding-top: 30px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport default BaseModal;","import React, { useEffect, useState } from 'react';\r\nimport {Alert, Button, Icon} from 'rsuite';\r\nimport {APP_VERSION} from \"../index\";\r\nimport {semverGreaterThan} from \"../utils/helpers\";\r\nimport {getAppVersion} from \"../api/loginRoutes\";\r\nimport {useWindowWidth} from \"../hooks\";\r\nimport BaseModal from \"./base/BaseModal\";\r\n\r\nconst NEW_VERSION_AVAILABLE = 'new_version_available';\r\n\r\n\r\nexport default () => {\r\n\r\n    const [show, setShow] = useState(false);\r\n    const resizedWidth = useWindowWidth();\r\n\r\n\r\n    // check on mount\r\n    useEffect( () => {\r\n        checkVersion(true);\r\n    }, [] );\r\n\r\n\r\n    // interval check\r\n    useEffect( () => {\r\n        const interval = setInterval(() => {\r\n            checkVersion();\r\n        }, 120000);\r\n        return () => clearInterval(interval);\r\n    }, [] );\r\n\r\n\r\n    const checkVersion = (showCacheNotification) => {\r\n        const storageVersion = localStorage.getItem(NEW_VERSION_AVAILABLE);\r\n\r\n        getAppVersion().then( (meta) => {\r\n            if (!meta)\r\n                return;\r\n\r\n            const isMetaVersionGreater = semverGreaterThan(meta.version, APP_VERSION);\r\n\r\n            if (!isMetaVersionGreater && storageVersion) {\r\n                localStorage.removeItem(NEW_VERSION_AVAILABLE);\r\n                return;\r\n            }\r\n\r\n            if (isMetaVersionGreater ) {\r\n\r\n                if (storageVersion) {\r\n                    if (storageVersion && storageVersion !== meta.version) {\r\n                        localStorage.setItem(NEW_VERSION_AVAILABLE, meta.version);\r\n                    }\r\n                    if (showCacheNotification) {\r\n                        Alert.error(<>\r\n                            <p>New version <b>{meta.version}</b> is available.</p>\r\n                            <p>Please, clear cache and reload the page</p>\r\n                        </>, 300000000);\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                setShow(true);\r\n                localStorage.setItem(NEW_VERSION_AVAILABLE, meta.version);\r\n            }\r\n        } )\r\n    };\r\n\r\n\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        window.location.reload();\r\n    };\r\n\r\n\r\n    return (\r\n        <BaseModal\r\n            show={show}\r\n            onHide={handleClose}\r\n            backdrop=\"static\"\r\n            width={resizedWidth > 600 ? 600 : resizedWidth}\r\n        >\r\n            <BaseModal.Header>\r\n            </BaseModal.Header>\r\n            <BaseModal.Body style={{maxHeight: '100%'}}>\r\n                <Icon\r\n                    icon=\"remind\"\r\n                    style={{\r\n                        color: '#ffb300',\r\n                        fontSize: 24\r\n                    }}\r\n                />\r\n                &nbsp;&nbsp; The system has been updated, the page will be reloaded.\r\n            </BaseModal.Body>\r\n            <BaseModal.Footer>\r\n                <Button onClick={handleClose} appearance=\"primary\">\r\n                  Ok\r\n                </Button>\r\n            </BaseModal.Footer>\r\n        </BaseModal>\r\n    );\r\n};","import React from 'react';\r\nimport {Button, Modal, Tooltip, Whisper} from 'rsuite';\r\nimport {useIntl} from \"react-intl\";\r\nimport m from \"../../definedMessages\";\r\n\r\nexport default ({show, onClose, onSuccess, children, title, width, successButton, closeButton, successButtonProps, showCloseSuccessButtons = true, onSuccessClose = true, style, ...props}) => {\r\n    const styles = {...style};\r\n    width && (styles.width = width);\r\n    const {formatMessage} = useIntl();\r\n\r\n    const closeModal = (onClose, onSuccess) => {\r\n        onSuccess();\r\n        onClose();\r\n    };\r\n    return (\r\n        <Modal {...props} show={show} onHide={onClose} style={styles}>\r\n            <Modal.Header>\r\n                {\r\n                    props.whisper ?\r\n                        <Whisper\r\n                            placement=\"bottomStart\"\r\n                            trigger=\"hover\"\r\n                            speaker={\r\n                                <Tooltip>\r\n                                    {props.whisper}\r\n                                </Tooltip>\r\n                            }\r\n                        >\r\n                            <Modal.Title>{title}</Modal.Title>\r\n                        </Whisper>\r\n                        :\r\n                        <Modal.Title>{title}</Modal.Title>\r\n                }\r\n            </Modal.Header>\r\n            <Modal.Body style={{maxHeight: '100%'}}>\r\n                {children}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                {\r\n                    (() => {\r\n                        if (showCloseSuccessButtons) {\r\n                            return (\r\n                                <>\r\n                                    <Button appearance=\"primary\"\r\n                                            onClick={() => {\r\n                                                if (onSuccessClose) {\r\n                                                    closeModal(onClose, onSuccess)\r\n                                                } else {\r\n                                                    onSuccess()\r\n                                                }\r\n                                            }} {...successButtonProps} >\r\n                                        {successButton ? successButton : 'Ok'}\r\n                                    </Button>\r\n                                    <Button onClick={onClose} appearance=\"subtle\">\r\n                                        {closeButton ? closeButton : formatMessage(m.cancel)}\r\n                                    </Button>\r\n                                </>\r\n                            );\r\n                        }\r\n                    })()\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};","import React, {useContext, useState} from 'react';\r\nimport ModalEdit from '../../components/Modal/ModalEdit';\r\nimport {FlexboxGrid, Form, FormControl, Schema, Message} from 'rsuite';\r\nimport {replaceUndefinedOrNull} from '../../utils/helpers';\r\nimport m from \"../../definedMessages\";\r\nimport { useIntl } from 'react-intl';\r\nimport { RtlContext } from '../../App';\r\n\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\nconst styles = {\r\n    marginRight: '20px'\r\n};\r\n\r\n\r\nexport default ({maxWidth = 520, show, onClose, data, modifyAccountRequest}) => {\r\n    const [formValue, onChangeFormValue] = useState({});\r\n    const [disabledButton, onDisableButton] = useState(false);\r\n\r\n    let form;\r\n    const rtl = useContext(RtlContext);\r\n\r\n    const {formatMessage} = useIntl();\r\n\r\n    const formModel = Schema.Model({\r\n        old_password: StringType()\r\n            .isRequired(formatMessage(m.thisFieldIsRequired)),\r\n    });\r\n\r\n\r\n    const onSubmit = (form, model, value) => {\r\n        if (!form.check()) {\r\n            return false;\r\n        }\r\n\r\n        const comparedData = {...data, old_password: value.old_password};\r\n\r\n        const formData = JSON.stringify(comparedData, replaceUndefinedOrNull);\r\n        const clearedData = JSON.parse(formData);\r\n\r\n        modifyAccountRequest(clearedData);\r\n\r\n        return true;\r\n    };\r\n\r\n    const styled = getComputedStyle(document.documentElement);\r\n\r\n    return (\r\n        <ModalEdit {...{show, onClose}}\r\n               onClose={() => onClose()}\r\n               onSuccess={() => onSubmit(form, formModel, formValue)}\r\n               successButtonProps={ {disabled: !disabledButton}}\r\n               title={formatMessage(m.confirmProfileChanges)}\r\n               successButton={formatMessage(m.accept)}\r\n               width={maxWidth}\r\n        >\r\n            <Form\r\n                model={formModel}\r\n                ref={ref => form = ref}\r\n                onChange={(data) => {\r\n                    const checkedData = formModel.check(data);\r\n\r\n                    const checker = Object.keys(checkedData).map(i => checkedData[i].hasError).every(value => value === false);\r\n                    if (checker) {\r\n                        onDisableButton(true);\r\n                    } else {\r\n                        onDisableButton(false);\r\n                    }\r\n\r\n                    onChangeFormValue(data);\r\n                }}\r\n            >\r\n                <Message\r\n                    type=\"info\"\r\n                    description={formatMessage(m.typeCurrentPassword)}\r\n                    style={{\r\n                        width: '90%',\r\n                        left: rtl ? 'auto' : '5%',\r\n                        right: rtl ? '5%' : 'auto',\r\n                        marginBottom: '20px',\r\n                        border: `1px solid ${styled.getPropertyValue('--color-info')}`\r\n                    }}\r\n                />\r\n\r\n                <FlexboxGrid align=\"middle\" style={{width: '100%', marginBottom: '20px'}}>\r\n                    {\r\n                        <FlexboxGrid.Item style={{...styles, width: '100%', maxWidth: '100px'}}>\r\n                            {formatMessage(m.password)}\r\n                        </FlexboxGrid.Item>\r\n                    }\r\n                    <FlexboxGrid.Item\r\n                        style={{\r\n                            width: '100%',\r\n                            maxWidth: '300px',\r\n                            minWidth: '140px'\r\n                        }}>\r\n                        <FormControl\r\n                            name=\"old_password\"\r\n                            type=\"password\"\r\n                            placeholder={formatMessage(m.password)}\r\n                            style={{\r\n                                maxWidth: '300px',\r\n                                minWidth: '140px'\r\n                            }}\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n            </Form>\r\n        </ModalEdit>\r\n    );\r\n};","import React, {useEffect, useState} from 'react';\r\nimport {Button, FlexboxGrid, Form, FormControl, Icon, Schema, Message} from 'rsuite';\r\nimport ModalEdit from '../Modal/ModalEdit';\r\nimport ModalEditProfileConfirm from './ModalEditProfileConfirm';\r\nimport {LOCAL_STORAGE_USER_INFO} from '../../const/localStorageKeys';\r\nimport m from \"../../definedMessages\";\r\nimport {useIntl} from \"react-intl\";\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\nconst MIN_PASSWORD_LENGTH = 8;\r\nconst MAX_CHARACTERS = 40;\r\nconst MAX_EMAIL_LENGTH = 256;\r\nconst MAX_PHONE_LENGTH = 15;\r\n\r\nconst styles = {\r\n    marginRight: '20px'\r\n};\r\n\r\nexport default ({maxWidth = 520, show, onClose, loading, authInfo, ...props}) => {\r\n    const {modifyAccountRequest, error, errorMessage} = props;\r\n\r\n    const user = localStorage.getItem(LOCAL_STORAGE_USER_INFO);\r\n    const userInfo = authInfo || ( user && JSON.parse(user) );\r\n    const {formatMessage} = useIntl();\r\n\r\n    const defaultFormProfileValue = {\r\n        ...(userInfo && userInfo.name ? {name: userInfo.name} : {}),\r\n        ...(userInfo && userInfo.surname ? {surname: userInfo.surname} : {}),\r\n        ...(userInfo && userInfo.email ? {email: userInfo.email} : {}),\r\n        ...(userInfo && userInfo.phone ? {phone: userInfo.phone} : {})\r\n    };\r\n\r\n    let form;\r\n\r\n    const [showChangePassword, onChangeShowChangePassword] = useState(false);\r\n    const [preparedData, onChangePreparedData] = useState(null);\r\n    const [showConfirmEditModal, onChangeConfirmEditModal] = useState(false);\r\n    const [passwordEqual, onEqualPasswords] = useState(false);\r\n\r\n    const [formProfileValue, onChangeProfileFormValue] = useState(defaultFormProfileValue);\r\n    const [formPasswordValue, onChangePasswordFormValue] = useState({});\r\n    const [formProfileError, onChangeProfileErrorValue] = useState({});\r\n    const [formPasswordError, onChangePasswordErrorValue] = useState({});\r\n    const [disabledButton, onDisabledButton] = useState({password: true, profile: true});\r\n\r\n\r\n    const clearFormState = () => {\r\n        onChangeProfileFormValue(defaultFormProfileValue);\r\n        onChangePasswordFormValue({});\r\n        onChangeProfileErrorValue({});\r\n        onChangePasswordErrorValue({});\r\n\r\n        onChangeShowChangePassword(false);\r\n        onEqualPasswords(false);\r\n        onDisabledButton({password: true, profile: true})\r\n    };\r\n\r\n    const formProfileModel = Schema.Model({\r\n        name: StringType()\r\n            .maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})),\r\n        surname: StringType()\r\n            .maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})),\r\n        // email: StringType()\r\n        //     .isEmail('Please enter an email address')\r\n        //     .maxLength(MAX_EMAIL_LENGTH, `The maximum of this field is ${MAX_EMAIL_LENGTH} characters`),\r\n        phone: StringType()\r\n            .pattern(/^[1-9][\\d]*$/, formatMessage(m.numberMust))\r\n            .maxLength(MAX_PHONE_LENGTH, formatMessage(m.maxLength, {count: MAX_PHONE_LENGTH}))\r\n    });\r\n\r\n    const formPasswordModel = Schema.Model({\r\n        password: StringType()\r\n            .pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[\\d])[A-Za-z'\\d#?!_@$%^&*-]{8,}$/, formatMessage(m.passwordLetters))\r\n            .minLength(MIN_PASSWORD_LENGTH, formatMessage(m.passwordMinLength, {count: MIN_PASSWORD_LENGTH}))\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (error && errorMessage) {\r\n            clearFormState();\r\n        }\r\n    }, [error]);\r\n\r\n    const onSubmit = (form) => {\r\n        if (!form.check()) {\r\n            return false;\r\n        }\r\n\r\n        const formValue = {...formProfileValue};\r\n        delete formValue.email;\r\n\r\n        onChangePreparedData({...formPasswordValue, ...formValue});\r\n        onChangeConfirmEditModal(true);\r\n\r\n        return false\r\n    };\r\n\r\n    const checkFormError = (errorObj) => {\r\n        return Object.keys(errorObj).map(i => errorObj[i].hasError).every(value => value === false)\r\n    };\r\n\r\n    const clearPassword = () => {\r\n        form.state.formError = null;\r\n        form.state.formValue = null;\r\n\r\n        formPasswordError && Object.keys(formPasswordError).length !== 0 && onChangePasswordErrorValue({\r\n            ...Object.keys(formPasswordError)\r\n                .filter(key => key !== 'password')\r\n                .reduce((result, current) => {\r\n                    result[current] = formPasswordError[current];\r\n                    return result;\r\n                }, {})\r\n        });\r\n        formPasswordValue && Object.keys(formPasswordValue).length !== 0 && onChangePasswordFormValue(\r\n            Object.assign({},\r\n                ...Object.entries(formPasswordValue)\r\n                    .filter(([key]) => key !== 'password')\r\n                    .map(([result, current]) => ({[result]: current}))\r\n            ));\r\n\r\n        onChangeShowChangePassword(false);\r\n        onEqualPasswords(false);\r\n    };\r\n\r\n    const styled = getComputedStyle(document.documentElement);\r\n\r\n    return (\r\n        <ModalEdit {...{show, onClose}}\r\n                   onSuccessClose={false}\r\n                   onClose={() => {\r\n                       onClose();\r\n                       clearFormState();\r\n                   }}\r\n                   onSuccess={() => onSubmit(form, formProfileValue)}\r\n                   successButton={formatMessage(m.send)}\r\n                   successButtonProps={{\r\n                       disabled:\r\n                           !checkFormError(formProfileError) ||\r\n                           !checkFormError(formPasswordError) ||\r\n                           showChangePassword && !passwordEqual && (!disabledButton.password || !disabledButton.profile) ||\r\n                           !showChangePassword && disabledButton.profile\r\n                   }}\r\n                   title={formatMessage(m.editProfile)}\r\n                   width={maxWidth}\r\n        >\r\n            <Form\r\n                ref={ref => form = ref}\r\n                model={formProfileModel}\r\n                onChange={(data) => {\r\n                    const checkedData = formProfileModel.check(data);\r\n                    const formData = {name: data.name, surname: data.surname, email: data.email, phone: data.phone};\r\n\r\n                    onChangeProfileErrorValue(checkedData);\r\n                    onChangeProfileFormValue(formData);\r\n\r\n                    if ((!formData.name && !formData.surname && !formData.email && !formData.phone && !formData.password) ||\r\n                        (userInfo &&\r\n                            (formData.name === userInfo.name && formData.surname === userInfo.surname &&\r\n                                formData.email === userInfo.email && formData.phone === userInfo.phone))) {\r\n                        onDisabledButton({...disabledButton, profile: true});\r\n                    } else {\r\n                        onDisabledButton({...disabledButton, profile: false})\r\n                    }\r\n                }}\r\n                value={formProfileValue}\r\n                formDefaultValue={formProfileValue}\r\n            >\r\n                <FlexboxGrid align=\"middle\" style={{width: '100%', marginBottom: '20px'}}>\r\n                    {\r\n                        <FlexboxGrid.Item style={{...styles, width: '100%', maxWidth: '100px'}}>\r\n                            {formatMessage(m.name)}\r\n                        </FlexboxGrid.Item>\r\n                    }\r\n                    <FlexboxGrid.Item className=\"edit-profile-input-wrapper\">\r\n                        <FormControl\r\n                            name=\"name\"\r\n                            type=\"text\"\r\n                            placeholder={formatMessage(m.name)}\r\n                            className=\"edit-profile-input\"\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n                <FlexboxGrid align=\"middle\" style={{width: '100%', marginBottom: '20px'}}>\r\n                    {\r\n                        <FlexboxGrid.Item style={{...styles, width: '100%', maxWidth: '100px'}}>\r\n                            {formatMessage(m.surname)}\r\n                        </FlexboxGrid.Item>\r\n                    }\r\n                    <FlexboxGrid.Item className=\"edit-profile-input-wrapper\">\r\n                        <FormControl\r\n                            name=\"surname\"\r\n                            type=\"text\"\r\n                            placeholder={formatMessage(m.surname)}\r\n                            className=\"edit-profile-input\"\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n                <FlexboxGrid align=\"middle\" style={{width: '100%', marginBottom: '20px'}}>\r\n                    {\r\n                        <FlexboxGrid.Item style={{...styles, width: '100%', maxWidth: '100px'}}>\r\n                            {formatMessage(m.email)}\r\n                        </FlexboxGrid.Item>\r\n                    }\r\n                    <FlexboxGrid.Item className=\"edit-profile-input-wrapper\">\r\n                        <FormControl\r\n                            disabled\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            placeholder={formatMessage(m.email)}\r\n                            className=\"edit-profile-input\"\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n                <FlexboxGrid align=\"middle\" style={{width: '100%', marginBottom: '20px'}}>\r\n                    {\r\n                        <FlexboxGrid.Item style={{...styles, width: '100%', maxWidth: '100px'}}>\r\n                            {formatMessage(m.phone)}\r\n                        </FlexboxGrid.Item>\r\n                    }\r\n                    <FlexboxGrid.Item className=\"edit-profile-input-wrapper\">\r\n                        <FormControl\r\n                            name=\"phone\"\r\n                            type=\"text\"\r\n                            placeholder={formatMessage(m.phone)}\r\n                            className=\"edit-profile-input\"\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n            </Form>\r\n            {\r\n                showChangePassword && (!disabledButton.password || !disabledButton.profile) || (disabledButton.profile) &&\r\n                <FlexboxGrid align=\"middle\" style={{width: '100%', marginBottom: '20px'}}>\r\n                    <Message\r\n                        showIcon\r\n                        type=\"warning\"\r\n                        description={formatMessage(m.nothingToUpdate)}\r\n                        style={{\r\n                            width: '100%',\r\n                            border: `1px solid ${styled.getPropertyValue('--color-warning')}`\r\n                        }}\r\n                    />\r\n                </FlexboxGrid>\r\n            }\r\n            <Form\r\n                ref={ref => form = ref}\r\n                model={formPasswordModel}\r\n                onChange={(data) => {\r\n                    const checkedData = formPasswordModel.check(data);\r\n\r\n                    onChangePasswordErrorValue(checkedData);\r\n\r\n                    if (data.password && data.confirm_password) {\r\n                        onEqualPasswords(data.password === data.confirm_password);\r\n                    }\r\n\r\n                    onChangePasswordFormValue({password: data.password});\r\n\r\n                    onDisabledButton({...disabledButton, password: !data.password})\r\n                }}\r\n                value={formPasswordValue}\r\n                formDefaultValue={formPasswordValue}\r\n            >\r\n                {!showChangePassword && <FlexboxGrid style={{marginTop: '20px', width: '100%'}}>\r\n                    <FlexboxGrid.Item style={{width: '100%'}}>\r\n                        <Button\r\n                            style={{width: '100%'}}\r\n                            onClick={() => {\r\n                                onChangeShowChangePassword(true)\r\n                            }}\r\n                            appearance=\"ghost\"\r\n                            color=\"violet\"\r\n                            disabled={loading}\r\n                        >\r\n                            <Icon icon=\"pencil\"/> {formatMessage(m.changePassword)}\r\n                        </Button>\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>}\r\n                {showChangePassword && <>\r\n                    <FlexboxGrid align=\"middle\" style={{width: '100%', marginBottom: '20px'}}>\r\n                        {\r\n                            <FlexboxGrid.Item style={{...styles, width: '100%', maxWidth: '100px'}}>\r\n                                {formatMessage(m.password)}\r\n                            </FlexboxGrid.Item>\r\n                        }\r\n                        <FlexboxGrid.Item\r\n                            style={{\r\n                                width: '100%',\r\n                                maxWidth: '300px',\r\n                                minWidth: '140px'\r\n                            }}>\r\n                            <FormControl\r\n                                errorMessage={formPasswordError.password && formPasswordError.password.errorMessage || null}\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                placeholder={formatMessage(m.password)}\r\n                                style={{\r\n                                    maxWidth: '300px',\r\n                                    minWidth: '140px'\r\n                                }}\r\n                            />\r\n                        </FlexboxGrid.Item>\r\n                    </FlexboxGrid>\r\n                    <FlexboxGrid align=\"middle\" style={{width: '100%', marginBottom: '20px'}}>\r\n                        {\r\n                            <FlexboxGrid.Item style={{...styles, width: '100%', maxWidth: '100px'}}>\r\n                                {formatMessage(m.confirm)}\r\n                            </FlexboxGrid.Item>\r\n                        }\r\n                        <FlexboxGrid.Item\r\n                            style={{\r\n                                width: '100%',\r\n                                maxWidth: '300px',\r\n                                minWidth: '140px'\r\n                            }}>\r\n                            <FormControl\r\n                                name=\"confirm_password\"\r\n                                type=\"password\"\r\n                                placeholder={formatMessage(m.confirmPassword)}\r\n                                style={{\r\n                                    maxWidth: '300px',\r\n                                    minWidth: '140px'\r\n                                }}\r\n                            />\r\n                        </FlexboxGrid.Item>\r\n                    </FlexboxGrid>\r\n                    {\r\n                        !passwordEqual &&\r\n                        <FlexboxGrid align=\"middle\" style={{width: '100%', marginBottom: '20px'}}>\r\n                            <span style={{color: 'red'}}>{formatMessage(m.equalPasswordsAlert)}</span>\r\n                        </FlexboxGrid>\r\n                    }\r\n                    <FlexboxGrid style={{marginTop: '20px', width: '100%'}}>\r\n                        <FlexboxGrid.Item style={{width: '100%'}}>\r\n                            <Button\r\n                                style={{width: '100%'}}\r\n                                onClick={() => {\r\n                                    clearPassword()\r\n                                }}\r\n                                appearance=\"ghost\"\r\n                                color=\"violet\"\r\n                                disabled={loading}\r\n                            >\r\n                                <Icon icon=\"reply\"/> {formatMessage(m.dontChangePassword)}\r\n                            </Button>\r\n                        </FlexboxGrid.Item>\r\n                    </FlexboxGrid>\r\n                </>}\r\n            </Form>\r\n            <ModalEditProfileConfirm\r\n                show={showConfirmEditModal}\r\n                onClose={()=> {\r\n                    clearPassword();\r\n                    onChangeConfirmEditModal(false);\r\n                }}\r\n                data={preparedData}\r\n                {...{\r\n                    modifyAccountRequest\r\n                }}\r\n            />\r\n        </ModalEdit>\r\n        );\r\n};","import store from './index';\r\nimport {getFirstValueByName} from \"../utils\";\r\n\r\nexport const getPaymentTermKeyByName = (paymentTermName) => {\r\n    const paymentTermsList = store.getState().references.payment_terms_list;\r\n\r\n    return getFirstValueByName(paymentTermsList, paymentTermName, 'pt_key');\r\n};\r\n\r\nexport const getCurrencyKeyByName = (currencyKey) => {\r\n    const currencyList = store.getState().references.currency_list;\r\n\r\n    return getFirstValueByName(currencyList, currencyKey, 'cur_key');\r\n};\r\n\r\nexport const checkPermissionsFor = (method) => {\r\n    const permissionMethods = store.getState().auth.permissions;\r\n\r\n    return permissionMethods.length ? permissionMethods.includes(method) : false;\r\n};","import styled, {css} from \"styled-components\";\r\nimport {Dropdown} from \"rsuite\";\r\nimport {APP_TYPE_CLIENT} from \"../../const\";\r\n\r\nexport const StyledDropdown = styled(Dropdown).attrs((props) => ({\r\n    isClient: props.theme.appType === APP_TYPE_CLIENT,\r\n}))`\r\n    &&&&&& .rs-dropdown-toggle {\r\n        background-color: transparent !important;\r\n    }\r\n    \r\n    &&& {\r\n        .rs-dropdown-toggle {\r\n            height: 56px;\r\n            box-sizing: border-box;\r\n            line-height: 56px;\r\n            border-radius: 0;\r\n            padding: 0 10px;\r\n            position: relative;\r\n        }\r\n    \r\n        .rs-dropdown-item-content {\r\n            color: #575757;\r\n        }\r\n        \r\n        .rs-dropdown-item-active > .rs-dropdown-item-content {\r\n            color: var(--color-brand1);\r\n            text-decoration: none;\r\n            outline: 0;\r\n            background-color: rgba(242, 250, 255, 0.5);\r\n        }\r\n    }\r\n    \r\n`;","import React from 'react';\r\nimport {Dropdown, Icon, Badge} from 'rsuite';\r\nimport {ACCOUNT_USER_MODIFY_BY_SELF} from '../../const/apiMethods';\r\nimport {checkPermissionsFor} from \"../../store/storeHelpers\";\r\nimport styled, {css} from 'styled-components';\r\nimport * as S from \"./styled.js\";\r\nimport {APP_TYPE_CLIENT} from \"../../const\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {useIntl} from \"react-intl\";\r\nimport m from \"../../definedMessages\";\r\n\r\nexport default ({\r\n    savedUser,\r\n    onChangeShowEditProfileModal,\r\n    appType,\r\n    localMessages\r\n}) => {\r\n    const styled = getComputedStyle(document.documentElement);\r\n    const {formatMessage} = useIntl();\r\n\r\n    return (\r\n        <>\r\n            { checkPermissionsFor(ACCOUNT_USER_MODIFY_BY_SELF)\r\n                ? <UserDropdown\r\n                    menuStyle={{borderTopLeftRadius: 0, borderTopRightRadius: 0}}\r\n                    title={\r\n                        <UserInfo>\r\n                            <div className=\"user-account\">\r\n                                <AccountBadge badgeColor={styled.getPropertyValue('--color-status-badge')}>\r\n                                    {savedUser && savedUser.account_name}\r\n                                </AccountBadge>\r\n                            </div>\r\n                            <p className=\"user-name\">{savedUser && savedUser.name}</p>\r\n                        </UserInfo>\r\n                    }\r\n                >\r\n\r\n                    <Dropdown.Item \r\n                        eventKey=\"edit-profile\" \r\n                        onSelect={onChangeShowEditProfileModal}\r\n                    >\r\n                        <Icon icon=\"edit2\"/> {formatMessage(localMessages.editProfile)}\r\n                    </Dropdown.Item>\r\n\r\n                    {appType === APP_TYPE_CLIENT &&\r\n                        <Dropdown.Item\r\n                            componentClass={Link}\r\n                            eventKey=\"payment-details\"\r\n                            to=\"payment-details\"\r\n                        >\r\n                            <Icon icon=\"usd\"/> {formatMessage(m.managePaymentDetails)}\r\n                        </Dropdown.Item>\r\n                    }\r\n                </UserDropdown>\r\n                : <User>{savedUser && savedUser.name}</User>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst UserDropdown = styled(S.StyledDropdown)`\r\n    user-select: none;\r\n    \r\n    &&& {\r\n    \r\n        .rs-dropdown-toggle {\r\n            align-items: center;\r\n            border-radius: 0;\r\n            box-sizing: border-box;\r\n            display: flex;\r\n            padding: 15px 16px 10px;\r\n        }\r\n        \r\n        ${props => props.theme.appType === APP_TYPE_CLIENT && css`\r\n            .rs-dropdown-toggle {\r\n                padding-left: 10px;\r\n                padding-right: 10px;\r\n            }\r\n        `}\r\n\r\n        .rs-dropdown-toggle-caret {\r\n            margin: 0;\r\n            position: static;\r\n            transform: none;\r\n        }\r\n    }\r\n`;\r\n\r\nconst AccountBadge = styled(Badge)`\r\n    padding-left: 6px;\r\n    padding-top: 1px;\r\n    \r\n    .rtl & {\r\n        padding-left: 0;\r\n        padding-right: 6px;\r\n    }\r\n\r\n    &&& {\r\n\r\n        .rs-badge-content {\r\n            height: 4px;\r\n            left: 0; \r\n            top: 0;\r\n            width: 4px;\r\n            transform: none;\r\n\r\n            ${props =>\r\n                props.badgeColor &&\r\n                css`\r\n                    background-color: ${props.badgeColor}\r\n                `\r\n            }\r\n        }\r\n    }\r\n    \r\n    .rtl &&& {\r\n        \r\n        .rs-badge-content {\r\n            left: auto;\r\n            right: 0;\r\n        }\r\n    }\r\n`;\r\n\r\nconst UserInfo = styled.div`\r\n    .user-account {\r\n        font-size: 8px;\r\n        left: 2px;\r\n        line-height: 1.2em;\r\n        position: absolute;\r\n        top: 2px;\r\n    }\r\n    \r\n    ${props => props.theme.appType === APP_TYPE_CLIENT && css`\r\n        .user-account {\r\n            text-transform: uppercase;\r\n        }\r\n    `}\r\n\r\n    .user-name {\r\n        margin: 0;\r\n        max-width: 170px;\r\n        min-width: 0;\r\n        overflow: hidden;\r\n        padding-right: 10px;\r\n        text-align: left;\r\n        text-overflow: ellipsis;\r\n        white-space: nowrap;\r\n\r\n        @media (min-width: 768px) {\r\n            min-width: 130px;\r\n        }\r\n    }\r\n    \r\n    .rtl & {\r\n        \r\n        .user-account {\r\n            left: auto;\r\n            right: 2px;\r\n        }\r\n        \r\n        .user-name {\r\n            padding-left: 10px;\r\n            padding-right: 0;\r\n            text-align: right;\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nconst User = styled.div`\r\n    display: inline-block\r\n    padding: 19px 16px;\r\n    height: 56px;\r\n    font-size: 13px;\r\n    color: #fff;\r\n`;\r\n","import React from \"react\";\r\nimport {Dropdown, Nav} from \"rsuite\";\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport {useLocation} from \"react-router\";\r\n\r\nexport default ({\r\n    data = [],\r\n}) => {\r\n\r\n    return (\r\n        <Nav appearance=\"subtle\">\r\n            {data.map(item => {\r\n\r\n                const itemContent = <>{item.icon && item.icon}{item.title}</>\r\n\r\n                if (item.children) {\r\n                    if (item.children.length) {\r\n                        return <MenuDropdown item={item} />\r\n                    } else {\r\n                        return <NavLink key={item.key}>{itemContent}</NavLink>;\r\n                    }\r\n                }\r\n\r\n                return item.onClick\r\n                    ? <NavLink key={item.key} onClick={item.onClick}>{itemContent}</NavLink>\r\n                    : <NavLink key={item.key} to={item.key}>{itemContent}</NavLink>\r\n            })}\r\n        </Nav>\r\n    )\r\n};\r\n\r\n\r\nconst NavLink = withRouter( (props) => (\r\n        <Nav.Item\r\n            componentClass={Link}\r\n            active={props.location.pathname.indexOf(props.to) === 0}\r\n            {...props}\r\n        />\r\n    )\r\n);\r\n\r\n\r\nconst MenuDropdown = ({item}) => {\r\n    const location = useLocation();\r\n    const isSubMenuActive = item.children.find(item => item.key === location.pathname);\r\n\r\n    return (\r\n        <StyledDropdown\r\n            key={item.key}\r\n            isActive={!!isSubMenuActive}\r\n            activeKey={location.pathname}\r\n            title={item.title}\r\n        >\r\n            {item.children.map(subItem => (\r\n                <Dropdown.Item\r\n                    active={location.pathname === subItem.key}\r\n                    componentClass={Link}\r\n                    to={subItem.key}\r\n                >\r\n                    {subItem.title}\r\n                </Dropdown.Item>\r\n            ))}\r\n        </StyledDropdown>\r\n    )\r\n};\r\n\r\n\r\nconst StyledDropdown = styled(Dropdown).attrs(props => ({\r\n    className: props.isActive ? 'active' : ''\r\n}))`\r\n    &&&&&& {\r\n\r\n        .rs-dropdown-toggle-caret {\r\n            left: 0;\r\n            margin: 0 0 0 5px;\r\n            padding: 0;\r\n            position: inherit;left .3s ease-out,right .3s ease-out\r\n        }\r\n\r\n        .rs-dropdown-item-active {\r\n            border-left: 3px solid var(--color-brand1);\r\n        }\r\n        \r\n        .rs-dropdown-toggle {\r\n            background-color: transparent !important;\r\n            padding: 18px 16px;\r\n        }\r\n\r\n        &:before {\r\n            content: \"\";\r\n            position: absolute;\r\n            bottom: 0;\r\n            left: 50%;\r\n            right: 50%;\r\n            height: 2px;\r\n            background-color: #fff;\r\n            transition: left .3s ease-out,right .3s ease-out;\r\n        }\r\n\r\n        &.active {\r\n            background-color: transparent;\r\n            \r\n            &:before {\r\n                left: 0;\r\n                right: 0;\r\n            }\r\n        }\r\n    }\r\n`;","import React, {useContext} from \"react\";\r\nimport {Dropdown, Icon, Badge} from \"rsuite\";\r\nimport {Link, useLocation} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport * as S from \"../styled.js\"\r\nimport {AppTypeContext} from \"../../../App\";\r\nimport {APP_TYPE_ADMIN} from \"../../../const\";\r\nimport {useIntl} from \"react-intl\";\r\nimport m from \"../../../definedMessages\";\r\nimport {REGISTRATION_GET_COUNT_API} from '../../../const/apiMethods'\r\nimport {checkPermissionsFor} from '../../../store/storeHelpers'\r\n\r\nexport default ({\r\n    data = [],\r\n    logoutUser,\r\n    registrationCount,\r\n    localMessages,\r\n    ...props\r\n}) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n    const location = useLocation();\r\n    const appType = useContext(AppTypeContext);\r\n\r\n    return (\r\n        <StyledDropdown\r\n            activeKey={location.pathname}\r\n            icon={<Icon icon=\"bars\"/>}\r\n            title={formatMessage(m.menu)}\r\n            {...props}\r\n        >\r\n            {data.map(item => {\r\n                if (item.children && item.children.length) {\r\n                    return (\r\n                        [\r\n                            {\r\n                                id: item.key + '_divider',\r\n                                divider: true\r\n                            },\r\n                            ...item.children\r\n                        ].map(item => (\r\n                            !item.divider\r\n                                ? <Dropdown.Item key={item.key} componentClass={Link} to={item.key} eventKey={item.key}>\r\n                                    {item.title}\r\n                                </Dropdown.Item>\r\n                                : <Dropdown.Item divider/>\r\n                        ))\r\n                    );\r\n                }\r\n\r\n                return item.onClick\r\n                    ? <Dropdown.Item componentClass={Link} key={item.key} onClick={item.onClick} eventKey={item.key}>\r\n                        {item.title}\r\n                    </Dropdown.Item>\r\n                    : <Dropdown.Item componentClass={Link} key={item.key} to={item.key} eventKey={item.key}>\r\n                        {item.title}\r\n                    </Dropdown.Item>\r\n            })}\r\n\r\n            <Dropdown.Item divider/>\r\n\r\n            {checkPermissionsFor(REGISTRATION_GET_COUNT_API) && appType === APP_TYPE_ADMIN &&\r\n                <Dropdown.Item componentClass={Link} to=\"/registration-requests\" eventKey=\"/registration-requests\">\r\n                    <Badge content={registrationCount}><Icon icon=\"group\"/></Badge>\r\n                </Dropdown.Item>\r\n            }\r\n\r\n            <Dropdown.Item componentClass={Link} onClick={logoutUser} to=\"/login\" eventKey=\"/login\">\r\n                <Icon icon=\"sign-out\"/> {formatMessage(localMessages.unlogin)}\r\n            </Dropdown.Item>\r\n        </StyledDropdown>\r\n    )\r\n};\r\n\r\n\r\nconst StyledDropdown = styled(S.StyledDropdown).attrs(() => ({\r\n    noCaret: true,\r\n    className: 'custom-dropdown-menu appMenu',\r\n    menuStyle: {borderTopLeftRadius: 0, borderTopRightRadius: 0},\r\n    toggleClassName: 'custom-dropdown-menu-toggle',\r\n    placement: 'bottomEnd'\r\n}))`\r\n    &&&&&& .rs-dropdown-toggle {\r\n        .app-client & {\r\n            background-color:  !important;\r\n        }\r\n    }\r\n`;","import React, {useMemo, useContext} from \"react\";\r\nimport {Icon} from \"rsuite\";\r\nimport MenuDesktop from \"./MenuDesktop\";\r\nimport MenuMobile from \"./MenuMobile\";\r\nimport {checkPermissionsFor} from \"../../../store/storeHelpers\";\r\nimport {useWindowWidth} from \"../../../hooks\";\r\nimport {\r\n    ACCESS_EXCLUSION_LIST, ACCOUNT_MANAGERS_REFERENCES_API, ACTION_LOGS_GET_LIST_API, AM_ACTIVITIES_LIST_API,\r\n    BLOCKED_DESTINATIONS_GET_LIST_API, GOOGLE_OTP_ALLOCATION_GET_LIST_API, GOOGLE_OTP_QUARANTINED_GET_LIST_API,\r\n    PAYMENT_REQUEST_LIST_API, PRICE_RANGE_QUARANTINE_SETTING_GET_LIST_API,\r\n    SIM_TRAFFIC_RANGES_GET_LIST\r\n} from '../../../const/apiMethods'\r\nimport {AppTypeContext} from \"../../../App\";\r\nimport {useIntl} from \"react-intl\";\r\nimport {APP_TYPE_ADMIN} from \"../../../const\";\r\nimport _ from \"lodash\";\r\n\r\n\r\nexport default ({\r\n    permissions,\r\n    openAllocationModal,\r\n    registrationCount,\r\n    authInfo,\r\n    localMessages: m = {},\r\n}) => {\r\n\r\n\r\n    const appType = useContext(AppTypeContext);\r\n    const windowWidth = useWindowWidth();\r\n    const intl = useIntl();\r\n\r\n    const menuDataAdmin = useMemo(() => {\r\n\r\n        const isTest = _.get(authInfo, 'session.account.is_test', false);\r\n        const filterMenuItems = (items) => (\r\n            items.reduce((sum, item) => {\r\n                const children = (item.children && item.children.length)\r\n                    ? filterMenuItems(item.children)\r\n                    : null;\r\n                if (item.checkedMethods) {\r\n                    for (const method of item.checkedMethods) {\r\n                        if (!checkPermissionsFor(method))\r\n                            return sum;\r\n                    }\r\n                }\r\n                return [...sum, {...item, children: children}];\r\n            }, [])\r\n        );\r\n\r\n        const clientMenu = [\r\n            {key: '/live-calls', title: intl.formatMessage(m.liveCalls), icon: <Icon icon=\"phone-square\"/>},\r\n            {key: '/numbers', title: intl.formatMessage(m.myNumbers), hideOnTest: true},\r\n            {key: '/test-calls', title: intl.formatMessage(m.testCalls)},\r\n            {key: '/traffic', title: intl.formatMessage(m.report), hideOnTest: true},\r\n            {key: '/price', title: intl.formatMessage(m.ratesAndNumbers)},\r\n            {key: '/accesses', title: intl.formatMessage(m.accessList)},\r\n            {key: '/cli', title: intl.formatMessage(m.cliLookup), hideOnTest: true},\r\n            {key: '/ivr', title: intl.formatMessage(m.ivr)},\r\n            {key: '/api', title: \"API\", hideOnTest: true},\r\n            {key: '/payments', title: intl.formatMessage(m.payments), hideOnTest: true},\r\n        ];\r\n\r\n        const adminMenu = [\r\n            {key: '/accounts', title: \"Accounts\"},\r\n            {key: '/prices', title: \"Prices\"},\r\n            {key: '/access-list', title: \"Access list\"},\r\n            {key: '/cdr', title: \"CDR\"},\r\n            {key: '/traffic-reports', title: \"Traffic Reports\"},\r\n            {key: '/live-calls', title: \"Live calls\"},\r\n            {title: \"Number allocation\", onClick: openAllocationModal},\r\n            {key: '/ranges-numbers', title: \"Ranges & numbers\"},\r\n            {key: '/auth-numbers', title: \"Auth Numbers\"},\r\n            {key: '/payments', title: \"Payment management\", checkedMethods: [PAYMENT_REQUEST_LIST_API]},\r\n            {key: '/ivrs', title: \"IVRs\"},\r\n            {key: null, title: \"Tools\",\r\n                children: [\r\n                    {key: '/exceptions-accesses', title: \"Exceptions for access lists\", checkedMethods: [ACCESS_EXCLUSION_LIST]},\r\n                    {key: '/sim-traffic-ranges', title: \"SIM Traffic Ranges\", checkedMethods: [SIM_TRAFFIC_RANGES_GET_LIST]},\r\n                    {key: '/blocked-destinations', title: \"Blocked Destinations\", checkedMethods: [BLOCKED_DESTINATIONS_GET_LIST_API]},\r\n                    {key: '/google-otp-quarantined-ranges', title: \"Google OTP quarantined ranges\", checkedMethods: [GOOGLE_OTP_QUARANTINED_GET_LIST_API]},\r\n                    {key: '/google-otp-allocation-subdestination', title: \"Google OTP allocation subdestination\", checkedMethods: [GOOGLE_OTP_ALLOCATION_GET_LIST_API]},\r\n                    {key: '/special-quarantine-terms', title: \"Special quarantine terms\", checkedMethods: [PRICE_RANGE_QUARANTINE_SETTING_GET_LIST_API]},\r\n                    {key: '/action-logs', title: \"Action Logs\", checkedMethods: [ACTION_LOGS_GET_LIST_API]},\r\n                    {key: '/am-activities', title: \"AM activities\", checkedMethods: [AM_ACTIVITIES_LIST_API]},\r\n                    {key: '/account-managers', title: \"Account Managers\", checkedMethods: [ACCOUNT_MANAGERS_REFERENCES_API]},\r\n                    {key: '/settings', title: \"Settings\", checkedMethods: ['global_setting:get_list']},\r\n\r\n                ]\r\n            },\r\n        ];\r\n\r\n        return appType === APP_TYPE_ADMIN\r\n            ? filterMenuItems(adminMenu)\r\n            : filterMenuItems(clientMenu.filter(item => !(isTest && item.hideOnTest)));\r\n\r\n    }, [permissions, appType, intl, authInfo]);\r\n\r\n    return (\r\n        <>\r\n            {windowWidth > 1200\r\n                ? <MenuDesktop registrationCount={registrationCount} data={menuDataAdmin} />\r\n                : <MenuMobile registrationCount={registrationCount} data={menuDataAdmin} localMessages={m} />\r\n            }\r\n        </>\r\n    )\r\n};","import React, {useEffect, useMemo, useState} from 'react'\r\nimport {Whisper, Tooltip, Icon, Button} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport {FormattedMessage} from \"react-intl\";\r\nimport _ from \"lodash\";\r\nimport messages from \"../../definedMessages\";\r\nimport {Link} from 'react-router-dom'\r\nimport {createExternalLink} from './Navigation'\r\n\r\n\r\nexport default ({\r\n    isMobile = false,\r\n    localMessages: m,\r\n    authInfo = {},\r\n    showContactModal,\r\n    setShowContactModal\r\n}) => {\r\n    const managerInfo = useMemo(() => {\r\n        const managerName = _.get(authInfo, 'session.account.account_manager_name', null);\r\n        const managerEmail = _.get(authInfo, 'session.account.account_manager_email', null);\r\n        return {\r\n            managerName,\r\n            managerEmail\r\n        }\r\n    }, [authInfo]);\r\n\r\n    const [showWhisper, onShowWhisper] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!showContactModal) {\r\n            onShowWhisper(false)\r\n        }\r\n    }, [showContactModal]);\r\n\r\n    if (isMobile)\r\n        return (\r\n            <Whisper\r\n                placement=\"auto\"\r\n                trigger=\"click\"\r\n                speaker={<StyledTooltip\r\n                    show={!showContactModal && showWhisper}\r\n                >\r\n                        <div><FormattedMessage {...m.yourAccountManager}/>: {managerInfo.managerName}</div>\r\n                        <div><Link to={`mailto:${managerInfo.managerEmail}`}>{managerInfo.managerEmail}</Link></div>\r\n                        {!showContactModal && showWhisper && <MobileStyledTextButton appearance=\"link\" onClick={() => setShowContactModal(true)}>\r\n                           <Icon icon=\"book2\" className=\"contact_icon\"/> <FormattedMessage {...messages.moreContacts}/>\r\n                        </MobileStyledTextButton>}\r\n                    </StyledTooltip>\r\n                }\r\n            >\r\n                <StyledIcon\r\n                    size=\"lg\"\r\n                    icon=\"avatar\"\r\n                    className=\"menu_account-avatar\"\r\n                    onClick={() => {onShowWhisper(true)}}\r\n                />\r\n            </Whisper>\r\n        );\r\n\r\n    return (\r\n        <StyledAccountManagerInfo>\r\n            {managerInfo.managerName &&\r\n                <div className=\"name\">\r\n                    <FormattedMessage {...m.yourAccountManager}/>: {managerInfo.managerName}\r\n                </div>\r\n            }\r\n            {managerInfo.managerEmail &&\r\n                <div className=\"email\">{createExternalLink(managerInfo.managerEmail, \"mailto\")}</div>\r\n            }\r\n            <StyledTextButton appearance=\"link\" onClick={() => {setShowContactModal(true)}}><FormattedMessage {...messages.moreContacts}/></StyledTextButton>\r\n        </StyledAccountManagerInfo>\r\n    )\r\n};\r\n\r\nconst StyledIcon = styled(Icon)`\r\n    padding-top: 17px;\r\n    margin-right: 20px;\r\n    \r\n    .app-client.rtl & {\r\n        margin-left: 20px;\r\n        margin-right: 0;\r\n    }\r\n`;\r\n\r\nconst StyledTooltip = styled(Tooltip)`\r\n    display: ${props => !props.show ? 'none !important' : undefined};\r\n    && .rs-tooltip-inner {\r\n        padding-bottom: 5px;\r\n        padding-top: 5px;\r\n    }\r\n`;\r\n\r\nconst StyledAccountManagerInfo = styled.div`\r\n    font-size: 0.7rem;\r\n    padding: 5px 10px 0 0;\r\n    \r\n    .app-client.rtl & {\r\n        padding-right: 0;\r\n        padding-left: 10px;\r\n    }\r\n    \r\n    .email {\r\n        font-size: 0.9rem;\r\n    }\r\n`;\r\n\r\nconst StyledTextButton = styled(Button)`\r\n    line-height: 0 !important;\r\n    padding: 0 !important;\r\n    margin-top: 5px !important;\r\n    display: flex !important;\r\n    font-size: 0.7rem !important;\r\n    color: #ffffff !important;\r\n    text-decoration: underline !important;\r\n`;\r\nconst MobileStyledTextButton = styled(Button)`\r\n    padding: 0 !important;\r\n    margin-left: 0px !important;\r\n    margin-top: 8px !important;\r\n    display: flex !important;\r\n    font-size: 0.7rem !important;\r\n    color: #ffffff !important;\r\n    text-decoration: underline !important;\r\n    .contact_icon {\r\n        margin-right: 5px;\r\n    }\r\n`;","import React, {useContext, useEffect, useMemo, useState} from 'react'\r\nimport styled from 'styled-components';\r\nimport m from \"../../definedMessages\";\r\nimport {Whisper, Tooltip, Icon, Divider} from \"rsuite\";\r\nimport {useIntl} from \"react-intl\";\r\nimport _ from \"lodash\";\r\nimport Badge from 'rsuite/es/Badge'\r\nimport {Link} from 'react-router-dom'\r\nimport {RtlContext} from \"../../App\";\r\nimport {LOCAL_STORAGE_CHECKED_PAYMENT_STATUS} from '../../const/localStorageKeys'\r\n\r\nexport default ({\r\n    dialerInfo = {},\r\n    realtimePaymentStatus,\r\n    readyForPayment,\r\n    isMobile = false\r\n}) => {\r\n\r\n    const intl = useIntl();\r\n    const rtl = useContext(RtlContext);\r\n\r\n    const accountInfo = useMemo(() => {\r\n        return _.get(dialerInfo, 'session.account', {});\r\n    }, [dialerInfo]);\r\n\r\n    const currencyIcon = useMemo(() => (\r\n        dialerInfo && dialerInfo.currency_name\r\n            ? dialerInfo.currency_name.toLowerCase()\r\n            : \"usd\"\r\n    ), [dialerInfo]);\r\n\r\n    const data = useMemo(() => {\r\n        const accountInfo = _.get(dialerInfo, 'session.account', {});\r\n        const data = [\r\n            {\r\n                id: 'balance',\r\n                value: dialerInfo.BALANCE ? `${dialerInfo.BALANCE} ${dialerInfo.currency_name}` : 0,\r\n                label: intl.formatMessage(m.pendingAmount),\r\n            },\r\n            {\r\n                id: 'balance_inv',\r\n                value: readyForPayment ? `${dialerInfo.BALANCE_INV} ${dialerInfo.currency_name}` : 0,\r\n                label: intl.formatMessage(m.readyForPayment),\r\n            },\r\n            {\r\n                id: 'payment_terms',\r\n                value: dialerInfo.payment_terms,\r\n                label: intl.formatMessage(m.paymentTerms),\r\n            },\r\n            {\r\n                id: 'traffic',\r\n                value: `${dialerInfo.VOLUME_1_OUT || 0}/${dialerInfo.VOLUME_7_OUT || 0}/${dialerInfo.VOLUME_30_OUT || 0} ${dialerInfo.currency_name || 'currency'}`,\r\n                label: intl.formatMessage(m.traffic),\r\n                hideOnTest: true,\r\n                hideOnMobile: true\r\n            },\r\n            {\r\n                id: 'allocated_numbers',\r\n                value: dialerInfo.allocated_numbers || 0,\r\n                label: intl.formatMessage(m.allocatedNumbers),\r\n                hideOnMobile: true\r\n            },\r\n            // {\r\n            //     id: 'allocated_ranges',\r\n            //     value: dialerInfo.allocated_ranges || 0,\r\n            //     label: intl.formatMessage(m.ranges),\r\n            //     hideOnMobile: true\r\n            // },\r\n        ];\r\n\r\n        return data.filter(item => (\r\n            !((accountInfo.isTest && item.hideOnTest) || (isMobile && item.hideOnMobile) ))\r\n        )\r\n    }, [dialerInfo, readyForPayment, isMobile]);\r\n\r\n    useEffect(() => {\r\n        if (paymentStatusCountState !== realtimePaymentStatus) {\r\n            localStorage.setItem(LOCAL_STORAGE_CHECKED_PAYMENT_STATUS, \"false\");\r\n            onChangePaymentStatusCount(realtimePaymentStatus)\r\n        }\r\n    }, [realtimePaymentStatus])\r\n\r\n    const [paymentStatusCountState, onChangePaymentStatusCount] = useState(realtimePaymentStatus);\r\n    const paymentStatusHasChecked = localStorage.getItem(LOCAL_STORAGE_CHECKED_PAYMENT_STATUS) ? localStorage.getItem(LOCAL_STORAGE_CHECKED_PAYMENT_STATUS) : false;\r\n    const paymentStatusCount = realtimePaymentStatus < 99 ? realtimePaymentStatus : 99;\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Whisper\r\n                enterable\r\n                placement={rtl ? \"bottomStart\" : \"bottomEnd\"}\r\n                trigger={isMobile ? \"click\" : \"hover\"} // \"hover\" on devices is bad\r\n                speaker={\r\n                    <StyledTooltip>\r\n\r\n                        {data.map(item => (\r\n                            <div key={item.id}>\r\n                                {item.id === \"allocated_numbers\" && !accountInfo.isTest &&\r\n                                    <StyledDivider />\r\n                                }\r\n                                <StyledItem>{`${item.label}: ${item.value}`}</StyledItem>\r\n                            </div>\r\n                        ))}\r\n\r\n                    </StyledTooltip>\r\n                }\r\n            >\r\n                <div>\r\n                    <StyledIcon size=\"lg\" icon={currencyIcon}/>\r\n                    { realtimePaymentStatus > 0 && !JSON.parse(paymentStatusHasChecked) &&\r\n                        <StyledPaymentLink to=\"/payments\" onClick={() => {\r\n                            localStorage.setItem(LOCAL_STORAGE_CHECKED_PAYMENT_STATUS, \"true\")\r\n                        }}>\r\n                            <div>{paymentStatusCount}</div>\r\n                        </StyledPaymentLink>\r\n                    }\r\n                </div>\r\n            </Whisper>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\n\r\nconst Wrapper = styled.li`\r\n    display: inline-block;\r\n    margin-right: 20px;\r\n    margin-top: 12px;\r\n\r\n    .rtl & {\r\n        margin-right: 0;\r\n        margin-left: 20px;\r\n    }\r\n`;\r\n\r\nconst StyledPaymentLink = styled(Link)`\r\n    position: absolute;\r\n    background-color: red;\r\n    border-radius: 10px;\r\n    margin-left: -4px;\r\n    height: 14px;\r\n    text-decoration: none;\r\n\r\n    div {\r\n        text-decoration: none;\r\n        color: white !important;\r\n        font-weight: 700;\r\n        padding: 4px 3px;\r\n        border: 0;\r\n        line-height: 5px;\r\n        font-size: 13px;\r\n        display: block;\r\n        position: relative;\r\n    }\r\n`;\r\n\r\nconst StyledTooltip = styled(Tooltip)`\r\n    && .rs-tooltip-inner {\r\n        padding-bottom: 5px;\r\n        padding-top: 5px;\r\n    }\r\n`;\r\n\r\nconst StyledIcon = styled(Icon)`\r\n    padding: 5px 5px;\r\n`;\r\n\r\nconst StyledItem = styled.div`\r\n    text-align: left;\r\n\r\n    .rtl & {\r\n        text-align: right;\r\n    }\r\n`;\r\n\r\nconst StyledDivider = styled(Divider)`\r\n    && {\r\n        margin-bottom: 6px;\r\n        margin-top: 6px;\r\n    }    \r\n`;","import React, {useContext, useMemo} from 'react'\r\nimport styled from 'styled-components';\r\nimport {Whisper, Tooltip, Icon, Divider} from \"rsuite\";\r\n\r\nimport * as _ from \"lodash\";\r\nimport {RtlContext} from \"../../../App\";\r\nimport {createExternalLink} from '../Navigation'\r\n\r\nexport default ({\r\n    dialerInfo = {},\r\n    supportContacts = {},\r\n    isMobile = false\r\n}) => {\r\n\r\n    const rtl = useContext(RtlContext);\r\n\r\n    const data = useMemo(() => {\r\n        const accountManagerInfo = _.get(dialerInfo, 'account_manager', {});\r\n        return {\r\n            ...(accountManagerInfo && accountManagerInfo.hasOwnProperty(\"skype\") && accountManagerInfo.skype ? {\"Account Manager\": accountManagerInfo.skype} : {}),\r\n            ...supportContacts\r\n        }\r\n    }, [dialerInfo, supportContacts, isMobile]);\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Whisper\r\n                enterable\r\n                placement={rtl ? \"bottomStart\" : \"bottomEnd\"}\r\n                trigger={isMobile ? \"click\" : \"hover\"}\r\n                speaker={\r\n                    <StyledTooltip>\r\n                        {Object.keys(data).map(key => {\r\n                            const supportName = data[key].hasOwnProperty(\"name\") ? data[key].name : \"\";\r\n                            const supportSkypeLogin = data[key].hasOwnProperty(\"skype\") ? data[key].skype : \"\";\r\n                            return <>\r\n                                <StyledItem>{supportName}: {createExternalLink(supportSkypeLogin, \"skype\")}</StyledItem>\r\n                            </>\r\n                        })}\r\n                    </StyledTooltip>\r\n                }\r\n            >\r\n                <StyledIcon\r\n                    size=\"lg\"\r\n                    icon=\"skype\"\r\n                />\r\n            </Whisper>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\n\r\nconst Wrapper = styled.div`\r\n    display: inline-block;\r\n    margin-right: 10px;\r\n    margin-top: 12px;\r\n\r\n    .rtl & {\r\n        margin-right: 0;\r\n        margin-left: 20px;\r\n    }\r\n`;\r\n\r\n\r\nconst StyledTooltip = styled(Tooltip)`\r\n    && {\r\n        display: flex;\r\n    }\r\n    && .rs-tooltip-inner {\r\n        padding-bottom: 5px;\r\n        padding-top: 5px;\r\n    }\r\n`;\r\n\r\nconst StyledIcon = styled(Icon)`\r\n    padding: 5px 5px;\r\n`;\r\n\r\nconst StyledItem = styled.div`\r\n    text-align: left;\r\n\r\n    .rtl & {\r\n        text-align: right;\r\n    }\r\n`;\r\n\r\nconst StyledDivider = styled(Divider)`\r\n    && {\r\n        margin-bottom: 6px;\r\n        margin-top: 6px;\r\n    }    \r\n`;","import React from 'react'\r\nimport List from 'rsuite/es/List'\r\nimport styled from 'styled-components';\r\n\r\nexport default ({contactList}) => {\r\n    return (\r\n        <>\r\n            <StyledList bordered>\r\n                {contactList.map(\r\n                    (contact) => {\r\n                        return <List.Item className=\"contact_list_item\">\r\n                            <div className=\"Container\" dangerouslySetInnerHTML={{__html: contact}}/>\r\n                        </List.Item>\r\n                    }\r\n                )}\r\n            </StyledList>\r\n        </>\r\n    )\r\n};\r\n\r\nconst StyledList = styled(List)`\r\n    box-shadow: none !important;\r\n    display: flex;\r\n    flex-direction: column;\r\n    \r\n    .contact_list_item {\r\n        max-width: 90%;\r\n        word-break: break-all;\r\n        line-break: auto;\r\n    }\r\n`;","import React from 'react'\r\nimport ContactList from './ContactList'\r\nimport {useWindowWidth} from '../../../hooks'\r\nimport Button from 'rsuite/es/Button'\r\nimport styled from 'styled-components';\r\nimport m from \"definedMessages\";\r\nimport {useIntl} from \"react-intl\";\r\nimport { CustomModalClient } from 'components/base';\r\n\r\n\r\n\r\nexport default ({\r\n    show,\r\n    onClose,\r\n    isMobile,\r\n    maxWidth = 1000,\r\n    contactText\r\n}) => {\r\n    const resizedWidth = useWindowWidth();\r\n    const {formatMessage} = useIntl();\r\n\r\n    const contactList = contactText ? contactText.split('\\n') : [];\r\n    return (\r\n        <StyledModal\r\n            {...{show}}\r\n            title={formatMessage(m.contacts)}\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            showFooter={isMobile}\r\n            confirmButton=\"Success\"\r\n            keyboard={false}\r\n            onClose={() => {\r\n                onClose()\r\n            }}\r\n        >\r\n            {contactList.length \r\n                ? <ContactList\r\n                    {...{contactList}}\r\n                /> \r\n                : <>{formatMessage(m.noContactData)}</>\r\n            }\r\n        </StyledModal>\r\n    )\r\n};\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin-top: 10px;\r\n`;\r\n\r\nconst StyledModal = styled(CustomModalClient)`\r\n    .button-confirm {\r\n        display: none;\r\n    }\r\n`;","import React, {useState, useEffect, useContext} from 'react';\r\nimport {Icon, Nav, Navbar, Badge} from 'rsuite';\r\nimport {withRouter} from 'react-router';\r\nimport ModalEditProfile from '../../components/EditProfile/ModalEditProfile';\r\nimport {connect} from 'react-redux';\r\nimport '../../components/EditProfile/EditProfile.css'\r\nimport styled, {css} from 'styled-components';\r\nimport UserProfileMenu from \"./UserProfileMenu\";\r\nimport NavigationMenu from \"./MainMenu/MainMenu\";\r\nimport {defineMessages, useIntl} from \"react-intl\";\r\nimport AccountManagerInfo from \"./ManagerInfo\";\r\nimport BalanceMenu from \"./BalanceMenu\";\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport {APP_TYPE_ADMIN, APP_TYPE_CLIENT} from \"../../const\";\r\nimport {Link} from 'react-router-dom';\r\nimport SkypeInfo from './Contacts/SkypeInfo';\r\nimport ContactModal from './Contacts/ContactModal';\r\nimport {AppTypeContext} from \"../../App\";\r\nimport _ from 'lodash'\r\nimport {checkPermissionsFor} from '../../store/storeHelpers'\r\nimport {ACCOUNT_USER_GET_REALTIME_STATUS, REGISTRATION_GET_COUNT_API} from '../../const/apiMethods'\r\n\r\n\r\nconst localMessages = defineMessages({\r\n    myNumbers: {id: 'menu.myNumbers', defaultMessage: \"My Numbers\", description: 'Menu: My Numbers'},\r\n    testCalls: {id: 'menu.testCalls', defaultMessage: \"Test calls\", description: 'Menu: Test calls'},\r\n    liveCalls: {id: 'menu.liveCalls', defaultMessage: \"Live calls\", description: 'Menu: Live calls'},\r\n    report: {id: 'menu.report', defaultMessage: \"Report\", description: 'Menu: Report'},\r\n    ratesAndNumbers: {id: 'menu.ratesAndNumbers', defaultMessage: \"Ratecard\", description: 'Menu: Ratecard'},\r\n    accessList: {id: 'menu.accessList', defaultMessage: \"Access List\", description: 'Menu: Access List'},\r\n    cliLookup: {id: 'menu.cliLookup', defaultMessage: \"CLI Lookup\", description: 'Menu: CLI Lookup'},\r\n    editProfile: {id: 'menu.editProfile', defaultMessage: \"Edit profile\", description: 'Menu: Edit profile'},\r\n    ivr: {id: 'menu.ivr', defaultMessage: \"IVR\", description: 'Menu: IVR'},\r\n    logout: {id: 'menu.logout', defaultMessage: \"Logout\", description: 'Menu: Logout'},\r\n    unlogin: {id: 'menu.unlogin', defaultMessage: \"Log Out\", description: 'Menu: Log Out'},\r\n    menu: {id: 'menu.menu', defaultMessage: \"Menu\", description: 'common: Menu'},\r\n    yourAccountManager: {id: 'menu.yourAccountManager', defaultMessage: \"Your account manager\", description: 'Menu: Your account manager'},\r\n    payments: {id: 'menu.payments', defaultMessage: \"Payments\", description: 'Common: Payments'}\r\n});\r\n\r\n\r\nconst Navigation = (\r\n    {\r\n        openAllocationModal,\r\n        logoutUser,\r\n        authInfo = {},\r\n        dialerInfo,\r\n        permissions,\r\n        readyForPayment,\r\n\r\n        modifyPasswordRequest,\r\n        modifyAccountRequest,\r\n\r\n        registrationCount,\r\n        getRegistrationCount,\r\n        realtimePaymentStatus,\r\n        getRealtimePaymentStatus,\r\n\r\n        supportContacts,\r\n        contactText\r\n\r\n    }\r\n) => {\r\n\r\n    const intl = useIntl();\r\n    const windowWidth = useWindowWidth();\r\n    const [showEditProfileModal, onChangeShowEditProfileModal] = useState(false);\r\n    const [showContactModal, setShowContactModal] = useState(false);\r\n    const appType = useContext(AppTypeContext);\r\n\r\n    const isTest = _.get(authInfo, 'session.account.is_test', false);\r\n\r\n    useEffect(() => {\r\n        if (!registrationCount && permissions.includes(REGISTRATION_GET_COUNT_API) && appType === APP_TYPE_ADMIN) {\r\n            getRegistrationCount();\r\n        }\r\n        else if (!realtimePaymentStatus && permissions.includes(ACCOUNT_USER_GET_REALTIME_STATUS) && appType === APP_TYPE_CLIENT) {\r\n            if (!isTest) {\r\n                getRealtimePaymentStatus();\r\n            }\r\n        }\r\n    }, [registrationCount, permissions, realtimePaymentStatus, appType]);\r\n\r\n    return (\r\n        <TopNavbar>\r\n            <TopNavbar.Header>\r\n                <UserProfileMenu\r\n                    savedUser={authInfo}\r\n                    localMessages={localMessages}\r\n                    appType={appType}\r\n                    onChangeShowEditProfileModal={() => onChangeShowEditProfileModal(true)}\r\n                />\r\n                <ModalEditProfile\r\n                    show={showEditProfileModal}\r\n                    onClose={() => onChangeShowEditProfileModal(false)}\r\n                    {...{\r\n                        authInfo,\r\n                        modifyAccountRequest,\r\n                        modifyPasswordRequest,\r\n                    }}\r\n                />\r\n            </TopNavbar.Header>\r\n\r\n            <TopNavbar.Body>\r\n                <NavigationMenu\r\n                    {...{\r\n                        authInfo,\r\n                        localMessages,\r\n                        openAllocationModal,\r\n                        logoutUser,\r\n                        permissions,\r\n                        registrationCount,\r\n                    }}\r\n                />\r\n\r\n                <NavbarInfo>\r\n\r\n                    {dialerInfo &&\r\n                        <>\r\n                            <BalanceMenu\r\n                                isMobile={windowWidth < 1200}\r\n                                readyForPayment={readyForPayment}\r\n                                {...{\r\n                                    realtimePaymentStatus,\r\n                                    dialerInfo,\r\n                                }}\r\n                            />\r\n                            <AccountManagerInfo\r\n                                isMobile={windowWidth < 1200}\r\n                                {...{\r\n                                    authInfo,\r\n                                    showContactModal,\r\n                                    setShowContactModal,\r\n                                    localMessages\r\n                                }}\r\n                            />\r\n                            <SkypeInfo\r\n                                isMobile={windowWidth < 1200}\r\n                                {...{\r\n                                    dialerInfo,\r\n                                    supportContacts\r\n                                }}\r\n                            />\r\n                        </>\r\n                    }\r\n\r\n                    {windowWidth >= 1200 &&\r\n                        <Nav>\r\n                            {checkPermissionsFor(REGISTRATION_GET_COUNT_API) && appType === APP_TYPE_ADMIN &&\r\n                                (registrationCount > 0\r\n                                    ? <StyledBadge content={registrationCount}>\r\n                                        <NavLink\r\n                                            icon={<Icon icon=\"group\"/>}\r\n                                            to=\"/registration-requests\"\r\n                                            eventKey=\"/registration-requests\"\r\n                                        />\r\n                                    </StyledBadge>\r\n                                    : <NavLink\r\n                                        icon={<Icon icon=\"group\"/>}\r\n                                        to=\"/registration-requests\"\r\n                                        eventKey=\"/registration-requests\"\r\n                                    />)\r\n                            }\r\n                            <Nav.Item\r\n                                icon={<Icon icon=\"sign-out\"/>}\r\n                                onClick={logoutUser}\r\n                            >\r\n                                {intl.formatMessage(localMessages.unlogin)}\r\n                            </Nav.Item>\r\n                        </Nav>\r\n                    }\r\n                </NavbarInfo>\r\n            </TopNavbar.Body>\r\n            <ContactModal\r\n                {...{\r\n                    contactText\r\n                }}\r\n                isMobile={windowWidth < 1200}\r\n                show={showContactModal}\r\n                onClose={setShowContactModal}\r\n            />\r\n        </TopNavbar>\r\n    )\r\n};\r\n\r\n\r\nconst mapState = ({auth, accounts, auth_dialer, registration, references})=> ({\r\n    permissions: auth.permissions,\r\n    authInfo: auth.authInfo,\r\n    updatedInfo: auth.authInfo,\r\n    registrationCount: registration.registration_count,\r\n    dialerInfo: auth_dialer.dialerInfo,\r\n    readyForPayment: auth_dialer.readyForPayment,\r\n    supportContacts: references.support_contacts,\r\n    contactText: references.contacts_text,\r\n    realtimePaymentStatus: accounts.realtimePaymentStatus\r\n});\r\n\r\nexport default withRouter(connect(mapState)(Navigation));\r\n\r\nexport const createExternalLink = (link, type = null) => {\r\n    let linkString = link;\r\n\r\n    if (type === \"skype\") {\r\n        linkString = `${type}:${linkString}?chat`;\r\n    } else if (type) {\r\n        linkString = `${type}:${linkString}`;\r\n    }\r\n    return <StyledExternalLink href={linkString}>{link}</StyledExternalLink>\r\n}\r\n\r\n\r\nconst NavLink = withRouter(props => (\r\n    <Nav.Item componentClass={Link}\r\n              active={props.location.pathname.indexOf(props.to) === 0}\r\n              {...props}\r\n    />)\r\n);\r\n\r\nconst StyledExternalLink = styled.a`\r\n    && {\r\n        text-decoration: none;\r\n        color: #FFFFFF;\r\n    }\r\n    &:hover {\r\n        color: #dddddd;\r\n    }\r\n`\r\n\r\nconst TopNavbar = styled(Navbar).attrs(() => ({\r\n    appearance: \"inverse\"\r\n}))`\r\n    align-items: stretch;\r\n    display: flex;\r\n    \r\n    .rs-nav-waterline {\r\n        border-top-color: transparent !important;\r\n    }\r\n\r\n    .rs-navbar-header {\r\n        align-self: stretch;\r\n        float: none;\r\n        height: auto;\r\n    }\r\n\r\n    .rs-navbar-body {\r\n        align-items: stretch;\r\n        display: flex;\r\n        flex-direction: row-reverse;\r\n        flex-grow: 1;\r\n        \r\n        @media (min-width: 1200px) {\r\n            flex-direction: row;\r\n            justify-content: space-between;\r\n        }\r\n    }\r\n    \r\n    .rs-nav-item-content::before {\r\n        background-color: #ffffff !important;\r\n    }\r\n    \r\n    &&&&& {\r\n        .rs-dropdown-toggle,\r\n        .rs-nav-item-content {\r\n            background-color: transparent !important;\r\n        }\r\n        \r\n        ${props => props.theme.appType === APP_TYPE_CLIENT && css `\r\n            .rs-nav-item-active {\r\n                .rs-dropdown-toggle,\r\n                .rs-nav-item-content {\r\n                    background-color: #16b07e !important;\r\n                }\r\n            }\r\n        `}\r\n        \r\n        .rs-nav-item-content {\r\n            padding: 18px 16px;\r\n            height: 56px;\r\n        }\r\n    }\r\n\r\n    &:before {\r\n        display: none;\r\n    }\r\n    \r\n    ${props => props.theme.appType === APP_TYPE_CLIENT && css`\r\n        box-shadow: none !important;\r\n    `}\r\n`;\r\n\r\nconst NavbarInfo = styled.div`\r\n    display: flex;\r\n`;\r\n\r\nconst StyledBadge = styled(Badge)`\r\n    & .rs-badge-content {\r\n        margin: 15px;\r\n    }\r\n`;","import React from 'react';\r\nimport {Modal as RsuiteModal} from \"rsuite\";\r\nimport {ButtonCancel, ButtonContent, ButtonPrimary} from '../base/BaseButton';\r\nimport {BaseModal} from '../base/BaseModal';\r\n\r\nexport const Modal = ({\r\n    show, \r\n    onClose, \r\n    onSuccess,\r\n    checkBefore, \r\n    children, \r\n    title, \r\n    width, \r\n    disabled,\r\n    footer = false, \r\n    successText = \"Ok\",\r\n    extraDisabled = false,\r\n    extraDialogClassName=\"\",\r\n    successButtonColor = \"#20BA88\",\r\n    onEntered = () => {}\r\n}) => {\r\n\r\n    const style = {};\r\n    width && (style.width = width);\r\n\r\n    return (\r\n        <BaseModal\r\n            show={show} \r\n            onHide={onClose} \r\n            style={style}\r\n            onEntered={onEntered}\r\n            dialogClassName={extraDialogClassName}\r\n        >\r\n            \r\n            <BaseModal.Header>\r\n                <BaseModal.Title>{title}</BaseModal.Title>\r\n            </BaseModal.Header>\r\n\r\n            <BaseModal.Body>\r\n                {children}\r\n            </BaseModal.Body>\r\n            \r\n            {footer && \r\n                <BaseModal.Footer\r\n                    style={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-around'\r\n                    }}>\r\n                    <ButtonPrimary color={successButtonColor} loading={disabled} disabled={extraDisabled} onClick={() => {\r\n                        if(checkBefore && !checkBefore()) return false;\r\n                        onSuccess()\r\n                    }} >\r\n                        {successText}\r\n                    </ButtonPrimary>\r\n                    <ButtonContent\r\n                        onClick={onClose}\r\n                        disabled={disabled}\r\n                    >\r\n                        Cancel\r\n                    </ButtonContent>\r\n                </BaseModal.Footer>\r\n            }\r\n\r\n        </BaseModal>\r\n    );\r\n};\r\n\r\nexport default Modal;","import React from \"react\";\r\nimport Modal from \"./Modal\";\r\nimport {ButtonToolbar, FlexboxGrid, Button} from \"rsuite\";\r\nimport { useWindowWidth } from \"../../hooks\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\n// Codes\r\nconst reasonCodes = {\r\n    not_found_rate: \"not_found_rate\",\r\n    not_found_free_numbers: \"not_found_free_numbers\",\r\n    account_trunk_range_mismatch: \"account_trunk_range_mismatch\",\r\n    self_allocation_limit_exceeded_once: \"self_allocation_limit_exceeded_once\",\r\n    self_allocation_limit_exceeded: \"self_allocation_limit_exceeded\",\r\n    self_allocation_for_sde_limit_exceeded: \"self_allocation_for_sde_limit_exceeded\",\r\n    not_defined_range: \"not_defined_range\",\r\n\r\n    prefix_in_quarantine: \"prefix_in_quarantine\",\r\n    non_google_otp_allocation: \"non_google_otp_allocation\",\r\n    max_numbers_per_range_value_exceeded: \"max_numbers_per_range_value_exceeded\",\r\n    allocation_to_test_trunk: \"allocation_to_test_trunk\",\r\n    non_google_otp_trunk: \"non_google_otp_trunk\",\r\n    non_multiple_100_number: \"non_multiple_100_number\",\r\n    not_allowed_self_google_otp_allocation: \"not_allowed_self_google_otp_allocation\",\r\n    non_power_of_10_number: \"non_power_of_10_number\",\r\n    non_power_of_10_number_start_1000: \"non_power_of_10_number_start_1000\",\r\n    illegal_template_length: \"illegal_template_length\",\r\n    illegal_template: \"illegal_template\",\r\n    too_much_operations: \"too_much_operations\",\r\n};\r\n\r\n\r\nconst ModalResponseHandler = (\r\n    {\r\n        show,\r\n        onClose,\r\n        onSuccess,\r\n        changeRandom = () => {},\r\n        maxWidth = 600,\r\n        params = {}\r\n    }\r\n) => {\r\n\r\n    const {\r\n        trunk = {}, \r\n        numbers = 0,\r\n        range,\r\n        random_number = null,\r\n        sde_key: subDest, \r\n        template,\r\n        reasonCode,\r\n        reasonHash\r\n    } = params;\r\n\r\n    const windowWidth = useWindowWidth();\r\n\r\n\r\n    const handleSuccess = () => {\r\n        onClose(false);\r\n        if (reasonCode === reasonCodes.not_found_free_numbers && !random_number && random_number !== null) {\r\n            changeRandom(true);\r\n        }\r\n        onSuccess(true);\r\n    };\r\n\r\n\r\n    const getMessage = () => {\r\n        const defaultMessage = `Numbers cannot be allocated`;\r\n\r\n        switch (reasonCode) {\r\n\r\n            case reasonCodes.non_google_otp_trunk:\r\n                return \"Trunk is not Gooogle OTP\";\r\n\r\n            case reasonCodes.non_google_otp_allocation:\r\n                return \"Incorrect allocation method\";\r\n\r\n            case reasonCodes.non_power_of_10_number:\r\n                return \"Incorrect number amount\";\r\n\r\n            case reasonCodes.non_power_of_10_number_start_1000:\r\n                return \"Incorrect number amount\";\r\n\r\n            case reasonCodes.too_much_operations:\r\n                return \"Too much simultaneous operations\";\r\n\r\n            case reasonCodes.prefix_in_quarantine:\r\n                return \"Numbers are temporarily unavailable\";\r\n\r\n            case reasonCodes.max_numbers_per_range_value_exceeded:\r\n                return \"Too much numbers per range\";\r\n\r\n            case reasonCodes.allocation_to_test_trunk:\r\n                return \"Invalid operation\";\r\n                \r\n            case reasonCodes.non_multiple_100_number:\r\n                return \"Incorrect number amount\";\r\n\r\n            case reasonCodes.illegal_template:\r\n            case reasonCodes.illegal_template_length:\r\n                return \"Wrong template\";\r\n\r\n            case reasonCodes.not_allowed_self_google_otp_allocation:\r\n                return \"Action is prohibited\";\r\n\r\n            case reasonCodes.self_allocation_limit_exceeded_once:\r\n                return \"You're trying to allocate to much numbers per one\";\r\n\r\n            case reasonCodes.self_allocation_limit_exceeded:\r\n                return \"You have exceeded the limit for self-allocation numbers\";\r\n\r\n            case reasonCodes.self_allocation_for_sde_limit_exceeded:\r\n                return \"You're trying to allocate to much numbers per subdestination\";\r\n\r\n            case reasonCodes.not_found_rate:\r\n                return \"No rate for destination\";\r\n\r\n            case reasonCodes.account_trunk_range_mismatch:\r\n                if (template)\r\n                    return `Numbers from template \"${template}\" cannot be allocated to trunk \"${trunk.name}\". Please try another trunk.`;\r\n                if (range)\r\n                    return `Numbers from range \"${range}\" cannot be allocated to trunk \"${trunk.name}\". Please try another trunk.`;\r\n                return `Numbers cannot be allocated to trunk \"${trunk.name}\". Please try another trunk.`;\r\n\r\n            case reasonCodes.not_found_free_numbers:\r\n                if (template)\r\n                    return !random_number\r\n                        ? `We cannot allocate ${numbers} numbers from template \"${template}\" successively. Please decrease number amount or use random order`\r\n                        : `Numbers from template \"${template}\" cannot be allocated`;\r\n                if (subDest)\r\n                    return !random_number\r\n                        ? `We cannot allocate ${numbers} numbers for destination \"${subDest}\" successively. Please decrease number amount or use random order`\r\n                        : `Numbers for \"${subDest}\" cannot be allocated`;\r\n                if (range)\r\n                    return !random_number\r\n                        ? `We cannot allocate ${numbers} numbers from range \"${range}\" successively. Please decrease number amount or use random order`\r\n                        : `Numbers from range ${range} cannot be allocated`;\r\n                return defaultMessage;\r\n\r\n            default:\r\n                if (template)\r\n                    return `Numbers from template \"${template}\" cannot be allocated`;\r\n\r\n        }\r\n\r\n        return defaultMessage;\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            {...{show, onClose}}\r\n            onClose={handleSuccess}\r\n            onSuccess={handleSuccess}\r\n            showCloseSuccessButtons={false}\r\n            width={windowWidth > maxWidth ? maxWidth : windowWidth}\r\n        >\r\n\r\n            <FlexboxGrid justify=\"end\">\r\n                <FlexboxGrid.Item colspan={23}>\r\n                    <span>{getMessage()}{reasonHash ? ` (Operation code: ${reasonHash})` : \"\"}</span>\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n\r\n            <ModalButtonToolbar>\r\n                <Button\r\n                    appearance=\"subtle\"\r\n                    onClick={handleSuccess}\r\n                    autoFocus\r\n                >\r\n                    Close\r\n                </Button>\r\n            </ModalButtonToolbar>\r\n\r\n        </Modal>\r\n    )\r\n};\r\n\r\nexport default ModalResponseHandler;\r\n\r\nconst ModalButtonToolbar = styled(ButtonToolbar)`\r\n    float: right;\r\n    margin-right: 20px;\r\n    margin-top: 40px;\r\n    right: 0;\r\n`;","import React, {useState} from 'react';\r\nimport {Form, Schema, Alert} from 'rsuite';\r\nimport {api, getFileResponse} from '../../api/loginRoutes';\r\nimport {responseErrorToString, splitList} from '../../utils';\r\nimport ModalResponseHandler from \"../Modal/ModalResponseHandler\"\r\nconst { StringType, NumberType } = Schema.Types;\r\n\r\nconst validationKeys = {\r\n    name:   StringType().isRequired('Required').maxLength(40, 'The maximum is only 40 characters.'),\r\n\r\n    str:    StringType().isRequired('Required').maxLength(40, 'The maximum is only 40 characters.'),\r\n    \r\n    str30:  StringType().isRequired('Required').maxLength(30, 'The maximum is only 30 characters.'),\r\n    \r\n    rate:   NumberType().isRequired('Required'),\r\n    \r\n    str_required: StringType().isRequired('Required'),\r\n    \r\n    num_required: NumberType().isRequired('Required'),\r\n\r\n    number_list: StringType()\r\n        .isRequired('Required')\r\n        .pattern(/^(?: *\\d+ *(?:\\n|$))+$/, 'Please enter a valid numbers')\r\n        .addRule((value) => {\r\n            const valueList = splitList(value);\r\n            for (const row of valueList) {\r\n                if (row.length > 15 || row.length < 7) {\r\n                    return false\r\n                }\r\n            }\r\n            return true;\r\n        }, 'Each row should be greater than 7 and less than 15')\r\n        .addRule((value) => !(splitList(value).length > 100000),\r\n            'The number of entered telephone numbers exceeds 100 000 rows'),\r\n\r\n    template_list: StringType()\r\n        .isRequired('Required')\r\n        .pattern(/^[\\d\\[\\],\\-\\sXx]*$/, 'Please enter valid templates') // example: 12X3[1,8]4[2-4,6]XX\r\n        .addRule( (value) => {\r\n            let isValid = true;\r\n            const regex = /^[1-9](?:\\d*[xX]*(\\[((\\d)|(\\d-\\d))((,\\d-\\d)?(,\\d)?)*\\])?)*\\s*$/;\r\n\r\n            const valueList = value.trim()\r\n                .replace( /\\r?\\n/g, ' ')\r\n                .split(' ').filter( s => s !== \"\");\r\n\r\n            if (valueList) {\r\n                valueList.forEach((template) => {\r\n                    if(template.match(regex) === null) {\r\n                        isValid = false;\r\n                        return;\r\n                    };\r\n                });\r\n            }\r\n\r\n            return isValid;\r\n        }, \"Please enter valid templates\")\r\n        .addRule( (value) => {\r\n            let isValid = true;\r\n            const valueList = value.trim()\r\n                .replace( /\\r?\\n/g, ' ')\r\n                .replace( /\\[[\\d\\,\\-]+\\]/g, 'X')\r\n                .split(' ').filter( s => s !== \"\");\r\n\r\n            if (valueList) {\r\n                valueList.forEach((template) => {\r\n                    if(template.length < 7 || template.length > 15) {\r\n                        isValid = false;\r\n                        return;\r\n                    };\r\n                });\r\n            }\r\n\r\n            return isValid;\r\n\r\n        }, \"Each template should be greater than 7 and less than 15\" ),\r\n\r\n\r\n    numbers: NumberType()\r\n        .isRequired('Required')\r\n        .isInteger('Only whole numbers')\r\n        .addRule((value, data) => {\r\n            if (data.allocate_by_prefix !== undefined) {\r\n                if (value > 1000) {\r\n                    return false\r\n                }\r\n            }\r\n            return true;\r\n        }, 'The maximum of this field is 1000'),\r\n\r\n    google_numbers: NumberType()\r\n        .isRequired('Required')\r\n        .isInteger('Only whole numbers')\r\n        .max(10000, \"The maximum of this field is 10000\")\r\n        .addRule((value, data) => {\r\n            if (value % 100) {\r\n                return false\r\n            }\r\n            return true;\r\n        }, 'The number must be a multiple of 100'),\r\n\r\n    numbers_amount: NumberType()\r\n        .isRequired('Required')\r\n        .isInteger('Only whole numbers')\r\n        .addRule((value, data) => {\r\n            if (value > 1000) {\r\n                return false\r\n            }\r\n            return true;\r\n        }, 'The maximum of this field is 1000'),\r\n\r\n    numbers_by_prefix: NumberType()\r\n        .isRequired('Required')\r\n        .isInteger('Only whole numbers'),\r\n\r\n    ranges: NumberType()\r\n        .isRequired('Required')\r\n        .isInteger('Only whole numbers')\r\n        .max(10000, \"The maximum of this field is 10000\"),\r\n    \r\n    in_template_list_range: StringType()\r\n        .addRule((value) => {\r\n            const valueList = value.trim()\r\n                .replace( /\\r?\\n/g, ' ')\r\n                .split(' ').filter( s => s !== \"\")\r\n            for (const row of valueList) {\r\n                if (row.length > 15 || row.length < 7) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        }, 'Each row should be greater than 7 and less than 15')\r\n        .addRule((value) => {\r\n            const valueList = value.trim()\r\n                .replace( /\\r?\\n/g, ' ')\r\n                .split(' ').filter( s => s !== \"\")\r\n            return !((valueList).length > 100)\r\n        }, 'The number of entered telephone numbers exceeds 100 rows')\r\n        .pattern(/^(?: *[0-9]{6,14} *(?:[X]{3,6}\\r|[X]{3,6}\\n|[X]{3,6}$))+$/, 'Please enter a valid numbers') // 123456\r\n        .isRequired('This field is required'),\r\n\r\n    in_template_range: StringType()\r\n    // .pattern(/^(?: *[0-9]{6,14} *([X]{1,6}$))$/, 'Please enter a valid numbers')\r\n        .pattern(/^[1-9](?:\\d*[xX]*(\\[((\\d)|(\\d-\\d))((,\\d-\\d)?(,\\d)?)*\\])?)*$/, 'Please enter a valid numbers')\r\n        .addRule((value) => {\r\n            let replacedValue = value.replace( /\\[[\\d\\,\\-]+\\]/g, 'X');\r\n            if (replacedValue.length > 15 || replacedValue.length < 7) {\r\n                return false\r\n            }\r\n        }, 'Template should be greater than 7 and less than 15')\r\n        .isRequired('This field is required'),\r\n    \r\n    start_number: StringType()\r\n        .isRequired('This field is required')\r\n        .pattern(/^[1-9][\\d]*$/, 'The number must not begin with 0 and must contain only digits')\r\n        .maxLength(15, 'The maximum  of this field is 15 characters')\r\n\r\n};\r\n\r\nexport const MyForm = (_props) => {\r\n\r\n    const {\r\n        disabled, children, update, method, checkResultKey, noCheck, noSend, addData = {}, updateRef,\r\n        target, activeTrunk = null, formValue = {}, layout = \"inline\", formDefaultValue = {}, fieldsToRemove = [],\r\n        spAuth = false, model, unsendFields, deepCloned = false, optionFields = false, ...props\r\n    } = _props;\r\n\r\n    const childrenModel = {};\r\n    const fieldsValues = {...formDefaultValue, ...formValue};\r\n    let formRef;\r\n\r\n\r\n    /**\r\n     * Вместо проверки isArray Лучше использовать уже готовый метод React.Children.map\r\n     * Удалил лишние If'ы\r\n     */\r\n\r\n    const [_formValue, setFormValue] = useState(fieldsValues);\r\n\r\n    React.useEffect(() => {\r\n        if (optionFields) {\r\n            setFormValue(formValue);\r\n        }\r\n    }, [formValue, optionFields]);\r\n\r\n    // Allocate by prefixes effect\r\n    React.useEffect(() => {\r\n\r\n        if (_props.allocateByPrefixesStatus === null)\r\n            return;\r\n\r\n        const newFormValue = {..._formValue, allocate_by_prefix: _props.allocateByPrefixesStatus};\r\n\r\n        // check \"numbers\" field by allocate_by_prefixes\r\n        if (!_props.allocateByPrefixesStatus) {\r\n            if (_formValue.numbers > 1000) {\r\n                newFormValue.numbers = 1000;\r\n            }\r\n        } else {\r\n            const numberLog10 = Math.log10(_formValue.numbers);\r\n            if ( (numberLog10 ^ 0) !== numberLog10 || numberLog10 > 6 ) {\r\n                newFormValue.numbers = 10;\r\n                formRef.cleanErrorForFiled(\"numbers\");\r\n            }\r\n        }\r\n\r\n        setFormValue(newFormValue);\r\n    }, [_props.allocateByPrefixesStatus]);\r\n\r\n    const [responseHandlerModalShow, setResponseHandlerModalShow] = useState(false);\r\n    const [responseHandlerModalParams, setResponseHandlerModalParams] = useState({});\r\n\r\n\r\n    const showResponseHandlerModal = (params = {}) => {\r\n        setResponseHandlerModalShow(true);\r\n        setResponseHandlerModalParams(params);\r\n    };\r\n\r\n    const cloneFormChildren = (formControl) => {\r\n\r\n        const { props } = formControl || {};\r\n        const { name, validationKey, children } = props || {};\r\n\r\n        if (name) {\r\n            if (validationKeys[validationKey]) {\r\n                childrenModel[name] = validationKeys[validationKey];\r\n            } else if (validationKeys[name]) {\r\n                childrenModel[name] = validationKeys[name];\r\n            }\r\n        }\r\n\r\n        // set new props\r\n        let newProps = {\r\n            disabled\r\n        };\r\n\r\n        if (name === \"random_number\" && _formValue.random_number === true) {\r\n            newProps.checked = true;\r\n        }\r\n\r\n        if (name === \"allocate_by_prefix\" && _props.allocateByPrefixesStatus) {\r\n            newProps.checked = true;\r\n        }\r\n\r\n        const elementChildren = children\r\n            ? !name && deepCloned ? React.Children.map(children, cloneFormChildren) : children\r\n            : null;\r\n\r\n        return React.isValidElement(formControl)\r\n            ? React.cloneElement(formControl, newProps, elementChildren)\r\n            : formControl;\r\n    };\r\n\r\n\r\n    const _children = React.Children.map(children, cloneFormChildren);\r\n\r\n\r\n    const modelData =  Schema.Model({\r\n        ...childrenModel,\r\n        ...model\r\n    });\r\n\r\n    const getFormValue = (form) => () => {\r\n        let data = form.getFormValue();\r\n        // После удаления значения в SelectPicker, значение заменяется на null, но после повторной отправки формы\r\n        // значение превращается из null в 0, что не даёт валидации повторно вывести ошибку Required\r\n        const sde_key = data.sde_key !== 0 ? data.sde_key : null;\r\n\r\n        data = {...data, sde_key};\r\n        // console.log(data)\r\n        Object.keys(data).map( key => {\r\n            const type = form.props.model.getFieldType(key);\r\n\r\n            //console.log(key, type);\r\n            if(type.name === \"number\"){\r\n                data[key] = +data[key];\r\n            }\r\n\r\n            //Remove unused fields from data\r\n            if (unsendFields && unsendFields.includes(key)) {\r\n                delete data[key];\r\n            }\r\n        });\r\n\r\n        return data;\r\n    };\r\n\r\n    const send = (form) => () => {\r\n        if (!form) \r\n            return;\r\n\r\n        return new Promise( async (resolve, reject) => {\r\n\r\n            if (noSend) \r\n                return resolve(true);\r\n\r\n            const data = getFormValue(form)();\r\n\r\n            // Во многих формах, где есть возможность выбора метода используется одна и та же форма. Поля которые расчитаны\r\n            // на один метод, при выборе другого очищаются, но в данных на отправку запроса остаётся ключ с нуловым значением.\r\n            // Некоторые запросы валятся с валидацией, когда они не ожидают лишних ключей.\r\n            // Object.keys(data).forEach(key => (data[key] == null || data[key] === \"\") && delete data[key]);\r\n            Object.keys(data).forEach(key => {\r\n                if ( data[key] == null || data[key] === \"\"\r\n                    || (fieldsToRemove.length && fieldsToRemove.indexOf(key) !== -1) ) {\r\n                    delete data[key]\r\n                }\r\n            });\r\n\r\n            if( !form.check() )\r\n                return resolve(false);\r\n                \r\n            const params = {\r\n                target,\r\n                ...data,\r\n                ...addData,\r\n                undefined: undefined\r\n            };\r\n            \r\n            try {\r\n                \r\n                const result = await api(method, params, false);\r\n                \r\n                if(result) {\r\n\r\n                    if (method === \"allocation:number_list\") {\r\n\r\n                        if ( (!result.not_allocated_numbers || !result.not_allocated_numbers.length) && !result.trunk_number_transaction.numbers) {\r\n                            showResponseHandlerModal({\r\n                                ...params,\r\n                                method: method,\r\n                                reasonCode: 'default_list_number',\r\n                                reasonHash: result.hash,\r\n                                trunk: activeTrunk\r\n                            });\r\n                            return resolve(false);\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        if (result.reason_code && (!result.trunk_number_transaction || !result.trunk_number_transaction.numbers)) {\r\n                            showResponseHandlerModal({\r\n                                ...params,\r\n                                method: method,\r\n                                reasonCode: result.reason_code,\r\n                                reasonHash: result.hash,\r\n                                trunk: activeTrunk\r\n                            });\r\n                            return resolve(false);\r\n                        }\r\n                    }\r\n                    \r\n                    if (noCheck || (Object.keys(result).length && ( (checkResultKey && result[checkResultKey]) || true))) {\r\n                        update && update(result);\r\n                        return resolve(true);\r\n                    }\r\n                }\r\n\r\n            } catch (e) {\r\n                Alert.error(responseErrorToString(e.response.data.error), 5000);\r\n            }\r\n\r\n            return resolve(false);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            \r\n            <Form\r\n                {...props}\r\n                formDefaultValue={formDefaultValue}\r\n                formValue={{...formDefaultValue, ..._formValue}}\r\n                onChange={(values) => {\r\n                    if (props.onChange) props.onChange(values);\r\n\r\n                    setFormValue(values);\r\n                }}\r\n                ref = { ref => {\r\n                    updateRef({...ref, getFormValue: getFormValue(ref), send: send(ref)});\r\n                    formRef = ref;\r\n                }}\r\n                layout = {layout}\r\n                model = {modelData}\r\n            >\r\n                {_children}\r\n            </Form>\r\n\r\n            <ModalResponseHandler\r\n                show={responseHandlerModalShow}\r\n                onClose={() => setResponseHandlerModalShow(false)}\r\n                onSuccess={() => {}}\r\n                changeRandom={() => setFormValue({..._formValue, random_number: true})}\r\n                params={responseHandlerModalParams}\r\n            />\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MyForm;","import React, {useState} from 'react';\r\nimport {Checkbox, FormControl, FormGroup} from 'rsuite';\r\n\r\nexport default (props) => {\r\n    return  <FormGroup>\r\n                <FormControl\r\n                    name={props.name}\r\n                    accepter={CheckboxHOC}\r\n                    {...props}                  \r\n                /> \r\n            </FormGroup>;\r\n}\r\n\r\n\r\nconst CheckboxHOC = (props) => {        \r\n    const onChange = (value, checked) => props.onChange(props.inverse ? !checked : checked);\r\n    return <Checkbox {...props} onChange={onChange}  /> ;\r\n};","import React from 'react';\r\nimport {FormGroup, FormControl, ControlLabel, HelpBlock} from 'rsuite'\r\n\r\nconst widthValues = {\r\n  \"md\": '200px'\r\n};\r\n\r\n\r\nclass CustomField extends React.PureComponent {\r\n    render() {\r\n        const {\r\n            name, message, label, labelWidth, accepter, error, width, useBr, withCheckbox,\r\n            style: style_, mr, styleFormGroupExternal, ...props\r\n        } = this.props;\r\n\r\n        const style = style_ ? {...style_} : {};\r\n\r\n        if (width) {\r\n            style.width = widthValues[width] || width;\r\n        }\r\n        const styleFormGroup = {...styleFormGroupExternal};\r\n        (mr) && (styleFormGroup.marginRight = mr);\r\n\r\n        const propsLabel = {style: {}};\r\n        if (labelWidth) {\r\n            propsLabel.style.width = labelWidth;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <FormGroup className={error ? 'has-error' : ''} style={styleFormGroup}>\r\n                    {label &&\r\n                        <ControlLabel {...propsLabel} >{label} </ControlLabel>\r\n                    }\r\n                    <FormControl\r\n                        name={name}\r\n                        accepter={accepter}\r\n                        errorMessage={error}\r\n                        errorPlacement=\"topRight\"\r\n                        {...props}\r\n                        style={style}\r\n                    />\r\n                    {message && <HelpBlock>{message}</HelpBlock>}\r\n                </FormGroup>\r\n                {useBr && <br/>}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default CustomField;","import React from 'react';\r\nimport CustomField from './CustomField';\r\n\r\nimport {Schema, Input} from 'rsuite';\r\nconst { StringType } = Schema.Types;\r\n\r\nexport const str40 = StringType()\r\n    .isRequired('Required')\r\n    .maxLength(40, 'The maximum is only 40 characters.');\r\n\r\nconst Text = (props) => (\r\n    <CustomField\r\n        accepter={Input}\r\n        errorPlacement=\"topRight\"\r\n        {...props}\r\n    />\r\n)\r\n\r\n\r\nexport default Text;","import React from 'react';\r\nimport Modal from './Modal';\r\nimport { ID } from '../../utils/helpers';\r\n\r\n\r\nexport const API_Modal =  ({\r\n    show = true, \r\n    extraDisabled = false, \r\n    onClose, \r\n    update, \r\n    checkFirstAll, \r\n    children, \r\n    ...props\r\n}) => {\r\n\r\n    const [disabled, setDisabled ] = React.useState(false);\r\n    let  formRefs = {};\r\n    \r\n\r\n    // clone child\r\n    const copyChild = (child) => {\r\n        const id = ID();\r\n        return React.cloneElement(child, {\r\n                disabled, \r\n                updateRef:  (ref) => ((id) => formRefs[id] = ref )(id)\r\n            }\r\n        )\r\n    }\r\n    \r\n    \r\n    // clone form\r\n    const form = Array.isArray(children) \r\n        ? React.Children.map(children, child => copyChild(child))\r\n        : copyChild(children);\r\n   \r\n    \r\n    // submit\r\n    const onSubmit = async () => {\r\n        if(checkFirstAll) {\r\n            if(Object.keys(formRefs).map( key =>\r\n                key && formRefs[key].check && formRefs[key].check()\r\n            ).includes(false))\r\n            return;\r\n        }\r\n\r\n        setDisabled(true);\r\n\r\n        const results = await Promise.all(\r\n            Object.keys(formRefs).map( key =>\r\n                key && formRefs[key].send && formRefs[key].send()\r\n            )\r\n        );\r\n\r\n        setDisabled(false);\r\n\r\n        console.log(\"results 87\", results);\r\n\r\n        if(!results.includes(false)){\r\n            onClose();\r\n            update && update();\r\n        }\r\n    };\r\n \r\n    return (\r\n        <Modal\r\n            show\r\n            {...props}\r\n            onSuccess = {onSubmit}\r\n            disabled = {disabled}\r\n            extraDisabled = {extraDisabled}\r\n            onClose = {onClose}\r\n            footer\r\n        >\r\n            {form}\r\n        </Modal>\r\n    )\r\n};\r\n\r\nexport default API_Modal;","import React from 'react';\r\nimport {api} from '../api/loginRoutes';\r\n\r\n\r\nexport const ApiRequest = ({\r\n                               disabled, updateRef, canSend = true, children, target, data = {},\r\n                               update, method, checkResultKey, noCheck, style = {}, onFaultResult, ...props\r\n                           }) => {\r\n\r\n    const _children = Array.isArray(children)\r\n        ? React.Children.map(children, formControl => React.cloneElement(formControl, {disabled}))\r\n        : React.cloneElement(children, {disabled});\r\n\r\n    const send = () => {\r\n        return new Promise(async (resolve, reject) => {\r\n            if (canSend) {\r\n                const result = await api(method, {\r\n                    target,\r\n                    ...data,\r\n                });\r\n\r\n                if (result && (noCheck || ((checkResultKey && result[checkResultKey])))) {\r\n                    update && update(result);\r\n                    return resolve(true);\r\n                }\r\n\r\n                if (result && onFaultResult) {\r\n                    onFaultResult(result);\r\n                }\r\n\r\n                return resolve(false);\r\n            }\r\n\r\n            return resolve(true);\r\n        });\r\n    };\r\n    return (\r\n        <div\r\n            ref={(ref) => updateRef({\r\n                ...ref,\r\n                send,\r\n                id: props.id\r\n            })}\r\n            style={style}\r\n        >\r\n            {_children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ApiRequest;","import React, {useState} from 'react';\r\nimport CustomField from './CustomField';\r\nimport {InputNumber} from 'rsuite';\r\nimport {calculateFixedSignsLength} from 'utils';\r\n\r\nexport const NumberField = ({onChange, calculated=false, width = 135, ...props}) => {\r\n    const [value, setValue] = React.useState(props.value);\r\n\r\n    return (\r\n        <CustomField\r\n            accepter={InputNumber}\r\n            size=\"sm\"\r\n            style={{width: width}}\r\n            width={width}\r\n            placeholder=\"0\"\r\n            value = {value}\r\n            max={100000}\r\n            step={calculated ? calculateFixedSignsLength(value || props.value) : 1}\r\n            onChange = {(v) => {\r\n                if(onChange) onChange(v);\r\n                setValue(v);\r\n            }}\r\n            {...props}\r\n        />\r\n)};\r\n\r\nexport default NumberField;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Form, Input, Checkbox, DateRangePicker, SelectPicker, InputNumber} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport React from \"react\";\r\n\r\nexport default Form;\r\n\r\nexport const BaseInputField = styled(Input)``;\r\nexport const BaseInputNumberField = styled(InputNumber)``;\r\nexport const BaseSelectPicker = styled(SelectPicker)``;\r\nexport const BaseDateRangePicker = styled(DateRangePicker)``;\r\nexport const BaseCheckboxField = styled(Checkbox)``;","import React from 'react';\r\nimport CustomField from './CustomField';\r\nimport {Checkbox} from 'rsuite';\r\nimport {BaseCheckboxField} from \"../base/BaseForm\";\r\n\r\nexport const CheckboxControl = (props) => {\r\n    return <CustomField\r\n        accepter={CheckboxHOC}\r\n        {...props}\r\n    />;\r\n}\r\n\r\nconst CheckboxHOC = (props) => {        \r\n    const onChange = (value, checked) => {\r\n        props.onChange( props.inverse ? !checked : checked);\r\n    };\r\n    return <BaseCheckboxField\r\n        {...props}\r\n        onChange={onChange}\r\n    />;\r\n};\r\n\r\nexport default CheckboxControl;","import React from 'react';\r\nimport {SelectPicker} from \"rsuite\";\r\n\r\nexport const Select = ({onChange = (v) => v , ...props}) => {\r\n    return (\r\n        <SelectPicker\r\n            onChange={(value) => onChange(value === null ? undefined : value)}\r\n            {...props}\r\n        />\r\n    )\r\n};\r\n\r\nexport default Select;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { SelectPicker } from 'rsuite';\r\nimport CustomField from '../Form/CustomField';\r\n\r\nconst ServicePlansComponent = ({service_plan_list, service_plan_list_filtered, filtered, ...props}) => (\r\n    <CustomField\r\n        block\r\n        data={filtered ? service_plan_list_filtered : service_plan_list}\r\n        accepter={SelectPicker}\r\n        labelKey = \"name\"\r\n        valueKey = \"sp_key\"\r\n        placeholder=\"Prices\"\r\n        name=\"sp_key\"\r\n        searchable={false}  \r\n        cleanable={false}  \r\n        classPrefix=\"allocated\"\r\n        {...props}\r\n    />\r\n);\r\n\r\nconst mapState = ( {references} )=> ({\r\n    service_plan_list: references.service_plan_list,\r\n    service_plan_list_filtered: references.service_plan_list_filtered\r\n});\r\n\r\n\r\nconst ServicePlans = connect( mapState, {})(ServicePlansComponent);\r\n\r\nexport default ServicePlans; ","import React from 'react';\r\nimport CustomField from '../Form/CustomField';\r\nimport { SelectPicker } from 'rsuite';\r\n\r\nconst numbers =  ['1000','10000','100000','1000000'].map( x => ({label:x, value:+x}))\r\n\r\nexport const NumbersSelect = (props) => (\r\n    <CustomField\r\n        accepter={SelectPicker}\r\n        data={numbers}\r\n        label=\"Number per range\"\r\n        name=\"numbers\"\r\n        cleanable = {false}\r\n        searchable = {false}\r\n        {...props}\r\n    />\r\n)\r\n\r\n\r\nexport default NumbersSelect;","import React from 'react';\r\nimport { Icon  } from 'rsuite';\r\nimport styled from 'styled-components';\r\n\r\nconst Message = styled.div`\r\n   color: ${props => props.color || '#1E90FF'};\r\n    i {\r\n        border: 2px solid;\r\n        width: 22px;\r\n        height: 22px;\r\n        border-radius: 100%;\r\n        text-align: center;\r\n        line-height: 21px;\r\n    }\r\n    div {\r\n        display:inline-block;\r\n   }\r\n   div:nth-child(1) {\r\n       vertical-align: supper;\r\n       padding-right: 10px;\r\n   }\r\n   div:nth-child(2) {\r\n       width: calc(100% - 40px);\r\n   }\r\n`;\r\n\r\n\r\n\r\nexport const Info = ({children}) => {\r\n    return (  \r\n        <Message>\r\n            <div><Icon icon='exclamation' rotate={180} /></div>\r\n            <div>{children}</div>\r\n        </Message>\r\n    )\r\n};\r\n\r\nexport const ErrorMessage = ({ showIcon = true, children}) => {\r\n    return (\r\n        <Message color=\"#f44336\">\r\n            {showIcon && <div><Icon icon='exclamation' rotate={180} /></div>}\r\n            <div>{children}</div>\r\n        </Message>\r\n    )\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Select } from '../../index';\r\nimport CustomField from '../../Form/CustomField';\r\n\r\nexport const SDE_Component = ({subdestination_list, ...props}) => (\r\n    <CustomField\r\n        accepter={Select}\r\n        data={subdestination_list}\r\n        labelKey=\"name\"\r\n        valueKey=\"sde_key\"\r\n        placeholder=\"Subdestination\"\r\n        name=\"sde_key\"\r\n        classPrefix=\"allocated\"\r\n        {...props}\r\n    />  \r\n)\r\n\r\nconst mapState = ( {references} )=> ({\r\n    subdestination_list: references.subdestination_list\r\n});\r\n\r\nexport const SDE = connect( mapState, {})(SDE_Component); \r\nexport default SDE;","import React, { useEffect } from 'react';\r\nimport MyForm from './../../../../../components/MyForm';\r\nimport Checkbox from '../../../../../hoc/Checkbox';\r\nimport Text from '../../../../../components/Form/Text';\r\nimport SDE from '../../../../../components/Filters/SDE';\r\nimport NumberField from '../../../../../components/Form/NumberField';\r\nimport styled from 'styled-components';\r\nimport {ControlLabel, Form, FormControl, FormGroup, Icon, Schema} from 'rsuite/es';\r\nimport {MIN_RATE_VALUE, valueAllocationLimit, valueAllocationLimitByPrefix} from 'const';\r\nimport {SelectPicker, Toggle} from \"rsuite\";\r\nimport {getFileResponse} from 'api/loginRoutes';\r\nimport {getBlobContent} from \"../../../../../utils\";\r\n\r\n\r\nconst {NumberType} = Schema.Types;\r\n\r\nconst defaultNumberList = [\r\n    {key: 1, name: \"1\"},\r\n    {key: 10, name: \"10\"},\r\n    {key: 100, name: \"100\"},\r\n    {key: 1000, name: \"1000\"},\r\n    {key: 10000, name: \"10000\"},\r\n    {key: 100000, name: \"100000\"},\r\n    {key: 1000000, name: \"1000000\"}\r\n];\r\n\r\nexport default ({\r\n    onSelect, target, showResult, setPriceRangeNumbers, setCsvContent, activeTrunk,\r\n    allocateByPrefixesStatus = false, setHideBufferButtons, spAuth = false, allocationLimit,\r\n    getTrunkNumberCsvById, setSummaryState, setTransactionId, setTotalNumbersForced,\r\n    setNotAllocatedNumbers, isMobile, ...props\r\n}) => {\r\n\r\n    const [method, setMethod] = React.useState('allocation:template');\r\n    const [valueTemplate, setValueTemplate] = React.useState('');\r\n    const [valueSde, setValueSde] = React.useState(null);\r\n    const [pickedInput, changeInput] = React.useState(true); // true - template, false - subdestination\r\n    const [valueForm, setValueForm] = React.useState({\r\n        random_number: true,\r\n        numbers: 10, \r\n        ranges: 1\r\n    });\r\n    const [showRateInput, onChangeShowRateInput] = React.useState(null);\r\n    const [customRateValue, onChangeCustomRateValue] = React.useState(null);\r\n    const [fieldsToRemove, setFieldsToRemove] = React.useState([]);\r\n    \r\n    // callback: on Form change\r\n    const handleFormChange = async (newFormValues) => {\r\n        setValueForm(newFormValues);\r\n    };\r\n\r\n    const changeSpAuthOption = (item) => {\r\n        props.setAllocateByPrefixesStatus(item);\r\n    };\r\n\r\n    // input: Template\r\n    const templateInput = (\r\n        <StyledField>\r\n            <Text\r\n                name=\"template\"\r\n                validationKey={method === 'allocation:template' ? 'in_template_range' : null}\r\n                label=\"Template\" width=\"md\"\r\n                onChange={(value) => {\r\n                    setValueTemplate(value);\r\n                }}\r\n                value={valueTemplate}\r\n                placeholder=\"1234567890XX\"\r\n                onClick={() => {\r\n                    setMethod('allocation:template');\r\n                    changeInput(true);\r\n                    setValueSde(null);\r\n                    setFieldsToRemove([\"sde_key\"]);\r\n                }}\r\n            />\r\n        </StyledField>\r\n    );\r\n\r\n\r\n    // input: SubDestination\r\n    const sdeInput = (\r\n        <StyledField>\r\n            <SDE\r\n                name=\"sde_key\"\r\n                onChange={(value) => {\r\n                    setValueSde(value);\r\n                }}\r\n                value={valueSde}\r\n                validationKey=\"num_required\"\r\n                onClick={() => {\r\n                    setMethod('allocation:subdestination');\r\n                    changeInput(false);\r\n                    setValueTemplate(null);\r\n                    setFieldsToRemove([\"template\"]);\r\n                }}\r\n            />\r\n        </StyledField>\r\n    );\r\n\r\n    const allocationLimitCondition = allocateByPrefixesStatus ? valueAllocationLimitByPrefix : valueAllocationLimit;\r\n\r\n    const model = {\r\n        rate: NumberType()\r\n            .min(MIN_RATE_VALUE, `The minimum of this field is ${MIN_RATE_VALUE}`)\r\n            .max(10, 'The maximum of this field is 10'),\r\n        numbers: NumberType()\r\n            .isRequired('Required')\r\n            .isInteger('Only whole numbers')\r\n            .addRule((value, data) => {\r\n                if (data.allocate_by_prefix !== undefined) {\r\n                    if (value > allocationLimitCondition) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true;\r\n            }, `The maximum of this field is ${allocationLimitCondition}`)\r\n    };\r\n    \r\n    const handleUpdateNew = ({trunk_number_transaction, not_allocated_numbers}) => {\r\n        if (trunk_number_transaction) {\r\n            const transactionId = trunk_number_transaction.id;\r\n            const summaryInfo = {...trunk_number_transaction};\r\n\r\n            getFileResponse(\"trunk_number:get_list\", {target: {trunk_number_transaction_id: transactionId}}, true)\r\n                .then((response) => {\r\n                    const csvText =  getBlobContent(response);\r\n                    csvText.then((text) => {\r\n                        setCsvContent(text);\r\n                    })\r\n                });\r\n\r\n            setSummaryState(summaryInfo);\r\n            setTransactionId(transactionId);\r\n\r\n            setTotalNumbersForced(summaryInfo.numbers);\r\n\r\n            setHideBufferButtons(false);\r\n            setNotAllocatedNumbers(not_allocated_numbers);\r\n            \r\n            showResult();\r\n        }\r\n    };\r\n\r\n    const fieldRate = !showRateInput\r\n\r\n        ? <div\r\n            style={{cursor: 'pointer', margin: '8px 20px 0 0', display: 'inline-block'}}\r\n            onClick={() => {onChangeShowRateInput(true)}}\r\n        >\r\n            <Icon icon=\"book\"\r\n                  inverse\r\n                  style={{color: showRateInput === null ? '#2f63bf' : '#5e2f9d', marginRight: '5px'}}\r\n            />\r\n            <a style={{color: showRateInput === null ? '#2f63bf' : '#5e2f9d',}}>Put custom rate</a>\r\n        </div>\r\n        : <>\r\n            <div style={{display: 'inline-block', marginTop: '8px', marginRight: '10px'}}>Rate</div>\r\n            <div style={{display: 'inline-block', marginRight: '10px'}}>\r\n\r\n                <FormControl\r\n                    style={{width: 140}}\r\n                    errorPlacement=\"bottomStart\"\r\n                    placeholder=\"0.0001\"\r\n                    name=\"rate\"\r\n                    value={customRateValue}\r\n                    onChange={(value) => {\r\n                        onChangeCustomRateValue(value);\r\n                    }}\r\n                />\r\n\r\n            </div>\r\n            <div style={{display: 'inline-block', marginTop: '8px', marginRight: '10px'}}>\r\n                <Icon\r\n                    icon=\"close\"\r\n                    inverse\r\n                    style={{\r\n                        color: '#5e2f9d',\r\n                        marginRight: '5px',\r\n                        cursor: 'pointer'\r\n                    }}\r\n                    onClick={() => {\r\n                        onChangeShowRateInput(false);\r\n                        onChangeCustomRateValue(null)\r\n                    }}\r\n                />\r\n            </div>\r\n        </>;\r\n\r\n    return (\r\n        <>\r\n            <MyForm\r\n                activeTrunk={activeTrunk}\r\n                target={method === 'allocation:subdestination' ? {...target, sde_key: valueSde} : target}\r\n                method={method}\r\n                checkResultKey='price_range_number_list'\r\n                update={handleUpdateNew}\r\n                allocateByPrefixesStatus={allocateByPrefixesStatus}\r\n                {...props}\r\n                fieldsToRemove={fieldsToRemove}\r\n                className=\"numberForm\"\r\n                onChange={handleFormChange}\r\n                formValue={valueForm}\r\n                addData={{\r\n                    rate: customRateValue !== null ? +customRateValue : null\r\n                }}\r\n                model={model}\r\n\r\n                deepCloned={true}\r\n            >\r\n\r\n                {!isMobile\r\n                    ? <>\r\n                        {!pickedInput\r\n                            ? <Fieldset name=\"template-disabled\"> {templateInput} </Fieldset>\r\n                            : templateInput\r\n                        }\r\n                        <span className=\"rs-form-inline rs-control-label\">or</span>\r\n                        {pickedInput\r\n                            ? <>\r\n                                <Fieldset name=\"sde-disabled\"> {sdeInput} </Fieldset>\r\n                            </>\r\n                            : sdeInput\r\n                        }\r\n                        <br/>\r\n                    </>\r\n                    : <>\r\n                        <StyledToggleWrapper>\r\n                            <StyledToggle\r\n                                // style={styles}\r\n                                size=\"lg\"\r\n                                checkedChildren={\"Template\"}\r\n                                className=\"\"\r\n                                unCheckedChildren={\"Subdestination\"}\r\n                                defaultChecked={pickedInput}\r\n                                onChange={changeInput}\r\n                            />\r\n                        </StyledToggleWrapper>\r\n                        {pickedInput\r\n                            ? templateInput\r\n                            : sdeInput\r\n                        }\r\n                    </>\r\n                }\r\n\r\n                {/* Show Rate form */}\r\n                {!isMobile && fieldRate}\r\n\r\n                <StyledField>\r\n                    <NumberField name=\"ranges\" label=\"Ranges\" max={Infinity} step={1} min={1}/>\r\n                </StyledField>\r\n\r\n                {allocateByPrefixesStatus && spAuth\r\n                    ? <StyledField>\r\n                        <FormGroup>\r\n                            <ControlLabel>Numbers per range</ControlLabel>\r\n                            <FormControl\r\n                                name=\"numbers\"\r\n                                validationKey=\"numbers_by_prefix\"\r\n                                accepter={SelectPicker}\r\n                                data={defaultNumberList.filter(amount => amount.key <= allocationLimitCondition)}\r\n                                style={{width: '135px'}}\r\n                                labelKey=\"name\"\r\n                                valueKey=\"key\"\r\n                                cleanable={false}\r\n                                searchable={false}\r\n                            />\r\n                        </FormGroup>\r\n                    </StyledField>\r\n                    : <StyledField>\r\n                        <NumberField\r\n                            name=\"numbers\"\r\n                            label=\"Numbers per range\"\r\n                            min={1}\r\n                            max={allocationLimitCondition}\r\n                        />\r\n                    </StyledField>\r\n                }\r\n                {spAuth &&\r\n                    <StyledField>\r\n                        <Checkbox\r\n                            name=\"allocate_by_prefix\"\r\n                            onChange={changeSpAuthOption}\r\n                            defaultChecked={allocateByPrefixesStatus}\r\n                        >\r\n                            Allocate by prefixes\r\n                        </Checkbox>\r\n                    </StyledField>\r\n                }\r\n                <StyledField>\r\n                    <Checkbox name=\"random_number\" defaultChecked>Random order</Checkbox>\r\n                </StyledField>\r\n\r\n                {isMobile && <div>{fieldRate}</div>}\r\n            </MyForm>\r\n        </>\r\n    );\r\n};\r\n\r\nconst Fieldset = styled.fieldset`\r\n    border: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    display: inline-block;\r\n    position: relative;\r\n    \r\n    .rs-input,\r\n    .rs-btn {\r\n        cursor: not-allowed !important;\r\n    }\r\n    \r\n    > div > div > input {\r\n        cursor: not-allowed\r\n    }\r\n    > div > div {\r\n        opacity: 0.6;\r\n        color: #888888\r\n    }\r\n`;\r\n\r\nconst StyledToggleWrapper = styled.div`\r\n    && {\r\n        margin: 0;\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nconst StyledToggle = styled(Toggle)`\r\n    && {\r\n        background-color: #939191;\r\n        margin: 0 0 20px;\r\n        \r\n        &:hover {\r\n            background-color: #939191;\r\n        }\r\n    }\r\n    &.rs-btn-toggle-checked {\r\n        background-color: var(--color-brand1);\r\n        \r\n        &:hover {\r\n            background-color: var(--color-brand1);\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nconst StyledField = styled.div`\r\n    display: inline-block;\r\n    \r\n    @media (max-width: 567px) {\r\n        display: block;\r\n        padding-bottom: 10px;\r\n        \r\n        && .rs-control-label {\r\n            display: block;\r\n            margin-bottom: 5px;\r\n            margin-top: 0;\r\n        }\r\n        \r\n        && .rs-form-group {\r\n            display: block;\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Select } from '../../index';\r\nimport CustomField from '../../Form/CustomField';\r\n\r\nconst WZ = ({worldzone_list, ...props}) => (\r\n    <CustomField\r\n        accepter={Select}\r\n        labelKey=\"name\"\r\n        valueKey=\"wz_key\"\r\n        data={worldzone_list}\r\n        placeholder=\"Worldzone\"\r\n        name=\"wz_key\"\r\n        classPrefix=\"allocated\"\r\n        cleanable\r\n        {...props}\r\n    />\r\n)\r\n\r\nconst mapState = ( {references} )=> ({\r\n    worldzone_list: references.worldzone_list\r\n});\r\n\r\nexport default connect( mapState, {})(WZ);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Select } from '../../index';\r\nimport CustomField from '../../Form/CustomField';\r\n\r\nconst DE = ({destination_list, ...props}) => (\r\n    <CustomField\r\n        accepter={Select}\r\n        data={destination_list}\r\n        labelKey=\"name\"\r\n        valueKey=\"de_key\"\r\n        placeholder=\"Destination\"\r\n        name=\"de_key\"\r\n        classPrefix=\"allocated\"\r\n        {...props}\r\n    />\r\n)\r\n\r\nconst mapState = ( {references} )=> ({\r\n    destination_list: references.destination_list\r\n});\r\n\r\nexport default connect( mapState, {})(DE);\r\n","import React from 'react';\r\nimport {Pagination, Schema, Form, InputNumber} from 'rsuite';\r\nimport {debounce} from \"lodash\";\r\n\r\nimport {DEFAULT_PER_PAGE_MEDIUM} from \"../../../const\";\r\nimport s from \"./Pagination.module.css\"\r\n\r\nimport CustomField from '../../Form/CustomField';\r\nimport styled from \"styled-components\";\r\n\r\nconst { NumberType } = Schema.Types;\r\n\r\nconst perPageModel = Schema.Model({\r\n    per_page: NumberType()\r\n        .isInteger('Integer')\r\n        .isRequired('Required')\r\n        .min(1,'Minimum 1')\r\n        .max(10000,'Maximum 10000'),\r\n});\r\n\r\nexport default ({\r\n    total = 0,\r\n    per_page = DEFAULT_PER_PAGE_MEDIUM,\r\n    hidePerPage,\r\n    activePage = 1,\r\n    onChangePage,\r\n    onChangePerPage,\r\n    disabled = false\r\n}) => {\r\n\r\n    const handleChange = debounce( ({per_page = 0}) => (\r\n        per_page ? onChangePerPage(+per_page) : null\r\n    ), 500);\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.pagination}>\r\n                <StyledPagination\r\n                    size=\"xs\"\r\n                    maxButtons={5}\r\n                    pages={Math.ceil(total/per_page)}\r\n                    activePage={activePage}\r\n                    onSelect={onChangePage}\r\n                    disabled={disabled || total === 0}\r\n                    first\r\n                    last\r\n                />\r\n            </div>\r\n\r\n            {!hidePerPage &&\r\n                <Form\r\n                    layout=\"inline\"\r\n                    model={perPageModel}\r\n                    className={s.form}\r\n                    formDefaultValue={{per_page}}\r\n                    onChange={handleChange}\r\n                >\r\n                    <CustomField\r\n                        name=\"per_page\"\r\n                        accepter={InputNumber}\r\n                        errorPlacement=\"topRight\"\r\n                        defaultValue={per_page}\r\n                        max={10000}\r\n                        min={1}\r\n                        size=\"sm\"\r\n                        style={{width: 135}}\r\n                        placeholder=\"Rows per page\"\r\n                        disabled={disabled}\r\n                    />\r\n                </Form>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst StyledPagination = styled(Pagination)`\r\n    && {\r\n        border: 1px solid #C4C4C4;\r\n        border-radius: 3px;\r\n        \r\n        a {\r\n            color: #C4C4C4;\r\n            border-right: 1px solid #C4C4C4;\r\n            border-radius: 0 !important;\r\n        }\r\n        \r\n        .rs-pagination-btn:last-child a {\r\n            border-right: none;\r\n        }\r\n        \r\n        & > li.rs-pagination-btn-active > a {\r\n            color: #fff;\r\n            background-color: var(--color-brand2);\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport {Table} from 'rsuite';\r\nimport _ from 'lodash';\r\n\r\nconst { Column, HeaderCell, Cell } = Table;\r\n\r\nconst dateOptions = {day: '2-digit', month: '2-digit', year: 'numeric'};\r\nconst timeOptions = {hour12: false, hour: '2-digit', minute: '2-digit', second: '2-digit'};\r\n\r\nconst dataFormatters = {\r\n    'date': (date) => date ? new Date(date).toLocaleDateString() : null,\r\n    'datetime': (date) => date ? new Date(date).toLocaleString(\"en-US\") : null,\r\n    'datetime_en': (date) => {\r\n        const dateObj = new Date(date);\r\n        return date\r\n            ? dateObj.toLocaleDateString('en', dateOptions) + \" \" + dateObj.toLocaleTimeString('en', timeOptions)\r\n            : null\r\n    },\r\n};\r\n\r\nconst convertDateToYesterday = (date) => {\r\n    return date ? new Date(new Date(new Date(date).setSeconds(new Date(date).getSeconds() - 1)).setHours(23, 59, 59, 999)) : null\r\n};\r\n\r\nexport default (columns, cutDate, isMobile) => columns.map(({\r\n    label,\r\n    flexGrow, \r\n    dataKey, \r\n    title, \r\n    formatData, \r\n    headerProps = {}, \r\n    value, \r\n    ...restProps\r\n}, i)  => {\r\n        const props = {...restProps};\r\n\r\n        if (!props.width) {\r\n            props.flexGrow = flexGrow || 1;\r\n        }\r\n\r\n        if (isMobile) {\r\n            if (props.minWidthMobile)\r\n                props.minWidth = props.minWidthMobile;\r\n        }\r\n\r\n        return (\r\n            <Column {...props} key={i}>\r\n                <HeaderCell {...headerProps}>{label}</HeaderCell>\r\n                {!value ? <Cell dataKey={dataKey}>\r\n                        {(row) => {\r\n                            const dataFormatter = _.isFunction(formatData) ? formatData : dataFormatters[formatData];\r\n                            const date = cutDate && cutDate.hasOwnProperty(dataKey) && cutDate[dataKey] ? convertDateToYesterday(row[dataKey]) : row[dataKey];\r\n                            const data = dataFormatter ? dataFormatter(date, dataKey, row) : date;\r\n                            return title\r\n                                ? <span title={data}>{data}</span>\r\n                                : <span>{data}</span>\r\n                        }}\r\n\r\n                    </Cell>\r\n                    : <Cell dataKey={dataKey}>{value}</Cell>\r\n                }\r\n            </Column>\r\n        )\r\n    }\r\n)\r\n\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport {CheckPicker, Icon} from \"rsuite\";\r\nimport css from \"components/Table/Table.module.css\";\r\nimport _ from 'lodash';\r\n\r\nconst ShowColumnPicker = ({columns, onChange, value}) => {\r\n    const [isOpen, setOpen] = useState(false);\r\n    const ref = useRef(null);\r\n    const pickerData = columns.map(({dataKey, label, fullLabel}) => ({\r\n        dataKey,\r\n        label: fullLabel || label\r\n    }));\r\n\r\n\r\n\r\n    const handleClickOutside = (event) => {\r\n        const menuBodyEl = _.get(ref, 'current.menuContainerRef.current.menuBodyContainerRef.current');\r\n\r\n        if ((!menuBodyEl || !menuBodyEl.contains(event.target))) {\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('click', handleClickOutside, false);\r\n\r\n        return () => document.removeEventListener('click', handleClickOutside, false);\r\n    });\r\n\r\n    return (\r\n        <div className=\"js-column-selector-wrapper\">\r\n            <Icon\r\n                className={`position-absolute z-index-dropdown columns-picker-icon-show`}\r\n                icon={isOpen ? \"indent\" : \"align-justify\"}\r\n                onClick={() => setOpen(!isOpen)}\r\n            />\r\n            <CheckPicker\r\n                ref={ref}\r\n                className=\"position-absolute z-index-dropdown invisible\"\r\n                open={isOpen}\r\n                valueKey=\"dataKey\"\r\n                value={value}\r\n                data={pickerData}\r\n                // menuAutoWidth={false}\r\n                searchable={false}\r\n                onChange={onChange}\r\n                style={{width: 190}}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ShowColumnPicker;","import {Table} from \"rsuite\";\r\nimport styled, {css} from \"styled-components\";\r\nimport {APP_TYPE_CLIENT} from \"../../const\";\r\n\r\nexport const {Column, HeaderCell, Cell} = Table;\r\n\r\nexport default styled(Table)`\r\n    && {\r\n        box-shadow: 0 4px 30px rgba(0, 0, 0, 0.16);\r\n        border-radius: 5px;\r\n        margin-top: 10px;\r\n        margin-bottom: 10px;\r\n        \r\n        .rs-table-row {\r\n            border-bottom: 1px solid #939191;\r\n            \r\n            &.rs-table-row-header {\r\n            \r\n                &,\r\n                & .rs-table-cell {\r\n                    background: #939191 !important;\r\n                    color: #fff !important;\r\n                }\r\n            }\r\n            \r\n            &.row-active {\r\n                color: #8256C8;\r\n                \r\n                .rs-table-cell {\r\n                    background: var(--color-row-active);\r\n                }                \r\n            }\r\n            \r\n            &.row-disabled {\r\n                .rs-table-cell {\r\n                    background: #d6d6db;\r\n                }\r\n                \r\n                &:hover .rs-table-cell {\r\n                    background: #d6d6db !important;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    .rs-table-cell-header.text-center .rs-table-cell-content {\r\n        text-align: center !important;\r\n    }\r\n    \r\n    .rs-table-hover .rs-table-row-header:hover .rs-table-cell-group,\r\n    .rs-table-hover .rs-table-row-header:hover .rs-table-cell {\r\n        background: #939191 !important;\r\n        color: #fff !important;\r\n    }\r\n    \r\n    i.rs-table-cell-header-icon-sort,\r\n    i.rs-table-cell-header-icon-sort-desc::after,\r\n    i.rs-table-cell-header-icon-sort-asc::after {\r\n        color: var(--color-brand1)\r\n    }\r\n    \r\n    .rs-table-row-header .rs-table-cell-content {\r\n        line-height: 30px;\r\n    }\r\n    \r\n    .rs-table-cell-content {\r\n        padding: 5px 10px !important;\r\n    }\r\n    \r\n    .rs-table-cell-header-with-icon .rs-table-cell-content {\r\n        padding-left: 30px !important;\r\n    }\r\n    \r\n    .table-row-account---link {\r\n        cursor: pointer;\r\n    }\r\n    \r\n    .table-row-account--disabled {\r\n        cursor: default;\r\n    }\r\n    \r\n    .table-row-account__closed .rs-table-cell-first {\r\n        color: #fb2d2d;\r\n    }\r\n    \r\n    .table-row-account__closed::after {\r\n        content: '';\r\n        position: absolute;\r\n        opacity: 0.2;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background-color: #4c4c59;\r\n        pointer-events: none;\r\n    }\r\n\r\n    ${props => props.theme.appType === APP_TYPE_CLIENT && css`\r\n        && {\r\n            margin-top: 0;\r\n            margin-bottom: 0;\r\n            \r\n            .rs-table-row-header .rs-table-cell-content {\r\n                line-height: 26px;\r\n            }\r\n            \r\n            .table-two-staged__cell {\r\n                // line-height: 1.42857143;\r\n                \r\n                .table-two-staged__cell-second {\r\n                    font-size: 13px;\r\n                    color: var(--color-brand2);\r\n                    opacity: 1;\r\n                }\r\n                \r\n                .table-two-staged__cell-single {\r\n                    padding-top: 7px;\r\n                }\r\n            }\r\n        }\r\n    `}\r\n    \r\n    .columnCheckbox {\r\n        position: relative;\r\n        top: -5px;\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport Pagination from '../base/Pagination';\r\nimport {Button, ButtonToolbar, Checkbox, Notification} from 'rsuite';\r\nimport RenderedColumns from './RenderColumns';\r\nimport {ObjectSet} from '../../utils/ObjectSet';\r\nimport ShowColumnPicker from \"components/Table/ShowColumnPicker\";\r\nimport _ from 'lodash';\r\nimport BaseTable, {Column, HeaderCell, Cell} from \"../base/BaseTable\";\r\nimport css from './Table.module.css';\r\n\r\n\r\n/**\r\n * Для правильной работы выбора колонок в таблицу нужно передать columnSelectorLSKey\r\n * это и будет являться ключём для храрения выбраных колонок в LocalStorage\r\n */\r\nexport class MyTable extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.selectedlist = this.props.isSetObject\r\n            ? new ObjectSet()\r\n            : new Set();\r\n\r\n        const allColumnsKeys = props.columns\r\n            .map(column => column.dataKey);\r\n\r\n        let columnsKeys = props.columns\r\n            .filter(column => !column.hideDefault)\r\n            .map(column => column.dataKey);\r\n\r\n        if (props.columnSelectorLSKey) {\r\n            //Get saved columns to show from Local Storage\r\n            columnsKeys = localStorage.getItem(props.columnSelectorLSKey)\r\n                ? JSON.parse(localStorage.getItem(props.columnSelectorLSKey))\r\n                : columnsKeys;\r\n        }\r\n\r\n        this.state = {\r\n            selectAll: false,\r\n            columns: [],\r\n            isSelectColumnsDropdownOpen: false,\r\n            showColumnsKeys: columnsKeys || allColumnsKeys,\r\n        };\r\n    }\r\n\r\n    configureColumns () {\r\n        let columns = [...this.props.columns];\r\n        const showColumnsKeys = this.state.showColumnsKeys;\r\n        const {columnSelectorLSKey} = this.props;\r\n\r\n        if (columnSelectorLSKey) {\r\n            //Set saved\r\n            localStorage.setItem(columnSelectorLSKey, JSON.stringify(showColumnsKeys));\r\n\r\n            columns = columns.filter((column) => showColumnsKeys.includes(column.dataKey));\r\n\r\n            if (columns.length) {\r\n                columns[0].headerProps = {className:`rs-table-cell-header-with-icon`};\r\n            }\r\n        }\r\n\r\n        this.setState({columns});\r\n    }\r\n\r\n    clear = () => {\r\n        const { isselected } = this.props;\r\n        const {selectAll } = this.state;\r\n\r\n        if(isselected) {\r\n            this.selectedlist.clear();\r\n            if(selectAll)\r\n                this.setState({selectAll: false}, this.setSelectParent)\r\n            else\r\n                this.setSelectParent()\r\n        }\r\n    };\r\n\r\n    shouldComponentUpdate({data, stateChecked, row_key = 'id'}) {\r\n        if(stateChecked && data !== this.props.data) {\r\n            data.map(row => {\r\n                return (row.checked) && ( this.selectedlist.add( this.gettingSelectItem(row) ) )\r\n            })\r\n        }\r\n        return true;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.configureColumns();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        //Uncheck checkboxes when data in table changes\r\n        if (this.props.count && prevProps.count !== this.props.count) {\r\n            this.onToggleAll(false);\r\n        }\r\n\r\n        if (this.props.columns !== prevProps.columns\r\n            || this.state.showColumnsKeys !== prevState.showColumnsKeys) {\r\n            this.configureColumns();\r\n        }\r\n        if (this.props.clearSelected) {\r\n            this.clear()\r\n        }\r\n    }\r\n\r\n    onChangePage = (page) => {\r\n        this.props.getItems(page, this.props.per_page)\r\n    };\r\n\r\n    onChangePerPage = (per_page) => {\r\n        this.props.getItems(1, per_page)\r\n    };\r\n\r\n    setSelectParent = () => {\r\n        const {setSelected} = this.props;\r\n        const {selectAll} = this.state;\r\n\r\n        if (!setSelected) return;\r\n\r\n        setSelected({\r\n            list: Array.from(this.selectedlist.values()),\r\n            all: selectAll\r\n        })\r\n    };\r\n\r\n    onToggle = (id, checked) => {\r\n        const {useSelectedData, data = [], row_key = 'id', onCheckPrevented} = this.props;\r\n\r\n        if (checked) {\r\n            this.selectedlist.add(id);\r\n        } else {\r\n            this.selectedlist.delete(id);\r\n        }\r\n\r\n        if (useSelectedData) {\r\n            const checkedData = data.filter(item => item[row_key] === id);\r\n            useSelectedData(checkedData, checked)\r\n        }\r\n\r\n        if (checked && onCheckPrevented) {\r\n            const checkedItem = data.find(item => item.id === id);\r\n            if (checkedItem.preventCheck)\r\n                onCheckPrevented();\r\n        }\r\n\r\n        this.setSelectParent();\r\n        this.forceUpdate();\r\n    };\r\n\r\n    onToggleAll = (checked) => {\r\n        const {selectAll} = this.state;\r\n        const {data, row_key = 'id', ispagination, isSelectedAll, useSelectedData, partialSelectedAll} = this.props;\r\n\r\n        if (!checked) {\r\n            speaker(Notification.close(\"allocatedNumberChooser\"));\r\n        }\r\n        if (partialSelectedAll) {\r\n            this.setState({selectAll: true});\r\n        }\r\n\r\n        if (isSelectedAll && checked && !selectAll && ispagination) {\r\n            Notification.open({\r\n                duration: 0,\r\n                description: [\r\n                    <div className=\"mb-2\">Do you want to choose records on all pages according to clause of filter?</div>,\r\n                    <div className=\"text-right\">{\r\n                        speaker(\r\n                            () => {\r\n                                this.setState({selectAll: true}, this.setSelectParent);\r\n                                Notification.closeAll();\r\n                            },\r\n                            () => {\r\n                                Notification.closeAll();\r\n                            })\r\n                    }</div>\r\n                ],\r\n                key: 'allocatedNumberChooser'\r\n            });\r\n        } else if (!checked && selectAll) {\r\n            this.setState({selectAll: false}, this.setSelectParent);\r\n        }\r\n\r\n        for (let row of data) {\r\n            (checked && !row.preventCheck && !row.disabled)\r\n            ? this.selectedlist.add(this.gettingSelectItem(row))\r\n            : this.selectedlist.delete(this.gettingSelectItem(row))\r\n        }\r\n\r\n        if (useSelectedData) {\r\n            useSelectedData(data, checked)\r\n        }\r\n        \r\n        this.setSelectParent();\r\n        this.forceUpdate();\r\n    };\r\n\r\n    getHeight = () => {\r\n        const { data = [],height, rowHeight}  = this.props;\r\n        const heightValues = ((data.length * (rowHeight || 30)) || 100) + 50;\r\n\r\n        switch (height) {\r\n            case '50%':\r\n                const h = (window.innerHeight/2);\r\n                return Math.min(h,heightValues);\r\n            case '30%':\r\n                const h30 = (window.innerHeight/3);\r\n                return Math.min(h30,heightValues);\r\n            case '25%':\r\n                const h25 = (window.innerHeight/4);\r\n                return Math.min(h25,heightValues);\r\n            default:\r\n                return heightValues;\r\n        }\r\n    };\r\n\r\n    gettingSelectItem = (row) => {\r\n        const { isSetObject, row_key = 'id' } = this.props;\r\n        return isSetObject ? row : row[row_key];\r\n    };\r\n\r\n    render () {\r\n        const {\r\n            data = [], loading, isselected, row_key = 'id', active_id,\r\n            ispagination, count, page, per_page, onRowClick, isMobile, partialSelectedAll,\r\n            width, ActionCell, hidePerPage, disabled, columns, getItems, height, extraHeight, ...props\r\n        } = this.props;\r\n\r\n        const {selectAll} = this.state;\r\n        const _renderedColumns = RenderedColumns(this.state.columns, null, isMobile);\r\n\r\n        const _columns = _renderedColumns;\r\n\r\n        const propTables = {...props};\r\n\r\n        if (onRowClick)\r\n            propTables.onRowClick = (row) => onRowClick(row[row_key]);\r\n        if (active_id) {\r\n            propTables.rowClassName = (row) => {\r\n                let rowClass = row && row[row_key] === active_id ? 'row-active' : null;\r\n                if (!rowClass && props.rowClassName) {\r\n                    rowClass = _.isFunction(props.rowClassName)\r\n                        ? props.rowClassName(row)\r\n                        : props.rowClassName;\r\n                }\r\n                return rowClass;\r\n            }\r\n        }\r\n\r\n        if (width)\r\n            propTables.width = width;\r\n\r\n        if (!ispagination)\r\n            propTables.virtualized = true;\r\n\r\n        const dataEnabled = data.filter(value => !value.disabled);\r\n\r\n        return  (\r\n            <div className=\"position-relative\">\r\n                {this.props.columnSelectorLSKey &&\r\n                    <ShowColumnPicker\r\n                        value={this.state.showColumnsKeys}\r\n                        columns={this.props.columns}\r\n                        onChange={(value) => this.setState({showColumnsKeys: value})}\r\n                    />\r\n                }\r\n                <BaseTable\r\n                    height={ extraHeight ? extraHeight : this.getHeight()}\r\n                    data={data}\r\n                    loading={loading}\r\n                    rowHeight={30}\r\n                    {...propTables}\r\n                >\r\n                    {_columns}\r\n                    {ActionCell}\r\n\r\n                    {isselected &&\r\n                        <Column width={50}>\r\n                            <HeaderCell>\r\n                                {data.length\r\n                                    ? <Checkbox\r\n                                        onChange={(v,checked) => this.onToggleAll(checked)}\r\n                                        checked = {selectAll && (!partialSelectedAll && !dataEnabled.length) || dataEnabled.every(\r\n                                            row => this.selectedlist.has( this.gettingSelectItem(row) )\r\n                                        )}\r\n                                        style={{position:'relative', top:'-5px', right: '8px'}}\r\n                                    />\r\n                                    : ''\r\n                                    }\r\n                            </HeaderCell>\r\n                            <Cell>\r\n                                {(row) => (\r\n                                    <Checkbox\r\n                                        disabled = {selectAll && (!partialSelectedAll && row.disabled) || row.disabled}\r\n                                        checked = {row.checked || this.selectedlist.has( this.gettingSelectItem(row) )\r\n                                        || selectAll && (!partialSelectedAll && row.disabled)}\r\n                                        onChange={(v,checked) => this.onToggle( this.gettingSelectItem(row), checked )}\r\n                                        style={{position:'relative', top:'-5px',  right: '8px'}}\r\n                                    />\r\n                                )}\r\n                            </Cell>\r\n                        </Column>\r\n                    }\r\n\r\n                    <Column key=\"table_scrollfix\" width={0} fixed>\r\n                        <HeaderCell></HeaderCell>\r\n                        <Cell></Cell>\r\n                    </Column>\r\n                </BaseTable>\r\n\r\n                {ispagination &&\r\n                    <Pagination\r\n                        disabled = {disabled}\r\n                        total = {count}\r\n                        per_page = {per_page}\r\n                        activePage = {page}\r\n                        hidePerPage = {hidePerPage}\r\n                        onChangePage = {this.onChangePage}\r\n                        onChangePerPage  = {this.onChangePerPage}\r\n                    />\r\n                }\r\n\r\n            </div>\r\n        );\r\n             \r\n    }\r\n}\r\n\r\n\r\nexport default MyTable;\r\n\r\nconst speaker = (Ok,No) =>  (\r\n    <div>\r\n        <ButtonToolbar>\r\n          <Button onClick ={Ok}>Yes</Button>\r\n          <Button onClick ={No} >No, only on this page</Button>\r\n        </ButtonToolbar>\r\n      </div>\r\n);","import React, {useState} from 'react';\r\nimport CustomField from './CustomField';\r\nimport {InputNumber} from 'rsuite';\r\nimport {NumberField} from \"./NumberField\";\r\nimport {MIN_RATE_VALUE} from \"const\";\r\n\r\nconst RateField = (props) => {\r\n    return (\r\n        <NumberField\r\n            accepter={InputNumber}\r\n            max={10}\r\n            min={MIN_RATE_VALUE}\r\n            step={0.0001}\r\n            placeholder=\"0.00\"\r\n\r\n            {...props}\r\n            className='without-buttons'\r\n        />\r\n    )\r\n};\r\n\r\nexport default RateField;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport {Form, Icon, IconButton, InputNumber, SelectPicker, Table as _Table} from 'rsuite';\r\nimport Checkbox from '../../../../../hoc/Checkbox';\r\nimport WZ from '../../../../../components/Filters/WZ';\r\nimport DE from '../../../../../components/Filters/DE';\r\nimport SDE from '../../../../../components/Filters/SDE';\r\nimport NumberField from '../../../../../components/Form/NumberField';\r\nimport MyForm from '../../../../../components/MyForm';\r\nimport {api, getFileResponse} from '../../../../../api/loginRoutes';\r\nimport Table from '../../../../../components/Table';\r\nimport {getBlobContent, pipe} from '../../../../../utils/helpers';\r\nimport RateField from '../../../../../components/Form/RateField';\r\nimport {ControlLabel, FormControl, FormGroup, Schema} from \"rsuite/es\";\r\nimport {valueAllocationLimit, valueAllocationLimitByPrefix} from 'const';\r\nimport {useWindowWidth} from \"../../../../../hooks\";\r\nimport {Collapse} from \"react-collapse\";\r\nimport styled from 'styled-components';\r\n\r\nconst {Column, HeaderCell, Cell} = _Table;\r\nconst {NumberType} = Schema.Types;\r\n\r\nconst createDownloadUrl = (string, type = \"\") => {\r\n    return window.URL.createObjectURL( new Blob([string], {type: type}) );\r\n};\r\n\r\n\r\nconst columns = [\r\n    {\r\n        label: 'Subdestination',\r\n        dataKey: 'sde_name',\r\n        minWidth: 280,\r\n        flexGrow: 3\r\n    }\r\n];\r\n\r\nconst columnsMobile = [\r\n    {\r\n        label: 'Subdestination',\r\n        dataKey: 'sde_name',\r\n        minWidth: 140,\r\n        flexGrow: 1\r\n    }\r\n];\r\n\r\n\r\nexport default ({\r\n    activeTab, \r\n    onSelect, \r\n    target, \r\n    sp_key, \r\n\r\n    activeTrunk,\r\n\r\n    showResult, \r\n    setHideBufferButtons,\r\n\r\n    setSummaryState,\r\n    setCsvContent,\r\n    setTotalNumbersForced,\r\n\r\n    allocateByPrefixesStatus = false,\r\n    account_id, \r\n    spAuth, \r\n    allocationLimit,\r\n    setNotAllocatedNumbers,\r\n    isMobile,\r\n\r\n    setTransactionId,\r\n    ...props\r\n}) => {\r\n\r\n    const defaultNumberList = [\r\n        {key: 1, name: \"1\"},\r\n        {key: 10, name: \"10\"},\r\n        {key: 100, name: \"100\"},\r\n        {key: 1000, name: \"1000\"},\r\n        {key: 10000, name: \"10000\"},\r\n        {key: 100000, name: \"100000\"},\r\n        {key: 1000000, name: \"1000000\"}\r\n    ];\r\n\r\n    const [valueForm, setValueForm] = React.useState({random_number: true, ranges: 1, numbers: 10});\r\n    const [showFilters, setShowFilters] = React.useState(false);\r\n\r\n    const [data, setData] = React.useState({\r\n        current: [],\r\n        loading: true,\r\n        state: []\r\n    });\r\n\r\n    const windowWidth = useWindowWidth();\r\n\r\n    React.useEffect(() => {\r\n\r\n        setData({\r\n            ...data,\r\n            loading: true,\r\n        });\r\n\r\n        api('account_price__get_fullprice', {sp_key, target: {account_id: account_id || undefined}})\r\n            .then(\r\n                ({fullprice_for_account}) => {\r\n                    setData({\r\n                        current: fullprice_for_account || [],\r\n                        loading: false,\r\n                        state: fullprice_for_account || [],\r\n                    });\r\n                }\r\n            );\r\n    }, [sp_key, account_id]);\r\n\r\n    const onChangePrice = (sde_key, price) => {\r\n        const stateItems = data.state.map(\r\n            row => row.sde_key === sde_key ? {...row, checked: true, rate: price} : row\r\n        );\r\n        const currentItems = data.current.map(\r\n            row => row.sde_key === sde_key ? {...row, checked: true, rate: price} : row\r\n        );\r\n\r\n        setData({\r\n            ...data,\r\n            current: currentItems,\r\n            state: stateItems,\r\n        });\r\n    };\r\n    const onChangeChecked = (selected) => {\r\n        const stateItems = data.state.map(\r\n            row => selected.list.includes(row.sde_key) ? {...row, checked: true} : {...row, checked: false}\r\n        );\r\n        const currentItems = data.current.map(\r\n            row => selected.list.includes(row.sde_key) ? {...row, checked: true} : {...row, checked: false}\r\n        );\r\n        setData({\r\n            ...data,\r\n            current: currentItems,\r\n            state: stateItems,\r\n        });\r\n    };\r\n    const onChangeFilters = (filters) => {\r\n        setData({\r\n            ...data,\r\n            state: pipe(data.current, filters, FiltersFuncs)\r\n        });\r\n    };\r\n\r\n    const changeSpAuthOption = (item) => {\r\n        props.setAllocateByPrefixesStatus(item);\r\n    };\r\n\r\n    const handleFormChange = async (newFormValues) => {\r\n        setValueForm(newFormValues);\r\n    };\r\n\r\n    const allocationLimitCondition = allocateByPrefixesStatus ? valueAllocationLimitByPrefix : valueAllocationLimit;\r\n\r\n    const model = {\r\n        numbers: NumberType()\r\n            .isRequired('Required')\r\n            .isInteger('Only whole numbers')\r\n            .addRule((value, data) => {\r\n                if (data.allocate_by_prefix !== undefined) {\r\n                    if (value > allocationLimitCondition) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true;\r\n            }, `The maximum of this field is ${allocationLimitCondition}`)\r\n    };\r\n\r\n\r\n    const handleUpdateNew = ({trunk_number_transaction, not_allocated_numbers}) => {\r\n        if (trunk_number_transaction) {\r\n            const transactionId = trunk_number_transaction.id;\r\n            const summaryInfo = {...trunk_number_transaction};\r\n\r\n            setSummaryState(summaryInfo);\r\n            setTransactionId(transactionId);\r\n\r\n            setTotalNumbersForced(summaryInfo.numbers);\r\n\r\n            setHideBufferButtons(true);\r\n            setNotAllocatedNumbers(not_allocated_numbers);\r\n            showResult();\r\n        }\r\n    };\r\n\r\n\r\n    return (<>\r\n\r\n        <div>\r\n            {isMobile &&\r\n                <div style={{paddingBottom: 10}}>\r\n                    <IconButton\r\n                        appearance={showFilters ? 'primary' : 'default'}\r\n                        icon={<Icon icon=\"filter\"/>}\r\n                        onClick={() => setShowFilters(!showFilters)}\r\n                    >\r\n                    </IconButton>\r\n                </div>\r\n            }\r\n            <Collapse isOpened={!isMobile || showFilters}>\r\n                <FiltersSubdestination onChange={onChangeFilters}/>\r\n            </Collapse>\r\n        </div>\r\n\r\n        <StyledTable\r\n            virtualized\r\n            shouldUpdateScroll={false}\r\n            data={data.state}\r\n            height=\"30%\"\r\n            loading={data.loading}\r\n            row_key=\"sde_key\"\r\n            setSelected={onChangeChecked}\r\n            isselected\r\n            stateChecked\r\n            ActionCell={ActionCell(onChangePrice)}\r\n\r\n            width={isMobile ? windowWidth - 50 : 'auto'}\r\n            columns={isMobile ? columnsMobile : columns}\r\n            wordWrap={isMobile}\r\n            rowHeight={isMobile ? 46 : 30}\r\n        />\r\n\r\n        <MyForm\r\n            activeTrunk={activeTrunk}\r\n            target={target}\r\n            method=\"allocation:mass\"\r\n            checkResultKey='price_range_number_list'\r\n            onChange={handleFormChange}\r\n            update={handleUpdateNew}\r\n            {...props}\r\n            allocateByPrefixesStatus={allocateByPrefixesStatus}\r\n            formValue={valueForm}\r\n            addData={{\r\n                list: data.current\r\n                    .filter(x => x.checked)\r\n                    .map(x => ({sde_key: x.sde_key, rate: +x.rate}))\r\n            }}\r\n            model={model}\r\n\r\n            deepCloned={true}\r\n           >\r\n\r\n            <NumberField\r\n                name=\"ranges\"\r\n                label=\"Ranges per subdestination\"\r\n                // validationKey=\"numbers\"\r\n                max={Infinity}\r\n                min={0}\r\n                step={1}\r\n                useBr={isMobile ? false : true}\r\n            />\r\n            {allocateByPrefixesStatus && spAuth\r\n                ? <FormGroup>\r\n                    <ControlLabel>Number per range</ControlLabel>\r\n                    <FormControl\r\n                        name=\"numbers\"\r\n                        validationKey=\"numbers_by_prefix\"\r\n                        accepter={SelectPicker}\r\n                        data={defaultNumberList.filter(amount => amount.key <= allocationLimitCondition)}\r\n                        style={{width: '135px'}}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"key\"\r\n                        cleanable={false}\r\n                        searchable={false}\r\n                    />\r\n                </FormGroup>\r\n                : <NumberField name=\"numbers\" label=\"Number per range\" max={allocationLimitCondition} min={0} step={1}/>\r\n            }\r\n            {spAuth &&\r\n                <Checkbox \r\n                    name=\"allocate_by_prefix\"\r\n                    onChange={changeSpAuthOption}\r\n                    defaultChecked={allocateByPrefixesStatus}\r\n                >\r\n                    Allocate by prefixes\r\n                </Checkbox>\r\n            }\r\n            <br style={{display: isMobile ? 'none' : 'block'}}/>\r\n            <div className=\"no-margin\"></div>\r\n            <Checkbox name=\"random_number\" defaultChecked>Random order</Checkbox>\r\n        </MyForm>\r\n    </>);\r\n}\r\n\r\n\r\nconst FiltersFuncs = {\r\n    sde_key: (x, f) => x.sde_key === f,\r\n    de_key: (x, f) => x.de_key === f,\r\n    wz_key: (x, f) => x.wz_key === f,\r\n    rate_from: (x, f) => x.rate >= +f,\r\n    rate_to: (x, f, allfilters) => {\r\n        // debugger;\r\n        return (+f ? x.rate <= +f : true);\r\n    },\r\n};\r\n\r\nconst FiltersSubdestination = ({onChange}) => {\r\n    return (\r\n        <Form\r\n            layout=\"inline\"\r\n            onChange={onChange}\r\n        >\r\n            <WZ/>\r\n            <DE/>\r\n            <SDE/>\r\n            <br/>\r\n            <RateField label={'Rate range from'} name=\"rate_from\"/>\r\n            <RateField label={'to'} name=\"rate_to\"/>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst ActionCell = (onChange) => (\r\n    <Column width={150} minWidth={140}>\r\n        <HeaderCell>Price</HeaderCell>\r\n        <Cell>\r\n            {rowData => (\r\n                <Form>\r\n                    <StyledNumberField\r\n                        key={rowData.sde_key}\r\n                        max={10}\r\n                        min={0}\r\n                        size=\"sm\"\r\n                        placeholder=\"0\"\r\n                        value={rowData.rate}\r\n                        calculated={true}\r\n                        onChange={value => onChange(rowData.sde_key, value)}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Cell>\r\n    </Column>\r\n);\r\n\r\nconst StyledTable = styled(Table)`\r\n    @media (max-width: 767px) {\r\n        font-size: 12px;\r\n    }\r\n    .rs-table-cell-content {\r\n        padding: 0 10px !important;\r\n    }\r\n`;\r\n\r\nconst StyledNumberField = styled(NumberField)`\r\n    position: relative;\r\n    width: 120px;\r\n\r\n    @media (min-width: 1200px) {\r\n        //top: -9px;\r\n        width: 100px;\r\n    }\r\n\r\n    &.rs-input-group {\r\n        width: 100px !important;\r\n\r\n        @media (min-width: 767px) {\r\n            width: 135px !important;\r\n        }\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Spacer = styled.div`\r\n    height: ${props => props.size ? props.size + 'px' : '20px'}\r\n`;","import React from 'react';\r\nimport {FormControl, Input, Schema} from 'rsuite';\r\nimport MyForm from '../../../../../components/MyForm';\r\nimport {getBlobContent, splitList} from '../../../../../utils';\r\nimport {FlexboxGrid, Icon} from 'rsuite/es';\r\nimport {MIN_RATE_VALUE, valueAllocationLimitList} from 'const';\r\nimport {getFileResponse} from 'api/loginRoutes';\r\nimport styled from 'styled-components';\r\nimport {Spacer} from \"../../../../../components/base/Spacer\";\r\n\r\nconst {NumberType, StringType} = Schema.Types;\r\n\r\n\r\n\r\nexport default ({\r\n    activeTab, showResult, onSelect, target, activeTrunk,\r\n    setHideBufferButtons, allocationLimit, setSummaryState, setTransactionId, setTotalNumbersForced,\r\n    setCsvContent, setAllocateByPrefixesStatus, setNotAllocatedNumbers, isMobile, ...props\r\n}) => {\r\n\r\n    let timerid = null;\r\n    const [number_list, setNumberList] = React.useState([]);\r\n    const [showRateInput, onChangeShowRateInput] = React.useState(null);\r\n    const [customRateValue, onChangeCustomRateValue] = React.useState(null);\r\n    const [valueForm, setValueForm] = React.useState({});\r\n\r\n    const changeNumberList = (str) => {\r\n        clearTimeout(timerid);\r\n\r\n        timerid = setTimeout((str) => {\r\n            setNumberList(splitList(str));\r\n        }, 300, str);\r\n    };\r\n\r\n    const model = {\r\n        rate: NumberType()\r\n            .min(MIN_RATE_VALUE, `The minimum of this field is ${MIN_RATE_VALUE}`)\r\n            .max(10, 'The maximum of this field is 10'),\r\n        number_list: StringType()\r\n            .isRequired('Required')\r\n            .pattern(/^(?: *\\d+ *(?:\\n|$))+$/, 'Please enter a valid numbers')\r\n            .addRule((value) => {\r\n                const valueList = splitList(value);\r\n                for (const row of valueList) {\r\n                    if (row.length > 15 || row.length < 7) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true;\r\n            }, 'Each row should be greater than 7 and less than 15')\r\n            .addRule((value) => !(splitList(value).length > (valueAllocationLimitList === -1 ? Infinity : valueAllocationLimitList)),\r\n                `The number of entered telephone numbers exceeds ${valueAllocationLimitList === -1 ? 'Infinity' : valueAllocationLimitList} rows`),\r\n\r\n    };\r\n\r\n    const handleUpdateNew = ({trunk_number_transaction, not_allocated_numbers}) => {\r\n        if (trunk_number_transaction) {\r\n            const transactionId = trunk_number_transaction.id;\r\n            const summaryInfo = {...trunk_number_transaction};\r\n\r\n            getFileResponse(\"trunk_number:get_list\", {target: {trunk_number_transaction_id: transactionId}}, true)\r\n                .then((response) => {\r\n                    const csvText =  getBlobContent(response);\r\n                    csvText.then((text) => {\r\n                        setCsvContent(text);\r\n                    })\r\n                });\r\n\r\n            setSummaryState(summaryInfo);\r\n            setTransactionId(transactionId);\r\n\r\n            setTotalNumbersForced(summaryInfo.numbers);\r\n            setAllocateByPrefixesStatus(false);\r\n            setHideBufferButtons(false);\r\n            setNotAllocatedNumbers(not_allocated_numbers);\r\n            showResult();\r\n        }\r\n    };\r\n\r\n    const rateField = (\r\n        <FlexboxGrid justify=\"start\" style={{margin: '0 0 20px 0'}}>\r\n\r\n            {!showRateInput ? <FlexboxGrid.Item>\r\n                    <div\r\n                        style={{\r\n                            marginTop: '8px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                        onClick={() => {\r\n                            onChangeShowRateInput(true);\r\n                        }}\r\n                    >\r\n                        <Icon icon=\"book\" inverse\r\n                              style={{color: showRateInput === null ? '#2f63bf' : '#5e2f9d', marginRight: '5px'}}/>\r\n                        <a\r\n                            style={{\r\n                                color: showRateInput === null ? '#2f63bf' : '#5e2f9d',\r\n                            }}\r\n                        >\r\n                            Put custom rate\r\n                        </a>\r\n                    </div>\r\n\r\n                </FlexboxGrid.Item>\r\n                : <>\r\n                    <FlexboxGrid.Item\r\n                        style={{\r\n                            marginTop: '8px',\r\n                            marginRight: '10px'\r\n                        }}\r\n                    >\r\n                        Rate\r\n                    </FlexboxGrid.Item>\r\n                    <FlexboxGrid.Item\r\n                        style={{\r\n                            marginRight: '10px'\r\n                        }}\r\n                    >\r\n                        <FormControl\r\n                            style={{\r\n                                width: 140\r\n                            }}\r\n                            errorPlacement=\"bottomEnd\"\r\n                            placeholder=\"0.0001\"\r\n                            name=\"rate\"\r\n                            value={customRateValue}\r\n                            onChange={(value) => {\r\n                                onChangeCustomRateValue(value);\r\n                            }}\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                    <FlexboxGrid.Item\r\n                        style={{\r\n                            marginTop: '8px',\r\n                            marginRight: '10px'\r\n                        }}\r\n                    >\r\n                        <Icon\r\n                            icon=\"close\"\r\n                            inverse\r\n                            style={{\r\n                                color: '#5e2f9d',\r\n                                marginRight: '5px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                            onClick={() => {\r\n                                onChangeShowRateInput(false);\r\n                                onChangeCustomRateValue(null)\r\n                            }}\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                </>\r\n            }\r\n        </FlexboxGrid>\r\n    );\r\n\r\n    return (\r\n        <FormWrapper>\r\n            <MyForm\r\n                activeTrunk={activeTrunk}\r\n                target={target}\r\n                method=\"allocation:number_list\"\r\n                checkResultKey='price_range_number_list'\r\n                update={handleUpdateNew}\r\n                onChange={(value) => {\r\n                    setValueForm(value);\r\n                }}\r\n                value={valueForm}\r\n                addData={{\r\n                    number_list,\r\n                    rate: customRateValue !== null ? +customRateValue : null\r\n                }}\r\n                {...props}\r\n                layout=\"vertical\"\r\n                allocateByPrefixesStatus={null}\r\n                model={model}\r\n\r\n                deepCloned={true}\r\n            >\r\n\r\n                {!isMobile && rateField}\r\n\r\n                <div style={{margin: '0 0 5px 0'}}> Number list</div>\r\n\r\n                <FormControl\r\n                    accepter={Input}\r\n                    errorPlacement=\"topRight\"\r\n                    componentClass=\"textarea\"\r\n                    name='number_list'\r\n                    onChange={changeNumberList}\r\n                    rows={3}\r\n                    style={{width: '100%', height: 500, resize: 'auto'}}\r\n                    placeholder=\"Enter your numbers here\"\r\n                />\r\n\r\n                {isMobile &&\r\n                    <>\r\n                        <Spacer size={10}/>\r\n                        {rateField}\r\n                    </>\r\n                }\r\n\r\n            </MyForm>\r\n        </FormWrapper>\r\n    );\r\n};\r\n\r\nconst FormWrapper = styled.div`\r\n    @media (min-width: 768px) {\r\n        margin-left: 40px;\r\n        marginRight: 40px;\r\n    }\r\n    \r\n    & {\r\n        textarea.rs-input {\r\n            min-width: 1px;\r\n            \r\n            @media (min-width: 767px) {\r\n                min-width: 300px;\r\n            }\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport MyForm from './../../../../../components/MyForm';\r\nimport Text from '../../../../../components/Form/Text';\r\nimport NumberField from '../../../../../components/Form/NumberField';\r\nimport {Form, FormControl, FormGroup, Icon, Schema} from 'rsuite/es';\r\nimport {MIN_RATE_VALUE, valueAllocationLimit} from 'const';\r\nimport {getFileResponse} from 'api/loginRoutes';\r\nimport {getBlobContent} from \"../../../../../utils\";\r\n\r\nconst {NumberType} = Schema.Types;\r\n\r\nexport default ({\r\n    activeTab, onSelect, target, showResult, setHideBufferButtons, activeTrunk,\r\n    allocationLimit, setSummaryState, setTransactionId, setTotalNumbersForced, setCsvContent,\r\n    setAllocateByPrefixesStatus, setNotAllocatedNumbers, ...props\r\n}) => {\r\n\r\n    const [valueStartNumber, setValueStartNumber] = React.useState('');\r\n    const [valueForm, setValueForm] = React.useState({numbers: 1});\r\n    const [showRateInput, onChangeShowRateInput] = React.useState(null);\r\n    const [customRateValue, onChangeCustomRateValue] = React.useState(null);\r\n\r\n    const handleFormChange = async (newFormValues) => {\r\n        setValueForm(newFormValues);\r\n    };\r\n\r\n    const model = {\r\n        rate: NumberType()\r\n            .min(MIN_RATE_VALUE, `The minimum of this field is ${MIN_RATE_VALUE}`)\r\n            .max(10, 'The maximum of this field is 10'),\r\n        numbers: NumberType()\r\n            .isRequired('Required')\r\n            .isInteger('Only whole numbers')\r\n            .addRule((value, data) => {\r\n                if (value > valueAllocationLimit) {\r\n                    return false\r\n                }\r\n                return true;\r\n            }, `The maximum of this field is ${valueAllocationLimit}`),\r\n    };\r\n\r\n\r\n    const handleUpdateNew = ({trunk_number_transaction, not_allocated_numbers}) => {\r\n        if (trunk_number_transaction) {\r\n            const transactionId = trunk_number_transaction.id;\r\n            const summaryInfo = {...trunk_number_transaction};\r\n\r\n            getFileResponse(\"trunk_number:get_list\", {target: {trunk_number_transaction_id: transactionId}}, true)\r\n                .then((response) => {\r\n                    const csvText =  getBlobContent(response);\r\n                    csvText.then((text) => {\r\n                        setCsvContent(text);\r\n                    })\r\n                });\r\n\r\n            setSummaryState(summaryInfo);\r\n            setTransactionId(transactionId);\r\n\r\n            setTotalNumbersForced(summaryInfo.numbers);\r\n            setAllocateByPrefixesStatus(false);\r\n            setHideBufferButtons(false);\r\n            setNotAllocatedNumbers(not_allocated_numbers);\r\n            showResult();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <MyForm\r\n                activeTrunk={activeTrunk}\r\n                target={target}\r\n                method=\"allocation:number_sequence\"\r\n                checkResultKey='price_range_number_list'\r\n                update={handleUpdateNew}\r\n                {...props}\r\n                allocateByPrefixesStatus={null}\r\n                className=\"numberForm\"\r\n                onChange={handleFormChange}\r\n                formValue={valueForm}\r\n                addData={{\r\n                    rate: customRateValue !== null ? +customRateValue : null\r\n                }}\r\n                model={model}\r\n\r\n                deepCloned={true}\r\n            >\r\n\r\n                <Text\r\n                    name=\"start_number\"\r\n                    validationKey={null}\r\n                    label=\"First number\" width=\"md\"\r\n                    onChange={(value) => {\r\n                        setValueStartNumber(value);\r\n                    }}\r\n                    value={valueStartNumber}\r\n                    placeholder=\"1234567890\"\r\n                />\r\n\r\n                <NumberField name=\"numbers\" label=\"Amount\" min={1} max={valueAllocationLimit}/>\r\n\r\n                <br/>\r\n\r\n                {/* Show Rate form */}\r\n                {!showRateInput\r\n\r\n                    ? <div\r\n                        style={{cursor: 'pointer', margin: '8px 20px 0 0', display: 'inline-block'}}\r\n                        onClick={() => {onChangeShowRateInput(true)}}\r\n                    >\r\n                        <Icon icon=\"book\"\r\n                              inverse\r\n                              style={{color: showRateInput === null ? '#2f63bf' : '#5e2f9d', marginRight: '5px'}}\r\n                        />\r\n                        <a style={{color: showRateInput === null ? '#2f63bf' : '#5e2f9d',}}>Put custom rate</a>\r\n                    </div>\r\n                    : <>\r\n                        <div style={{display: 'inline-block', marginTop: '8px', marginRight: '10px'}}>Rate</div>\r\n                        <div style={{display: 'inline-block', marginRight: '10px'}}>\r\n                            <FormControl\r\n                                style={{width: 140}}\r\n                                errorPlacement=\"bottomStart\"\r\n                                placeholder=\"0.0001\"\r\n                                name=\"rate\"\r\n                                value={customRateValue}\r\n                                onChange={(value) => {\r\n                                    onChangeCustomRateValue(value);\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div style={{display: 'inline-block', marginTop: '8px', marginRight: '10px'}}>\r\n                            <Icon\r\n                                icon=\"close\"\r\n                                inverse\r\n                                style={{\r\n                                    color: '#5e2f9d',\r\n                                    marginRight: '5px',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                                onClick={() => {\r\n                                    onChangeShowRateInput(false);\r\n                                    onChangeCustomRateValue(null)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                }\r\n\r\n            </MyForm>\r\n        </>\r\n    );\r\n};","import React from 'react';\r\nimport MyForm from './../../../../../components/MyForm';\r\nimport Checkbox from '../../../../../hoc/Checkbox';\r\nimport NumberField from '../../../../../components/Form/NumberField';\r\nimport {ControlLabel, FlexboxGrid, Form, FormControl, FormGroup, Icon, Schema} from 'rsuite/es';\r\nimport {MIN_RATE_VALUE, valueAllocationLimit, valueAllocationLimitByPrefix} from 'const';\r\nimport {Input, SelectPicker} from \"rsuite\";\r\nimport {getBlobContent, splitList} from \"../../../../../utils\";\r\nimport {getFileResponse} from 'api/loginRoutes';\r\nimport {Spacer} from \"../../../../../components/base/Spacer\";\r\nimport styled from \"styled-components\";\r\n\r\nconst {NumberType} = Schema.Types;\r\n\r\nexport default ({\r\n    activeTab, onSelect, target, showResult, setHideBufferButtons, activeTrunk,\r\n    spAuth = false, allocateByPrefixesStatus = false, allocationLimit, setSummaryState, setCsvContent,\r\n    setTransactionId, setTotalNumbersForced, setAllocateByPrefixesStatus, setNotAllocatedNumbers, isMobile, ...props\r\n}) => {\r\n\r\n    const defaultNumberList = [\r\n        {key: 1, name: \"1\"},\r\n        {key: 10, name: \"10\"},\r\n        {key: 100, name: \"100\"},\r\n        {key: 1000, name: \"1000\"},\r\n        {key: 10000, name: \"10000\"},\r\n        {key: 100000, name: \"100000\"},\r\n        {key: 1000000, name: \"1000000\"}\r\n    ];\r\n\r\n    let timerid = null;\r\n    const [templateList, setTemplateList] = React.useState([]);\r\n    const [valueForm, setValueForm] = React.useState({random_number: true, numbers: 1});\r\n    const [showRateInput, onChangeShowRateInput] = React.useState(null);\r\n    const [customRateValue, onChangeCustomRateValue] = React.useState(null);\r\n\r\n    const handleFormChange = async (newFormValues) => {\r\n        setValueForm(newFormValues);\r\n    };\r\n\r\n    const changeTemplateList = (str) => {\r\n        clearTimeout(timerid);\r\n\r\n        timerid = setTimeout((str) => {\r\n\r\n            const list = str.trim()\r\n                .replace( /\\r?\\n/g, ' ')\r\n                .split(' ').filter( s => s !== \"\");\r\n\r\n            setTemplateList(list);\r\n        }, 300, str);\r\n    };\r\n\r\n    const changeSpAuthOption = (item) => {\r\n        setAllocateByPrefixesStatus(item);\r\n    };\r\n\r\n    const allocationLimitCondition = allocateByPrefixesStatus ? valueAllocationLimitByPrefix : valueAllocationLimit;\r\n\r\n    const model = {\r\n        rate: NumberType()\r\n            .min(MIN_RATE_VALUE, `The minimum of this field is ${MIN_RATE_VALUE}`)\r\n            .max(10, 'The maximum of this field is 10'),\r\n        numbers: NumberType()\r\n            .isRequired('Required')\r\n            .isInteger('Only whole numbers')\r\n            .addRule((value, data) => {\r\n                if (data.allocate_by_prefix !== undefined) {\r\n                    if (value > allocationLimitCondition) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true;\r\n            }, `The maximum of this field is ${allocationLimitCondition}`)\r\n    };\r\n\r\n\r\n    const handleUpdateNew = ({trunk_number_transaction, not_allocated_numbers}) => {\r\n        if (trunk_number_transaction) {\r\n            const transactionId = trunk_number_transaction.id;\r\n            const summaryInfo = {...trunk_number_transaction};\r\n\r\n            getFileResponse(\"trunk_number:get_list\", {target: {trunk_number_transaction_id: transactionId}}, true)\r\n                .then((response) => {\r\n                    const csvText =  getBlobContent(response);\r\n                    csvText.then((text) => {\r\n                        setCsvContent(text);\r\n                    })\r\n                });\r\n\r\n\r\n            setSummaryState(summaryInfo);\r\n            setTransactionId(transactionId);\r\n\r\n            setTotalNumbersForced(summaryInfo.numbers);\r\n            setHideBufferButtons(false);\r\n            setNotAllocatedNumbers(not_allocated_numbers);\r\n            showResult();\r\n        }\r\n    };\r\n\r\n    const rateField = (\r\n        <FlexboxGrid justify=\"start\" style={{margin: '0 0 20px 0'}}>\r\n            {!showRateInput\r\n\r\n                ? <FlexboxGrid.Item>\r\n                    <div\r\n                        style={{cursor: 'pointer', margin: '8px 20px 0 0', display: 'inline-block'}}\r\n                        onClick={() => {onChangeShowRateInput(true)}}\r\n                    >\r\n                        <Icon icon=\"book\"\r\n                              inverse\r\n                              style={{color: showRateInput === null ? '#2f63bf' : '#5e2f9d', marginRight: '5px'}}\r\n                        />\r\n                        <a style={{color: showRateInput === null ? '#2f63bf' : '#5e2f9d',}}>Put custom rate</a>\r\n                    </div>\r\n                </FlexboxGrid.Item>\r\n\r\n                : <FlexboxGrid.Item>\r\n                    <div style={{display: 'inline-block', marginTop: '8px', marginRight: '10px'}}>Rate</div>\r\n                    <div style={{display: 'inline-block', marginRight: '10px'}}>\r\n                        <FormControl\r\n                            style={{width: 140}}\r\n                            errorPlacement=\"bottomStart\"\r\n                            placeholder=\"0.0001\"\r\n                            name=\"rate\"\r\n                            value={customRateValue}\r\n                            onChange={(value) => {\r\n                                onChangeCustomRateValue(value);\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div style={{display: 'inline-block', marginTop: '8px', marginRight: '10px'}}>\r\n                        <Icon\r\n                            icon=\"close\"\r\n                            inverse\r\n                            style={{\r\n                                color: '#5e2f9d',\r\n                                marginRight: '5px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                            onClick={() => {\r\n                                onChangeShowRateInput(false);\r\n                                onChangeCustomRateValue(null)\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </FlexboxGrid.Item>\r\n            }\r\n        </FlexboxGrid>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <MyForm\r\n                activeTrunk={activeTrunk}\r\n                target={target}\r\n                method=\"allocation:template_list\"\r\n                checkResultKey='price_range_number_list'\r\n                update={handleUpdateNew}\r\n                allocateByPrefixesStatus={allocateByPrefixesStatus}\r\n                {...props}\r\n                className=\"numberForm\"\r\n                onChange={handleFormChange}\r\n                formValue={valueForm}\r\n                addData={{\r\n                    template_list: templateList,\r\n                    rate: customRateValue !== null ? +customRateValue : null\r\n                }}\r\n                model={model}\r\n\r\n                deepCloned={true}\r\n            >\r\n\r\n                {/* Show Rate form */}\r\n                {!isMobile && rateField}\r\n\r\n                <FormControl\r\n                    accepter={StyledTextarea}\r\n                    errorPlacement=\"topLeft\"\r\n                    componentClass=\"textarea\"\r\n                    className=\"test123\"\r\n                    classPreffix=\"test234\"\r\n                    name='template_list'\r\n                    onChange={changeTemplateList}\r\n                    rows={3}\r\n                    placeholder=\"Enter your numbers here\"\r\n                />\r\n\r\n                {allocateByPrefixesStatus && spAuth\r\n                    ? <FormGroup>\r\n                        <ControlLabel>Numbers per range</ControlLabel>\r\n                        <FormControl\r\n                            name=\"numbers\"\r\n                            validationKey=\"numbers_by_prefix\"\r\n                            accepter={SelectPicker}\r\n                            data={defaultNumberList.filter(amount => amount.key <= allocationLimitCondition)}\r\n                            style={{width: '135px'}}\r\n                            labelKey=\"name\"\r\n                            valueKey=\"key\"\r\n                            cleanable={false}\r\n                            searchable={false}\r\n                        />\r\n                    </FormGroup>\r\n                    : <NumberField name=\"numbers\" label=\"Numbers per template\" min={1} max={allocationLimitCondition}/>\r\n                }\r\n\r\n                <br style={{display: isMobile ? 'none' : 'block'}}/>\r\n\r\n                <Checkbox name=\"random_number\" defaultChecked>Random order</Checkbox>\r\n\r\n                <br style={{display: isMobile ? 'none' : 'block'}}/>\r\n\r\n                {spAuth &&\r\n                    <Checkbox\r\n                        name=\"allocate_by_prefix\"\r\n                        onChange={changeSpAuthOption}\r\n                        defaultChecked={allocateByPrefixesStatus}\r\n                    >\r\n                        Allocate by prefixes\r\n                    </Checkbox>\r\n                }\r\n\r\n                {isMobile && rateField}\r\n\r\n            </MyForm>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst StyledTextarea = styled(Input)`\r\n    &&& {\r\n        min-width: 1px;\r\n        width: 100%;\r\n        \r\n        @media (min-width: 767px) {\r\n            width: 40%;\r\n            height: 500px;\r\n            float: left;\r\n            margin-right: 5%;\r\n            min-width: 300px;\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport MyForm from '../../../../../components/MyForm/MyForm';\r\nimport Text from '../../../../../components/Form/Text';\r\nimport SDE from '../../../../../components/Filters/SDE';\r\nimport NumberField from '../../../../../components/Form/NumberField';\r\nimport styled from 'styled-components';\r\nimport {FormControl, Icon, Schema} from 'rsuite/es';\r\nimport {MIN_RATE_VALUE, valueAllocationLimitGoogleOTP} from 'const';\r\nimport {getFileResponse} from 'api/loginRoutes';\r\nimport {getBlobContent} from \"../../../../../utils\";\r\nimport {Spacer} from \"../../../../../components/base/Spacer\";\r\nimport {Input, Toggle} from \"rsuite\";\r\n\r\nconst {NumberType} = Schema.Types;\r\n\r\n\r\nexport default ({\r\n    activeTab, onSelect, target, showResult, setCsvContent, setSummaryState, setTransactionId,\r\n    setHideBufferButtons, spAuth = false, allocationLimit, setTotalNumbersForced, activeTrunk,\r\n    setNotAllocatedNumbers, isMobile, ...props\r\n}) => {\r\n\r\n    const [valueTemplate, setValueTemplate] = React.useState('');\r\n    const [valueSde, setValueSde] = React.useState(null);\r\n    const [pickedInput, changeInput] = React.useState(true); // true - template_list, false - subdestination\r\n    const [valueForm, setValueForm] = React.useState({numbers: 100});\r\n    const [showRateInput, onChangeShowRateInput] = React.useState(null);\r\n    const [customRateValue, onChangeCustomRateValue] = React.useState(null);\r\n    const [fieldsToRemove, setFieldsToRemove] = React.useState([]);\r\n\r\n    // callback: on Form change\r\n    const handleFormChange = async (newFormValues) => {\r\n        setValueForm(newFormValues);\r\n    };\r\n\r\n    const model = {\r\n        rate: NumberType()\r\n            .min(MIN_RATE_VALUE, `The minimum of this field is ${MIN_RATE_VALUE}`)\r\n            .max(10, 'The maximum of this field is 10'),\r\n        numbers: NumberType()\r\n            .isRequired('Required')\r\n            .isInteger('Only whole numbers')\r\n            .max(valueAllocationLimitGoogleOTP, `The maximum of this field is ${valueAllocationLimitGoogleOTP}`)\r\n            .addRule((value) => {\r\n                return !(value % 100);\r\n            }, 'The number must be a multiple of 100'),\r\n\r\n    };\r\n\r\n    // input: Template list\r\n    const templateInput = (\r\n        <StyledField>\r\n            <FormControl\r\n                accepter={StyledTextarea}\r\n                name=\"template_list\"\r\n                componentClass=\"textarea\"\r\n                label=\"Template list\"\r\n                width=\"md\"\r\n                onChange={(value) => {\r\n                    setValueTemplate(value);\r\n                }}\r\n                value={valueTemplate}\r\n                errorPlacement={\"topStart\"}\r\n                placeholder=\"Enter your templates here\"\r\n                onClick={() => {\r\n                    changeInput(true);\r\n                    setValueSde(null);\r\n                    setValueForm({\r\n                        ...valueForm,\r\n                        sde_key: undefined\r\n                    });\r\n                    setFieldsToRemove([\"sde_key\"]);\r\n                }}\r\n            />\r\n        </StyledField>\r\n    );\r\n\r\n\r\n    // input: SubDestination\r\n    const sdeInput = (\r\n        <StyledField>\r\n            <SDE\r\n                name=\"sde_key\"\r\n                onChange={(value) => {\r\n                    setValueSde(value);\r\n                }}\r\n                value={valueSde}\r\n                validationKey=\"num_required\"\r\n                useBr={!isMobile}\r\n                onClick={() => {\r\n\r\n                    changeInput(false);\r\n                    setValueTemplate(null);\r\n                    setValueForm({\r\n                        ...valueForm,\r\n                        template_list: undefined\r\n                    });\r\n                    setFieldsToRemove([\"template_list\"]);\r\n                }}\r\n            />\r\n        </StyledField>\r\n    );\r\n\r\n\r\n    const handleUpdateNew = ({trunk_number_transaction, not_allocated_numbers}) => {\r\n        if (trunk_number_transaction) {\r\n            const transactionId = trunk_number_transaction.id;\r\n            const summaryInfo = {...trunk_number_transaction};\r\n\r\n            getFileResponse(\"trunk_number:get_list\", {target: {trunk_number_transaction_id: transactionId}})\r\n                .then((response) => {\r\n                    const csvText = getBlobContent(response);\r\n                    csvText.then((text) => {\r\n                        setCsvContent(text);\r\n                    })\r\n                });\r\n\r\n            setSummaryState(summaryInfo);\r\n            setTransactionId(transactionId);\r\n\r\n            setTotalNumbersForced(summaryInfo.numbers);\r\n\r\n            setHideBufferButtons(false);\r\n            setNotAllocatedNumbers(not_allocated_numbers);\r\n            showResult();\r\n        }\r\n    };\r\n\r\n    const rateField = (\r\n        !showRateInput\r\n\r\n            ? <div\r\n                style={{cursor: 'pointer', margin: '8px 20px 0 0', display: 'inline-block'}}\r\n                onClick={() => {onChangeShowRateInput(true)}}\r\n            >\r\n                <Icon icon=\"book\"\r\n                      inverse\r\n                      style={{color: showRateInput === null ? '#2f63bf' : '#5e2f9d', marginRight: '5px'}}\r\n                />\r\n                <a style={{color: showRateInput === null ? '#2f63bf' : '#5e2f9d',}}>Put custom rate</a>\r\n            </div>\r\n            : <>\r\n                <div style={{display: 'inline-block', marginTop: '8px', marginRight: '10px'}}>Rate</div>\r\n                <div style={{display: 'inline-block', marginRight: '10px'}}>\r\n\r\n                    <FormControl\r\n                        style={{width: 140}}\r\n                        errorPlacement=\"bottomStart\"\r\n                        placeholder=\"0.0001\"\r\n                        name=\"rate\"\r\n                        value={customRateValue}\r\n                        onChange={(value) => {\r\n                            onChangeCustomRateValue(value);\r\n                        }}\r\n                    />\r\n\r\n                </div>\r\n                <div style={{display: 'inline-block', marginTop: '8px', marginRight: '10px'}}>\r\n                    <Icon\r\n                        icon=\"close\"\r\n                        inverse\r\n                        style={{\r\n                            color: '#5e2f9d',\r\n                            marginRight: '5px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                        onClick={() => {\r\n                            onChangeShowRateInput(false);\r\n                            onChangeCustomRateValue(null)\r\n                        }}\r\n                    />\r\n                </div>\r\n            </>\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <MyForm\r\n                activeTrunk={activeTrunk}\r\n                target={target}\r\n                method=\"allocation:google_otp\"\r\n                checkResultKey='price_range_number_list'\r\n                update={handleUpdateNew}\r\n                fieldsToRemove={fieldsToRemove}\r\n                className=\"numberForm\"\r\n                onChange={handleFormChange}\r\n                formValue={valueForm}\r\n                optionFields={true}\r\n                addData={{\r\n                    ...(pickedInput && valueTemplate ? {\r\n                        template_list: valueTemplate.replace( /\\r?\\n/g, ' ')\r\n                            .split(' ').filter( s => s !== \"\")\r\n                    } : {}),\r\n                    rate: customRateValue !== null ? +customRateValue : null\r\n                }}\r\n                model={model}\r\n                {...props}\r\n                allocateByPrefixesStatus={null}\r\n\r\n                deepCloned={true}\r\n            >\r\n\r\n                {!isMobile\r\n                    ? <>\r\n                        {!pickedInput\r\n                            ? <Fieldset name=\"template-disabled\"> {templateInput} </Fieldset>\r\n                            : templateInput\r\n                        }\r\n                        <span className=\"rs-form-inline rs-control-label\">or</span>\r\n                        {pickedInput\r\n                            ? <><Fieldset name=\"sde-disabled\"> {sdeInput} </Fieldset></>\r\n                            : sdeInput\r\n                        }\r\n                        <br/>\r\n                    </>\r\n                    : <>\r\n                        <StyledToggleWrapper>\r\n                            <StyledToggle\r\n                                // style={styles}\r\n                                size=\"lg\"\r\n                                checkedChildren={\"Template list\"}\r\n                                className=\"\"\r\n                                unCheckedChildren={\"Subdestination\"}\r\n                                defaultChecked={pickedInput}\r\n                                onChange={changeInput}\r\n                            />\r\n                        </StyledToggleWrapper>\r\n                        {pickedInput\r\n                            ? templateInput\r\n                            : sdeInput\r\n                        }\r\n                    </>\r\n                }\r\n\r\n                {/* Show Rate form */}\r\n                {!isMobile && rateField}\r\n\r\n                <StyledField>\r\n                     <NumberField\r\n                        name=\"numbers\"\r\n                        label=\"Numbers\"\r\n                        min={1}\r\n                        step={100}\r\n                        max={Infinity}\r\n                    />\r\n                </StyledField>\r\n\r\n                {isMobile && rateField}\r\n                <Spacer size={10} />\r\n            </MyForm>\r\n        </>\r\n    );\r\n};\r\n\r\nconst Fieldset = styled.fieldset`\r\n    border: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    display: inline-block;\r\n    position: relative;\r\n    \r\n    .rs-input,\r\n    .rs-btn {\r\n        cursor: not-allowed !important;\r\n    }\r\n    \r\n    > div > div > input {\r\n        cursor: not-allowed\r\n    }\r\n    > div > div {\r\n        opacity: 0.6;\r\n        color: #888888\r\n    }\r\n`;\r\n\r\nconst StyledToggleWrapper = styled.div`\r\n    && {\r\n        margin: 0;\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nconst StyledToggle = styled(Toggle)`\r\n    && {\r\n        background-color: #939191;\r\n        margin: 0 0 20px;\r\n        \r\n        &:hover {\r\n            background-color: #939191;\r\n        }\r\n    }\r\n    &.rs-btn-toggle-checked {\r\n        background-color: var(--color-brand1);\r\n        \r\n        &:hover {\r\n            background-color: var(--color-brand1);\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nconst StyledField = styled.div`\r\n    display: inline-block;\r\n    \r\n    @media (max-width: 567px) {\r\n        display: block;\r\n        padding-bottom: 10px;\r\n        \r\n        && .rs-control-label {\r\n            display: block;\r\n            margin-bottom: 5px;\r\n            margin-top: 0;\r\n        }\r\n        \r\n        && .rs-form-group {\r\n            display: block;\r\n        }\r\n    }\r\n`;\r\n\r\nconst StyledTextarea = styled(Input)`\r\n    &&& {\r\n        min-width: 1px;\r\n        width: 100%;\r\n        \r\n        @media (min-width: 767px) {\r\n            width: 40%;\r\n            height: 150px;\r\n            float: left;\r\n            margin-right: 5%;\r\n            min-width: 300px;\r\n        }\r\n    }\r\n`;","import {Nav} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nexport default styled(Nav)`\r\n    &&&&&& {\r\n        .rs-nav-waterline {\r\n            border-bottom: 1.5px solid #8256C8;\r\n            border-top: unset;\r\n        }\r\n        \r\n        .rs-nav-item-active {\r\n            .rs-nav-item-content {\r\n                border: 1.5px solid #8256C8;\r\n                border-bottom-color: #fff;\r\n                color: #8256c8;\r\n                padding: 7px 11px;\r\n            }\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport {Dropdown, FlexboxGrid, Icon, Nav} from 'rsuite';\r\nimport styled from \"styled-components\";\r\nimport { SP_OTP_TYPE } from 'const';\r\nimport BaseNav from \"../../../../../components/base/BaseNav\";\r\n\r\n\r\nexport default ({\r\n    activeTab,\r\n    onSelect,\r\n    spAuth,\r\n    spOtpType,\r\n    isMobile = false\r\n}) => {\r\n\r\n    const tabItems = [\r\n        {id: \"numberForm\", eventKey: \"numberForm\", title: \"Number allocation\"},\r\n        {id: \"massForm\", eventKey: \"massForm\", title: \"Mass allocation\"},\r\n        {id: \"listForm\", eventKey: \"listForm\", title: \"List allocation\"},\r\n        {id: \"templateListForm\", eventKey: \"templateListForm\", title: \"Template list allocation\"},\r\n        {id: \"sequenceForm\", eventKey: \"sequenceForm\", title: \"Sequence allocation\"},\r\n        ...[spOtpType === SP_OTP_TYPE ?\r\n            {id: \"googleOTP\", eventKey: \"googleOTP\", title: \"Google OTP\"}\r\n            : null\r\n        ],\r\n    ].filter(item => !!item);\r\n\r\n    const dropdownTitle = (tabItems.find(item => item.eventKey === activeTab) || {}).title;\r\n\r\n    if (isMobile)\r\n        return (\r\n            <StyledHeader>\r\n                <FlexboxGrid align={\"middle\"} justify={\"space-between\"}>\r\n                    <FlexboxGrid.Item>\r\n                        <Title>{dropdownTitle || \"Number allocation\"}</Title>\r\n                    </FlexboxGrid.Item>\r\n                    <FlexboxGrid.Item>\r\n                        <Dropdown\r\n                            appearance=\"ghost\"\r\n                            icon={<Icon icon={\"bars\"}/>}\r\n                            onSelect={onSelect}\r\n                            placement={\"bottomEnd\"}\r\n                            activeKey={activeTab}\r\n                        >\r\n                            {tabItems.map(item => (\r\n                                <Dropdown.Item key={item.id} eventKey={item.eventKey}>{item.title}</Dropdown.Item>\r\n                            ))}\r\n                        </Dropdown>\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n            </StyledHeader>\r\n        );\r\n\r\n    return (\r\n        <BaseNav\r\n            activeKey={activeTab}\r\n            onSelect={onSelect}\r\n            appearance=\"tabs\"\r\n            style={{marginBottom: 20}}\r\n        >\r\n            {tabItems.map(item => (\r\n                <Nav.Item key={item.id} eventKey={item.eventKey}>{item.title}</Nav.Item>\r\n            ))}\r\n        </BaseNav>\r\n    )\r\n};\r\n\r\nconst StyledHeader = styled.div`\r\n    position: relative;\r\n    margin-bottom: 20px;\r\n`;\r\n\r\nexport const Title = styled.div`\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    font-size: 18px;\r\n    line-height: 21px;\r\n    color: #8256C8;\r\n`;\r\n","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\r\nimport _isNil from \"lodash/isNil\";\r\nimport _isFunction from \"lodash/isFunction\";\r\nimport _isNumber from \"lodash/isNumber\";\r\nimport _isString from \"lodash/isString\";\r\nimport _omit from \"lodash/omit\";\r\nimport _get from \"lodash/get\";\r\nimport _isEmpty from \"lodash/isEmpty\";\r\nimport _isUndefined from \"lodash/isUndefined\";\r\nimport _isArray from \"lodash/isArray\";\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport List from 'react-virtualized/dist/commonjs/List';\r\nimport AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer';\r\nimport { CellMeasurerCache, CellMeasurer } from 'react-virtualized/dist/commonjs/CellMeasurer';\r\nimport { polyfill } from 'react-lifecycles-compat';\r\nimport shallowEqual from 'rsuite/es/utils/shallowEqual';\r\nimport TreeNode from 'rsuite/es/TreePicker/TreeNode';\r\nimport { defaultProps, prefix, defaultClassPrefix, getUnhandledProps, createChainedFunction, mergeRefs } from 'rsuite/es/utils';\r\nimport { flattenTree, getExpandWhenSearching, getNodeParents, shouldShowNodeByExpanded, getVirtualLisHeight, treeDeprecatedWarning, hasVisibleChildren, compareArray, getExpandAll, getExpandItemValues, getExpandState, getDragNodeKeys, calDropNodePosition, createUpdateTreeDataFunction } from 'rsuite/es/utils/treeUtils';\r\nimport { PickerToggle, getToggleWrapperClassName, onMenuKeyDown, MenuWrapper, SearchBar, PickerToggleTrigger, createConcatChildrenFunction, shouldDisplay } from 'rsuite/es/Picker';\r\nimport { TREE_NODE_DROP_POSITION } from 'rsuite/es/constants';\r\nimport { listPickerPropTypes, listPickerDefaultProps } from 'rsuite/es/Picker/propTypes'; // default value for virtualized\r\n\r\nvar defaultHeight = 360;\r\nvar defaultWidth = 200;\r\n\r\nvar TreePicker =\r\n    /*#__PURE__*/\r\n    function (_React$Component) {\r\n        _inheritsLoose(TreePicker, _React$Component);\r\n\r\n        function TreePicker(props) {\r\n            var _this;\r\n\r\n            _this = _React$Component.call(this, props) || this;\r\n            _this.menuRef = void 0;\r\n            _this.treeViewRef = void 0;\r\n            _this.positionRef = void 0;\r\n            _this.listRef = void 0;\r\n            _this.triggerRef = void 0;\r\n            _this.toggleRef = void 0;\r\n\r\n            _this.getFocusableMenuItems = function () {\r\n                var filterData = _this.state.filterData;\r\n                var _this$props = _this.props,\r\n                    childrenKey = _this$props.childrenKey,\r\n                    _this$props$disabledI = _this$props.disabledItemValues,\r\n                    disabledItemValues = _this$props$disabledI === void 0 ? [] : _this$props$disabledI,\r\n                    valueKey = _this$props.valueKey;\r\n                var items = [];\r\n\r\n                var loop = function loop(nodes) {\r\n                    nodes.forEach(function (node) {\r\n                        var nodeData = _extends({}, node, {}, _this.nodes[node.refKey]);\r\n\r\n                        var disabled = disabledItemValues.some(function (disabledItem) {\r\n                            return shallowEqual(disabledItem, node[valueKey]);\r\n                        });\r\n\r\n                        if (!disabled) {\r\n                            items.push(node);\r\n                        }\r\n\r\n                        if (node[childrenKey] && getExpandState(nodeData, _this.props)) {\r\n                            loop(node[childrenKey]);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                loop(filterData);\r\n                return items;\r\n            };\r\n\r\n            _this.getElementByDataKey = function (dataKey) {\r\n                var ele = _this.nodeRefs[dataKey];\r\n\r\n                if (ele instanceof Element) {\r\n                    return ele.querySelector(\".\" + _this.addTreePrefix('node-label'));\r\n                }\r\n\r\n                return null;\r\n            };\r\n\r\n            _this.nodes = {};\r\n            _this.node = null;\r\n            _this.cache = new CellMeasurerCache({\r\n                fixedWidth: true,\r\n                minHeight: 20\r\n            });\r\n            _this.nodeRefs = {};\r\n            _this.dragNode = null;\r\n\r\n            _this.bindNodeRefs = function (refKey, ref) {\r\n                _this.nodeRefs[refKey] = ref;\r\n            };\r\n\r\n            _this.getPositionInstance = function () {\r\n                return _this.positionRef.current;\r\n            };\r\n\r\n            _this.getToggleInstance = function () {\r\n                return _this.toggleRef.current;\r\n            };\r\n\r\n            _this.addPrefix = function (name) {\r\n                return prefix(_this.props.classPrefix)(name);\r\n            };\r\n\r\n            _this.addTreePrefix = function (name) {\r\n                return prefix(defaultClassPrefix('tree'))(name);\r\n            };\r\n\r\n            _this.selectActiveItem = function (event) {\r\n                var _this$getActiveItem = _this.getActiveItem(),\r\n                    nodeData = _this$getActiveItem.nodeData;\r\n\r\n                _this.handleSelect(nodeData, event);\r\n            };\r\n\r\n            _this.focusNextItem = function () {\r\n                var _node$focus;\r\n\r\n                var _this$getItemsAndActi = _this.getItemsAndActiveIndex(),\r\n                    items = _this$getItemsAndActi.items,\r\n                    activeIndex = _this$getItemsAndActi.activeIndex;\r\n\r\n                if (items.length === 0) {\r\n                    return;\r\n                }\r\n\r\n                var nextIndex = activeIndex === items.length - 1 ? 0 : activeIndex + 1;\r\n\r\n                var node = _this.getElementByDataKey(items[nextIndex].refKey);\r\n\r\n                node === null || node === void 0 ? void 0 : (_node$focus = node.focus) === null || _node$focus === void 0 ? void 0 : _node$focus.call(node);\r\n            };\r\n\r\n            _this.focusPreviousItem = function () {\r\n                var _node$focus2;\r\n\r\n                var _this$getItemsAndActi2 = _this.getItemsAndActiveIndex(),\r\n                    items = _this$getItemsAndActi2.items,\r\n                    activeIndex = _this$getItemsAndActi2.activeIndex;\r\n\r\n                if (items.length === 0) {\r\n                    return;\r\n                }\r\n\r\n                var prevIndex = activeIndex === 0 ? items.length - 1 : activeIndex - 1;\r\n                prevIndex = prevIndex >= 0 ? prevIndex : 0;\r\n\r\n                var node = _this.getElementByDataKey(items[prevIndex].refKey);\r\n\r\n                node === null || node === void 0 ? void 0 : (_node$focus2 = node.focus) === null || _node$focus2 === void 0 ? void 0 : _node$focus2.call(node);\r\n            };\r\n\r\n            _this.handleCloseDropdown = function () {\r\n                var _this$triggerRef$curr, _this$triggerRef$curr2;\r\n\r\n                (_this$triggerRef$curr = _this.triggerRef.current) === null || _this$triggerRef$curr === void 0 ? void 0 : (_this$triggerRef$curr2 = _this$triggerRef$curr.hide) === null || _this$triggerRef$curr2 === void 0 ? void 0 : _this$triggerRef$curr2.call(_this$triggerRef$curr);\r\n            };\r\n\r\n            _this.handleOpenDropdown = function () {\r\n                var _this$triggerRef$curr3, _this$triggerRef$curr4;\r\n\r\n                (_this$triggerRef$curr3 = _this.triggerRef.current) === null || _this$triggerRef$curr3 === void 0 ? void 0 : (_this$triggerRef$curr4 = _this$triggerRef$curr3.show) === null || _this$triggerRef$curr4 === void 0 ? void 0 : _this$triggerRef$curr4.call(_this$triggerRef$curr3);\r\n            };\r\n\r\n            _this.open = function () {\r\n                var _this$handleOpenDropd, _this2;\r\n\r\n                (_this$handleOpenDropd = (_this2 = _this).handleOpenDropdown) === null || _this$handleOpenDropd === void 0 ? void 0 : _this$handleOpenDropd.call(_this2);\r\n            };\r\n\r\n            _this.close = function () {\r\n                var _this$handleCloseDrop, _this3;\r\n\r\n                (_this$handleCloseDrop = (_this3 = _this).handleCloseDropdown) === null || _this$handleCloseDrop === void 0 ? void 0 : _this$handleCloseDrop.call(_this3);\r\n            };\r\n\r\n            _this.handleToggleDropdown = function () {\r\n                var active = _this.state.active;\r\n\r\n                if (active) {\r\n                    _this.handleCloseDropdown();\r\n\r\n                    return;\r\n                }\r\n\r\n                _this.handleOpenDropdown();\r\n            };\r\n\r\n            _this.handleToggle = function (nodeData) {\r\n                var _this$props2 = _this.props,\r\n                    valueKey = _this$props2.valueKey,\r\n                    childrenKey = _this$props2.childrenKey,\r\n                    onExpand = _this$props2.onExpand,\r\n                    expandItemValues = _this$props2.expandItemValues;\r\n\r\n                var nextExpandItemValues = _this.toggleExpand(nodeData, !nodeData.expand);\r\n\r\n                if (_isUndefined(expandItemValues)) {\r\n                    _this.unserializeLists('expand', nextExpandItemValues);\r\n\r\n                    _this.setState({\r\n                        expandItemValues: nextExpandItemValues\r\n                    });\r\n                }\r\n\r\n                onExpand === null || onExpand === void 0 ? void 0 : onExpand(nextExpandItemValues, nodeData, createConcatChildrenFunction(nodeData, nodeData[valueKey], {\r\n                    valueKey: valueKey,\r\n                    childrenKey: childrenKey\r\n                }));\r\n            };\r\n\r\n            _this.handleSelect = function (nodeData, event) {\r\n                var _this$toggleRef$curre;\r\n\r\n                var _this$props3 = _this.props,\r\n                    valueKey = _this$props3.valueKey,\r\n                    onChange = _this$props3.onChange,\r\n                    onSelect = _this$props3.onSelect,\r\n                    value = _this$props3.value;\r\n                _this.node = nodeData;\r\n\r\n                if (_isUndefined(value)) {\r\n                    _this.setState({\r\n                        activeNode: nodeData,\r\n                        selectedValue: nodeData[valueKey]\r\n                    });\r\n                }\r\n\r\n                onChange === null || onChange === void 0 ? void 0 : onChange(nodeData[valueKey], event);\r\n                onSelect === null || onSelect === void 0 ? void 0 : onSelect(nodeData, nodeData[valueKey], event);\r\n\r\n                _this.handleCloseDropdown();\r\n\r\n                (_this$toggleRef$curre = _this.toggleRef.current) === null || _this$toggleRef$curre === void 0 ? void 0 : _this$toggleRef$curre.onFocus();\r\n            };\r\n\r\n            _this.handleKeyDown = function (event) {\r\n                onMenuKeyDown(event, {\r\n                    down: _this.focusNextItem,\r\n                    up: _this.focusPreviousItem,\r\n                    enter: _this.selectActiveItem,\r\n                    del: _this.handleClean\r\n                });\r\n            };\r\n\r\n            _this.handleToggleKeyDown = function (event) {\r\n                var _this$state = _this.state,\r\n                    activeNode = _this$state.activeNode,\r\n                    active = _this$state.active; // enter\r\n\r\n                if ((!activeNode || !active) && event.keyCode === 13) {\r\n                    _this.handleToggleDropdown();\r\n                } // delete\r\n\r\n\r\n                if (event.keyCode === 8) {\r\n                    _this.handleClean(event);\r\n                }\r\n\r\n                if (!_this.treeViewRef.current) {\r\n                    return;\r\n                }\r\n\r\n                if (event.target instanceof HTMLElement) {\r\n                    var className = event.target.className;\r\n\r\n                    if (className.includes(_this.addPrefix('toggle')) || className.includes(_this.addPrefix('toggle-custom')) || className.includes(_this.addPrefix('search-bar-input'))) {\r\n                        onMenuKeyDown(event, {\r\n                            down: _this.focusNextItem\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n\r\n            _this.handleSearch = function (value, event) {\r\n                var filterData = _this.state.filterData;\r\n                var _this$props4 = _this.props,\r\n                    onSearch = _this$props4.onSearch,\r\n                    searchKeyword = _this$props4.searchKeyword;\r\n\r\n                if (_isUndefined(searchKeyword)) {\r\n                    _this.setState({\r\n                        searchKeyword: value,\r\n                        filterData: _this.getFilterData(filterData, value)\r\n                    });\r\n                }\r\n\r\n                onSearch === null || onSearch === void 0 ? void 0 : onSearch(value, event);\r\n            };\r\n\r\n            _this.handleClean = function (event) {\r\n                var _this$props$onChange, _this$props5;\r\n\r\n                _this.setState({\r\n                    activeNode: null,\r\n                    selectedValue: null\r\n                });\r\n\r\n                _this.node = null;\r\n                (_this$props$onChange = (_this$props5 = _this.props).onChange) === null || _this$props$onChange === void 0 ? void 0 : _this$props$onChange.call(_this$props5, null, event);\r\n            };\r\n\r\n            _this.handleOnOpen = function () {\r\n                var _this$props$onOpen, _this$props6;\r\n\r\n                var activeNode = _this.state.activeNode;\r\n\r\n                if (activeNode) {\r\n                    var _node$focus3;\r\n\r\n                    var node = _this.getElementByDataKey(activeNode.refKey);\r\n\r\n                    node === null || node === void 0 ? void 0 : (_node$focus3 = node.focus) === null || _node$focus3 === void 0 ? void 0 : _node$focus3.call(node);\r\n                }\r\n\r\n                (_this$props$onOpen = (_this$props6 = _this.props).onOpen) === null || _this$props$onOpen === void 0 ? void 0 : _this$props$onOpen.call(_this$props6);\r\n\r\n                _this.setState({\r\n                    active: true\r\n                });\r\n            };\r\n\r\n            _this.handleOnClose = function () {\r\n                var filterData = _this.state.filterData;\r\n                var _this$props7 = _this.props,\r\n                    searchKeyword = _this$props7.searchKeyword,\r\n                    onClose = _this$props7.onClose;\r\n\r\n                if (_isUndefined(searchKeyword)) {\r\n                    _this.setState({\r\n                        searchKeyword: '',\r\n                        filterData: _this.getFilterData(filterData, '')\r\n                    });\r\n                }\r\n\r\n                onClose === null || onClose === void 0 ? void 0 : onClose();\r\n\r\n                _this.setState({\r\n                    active: false\r\n                });\r\n            };\r\n\r\n            _this.handleDragStart = function (nodeData, event) {\r\n                var _this$props8 = _this.props,\r\n                    valueKey = _this$props8.valueKey,\r\n                    childrenKey = _this$props8.childrenKey,\r\n                    onDragStart = _this$props8.onDragStart,\r\n                    draggable = _this$props8.draggable;\r\n\r\n                if (draggable) {\r\n                    _this.setState({\r\n                        dragging: true,\r\n                        dragNodeKeys: getDragNodeKeys(nodeData, childrenKey, valueKey)\r\n                    });\r\n\r\n                    _this.dragNode = _this.nodes[nodeData.refKey];\r\n                    onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(nodeData, event);\r\n                }\r\n            };\r\n\r\n            _this.handleDragEnter = function (nodeData, event) {\r\n                var _this$state2 = _this.state,\r\n                    dragging = _this$state2.dragging,\r\n                    dragNodeKeys = _this$state2.dragNodeKeys;\r\n                var _this$props9 = _this.props,\r\n                    valueKey = _this$props9.valueKey,\r\n                    onDragEnter = _this$props9.onDragEnter;\r\n\r\n                if (dragNodeKeys.some(function (d) {\r\n                    return shallowEqual(d, nodeData[valueKey]);\r\n                })) {\r\n                    return;\r\n                }\r\n\r\n                if (dragging && _this.dragNode) {\r\n                    var dropNodePosition = calDropNodePosition(event, _this.nodeRefs[nodeData.refKey]);\r\n\r\n                    _this.setState({\r\n                        dragOverNodeKey: nodeData[valueKey],\r\n                        dropNodePosition: dropNodePosition\r\n                    });\r\n                }\r\n\r\n                onDragEnter === null || onDragEnter === void 0 ? void 0 : onDragEnter(nodeData, event);\r\n            };\r\n\r\n            _this.handleDragOver = function (nodeData, event) {\r\n                var _this$state3 = _this.state,\r\n                    dragNodeKeys = _this$state3.dragNodeKeys,\r\n                    dragOverNodeKey = _this$state3.dragOverNodeKey,\r\n                    dropNodePosition = _this$state3.dropNodePosition;\r\n                var _this$props10 = _this.props,\r\n                    valueKey = _this$props10.valueKey,\r\n                    onDragOver = _this$props10.onDragOver;\r\n\r\n                if (dragNodeKeys.some(function (d) {\r\n                    return shallowEqual(d, nodeData[valueKey]);\r\n                })) {\r\n                    return;\r\n                }\r\n\r\n                if (_this.dragNode && shallowEqual(nodeData[valueKey], dragOverNodeKey)) {\r\n                    var lastDropNodePosition = calDropNodePosition(event, _this.nodeRefs[nodeData.refKey]);\r\n                    if (lastDropNodePosition === dropNodePosition) return;\r\n\r\n                    _this.setState({\r\n                        dropNodePosition: lastDropNodePosition\r\n                    });\r\n                }\r\n\r\n                onDragOver === null || onDragOver === void 0 ? void 0 : onDragOver(nodeData, event);\r\n            };\r\n\r\n            _this.handleDragLeave = function (nodeData, event) {\r\n                var onDragLeave = _this.props.onDragLeave;\r\n                onDragLeave === null || onDragLeave === void 0 ? void 0 : onDragLeave(nodeData, event);\r\n            };\r\n\r\n            _this.handleDragEnd = function (nodeData, event) {\r\n                var onDragEnd = _this.props.onDragEnd;\r\n\r\n                _this.setState({\r\n                    dragging: false,\r\n                    dragNodeKeys: [],\r\n                    dragOverNodeKey: null\r\n                });\r\n\r\n                onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(nodeData, event);\r\n            };\r\n\r\n            _this.handleDrop = function (nodeData, event) {\r\n                var dragNodeKeys = _this.state.dragNodeKeys;\r\n                var _this$props11 = _this.props,\r\n                    valueKey = _this$props11.valueKey,\r\n                    onDrop = _this$props11.onDrop;\r\n\r\n                if (dragNodeKeys.some(function (d) {\r\n                    return shallowEqual(d, nodeData[valueKey]);\r\n                })) {\r\n                    console.error('Cannot drag a node to itself and its children');\r\n                } else {\r\n                    var dropData = _this.getDropData(nodeData);\r\n\r\n                    onDrop === null || onDrop === void 0 ? void 0 : onDrop(dropData, event);\r\n                }\r\n\r\n                _this.setState({\r\n                    dragging: false,\r\n                    dragNodeKeys: [],\r\n                    dragOverNodeKey: null,\r\n                    dropNodePosition: null\r\n                });\r\n\r\n                _this.dragNode = null;\r\n            };\r\n\r\n            _this.measureRowRenderer = function (nodes) {\r\n                return function (_ref) {\r\n                    var key = _ref.key,\r\n                        index = _ref.index,\r\n                        style = _ref.style,\r\n                        parent = _ref.parent;\r\n                    var node = nodes[index];\r\n                    return React.createElement(CellMeasurer, {\r\n                        cache: _this.cache,\r\n                        columnIndex: 0,\r\n                        key: key,\r\n                        rowIndex: index,\r\n                        parent: parent\r\n                    }, function () {\r\n                        return _this.renderVirtualNode(node, {\r\n                            key: key,\r\n                            style: style\r\n                        });\r\n                    });\r\n                };\r\n            };\r\n\r\n            var _value = props.value,\r\n                data = props.data,\r\n                _valueKey = props.valueKey,\r\n                _props$searchKeyword = props.searchKeyword,\r\n                _searchKeyword = _props$searchKeyword === void 0 ? '' : _props$searchKeyword;\r\n\r\n            var nextData = [].concat(data);\r\n\r\n            var _nextExpandItemValues = getExpandItemValues(props);\r\n\r\n            _this.flattenNodes(nextData);\r\n\r\n            _this.unserializeLists('expand', _nextExpandItemValues, props);\r\n\r\n            _this.state = {\r\n                data: data,\r\n                value: _value,\r\n                dragging: false,\r\n                selectedValue: _this.getValue(props),\r\n                expandAll: getExpandAll(props),\r\n                filterData: _this.getFilterData(nextData, _searchKeyword, props),\r\n                activeNode: _this.getActiveNode(_this.getValue(props), _valueKey),\r\n                searchKeyword: _searchKeyword,\r\n                expandItemValues: _this.serializeList('expand'),\r\n                dragNodeKeys: [],\r\n                dragOverNodeKey: null,\r\n                dropNodePosition: null\r\n            };\r\n            _this.treeViewRef = React.createRef();\r\n            _this.positionRef = React.createRef();\r\n            _this.listRef = React.createRef();\r\n            _this.triggerRef = React.createRef();\r\n            _this.toggleRef = React.createRef(); // for test\r\n\r\n            _this.menuRef = React.createRef();\r\n            treeDeprecatedWarning(props, ['expandAll']);\r\n            return _this;\r\n        }\r\n\r\n        var _proto = TreePicker.prototype;\r\n\r\n        _proto.componentDidMount = function componentDidMount() {\r\n\r\n            // applesinkin changed\r\n            // var activeNode = this.state.activeNode;\r\n            // this.focusNode(activeNode);\r\n\r\n        };\r\n\r\n        TreePicker.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\r\n            var value = nextProps.value,\r\n                data = nextProps.data,\r\n                expandAll = nextProps.expandAll,\r\n                searchKeyword = nextProps.searchKeyword,\r\n                expandItemValues = nextProps.expandItemValues;\r\n            var nextState = {};\r\n\r\n            if (_isArray(data) && _isArray(prevState.data) && prevState.data !== data) {\r\n                nextState.data = data;\r\n            }\r\n\r\n            if (!shallowEqual(value, prevState.value)) {\r\n                nextState.value = value;\r\n                nextState.selectedValue = value;\r\n            }\r\n\r\n            if (compareArray(expandItemValues, prevState.expandItemValues)) {\r\n                nextState.expandItemValues = expandItemValues;\r\n            }\r\n\r\n            if (!_isUndefined(searchKeyword) && searchKeyword !== prevState.searchKeyword) {\r\n                nextState.searchKeyword = searchKeyword;\r\n            }\r\n\r\n            if (expandAll !== prevState.expandAll) {\r\n                nextState.expandAll = expandAll;\r\n            }\r\n\r\n            return Object.keys(nextState).length ? nextState : null;\r\n        };\r\n\r\n        _proto.componentDidUpdate = function componentDidUpdate(_prevProps, prevState) {\r\n            this.updateDataChange(prevState);\r\n            this.updateValueChange(prevState);\r\n            this.updateExpandItemValuesChange(prevState);\r\n            this.updateSearchKeywordChange(prevState);\r\n\r\n            if (this.listRef.current) {\r\n                this.listRef.current.forceUpdateGrid();\r\n            }\r\n        };\r\n\r\n        _proto.updateDataChange = function updateDataChange(prevState) {\r\n            var _this$state4 = this.state,\r\n                searchKeyword = _this$state4.searchKeyword,\r\n                expandItemValues = _this$state4.expandItemValues;\r\n            var data = this.props.data;\r\n\r\n            if (prevState.data !== data) {\r\n                var nextData = [].concat(data);\r\n                this.flattenNodes(nextData);\r\n                var filterData = this.getFilterData(nextData, searchKeyword);\r\n                var activeNode = this.getActiveNode(this.getValue());\r\n\r\n                // applesinkin changed\r\n                // this.focusNode(activeNode);\r\n\r\n                this.unserializeLists('expand', expandItemValues);\r\n                var newState = {};\r\n\r\n                if (activeNode) {\r\n                    newState = {\r\n                        activeNode: activeNode\r\n                    };\r\n                }\r\n\r\n                this.setState(_extends({}, {\r\n                    data: nextData,\r\n                    filterData: filterData,\r\n                    expandItemValues: this.serializeList('expand')\r\n                }, {}, newState));\r\n            }\r\n        };\r\n\r\n        _proto.updateValueChange = function updateValueChange(prevState) {\r\n            var _this$props12 = this.props,\r\n                value = _this$props12.value,\r\n                valueKey = _this$props12.valueKey;\r\n\r\n            if (!shallowEqual(prevState.value, value)) {\r\n                var activeNode = null;\r\n\r\n                if (this.node === null) {\r\n                    activeNode = this.getActiveNode(value);\r\n                }\r\n\r\n                if (value !== null && this.node !== null) {\r\n                    activeNode = shallowEqual(this.node[valueKey], value) ? this.node : this.getActiveNode(value);\r\n                }\r\n\r\n                var nextState = {\r\n                    value: value,\r\n                    activeNode: activeNode\r\n                };\r\n\r\n                if (value === null) {\r\n                    nextState.activeNode = null;\r\n                    this.node = null;\r\n                }\r\n\r\n                if (activeNode !== null) {\r\n                    this.focusNode(activeNode);\r\n                }\r\n\r\n                this.setState(nextState);\r\n            }\r\n        };\r\n\r\n        _proto.updateExpandItemValuesChange = function updateExpandItemValuesChange(prevState) {\r\n            var expandItemValues = this.props.expandItemValues;\r\n\r\n            if (compareArray(expandItemValues, prevState.expandItemValues)) {\r\n                this.unserializeLists('expand', expandItemValues);\r\n                this.setState({\r\n                    expandItemValues: expandItemValues\r\n                });\r\n            }\r\n        };\r\n\r\n        _proto.updateSearchKeywordChange = function updateSearchKeywordChange(prevState) {\r\n            var filterData = this.state.filterData;\r\n\r\n            if (!_isUndefined(this.props.searchKeyword) && prevState.searchKeyword !== this.props.searchKeyword) {\r\n                this.setState({\r\n                    filterData: this.getFilterData(filterData, this.props.searchKeyword)\r\n                });\r\n            }\r\n        };\r\n\r\n        _proto.getValue = function getValue(props) {\r\n            if (props === void 0) {\r\n                props = this.props;\r\n            }\r\n\r\n            var _props = props,\r\n                value = _props.value,\r\n                defaultValue = _props.defaultValue;\r\n            return !_isUndefined(value) ? value : defaultValue;\r\n        };\r\n\r\n        _proto.getActiveNode = function getActiveNode(value, valueKey) {\r\n            var _this4 = this;\r\n\r\n            if (valueKey === void 0) {\r\n                valueKey = this.props.valueKey;\r\n            }\r\n\r\n            var activeNode = null;\r\n\r\n            if (!_isUndefined(value)) {\r\n                Object.keys(this.nodes).forEach(function (refKey) {\r\n                    if (shallowEqual(_this4.nodes[refKey][valueKey], value)) {\r\n                        activeNode = _this4.nodes[refKey];\r\n                    }\r\n                });\r\n            }\r\n\r\n            return activeNode;\r\n        };\r\n\r\n        _proto.getActiveElementOption = function getActiveElementOption(options, value) {\r\n            var childrenKey = this.props.childrenKey;\r\n\r\n            for (var i = 0; i < options.length; i += 1) {\r\n                var _options$i$childrenKe;\r\n\r\n                if (options[i].value === value) {\r\n                    return options[i];\r\n                } else if ((_options$i$childrenKe = options[i][childrenKey]) === null || _options$i$childrenKe === void 0 ? void 0 : _options$i$childrenKe.length) {\r\n                    var active = this.getActiveElementOption(options[i][childrenKey], value);\r\n\r\n                    if (!_isEmpty(active)) {\r\n                        return active;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return {};\r\n        };\r\n\r\n        _proto.getItemsAndActiveIndex = function getItemsAndActiveIndex() {\r\n            var items = this.getFocusableMenuItems();\r\n            var activeIndex = -1;\r\n            items.forEach(function (item, index) {\r\n                if (document.activeElement !== null) {\r\n                    if (item.refKey === document.activeElement.getAttribute('data-key')) {\r\n                        activeIndex = index;\r\n                    }\r\n                }\r\n            });\r\n            return {\r\n                items: items,\r\n                activeIndex: activeIndex\r\n            };\r\n        };\r\n\r\n        _proto.getActiveItem = function getActiveItem() {\r\n            var nodeData = {};\r\n            var activeItem = document.activeElement;\r\n\r\n            if (activeItem !== null) {\r\n                var _get2 = _get(activeItem, 'dataset'),\r\n                    key = _get2.key,\r\n                    layer = _get2.layer;\r\n\r\n                var activeNode = this.nodes[key];\r\n\r\n                if (activeNode) {\r\n                    nodeData = activeNode;\r\n                }\r\n\r\n                return {\r\n                    nodeData: nodeData,\r\n                    layer: layer\r\n                };\r\n            }\r\n\r\n            return {};\r\n        };\r\n\r\n        _proto.getFilterData = function getFilterData(data, word, props) {\r\n            if (word === void 0) {\r\n                word = '';\r\n            }\r\n\r\n            var _ref2 = props || this.props,\r\n                labelKey = _ref2.labelKey,\r\n                childrenKey = _ref2.childrenKey,\r\n                searchBy = _ref2.searchBy;\r\n\r\n            var setVisible = function setVisible(nodes) {\r\n                if (nodes === void 0) {\r\n                    nodes = [];\r\n                }\r\n\r\n                return nodes.forEach(function (item) {\r\n                    item.visible = searchBy ? searchBy(word, item[labelKey], item) : shouldDisplay(item[labelKey], word);\r\n\r\n                    if (_isArray(item[childrenKey])) {\r\n                        setVisible(item[childrenKey]);\r\n                        item[childrenKey].forEach(function (child) {\r\n                            if (child.visible) {\r\n                                item.visible = child.visible;\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n\r\n            if (!_isUndefined(word)) {\r\n                setVisible(data);\r\n            }\r\n\r\n            return data;\r\n        };\r\n\r\n        _proto.getFlattenTreeData = function getFlattenTreeData(nodes) {\r\n            var _this5 = this;\r\n\r\n            var expandItemValues = this.state.expandItemValues;\r\n            var _this$props13 = this.props,\r\n                childrenKey = _this$props13.childrenKey,\r\n                valueKey = _this$props13.valueKey;\r\n            return flattenTree(nodes, childrenKey, function (node) {\r\n                var formatted = {};\r\n                var curNode = _this5.nodes[node.refKey];\r\n                var parentKeys = getNodeParents(curNode, 'parentNode', valueKey);\r\n\r\n                if (curNode) {\r\n                    formatted = _extends({}, node, {\r\n                        expand: curNode.expand,\r\n                        layer: curNode.layer,\r\n                        parentNode: curNode.parentNode,\r\n                        showNode: shouldShowNodeByExpanded(expandItemValues, parentKeys)\r\n                    });\r\n                }\r\n\r\n                return formatted;\r\n            });\r\n        };\r\n\r\n        _proto.getTreeNodeProps = function getTreeNodeProps(node, layer, index) {\r\n            var _this$state5 = this.state,\r\n                dragOverNodeKey = _this$state5.dragOverNodeKey,\r\n                selectedValue = _this$state5.selectedValue,\r\n                dropNodePosition = _this$state5.dropNodePosition;\r\n            var dragNode = this.dragNode || {};\r\n            var _this$props14 = this.props,\r\n                locale = _this$props14.locale,\r\n                valueKey = _this$props14.valueKey,\r\n                labelKey = _this$props14.labelKey,\r\n                draggable = _this$props14.draggable,\r\n                childrenKey = _this$props14.childrenKey,\r\n                _this$props14$disable = _this$props14.disabledItemValues,\r\n                disabledItemValues = _this$props14$disable === void 0 ? [] : _this$props14$disable,\r\n                renderTreeNode = _this$props14.renderTreeNode,\r\n                renderTreeIcon = _this$props14.renderTreeIcon;\r\n            return {\r\n                rtl: locale.rtl,\r\n                value: node[valueKey],\r\n                label: node[labelKey],\r\n                index: index,\r\n                layer: layer,\r\n                expand: node.expand,\r\n                active: shallowEqual(node[valueKey], selectedValue),\r\n                visible: node.visible,\r\n                draggable: draggable,\r\n                dragging: shallowEqual(node[valueKey], dragNode[valueKey]),\r\n                children: node[childrenKey],\r\n                nodeData: node,\r\n                disabled: disabledItemValues.some(function (disabledItem) {\r\n                    return shallowEqual(disabledItem, node[valueKey]);\r\n                }),\r\n                dragOver: shallowEqual(node[valueKey], dragOverNodeKey) && dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER,\r\n                dragOverTop: shallowEqual(node[valueKey], dragOverNodeKey) && dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_TOP,\r\n                dragOverBottom: shallowEqual(node[valueKey], dragOverNodeKey) && dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM,\r\n                onSelect: this.handleSelect,\r\n                onDragStart: this.handleDragStart,\r\n                onDragEnter: this.handleDragEnter,\r\n                onDragOver: this.handleDragOver,\r\n                onDragLeave: this.handleDragLeave,\r\n                onDragEnd: this.handleDragEnd,\r\n                onDrop: this.handleDrop,\r\n                onTreeToggle: this.handleToggle,\r\n                onRenderTreeNode: renderTreeNode,\r\n                onRenderTreeIcon: renderTreeIcon\r\n            };\r\n        }\r\n        /**\r\n         * 获取 onDrop 的回调数据\r\n         */\r\n        ;\r\n\r\n        _proto.getDropData = function getDropData(nodeData) {\r\n            var dropNodePosition = this.state.dropNodePosition;\r\n            var _this$props15 = this.props,\r\n                valueKey = _this$props15.valueKey,\r\n                childrenKey = _this$props15.childrenKey;\r\n            var options = {\r\n                valueKey: valueKey,\r\n                childrenKey: childrenKey\r\n            };\r\n\r\n            var dragNode = _omit(this.dragNode, 'parentNode');\r\n\r\n            return {\r\n                /** 拖拽节点 */\r\n                dragNode: dragNode,\r\n\r\n                /** 释放所在节点的父节点 */\r\n                dropNode: nodeData,\r\n\r\n                /** 拖拽节点的类型 */\r\n                dropNodePosition: dropNodePosition,\r\n                createUpdateDataFunction: createUpdateTreeDataFunction({\r\n                    /** 拖拽节点 */\r\n                    dragNode: dragNode,\r\n\r\n                    /** 释放所在节点的父节点 */\r\n                    dropNode: nodeData,\r\n\r\n                    /** 拖拽节点的类型 */\r\n                    dropNodePosition: dropNodePosition\r\n                }, options)\r\n            };\r\n        };\r\n\r\n        _proto.focusNode = function focusNode(activeNode) {\r\n            var inline = this.props.inline;\r\n\r\n            if (activeNode && inline) {\r\n                var _node$focus4;\r\n\r\n                var node = this.getElementByDataKey(activeNode.refKey);\r\n                node === null || node === void 0 ? void 0 : (_node$focus4 = node.focus) === null || _node$focus4 === void 0 ? void 0 : _node$focus4.call(node);\r\n            }\r\n        };\r\n\r\n        _proto.flattenNodes = function flattenNodes(nodes, props, ref, parentNode, layer) {\r\n            var _this6 = this;\r\n\r\n            if (ref === void 0) {\r\n                ref = '0';\r\n            }\r\n\r\n            if (layer === void 0) {\r\n                layer = 0;\r\n            }\r\n\r\n            var _ref3 = props || this.props,\r\n                labelKey = _ref3.labelKey,\r\n                valueKey = _ref3.valueKey,\r\n                childrenKey = _ref3.childrenKey;\r\n\r\n            if (!Array.isArray(nodes) || nodes.length === 0) {\r\n                return [];\r\n            }\r\n\r\n            nodes.map(function (node, index) {\r\n                var _extends2;\r\n\r\n                var refKey = ref + \"-\" + index;\r\n                node.refKey = refKey;\r\n                _this6.nodes[refKey] = _extends((_extends2 = {\r\n                    layer: layer\r\n                }, _extends2[labelKey] = node[labelKey], _extends2[valueKey] = node[valueKey], _extends2.expand = getExpandState(node, props || _this6.props), _extends2.refKey = refKey, _extends2), node);\r\n\r\n                if (parentNode) {\r\n                    _this6.nodes[refKey].parentNode = parentNode;\r\n                }\r\n\r\n                _this6.flattenNodes(node[childrenKey], props, refKey, _this6.nodes[refKey], layer + 1);\r\n            });\r\n        };\r\n\r\n        _proto.serializeList = function serializeList(key, nodes) {\r\n            if (nodes === void 0) {\r\n                nodes = this.nodes;\r\n            }\r\n\r\n            var valueKey = this.props.valueKey;\r\n            var list = [];\r\n            Object.keys(nodes).forEach(function (refKey) {\r\n                if (nodes[refKey][key]) {\r\n                    list.push(nodes[refKey][valueKey]);\r\n                }\r\n            });\r\n            return list;\r\n        };\r\n\r\n        _proto.unserializeLists = function unserializeLists(key, value, props) {\r\n            var _this7 = this;\r\n\r\n            if (value === void 0) {\r\n                value = [];\r\n            }\r\n\r\n            if (props === void 0) {\r\n                props = this.props;\r\n            }\r\n\r\n            var _props2 = props,\r\n                valueKey = _props2.valueKey;\r\n            var expandAll = getExpandAll(props);\r\n            Object.keys(this.nodes).forEach(function (refKey) {\r\n                _this7.nodes[refKey][key] = false;\r\n\r\n                if (value.length) {\r\n                    value.forEach(function (value) {\r\n                        if (shallowEqual(_this7.nodes[refKey][valueKey], value)) {\r\n                            _this7.nodes[refKey][key] = true;\r\n                        }\r\n                    });\r\n                } else {\r\n                    _this7.nodes[refKey][key] = expandAll;\r\n                }\r\n            });\r\n        };\r\n\r\n        _proto.toggleExpand = function toggleExpand(node, isExpand) {\r\n            var valueKey = this.props.valueKey;\r\n            var expandItemValues = new Set(this.serializeList('expand'));\r\n\r\n            if (isExpand) {\r\n                expandItemValues.add(node[valueKey]);\r\n            } else {\r\n                expandItemValues.delete(node[valueKey]);\r\n            }\r\n\r\n            return Array.from(expandItemValues);\r\n        };\r\n\r\n        _proto.renderDropdownMenu = function renderDropdownMenu() {\r\n            var _this$props16 = this.props,\r\n                _this$props16$height = _this$props16.height,\r\n                height = _this$props16$height === void 0 ? defaultHeight : _this$props16$height,\r\n                searchable = _this$props16.searchable,\r\n                searchKeyword = _this$props16.searchKeyword,\r\n                renderExtraFooter = _this$props16.renderExtraFooter,\r\n                locale = _this$props16.locale,\r\n                renderMenu = _this$props16.renderMenu,\r\n                menuStyle = _this$props16.menuStyle,\r\n                virtualized = _this$props16.virtualized,\r\n                menuClassName = _this$props16.menuClassName,\r\n                menuAutoWidth = _this$props16.menuAutoWidth;\r\n            var keyword = !_isUndefined(searchKeyword) ? searchKeyword : this.state.searchKeyword;\r\n            var classes = classNames(menuClassName, this.addPrefix('tree-menu'));\r\n            var styles = virtualized ? _extends({\r\n                height: height\r\n            }, menuStyle) : menuStyle;\r\n            return React.createElement(MenuWrapper, {\r\n                autoWidth: menuAutoWidth,\r\n                className: classes,\r\n                style: styles,\r\n                ref: this.menuRef,\r\n                getToggleInstance: this.getToggleInstance,\r\n                getPositionInstance: this.getPositionInstance\r\n            }, searchable ? React.createElement(SearchBar, {\r\n                placeholder: locale.searchPlaceholder,\r\n                key: \"searchBar\",\r\n                onChange: this.handleSearch,\r\n                value: keyword\r\n            }) : null, renderMenu ? renderMenu(this.renderTree()) : this.renderTree(), renderExtraFooter === null || renderExtraFooter === void 0 ? void 0 : renderExtraFooter());\r\n        };\r\n\r\n        _proto.renderNode = function renderNode(node, index, layer) {\r\n            var _this8 = this;\r\n\r\n            var searchKeyword = this.state.searchKeyword;\r\n            var _this$props17 = this.props,\r\n                valueKey = _this$props17.valueKey,\r\n                childrenKey = _this$props17.childrenKey;\r\n\r\n            if (!node.visible) {\r\n                return null;\r\n            }\r\n\r\n            var refKey = node.refKey;\r\n            var expand = getExpandWhenSearching(searchKeyword, this.nodes[refKey].expand);\r\n            var key = _isString(node[valueKey]) || _isNumber(node[valueKey]) ? node[valueKey] : refKey;\r\n            var children = node[childrenKey]; // 当用户进行搜索时，hasChildren的判断要变成判断是否存在 visible 为 true 的子节点\r\n\r\n            var visibleChildren = _isUndefined(searchKeyword) || searchKeyword.length === 0 ? !!children : hasVisibleChildren(node, childrenKey);\r\n\r\n            var nodeProps = _extends({}, this.getTreeNodeProps(_extends({}, node, {\r\n                expand: expand\r\n            }), layer, index), {\r\n                hasChildren: visibleChildren\r\n            });\r\n\r\n            if (nodeProps.hasChildren) {\r\n                var _classNames;\r\n\r\n                layer += 1; // 是否展开树节点且子节点不为空\r\n\r\n                var openClass = this.addTreePrefix('open');\r\n                var childrenClass = classNames(this.addTreePrefix('node-children'), (_classNames = {}, _classNames[openClass] = expand && visibleChildren, _classNames));\r\n                var nodes = children || [];\r\n                return React.createElement(\"div\", {\r\n                    className: childrenClass,\r\n                    key: key\r\n                }, React.createElement(TreeNode, _extends({}, nodeProps, {\r\n                    innerRef: this.bindNodeRefs.bind(this, refKey)\r\n                })), React.createElement(\"div\", {\r\n                    className: this.addTreePrefix('children')\r\n                }, nodes.map(function (child, i) {\r\n                    return _this8.renderNode(child, i, layer);\r\n                })));\r\n            }\r\n\r\n            return React.createElement(TreeNode, _extends({\r\n                key: key,\r\n                innerRef: this.bindNodeRefs.bind(this, refKey)\r\n            }, nodeProps));\r\n        };\r\n\r\n        _proto.renderVirtualNode = function renderVirtualNode(node, options) {\r\n            var searchKeyword = this.state.searchKeyword;\r\n            var childrenKey = this.props.childrenKey;\r\n            var key = options.key,\r\n                style = options.style;\r\n            var layer = node.layer,\r\n                refKey = node.refKey,\r\n                showNode = node.showNode;\r\n            var expand = getExpandWhenSearching(searchKeyword, this.nodes[refKey].expand);\r\n\r\n            if (!node.visible) {\r\n                return null;\r\n            }\r\n\r\n            var nodeProps = _extends({}, this.getTreeNodeProps(_extends({}, node, {\r\n                expand: expand\r\n            }), layer), {\r\n                style: style,\r\n                hasChildren: !!node[childrenKey]\r\n            });\r\n\r\n            return showNode && React.createElement(TreeNode, _extends({\r\n                key: key,\r\n                innerRef: this.bindNodeRefs.bind(this, refKey)\r\n            }, nodeProps));\r\n        };\r\n\r\n        _proto.renderTree = function renderTree() {\r\n            var _classNames2,\r\n                _this9 = this;\r\n\r\n            var filterData = this.state.filterData;\r\n            var _this$props18 = this.props,\r\n                height = _this$props18.height,\r\n                className = _this$props18.className,\r\n                inline = _this$props18.inline,\r\n                style = _this$props18.style,\r\n                locale = _this$props18.locale,\r\n                virtualized = _this$props18.virtualized,\r\n                searchable = _this$props18.searchable;\r\n            var layer = 0;\r\n            var classes = classNames(defaultClassPrefix('tree'), (_classNames2 = {}, _classNames2[className] = inline, _classNames2));\r\n            var nodes = [];\r\n\r\n            if (!virtualized) {\r\n                nodes = filterData.map(function (dataItem, index) {\r\n                    return _this9.renderNode(dataItem, index, layer);\r\n                });\r\n\r\n                if (!nodes.some(function (v) {\r\n                    return v !== null;\r\n                })) {\r\n                    return React.createElement(\"div\", {\r\n                        className: this.addPrefix('none')\r\n                    }, locale.noResultsText);\r\n                }\r\n            } else {\r\n                nodes = this.getFlattenTreeData(filterData).filter(function (n) {\r\n                    return n.showNode && n.visible;\r\n                });\r\n\r\n                if (!nodes.length) {\r\n                    return React.createElement(\"div\", {\r\n                        className: this.addPrefix('none')\r\n                    }, locale.noResultsText);\r\n                }\r\n            } // 当未定义 height 且 设置了 virtualized 为 true，treeHeight 设置默认高度\r\n\r\n\r\n            var treeHeight = _isUndefined(height) && virtualized ? defaultHeight : height;\r\n            var treeWidth = _isUndefined(style === null || style === void 0 ? void 0 : style.width) ? defaultWidth : style.width;\r\n            var styles = inline ? _extends({\r\n                height: treeHeight\r\n            }, style) : {};\r\n\r\n            // applesinkin changed\r\n            // var listHeight = getVirtualLisHeight(inline, searchable, treeHeight);\r\n            var listHeight = treeHeight;\r\n\r\n            return React.createElement(React.Fragment, null, React.createElement(\"div\", {\r\n                ref: this.treeViewRef,\r\n                className: classes,\r\n                style: styles,\r\n                onKeyDown: this.handleKeyDown\r\n            }, React.createElement(\"div\", {\r\n                className: this.addTreePrefix('nodes')\r\n            }, virtualized ? React.createElement(AutoSizer, {\r\n                defaultHeight: listHeight,\r\n                defaultWidth: treeWidth\r\n            }, function (_ref4) {\r\n                var height = _ref4.height,\r\n                    width = _ref4.width;\r\n                return React.createElement(List, {\r\n                    ref: _this9.listRef,\r\n                    width: width || treeWidth,\r\n                    height: height || listHeight,\r\n                    rowHeight: 51,\r\n                    rowCount: nodes.length,\r\n                    rowRenderer: _this9.measureRowRenderer(nodes)\r\n                });\r\n            }) : nodes)), this.renderDragNode());\r\n        };\r\n\r\n        _proto.renderDragNode = function renderDragNode() {\r\n            var _this$props19 = this.props,\r\n                labelKey = _this$props19.labelKey,\r\n                draggable = _this$props19.draggable,\r\n                renderDragNode = _this$props19.renderDragNode;\r\n            var dragNode = this.dragNode || {};\r\n\r\n            if (draggable) {\r\n                var dragNodeContent = dragNode[labelKey];\r\n\r\n                if (_isFunction(renderDragNode)) {\r\n                    dragNodeContent = renderDragNode(dragNode);\r\n                }\r\n\r\n                return React.createElement(\"span\", {\r\n                    id: \"drag-node\",\r\n                    className: this.addTreePrefix('drag-node-mover')\r\n                }, dragNodeContent);\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        _proto.render = function render() {\r\n            var _this$props20 = this.props,\r\n                inline = _this$props20.inline,\r\n                locale = _this$props20.locale,\r\n                disabled = _this$props20.disabled,\r\n                toggleComponentClass = _this$props20.toggleComponentClass,\r\n                placeholder = _this$props20.placeholder,\r\n                cleanable = _this$props20.cleanable,\r\n                renderValue = _this$props20.renderValue,\r\n                labelKey = _this$props20.labelKey,\r\n                onEntered = _this$props20.onEntered,\r\n                onExited = _this$props20.onExited,\r\n                onClean = _this$props20.onClean,\r\n                style = _this$props20.style,\r\n                positionRef = _this$props20.positionRef,\r\n                rest = _objectWithoutPropertiesLoose(_this$props20, [\"inline\", \"locale\", \"disabled\", \"toggleComponentClass\", \"placeholder\", \"cleanable\", \"renderValue\", \"labelKey\", \"onEntered\", \"onExited\", \"onClean\", \"style\", \"positionRef\"]);\r\n\r\n            var _this$state6 = this.state,\r\n                selectedValue = _this$state6.selectedValue,\r\n                activeNode = _this$state6.activeNode;\r\n\r\n            var hasValidValue = !_isNil(activeNode) || !_isNil(selectedValue) && _isFunction(renderValue);\r\n\r\n            var classes = getToggleWrapperClassName('tree', this.addPrefix, this.props, hasValidValue);\r\n            var selectedElement = placeholder;\r\n            var hasValue = !!activeNode;\r\n            /**\r\n             * if value is invalid and renderValue is undefined, then using placeholder.\r\n             * if value is valid and renderValue is't undefined, then using renderValue()\r\n             */\r\n\r\n            if (!_isNil(selectedValue)) {\r\n                if (hasValue) {\r\n                    selectedElement = activeNode[labelKey];\r\n                }\r\n\r\n                if (_isFunction(renderValue)) {\r\n                    var node = activeNode !== null && activeNode !== void 0 ? activeNode : {};\r\n                    selectedElement = renderValue(selectedValue, node, selectedElement);\r\n                }\r\n            }\r\n\r\n            var unhandled = getUnhandledProps(TreePicker, rest);\r\n\r\n            if (inline) {\r\n                return this.renderTree();\r\n            }\r\n\r\n            return React.createElement(PickerToggleTrigger, {\r\n                pickerProps: this.props,\r\n                ref: this.triggerRef,\r\n                positionRef: mergeRefs(this.positionRef, positionRef),\r\n                onEntered: createChainedFunction(this.handleOnOpen, onEntered),\r\n                onExited: createChainedFunction(this.handleOnClose, onExited),\r\n                speaker: this.renderDropdownMenu()\r\n            }, React.createElement(\"div\", {\r\n                className: classes,\r\n                style: style\r\n            }, React.createElement(PickerToggle, _extends({}, unhandled, {\r\n                ref: this.toggleRef,\r\n                onKeyDown: this.handleToggleKeyDown,\r\n                onClean: createChainedFunction(this.handleClean, onClean),\r\n                cleanable: cleanable && !disabled,\r\n                componentClass: toggleComponentClass,\r\n                hasValue: hasValidValue,\r\n                active: this.state.active\r\n            }), selectedElement || locale.placeholder)));\r\n        };\r\n\r\n        return TreePicker;\r\n    }(React.Component);\r\n\r\nTreePicker.propTypes = _extends({}, listPickerPropTypes, {\r\n    height: PropTypes.number,\r\n    inline: PropTypes.bool,\r\n    draggable: PropTypes.bool,\r\n    expandAll: PropTypes.bool,\r\n    virtualized: PropTypes.bool,\r\n    searchable: PropTypes.bool,\r\n    menuAutoWidth: PropTypes.bool,\r\n    searchKeyword: PropTypes.string,\r\n    defaultExpandAll: PropTypes.bool,\r\n    expandItemValues: PropTypes.array,\r\n    defaultExpandItemValues: PropTypes.array,\r\n    onSearch: PropTypes.func,\r\n    onExpand: PropTypes.func,\r\n    onSelect: PropTypes.func,\r\n    renderMenu: PropTypes.func,\r\n    renderTreeNode: PropTypes.func,\r\n    renderTreeIcon: PropTypes.func,\r\n    renderExtraFooter: PropTypes.func,\r\n    renderDragNode: PropTypes.func,\r\n    searchBy: PropTypes.func\r\n});\r\nTreePicker.defaultProps = _extends({}, listPickerDefaultProps, {\r\n    searchable: true,\r\n    menuAutoWidth: true,\r\n    locale: {\r\n        placeholder: 'Select',\r\n        searchPlaceholder: 'Search',\r\n        noResultsText: 'No results found'\r\n    }\r\n});\r\npolyfill(TreePicker);\r\nexport default defaultProps({\r\n    classPrefix: 'picker'\r\n})(TreePicker);","import TreePicker from './TreePicker';\r\nimport withLocale from 'rsuite/es/IntlProvider/withLocale';\r\nexport default withLocale(['Picker'])(TreePicker);","import React, { useEffect, useState, createRef } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Icon} from 'rsuite';\r\nimport TreePicker from '../../components/TreePicker';\r\nimport styled, { css } from 'styled-components';\r\n\r\n\r\nconst findIndexByTrunkId = (id, list) => {\r\n    for (let i = 0; i < list.length; i++) {\r\n        if (list[i].trunk_id === id) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n};\r\n\r\n\r\nconst DialerTrunkList = ({\r\n    trunkId = null,\r\n    disabledTrunk,\r\n    accounts = null,\r\n    dialerTrunkList = [],\r\n\r\n    onChange,\r\n    onClear,\r\n}) => {\r\n\r\n    const treeRef = createRef();\r\n    const [isExpanded, setIsExpanded] = useState(false);\r\n\r\n    //\r\n    useEffect(() => {\r\n        const accountsId = accounts && accounts.map(item => item.id);\r\n        if (trunkId && accountsId) {\r\n            const trunks = dialerTrunkList.filter( item => accountsId.includes(item.acc_uuid) );\r\n            if (!trunks.some(item => item.trunk_id === trunkId)) {\r\n                if (onClear) onClear();\r\n            }\r\n        }\r\n    }, [accounts]);\r\n\r\n\r\n    // set current trunk on init\r\n    React.useEffect( () => {\r\n        if (!dialerTrunkList || !dialerTrunkList.length)\r\n            return;\r\n\r\n        if (!trunkId) {\r\n            onChange(dialerTrunkList[0]);\r\n        } else {\r\n            const itemIndex = findIndexByTrunkId(trunkId, dialerTrunkList);\r\n            if (treeRef && treeRef.current) {\r\n                treeRef.current.focusNode({refKey: '0-' + itemIndex});\r\n            }\r\n        }\r\n    }, [dialerTrunkList] );\r\n\r\n\r\n    const renderTreeNode = (item) => {\r\n        if (!item)\r\n            return '';\r\n\r\n        return (\r\n            <>\r\n                <div>\r\n                    {item.account_manager_name &&\r\n                        <><b>Manager:</b> {item.account_manager_name}&nbsp;</>\r\n                    }\r\n                    <b>Account:</b> {item.acc_name}&nbsp;\r\n                </div>\r\n                <div>\r\n                    <b>Trunk: </b> {item.tr_name}&nbsp;\r\n                    <b>Price: </b> {item.sp_name}&nbsp;\r\n                </div>\r\n            </>\r\n        )\r\n    };\r\n\r\n    const renderTreeHeader = (item) => {\r\n        if (!item)\r\n            return '';\r\n\r\n        return (\r\n            <>\r\n                {item.account_manager_name &&\r\n                    <><b>Manager:</b> {item.account_manager_name}&nbsp;</>\r\n                }\r\n                <b>Account:</b> {item.acc_name}&nbsp;\r\n                <b>Trunk: </b> {item.tr_name}&nbsp;\r\n                <b>Price: </b> {item.sp_name}&nbsp;\r\n            </>\r\n        )\r\n    };\r\n\r\n\r\n    const renderTreeIcon = () => {\r\n        return null;\r\n    };\r\n\r\n\r\n    const focusItem = (itemIndex) => {\r\n        if (!treeRef || !treeRef.current)\r\n            return;\r\n        const {current: ref} = treeRef;\r\n        ref.focusNode({refKey: '0-' + itemIndex});\r\n    };\r\n\r\n\r\n    const accountsId = accounts && accounts.map(account => account.id);\r\n    let trunksList = accountsId && Array.isArray(accountsId)\r\n        ? dialerTrunkList\r\n            .filter(trunk => accountsId.includes(trunk.acc_uuid))\r\n        : [...dialerTrunkList];\r\n\r\n\r\n    // get empty accounts\r\n    const emptyAccounts = accounts && accounts.filter(account => (\r\n        !dialerTrunkList.some(trunk => trunk.acc_uuid === account.id)\r\n    ));\r\n    if (emptyAccounts) {\r\n        emptyAccounts.forEach(account => {\r\n            trunksList.push({\r\n                trunk_id: account.id,\r\n                account_manager_name: account.account_manager_name ? account.account_manager_name : 'No manager',\r\n                tr_name: \"\",\r\n                acc_name: account.name,\r\n                sp_name: '',\r\n                tr_option_google_otp: false,\r\n            });\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Wrapper>\r\n                <StyledTreeHeader isEmpty={!trunkId}>\r\n                    {trunkId\r\n                        ? <>\r\n                            <ResultString\r\n                                hasValue={trunkId}\r\n                                disabledTrunk\r\n                                onClick={() => {\r\n                                    if (disabledTrunk || !trunksList.length)\r\n                                        return;\r\n\r\n                                    if (trunkId) {\r\n                                        const itemIndex = findIndexByTrunkId(trunkId, trunksList);\r\n                                        focusItem(itemIndex);\r\n                                    }\r\n                                }}\r\n                            >\r\n                                {dialerTrunkList.length \r\n                                    ? renderTreeHeader( dialerTrunkList.find(trunk => trunk.trunk_id === trunkId) )\r\n                                    : ''\r\n                                }\r\n                            </ResultString>\r\n\r\n                            {!disabledTrunk &&\r\n                                <StyledTreeHeaderClear onClick={() => onClear()}>&#x2715;</StyledTreeHeaderClear>\r\n                            }\r\n                        </>\r\n\r\n                        : <ResultString\r\n                            disabledTrunk\r\n                            onClick={() => {\r\n                                if (!disabledTrunk && trunksList.length)\r\n                                    focusItem(0);\r\n                            }}\r\n                        >\r\n                            Select trunk below\r\n                        </ResultString>\r\n                    }\r\n                    \r\n                    {!disabledTrunk && \r\n                        <ExpandButton active={isExpanded} onClick={() => setIsExpanded(!isExpanded)}/>\r\n                    }\r\n\r\n                </StyledTreeHeader>\r\n\r\n                {!disabledTrunk &&\r\n                    <StyledTree\r\n                        virtualized\r\n                        inline={true}\r\n                        disabledItemValues={( emptyAccounts && emptyAccounts.map(item => item.id) ) || []}\r\n                        ref={treeRef}\r\n                        height={isExpanded ? 306 : 153}\r\n                        labelKey=\"tr_name\"\r\n                        valueKey=\"trunk_id\"\r\n                        data={trunksList}\r\n                        value={trunkId}\r\n                        renderTreeNode={renderTreeNode}\r\n                        renderTreeIcon={renderTreeIcon}\r\n                        onChange={(id) => {\r\n                            return onChange \r\n                                ? onChange(dialerTrunkList.find(trunk => trunk.trunk_id === id)) \r\n                                : onChange\r\n                        }}\r\n                    />\r\n                }\r\n            </Wrapper>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\n\r\nconst mapState = ({references}) => ({\r\n    // dialerTrunkList: references.dialerTrunkList,\r\n});\r\n\r\nexport default connect(mapState, {})(DialerTrunkList);\r\n\r\n\r\nconst StyledTree = styled(TreePicker)`\r\n\r\n    && {\r\n        .rs-tree-node > .rs-tree-node-label > .rs-tree-node-label-content {\r\n            font-size: 13px;\r\n            font-weight: 400;\r\n            padding-left: 24px;\r\n            width: 100%;\r\n        }\r\n    }\r\n\r\n    .rs-tree-node {\r\n        border-bottom: 1px solid #f1f1f1;\r\n        padding: 0 !important;\r\n        margin: 0;\r\n\r\n        &:last-child {\r\n            border-bottom: none;\r\n        }\r\n\r\n        & > .rs-tree-node-label {\r\n            font-weight: 400;\r\n            padding-left: 0;\r\n\r\n            &:before {\r\n                display: none;\r\n            }\r\n        }\r\n    }\r\n\r\n    .text-muted span {\r\n        opacity: 0.7;\r\n    }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n    border: 1px solid #e5e5ea;\r\n    border-radius: 6px;\r\n    margin-bottom: 30px;\r\n    overflow: hidden;\r\n`;\r\n\r\nconst ResultString = styled.p`\r\n    color: #333333;\r\n    cursor: ${props => props.disabledTrunk ? 'default' : 'pointer'};\r\n    padding: 10px 12px;\r\n\r\n    ${props => !props.hasValue && css`\r\n            opacity: 0.6;\r\n        `\r\n    }\r\n`;\r\n\r\nconst StyledTreeHeader = styled.div`\r\n    align-items: center;\r\n    background-color: ${props => props.isEmpty ? 'transparent' : '#f2faff' };\r\n    box-shadow: 0 1px 5px -1px rgba(33, 33, 33, 0.2);\r\n    display: flex;\r\n    padding-right: 10px;\r\n    position: relative;\r\n    z-index: 5;\r\n`;\r\n\r\nconst StyledTreeHeaderClear = styled.span.attrs(props => ({\r\n    role: \"button\"\r\n}))`\r\n    cursor: pointer;\r\n    display: block;\r\n    transition: color 0.2s ease;\r\n\r\n    &:hover {\r\n        color: var(--color-brand1);\r\n    }\r\n`;\r\n\r\nconst ExpandButton = styled(Icon).attrs(props => ({\r\n    icon: \"sequence\"\r\n}))`\r\n    cursor: pointer;\r\n    margin-left: auto;\r\n    margin-right: -10px;\r\n    padding: 10px;\r\n    ${props =>\r\n        props.active && css`\r\n            color: var(--color-brand1);\r\n        `\r\n    }\r\n    &:hover {\r\n        color: var(--color-brand1);\r\n    }\r\n`;","import {BaseButton, ButtonContent, ButtonSubtle as CancelButton_} from \"../../base/BaseButton\";\r\nimport styled, {css} from 'styled-components';\r\nimport {\r\n    List as RsuiteList, \r\n    ButtonToolbar as RsuiteToolbar, \r\n    Loader as RsuiteLoader, \r\n    Dropdown as RsuiteDropdown\r\n} from 'rsuite';\r\n\r\n\r\nexport const ButtonToolbar = styled(RsuiteToolbar)`\r\n    width: 100%;\r\n    display: inline-block; \r\n    ${props =>\r\n    props.width && css`\r\n        width: ${props.width};\r\n        `\r\n    }\r\n`;\r\n\r\n\r\nexport const CancelButton = styled(ButtonContent)`\r\n    width: 100%;\r\n    ${props =>\r\n        props.width && css`\r\n            width: ${props.width};\r\n        `\r\n    }\r\n`;\r\n\r\n\r\nexport const Dropdown = styled(RsuiteDropdown).attrs(props => ({\r\n    appearance: \"default\"\r\n}))`\r\n    & > a {\r\n        width: 100%;\r\n    }\r\n    &.rs-dropdown-disabled > a.rs-dropdown-toggle.rs-btn {\r\n        background-color: #d6d6db !important;\r\n    }\r\n    width: 100%;\r\n`;\r\n\r\n\r\nexport const Loader = styled(RsuiteLoader)`\r\n    & span.rs-loader-spin {\r\n        margin-top: 3px;\r\n        margin-right: 5px;\r\n    }\r\n`;\r\n\r\n\r\nexport const List = styled(RsuiteList)`\r\n    margin-top: 10px;\r\n    box-shadow: none !important;\r\n    \r\n    @media (max-width: 767px) {\r\n        display: none !important;\r\n    }\r\n`;","import React from \"react\";\r\nimport {List, Panel} from \"rsuite\";\r\nimport styled from 'styled-components';\r\n\r\nconst statusLabels = {\r\n    1: 'number is unavailable',\r\n    3: 'destination does not exist',\r\n    4: 'no rate for this destination',\r\n    7: 'number is quarantined',\r\n    10: 'numbers from this range cannot be allocated to this trunk'\r\n};\r\n\r\nexport default ({count, numbers = []}) => {\r\n    return (\r\n        <div style={{paddingBottom: '20px'}}>\r\n            <StyledPanel\r\n                header={`${count} numbers were not allocated`}\r\n                collapsible\r\n                bordered\r\n            >\r\n                <StyledList size='sm' hover>\r\n                    {numbers.map( (item, index) => (\r\n                        <List.Item key={index} index={index}>\r\n                            {item.number} {statusLabels[item.status] || 'cannot be allocated'}\r\n                        </List.Item>\r\n                    ))}\r\n                </StyledList>\r\n            </StyledPanel>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nconst StyledList = styled(List)`\r\n    width: 100%;\r\n`;\r\n\r\nconst StyledPanel = styled(Panel)`\r\n    .rs-panel-body {\r\n        box-shadow: none;\r\n    }\r\n`;","import React, {useEffect, useState} from 'react';\r\nimport {Alert, Dropdown, List as RsuiteList, Modal} from 'rsuite';\r\n\r\nimport {getFileResponse} from '../../../api/loginRoutes';\r\nimport Icon from 'rsuite/es/Icon';\r\nimport './ModalAllocationResult.css';\r\nimport * as S from './styled';\r\nimport {\r\n    copyToClipboard,\r\n    downloadNumbersFile,\r\n    downloadNumbersRangeFile,\r\n    downloadPrefixesRangeFile,\r\n    getRangeByNumberDigit,\r\n    makeNumbersFromPrefixesToCsv,\r\n    saveFileBlob\r\n} from 'utils/helpers';\r\nimport {makeRangeFromPrefixesToCsv} from 'utils';\r\nimport {getCsvResponse} from 'api/loginRoutes';\r\nimport {getBlobContent, randomizeArray} from \"../../../utils\";\r\nimport {useWindowWidth} from \"../../../hooks\";\r\n\r\nimport { EOL } from 'const';\r\nimport ResultNotAllocatedList from \"./ListNotAllocatedNumbers\";\r\nimport BaseModal from \"../../base/BaseModal\";\r\n\r\n\r\nconst AllocationResult = ({\r\n    show,\r\n    onClose, \r\n    totalNumbersForced,\r\n    allocatedByPrefix,\r\n    trunkId,\r\n    hideBufferButtons,\r\n    showFullList,\r\n    csvContent,\r\n    transactionId,\r\n    isGoogleOtp = false,\r\n    allocatedByOTP,\r\n    notAllocatedNumbers = [],\r\n}) => {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [loaderDownloadButton, onLoadDownloadButton] = useState(false);\r\n\r\n    const windowWidth = useWindowWidth();\r\n\r\n    const downloadNumberByTransaction = (downloadFunction, prefixStatus, convertPrefixToNumbers, name) => {\r\n        onLoadDownloadButton(true);\r\n        getFileResponse(\"trunk_number:get_list\", {target: {trunk_number_transaction_id: transactionId}}, true)\r\n            .then((response) => {\r\n                const csvText =  getBlobContent(response);\r\n                csvText.then((text) => {\r\n                    const csvBody = prefixStatus && convertPrefixToNumbers ? makeNumbersFromPrefixesToCsv(text) : text;\r\n                    const csvStringsArray = csvBody ? csvBody.split('\\n') : [];\r\n                    downloadFunction(csvStringsArray, prefixStatus, name, isGoogleOtp);\r\n                    onLoadDownloadButton(false)\r\n                })\r\n            });\r\n    };\r\n\r\n    const onCopy = () => {\r\n        const csvData = allocatedByPrefix ? makeNumbersFromPrefixesToCsv(csvContent) : csvContent;\r\n        const csvDataList = csvData && csvData.length ? csvData.split('\\n') : [];\r\n        copyToClipboard(csvDataList && csvDataList.length && csvDataList.slice(1)\r\n            .map( line => {\r\n                const item = line.split(';');\r\n                return line ? `${item[0]}, ${item.slice(2).join(', ')}` : ''\r\n            })\r\n            .join(EOL)\r\n        );\r\n\r\n        Alert.success(`Copied!`);\r\n    };\r\n\r\n    const onCopyByPrefix = () => {\r\n        copyToClipboard(csvData && csvData.length && csvData.slice(1)\r\n            .map( line => {\r\n                const item = line.split(';');\r\n                return `${getRangeByNumberDigit(item[0], item[1])}, ${item.slice(2).join(', ')}`\r\n            })\r\n            .join(EOL)\r\n        );\r\n\r\n        Alert.success(`Copied!`);\r\n    };\r\n\r\n\r\n    const onCompleteDownload = async() => {\r\n        setLoading(true);\r\n        const file = await getCsvResponse('trunk_number__get_list', {\r\n            target: {\r\n                trunk_id: trunkId\r\n            },\r\n        });\r\n\r\n        if (file) {\r\n            const csvContent = makeNumbersFromPrefixesToCsv(file);\r\n            const csvHeaderList = csvContent.split('\\n')[0].split(';');\r\n            const csvDataList = csvContent.split('\\n').slice(1).map(line => {\r\n                const items = line.split(';');\r\n                return [items[0], ...items.slice(2)].join(';');\r\n            });\r\n            const csvHeaders = [csvHeaderList[0], ...csvHeaderList.slice(2)].join(';');\r\n            csvDataList.unshift(csvHeaders);\r\n            const csvData = csvDataList.join('\\n');\r\n\r\n            saveFileBlob(csvData, 'allocated_numbers.csv');\r\n\r\n        }\r\n\r\n        setLoading(false);\r\n    };\r\n\r\n    const onCompleteDownloadPrefixes = async () => {\r\n        setLoading(true);\r\n        const file = await getCsvResponse('trunk_number__get_list', {\r\n            target: {\r\n                trunk_id: trunkId\r\n            },\r\n        });\r\n\r\n        if (file) {\r\n            const csvContent = makeRangeFromPrefixesToCsv(file);\r\n            const csvHeaderList = csvContent.split('\\n')[0].split(';');\r\n            const csvDataList = csvContent.split('\\n').slice(1).map(line => {\r\n                const items = line.split(';');\r\n                return [items[0], ...items.slice(2)].join(';');\r\n            });\r\n            const csvHeaders = [csvHeaderList[0], ...csvHeaderList.slice(2)].join(';');\r\n            csvDataList.unshift(csvHeaders);\r\n            const csvData = csvDataList.join('\\n');\r\n\r\n            saveFileBlob(csvData, 'allocated_numbers.csv');\r\n\r\n        }\r\n\r\n        setLoading(false);\r\n    };\r\n\r\n\r\n    const onCopyOnlyNumbers = () => {\r\n        const csvData = allocatedByPrefix ? makeNumbersFromPrefixesToCsv(csvContent) : csvContent;\r\n        const csvDataList = csvData && csvData.length ? csvData.split('\\n') : [];\r\n\r\n        const onlyNumbersData = csvDataList && csvDataList.length && csvDataList.slice(1)\r\n            .map( line => {\r\n                const item = line.split(';');\r\n                return item.length && item[0];\r\n            });\r\n\r\n        if (isGoogleOtp) {\r\n            const data = randomizeArray(onlyNumbersData, 100);\r\n            copyToClipboard( data.join(EOL) );\r\n            Alert.success(`Copied!`);\r\n            return;\r\n        }\r\n\r\n        copyToClipboard( onlyNumbersData.join(EOL) );\r\n        Alert.success(`Copied!`);\r\n    };\r\n\r\n    const csvData = csvContent \r\n        ? csvContent.split('\\n').filter(value => value)\r\n        : [];\r\n\r\n    const numberCsvListItems = csvData\r\n        .slice(1)\r\n        .map( (line, index) => {\r\n            const items = line.split(';');\r\n            return <RsuiteList.Item key={index}>\r\n                {getRangeByNumberDigit(items[0], items[1])}, {items.slice(2).join(', ')}\r\n            </RsuiteList.Item>\r\n        }\r\n    );\r\n\r\n    const isMobile = windowWidth < 820;\r\n\r\n    return (\r\n            <BaseModal\r\n                show={show}\r\n                onHide={onClose}\r\n                // width={windowWidth < 820 ? windowWidth : 820}\r\n                style={{width: windowWidth < 820 ? windowWidth : 820}}\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>New Allocated numbers</Modal.Title>\r\n                </Modal.Header>\r\n                \r\n                <Modal.Body className=\"modal-body\">\r\n                    \r\n                    <div className=\"allocation_result_warning-message\">\r\n                        <Icon icon=\"exclamation-triangle\"/>&nbsp;\r\n                        Pay your attention that allocated numbers will be activated during 10 minutes after allocation. Warn dialer about it.\r\n                    </div>\r\n\r\n                    {notAllocatedNumbers && !!notAllocatedNumbers.length &&\r\n                        <ResultNotAllocatedList\r\n                            count={notAllocatedNumbers.length}\r\n                            numbers={notAllocatedNumbers}\r\n                        />\r\n                    }\r\n\r\n                    <div className=\"text-center\">\r\n                        <strong>{totalNumbersForced || 0}</strong> numbers were allocated\r\n                    </div>\r\n                    \r\n                    {showFullList &&\r\n                        <S.List \r\n                            size='sm' \r\n                            style={{height: csvData.length * 36, maxHeight: 288}}\r\n                        >\r\n                            {numberCsvListItems}\r\n                        </S.List>\r\n                    }\r\n\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer className=\"modal-footer\">\r\n                    { totalNumbersForced \r\n                        \r\n                        ? <>\r\n\r\n                            <S.ButtonToolbar width={windowWidth < 576 ? \"100%\" : \"30%\"}>\r\n                                {!hideBufferButtons &&\r\n                                    <S.Dropdown\r\n                                        placement={isMobile ? 'topStart' : 'bottomStart'}\r\n                                        title={<>{loading && <S.Loader/>} Copy List</>} \r\n                                        disabled={loading}\r\n                                    >\r\n                                        <Dropdown.Item onClick={onCopyOnlyNumbers}>Copy just numbers</Dropdown.Item>\r\n                                            \r\n                                        {allocatedByPrefix && \r\n                                            <Dropdown.Item onClick={onCopyByPrefix}>Copy list allocated by prefix</Dropdown.Item>\r\n                                        }\r\n\r\n                                        <Dropdown.Item onClick={onCopy}>Copy List</Dropdown.Item>\r\n\r\n                                    </S.Dropdown>\r\n                                }\r\n                            </S.ButtonToolbar>\r\n\r\n                            <S.ButtonToolbar width={windowWidth < 576 ? \"100%\" : \"30%\"}>\r\n\r\n                                <S.Dropdown\r\n                                    placement={isMobile ? 'topStart' : 'bottomStart'}\r\n                                    title={<>{(loading || loaderDownloadButton) && <S.Loader/>} Download List</>}\r\n                                    disabled={loading}\r\n                                >\r\n                                    <Dropdown.Item onClick={onCompleteDownload}>\r\n                                        Download complete list allocated numbers as csv\r\n                                    </Dropdown.Item>\r\n\r\n                                    {allocatedByOTP && <Dropdown.Item onClick={onCompleteDownloadPrefixes}>\r\n                                        Download complete list of allocated numbers as ranges\r\n                                    </Dropdown.Item>}\r\n\r\n                                    <Dropdown.Item\r\n                                        onClick={() => downloadNumberByTransaction(downloadNumbersRangeFile, allocatedByPrefix, false)}\r\n                                    >\r\n                                        Download new allocated numbers\r\n                                    </Dropdown.Item>\r\n\r\n                                    {allocatedByPrefix &&\r\n                                    <Dropdown.Item\r\n                                        onClick={() => downloadNumberByTransaction(downloadPrefixesRangeFile, allocatedByPrefix, false)}\r\n                                    >\r\n                                        Download new allocated numbers as ranges\r\n                                    </Dropdown.Item>\r\n                                    }\r\n\r\n                                    <Dropdown.Item \r\n                                        onClick={() => downloadNumberByTransaction(downloadNumbersFile, allocatedByPrefix, false, 'numbers.txt')}\r\n                                    >\r\n                                        Download new allocated numbers (only numbers; txt version)\r\n                                    </Dropdown.Item>\r\n\r\n                                </S.Dropdown>\r\n\r\n                            </S.ButtonToolbar>\r\n\r\n                            <S.ButtonToolbar width={windowWidth < 576 ? \"100%\" : \"30%\"}>\r\n\r\n                                <S.CancelButton \r\n                                    width=\"100%\" \r\n                                    onClick={onClose}\r\n                                >\r\n                                    Close\r\n                                </S.CancelButton>\r\n\r\n                            </S.ButtonToolbar>\r\n                        </>\r\n                        \r\n                        : <></>\r\n                    }\r\n\r\n                </Modal.Footer>\r\n            </BaseModal>\r\n    );\r\n};\r\n\r\nexport default AllocationResult;","import React from \"react\";\r\nimport {FlexboxGrid, Form, FormControl, Icon, InputGroup, Schema} from \"rsuite\";\r\nimport {api} from \"../../api/loginRoutes\";\r\nimport styled from \"styled-components\";\r\nimport {formValid} from '../../utils/validate';\r\n\r\nconst { StringType } = Schema.Types;\r\n\r\nconst MAX_LENGTH = 128;\r\n\r\nconst accFiltersModel = Schema.Model({\r\n    str: StringType().maxLength(MAX_LENGTH, `The maximum is only ${MAX_LENGTH} characters.`),\r\n});\r\n\r\n\r\nexport default class extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.timer = null;\r\n        this.formRef = React.createRef();\r\n        this.currentQuery = \"\";\r\n\r\n        this.state = {\r\n            accountSearchQuery: this.currentQuery\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAccountList();\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const {accountSearchQuery} = this.state;\r\n        const {fetchingTrigger, setLoading, setFilteredAccounts, returnAll} = this.props;\r\n\r\n        if (fetchingTrigger !== prevProps.fetchingTrigger || accountSearchQuery !== prevState.accountSearchQuery) {\r\n\r\n            // clear filtered accounts on empty query\r\n            if (!accountSearchQuery && !returnAll) {\r\n                setLoading(true);\r\n\r\n                setTimeout(() => {\r\n                    setFilteredAccounts(null);\r\n                    setLoading(false);\r\n                }, 100);\r\n                return;\r\n            }\r\n            \r\n            this.getAccountList();\r\n    \r\n        }\r\n    }\r\n\r\n\r\n    getAccountList = () => {\r\n        const {accountSearchQuery} = this.state;\r\n        const {setLoading, additionalParams, setFilteredAccounts} = this.props;\r\n        \r\n        setLoading(true);\r\n\r\n        api(\"account:get_dropdown_list\", {\r\n            filter: {\r\n                str: accountSearchQuery\r\n            }\r\n        })\r\n            .then(({account_list = []}) => {\r\n                if (this.currentQuery === accountSearchQuery)\r\n                    setFilteredAccounts( account_list.filter(account => !account.is_test) );\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n\r\n    handleChange = (filters) => {\r\n\r\n        clearTimeout(this.timer);\r\n        if ( !formValid(accFiltersModel.check(filters)) )\r\n            return;\r\n\r\n        this.timer = setTimeout(() => {\r\n            const str = filters && filters.str \r\n                ? filters.str : \r\n                \"\";\r\n            this.currentQuery = str;\r\n            this.setState({accountSearchQuery: str});\r\n        }, 500);\r\n    };\r\n\r\n    render() {\r\n        const {placeholder = \"Account name/Email address/Messenger\"} = this.props;\r\n        const handleChange = this.handleChange;\r\n\r\n        return (\r\n            <>\r\n                <Form\r\n                    ref={this.formRef}\r\n                    model={accFiltersModel}\r\n                    onChange={handleChange}\r\n                    className=\"accounts-filter-form\"\r\n                >\r\n                    <StyledInputGroup>\r\n                        <FormControl\r\n                            name=\"str\"\r\n                            errorPlacement=\"topRight\"\r\n                            placeholder={placeholder}\r\n                        />\r\n                        <InputGroup.Addon><Icon icon=\"search\" /></InputGroup.Addon>\r\n                    </StyledInputGroup>\r\n                </Form>\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nconst StyledInputGroup = styled(InputGroup)`\r\n    && {\r\n        max-width: 320px; \r\n        width: 100%;\r\n        overflow: visible;\r\n    }\r\n\r\n    &&&& {\r\n        .rs-input {\r\n            border-bottom-left-radius: 6px;\r\n            border-top-left-radius: 6px;\r\n        }\r\n    }\r\n`;","import React from \"react\";\r\nimport {SelectPicker} from \"rsuite\";\r\nimport {useWindowHeight} from \"../../hooks\";\r\n\r\n\r\nexport default ({isMobile = true, maxHeight = 320, menuClassName, ...props}) => {\r\n\r\n    // const windowHeight = useWindowHeight();\r\n\r\n    let customMenuClassName = menuClassName;\r\n    if (isMobile) {\r\n        customMenuClassName += \" picked-menu-mobile\";\r\n    }\r\n\r\n    return (\r\n        <SelectPicker\r\n            isMobile={isMobile}\r\n            menuClassName={customMenuClassName}\r\n            maxHeight={!isMobile ? 320 : 200}\r\n            {...props}\r\n        />\r\n    )\r\n};","import React, { useEffect } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {SelectPicker, Form, Schema} from 'rsuite';\r\nimport CustomField from '../Form/CustomField';\r\nimport styled from 'styled-components';\r\nimport CustomSelectPicker from \"../Form/CustomSelectPicker\";\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\nconst model = Schema.Model({\r\n    trunk_id: StringType().isRequired('Required')\r\n});\r\n\r\nconst DialerTrunkList = ({\r\n    dialerTrunkList, \r\n    disabledTrunk,\r\n    trunkId = null,\r\n    updateRef, \r\n    onChange,\r\n    onClear = () => {},\r\n    accounts = null,\r\n}) => {\r\n\r\n    useEffect(() => {\r\n        const filteredAccountsId = accounts && Array.isArray(accounts) && accounts.map(item => item.id);\r\n        if (trunkId && filteredAccountsId) {\r\n            const filteredTrunks = dialerTrunkList\r\n                .filter(item => filteredAccountsId.indexOf(item.acc_uuid) !== -1);\r\n            if (!filteredTrunks.some(item => item.trunk_id === trunkId)) {\r\n                onClear();\r\n            }\r\n        }\r\n    }, [accounts]);\r\n\r\n\r\n    const renderHeaderMenuItem = (label, item) => {\r\n        if (!item)\r\n            return \"\";\r\n\r\n        return (\r\n            <>{`${item.acc_name} / ${item.tr_name} / ${item.sp_name}`}</>\r\n        )\r\n    };\r\n\r\n\r\n    const renderMenuGroup = (groupTitle, {children}) => {\r\n        const managerName = children && children[0] && children[0].account_manager_name\r\n            ? children[0].account_manager_name + \" \"\r\n            : \"\";\r\n        return (\r\n            <>{`${managerName}${groupTitle}`}</>\r\n        )\r\n    };\r\n\r\n\r\n    const renderMenuItem = (label, {tr_name, sp_name}) => {\r\n        return (\r\n            <>{`${tr_name} ${sp_name ? \"/ \" + sp_name : \"\"}`}</>\r\n        )\r\n    };\r\n\r\n\r\n    // get filtered trunks list\r\n    const filteredAccountsId = accounts && Array.isArray(accounts) && accounts.map(item => item.id);\r\n\r\n    let trunksList = filteredAccountsId && Array.isArray(filteredAccountsId)\r\n        ? dialerTrunkList\r\n            .filter( item => filteredAccountsId.includes(item.acc_uuid) )\r\n        : [...dialerTrunkList];\r\n\r\n\r\n    // get empty accounts\r\n    const emptyAccounts = accounts && accounts.filter(account => (\r\n        !dialerTrunkList.some(trunk => trunk.acc_uuid === account.id)\r\n    ));\r\n    if (emptyAccounts) {\r\n        emptyAccounts.forEach(account => {\r\n            trunksList.push({\r\n                _name: \"\",\r\n                acc_name: account.name,\r\n                acc_uuid: account.id,\r\n                account_manager_name: account.account_manager_name\r\n                    ? `(${account.account_manager_name})`\r\n                    : '',\r\n                sp_auth: false,\r\n                sp_key: null,\r\n                sp_name: '',\r\n                sp_otp_type: null,\r\n                tr_active: true,\r\n                tr_key: null,\r\n                tr_name: \"Empty\",\r\n                tr_uuid: null,\r\n                trunk_id: false,\r\n            });\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                formValue={{trunk_id: trunkId}}\r\n                style={{marginBottom: 20}}\r\n                model={model}\r\n                ref={ref => updateRef ? updateRef(ref) : null}\r\n            >\r\n                <StyledFormField>\r\n                    <CustomField\r\n                        block\r\n                        data={trunksList}\r\n                        accepter={CustomSelectPicker}\r\n                        labelKey=\"_name\"\r\n                        valueKey=\"trunk_id\"\r\n                        label=\"Dialer/Trunk\"\r\n                        name=\"trunk_id\"\r\n                        errorPlacement=\"topRight\"\r\n                        groupBy=\"acc_name\"\r\n                        menuClassName={\"picker-menu-trunks\"}\r\n                        renderMenuItem={renderMenuItem}\r\n                        renderValue={renderHeaderMenuItem}\r\n                        renderMenuGroup={renderMenuGroup}\r\n                        disabled={disabledTrunk}\r\n                        disabledItemValues={[false]}\r\n                        onClean={onClear}\r\n                        onChange={(id) => {\r\n                            return onChange ? onChange(dialerTrunkList.find(trunk => trunk.trunk_id === id)) : onChange\r\n                        }}\r\n                    />\r\n                </StyledFormField>\r\n            </Form>\r\n        </>\r\n    )\r\n};\r\n\r\n\r\nconst mapState = ({references}) => ({\r\n    dialerTrunkList: references.dialerTrunkList,\r\n});\r\n\r\nexport default connect(mapState, {})(DialerTrunkList);\r\n\r\nconst StyledFormField = styled.div`\r\n    &&& {\r\n        .rs-picker-toggle-value, \r\n        .rs-picker-toggle-custom-value {\r\n            white-space: normal;\r\n        }\r\n        \r\n        .rs-form-group .rs-form-control-wrapper {\r\n            display: block;\r\n            width: 100%;\r\n        }\r\n    }\r\n`;\r\n","import React, {useLayoutEffect, useState} from 'react';\r\nimport NumberForm from './NumberForm';\r\nimport MassForm from './MassForm';\r\nimport ListForm from './ListForm';\r\nimport SequenceForm from './SequenceForm';\r\nimport TemplateListForm from './TemplateListForm';\r\nimport GoogleOTPForm from './GoogleOTPForm';\r\nimport ModalSendApi from '../../../../../components/Modal/ModalSendApi';\r\nimport {connect} from 'react-redux';\r\nimport Tabs from './Tabs';\r\nimport DialerTrunk from '../../../../../components/Filters/DialerTrunk';\r\nimport {getDialerTrunk} from '../../../../../actions/references';\r\nimport AllocationResult from '../../../../../components/Modal/ModalAllocationResult';\r\nimport AccountsGetForm from '../../../../../components/Filters/AccountsGetForm';\r\nimport styled from 'styled-components';\r\nimport {useWindowWidth} from \"../../../../../hooks\";\r\nimport { SP_OTP_TYPE } from 'const';\r\nimport DialerTrunkDropdown from \"../../../../../components/Filters/DialerTrunkDropdown\";\r\nimport {pageIdLogObject} from \"../../../../../utils/pageIdLogger\";\r\n\r\nconst AllocateModal = ({\r\n    show,\r\n    getDialerTrunk,\r\n    disabledTrunk = false,\r\n    activeTrunk: _activeTrunk,\r\n    trunk_id: _trunk_id,\r\n    sp_key: _sp_key,\r\n    sp_auth: _sp_auth,\r\n    spOtpType: _spOtpType,\r\n    update,\r\n    onClose,\r\n    isDialerTrunkFiltered = false,\r\n    client_allocation_limit,\r\n    account_id: _account_id,\r\n    dialerTrunkList,\r\n    getTrunkNumberCsvById,\r\n    pageId = null,\r\n    match = {},\r\n}) => {\r\n\r\n    const windowWidth = useWindowWidth();\r\n\r\n    const [activeTab, setActiveTab] = useState('numberForm');\r\n\r\n    const [activeTrunk, setActiveTrunk] = useState(_activeTrunk);\r\n    React.useEffect(() => setActiveTrunk(_activeTrunk), [_activeTrunk]);\r\n\r\n    const [spAuth, setSpAuth] = useState(_sp_auth);\r\n    React.useEffect(() => setSpAuth(_sp_auth), [_sp_auth]);\r\n\r\n    const [allocateByPrefixesStatus, setAllocateByPrefixesStatus] = React.useState(spAuth);\r\n    React.useEffect(() => setAllocateByPrefixesStatus(spAuth), [spAuth]);\r\n\r\n    const [spOtpType, setSpOtpType] = useState(_spOtpType);\r\n    React.useEffect(() => setSpOtpType(_spOtpType), [_spOtpType]);\r\n\r\n    const [sp_key, setSpKey] = useState(_sp_key);\r\n    React.useEffect(() => setSpKey(_sp_key), [_sp_key]);\r\n\r\n    const [trunk_id, setTrunkId] = useState(_trunk_id);\r\n    React.useEffect(() => setTrunkId(_trunk_id), [_trunk_id]);\r\n\r\n    const [account_id, setAccountId] = useState(_account_id);\r\n    React.useEffect(() => setAccountId(_account_id), [_account_id]);\r\n\r\n    const [totalNumbersForced, setTotalNumbersForced] = useState(null)\r\n    const [showResult, setShowResult] = useState(false);\r\n    const [hideBufferButtons, setHideBufferButtons] = useState(false);\r\n    const [filteredAccounts, setFilteredAccounts] = React.useState(null);\r\n    const [filteredAccountsLoading, setFilteredAccountsLoading] = React.useState(false);\r\n    const [csvContent, setCsvContent] = React.useState(null);\r\n    const [summaryState, setSummaryState] = React.useState(null);\r\n    const [transactionId, setTransactionId] = React.useState(null);\r\n\r\n    const [notAllocatedNumbers, setNotAllocatedNumbers] = React.useState([]);\r\n\r\n    useLayoutEffect(() => {\r\n        if (!pageId)\r\n            return;\r\n        if (show || showResult) {\r\n            pageIdLogObject.pageMatch = {...match, path: '/number-allocation'};\r\n        } else {\r\n            pageIdLogObject.pageMatch = {\r\n                ...match,\r\n                path: match.path + `${pageIdLogObject.lastTab \r\n                    ? \"/\" + pageIdLogObject.lastTab \r\n                    : \"\"\r\n                }`\r\n            };\r\n        }\r\n    }, [show, showResult]);\r\n\r\n    React.useEffect(() => {\r\n        if (show) {\r\n            getDialerTrunk();\r\n        }\r\n    }, [show]);\r\n    \r\n    React.useEffect(() => {\r\n        if (show && spOtpType !== SP_OTP_TYPE && activeTab === \"googleOTP\") {\r\n            setActiveTab('numberForm');\r\n        }\r\n    }, [show, activeTab, spOtpType]);\r\n\r\n\r\n    const onSelect = (activeKey) => setActiveTab(activeKey);\r\n\r\n\r\n    const handleChangeDialerTrunk = (trunk = {}) => {\r\n        trunk.trunk_id && setTrunkId(trunk.trunk_id);\r\n        trunk.sp_key && setSpKey(trunk.sp_key);\r\n        trunk.acc_uuid && setAccountId(trunk.acc_uuid);\r\n        setSpOtpType(trunk.sp_otp_type);\r\n        setSpAuth(trunk.sp_auth);\r\n        setActiveTrunk({...trunk, name: trunk.tr_name});\r\n\r\n        if ((trunk.sp_otp_type !== SP_OTP_TYPE) && activeTab === 'googleOTP') {\r\n            setActiveTab('numberForm');\r\n        }\r\n    };\r\n\r\n\r\n    const clearChosenTrunkInfo = () => {\r\n        setTrunkId(null);\r\n        setSpKey(1);\r\n        setAccountId(null);\r\n        setSpAuth(null);\r\n        setActiveTrunk(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {show &&\r\n\r\n            <ModalSendApi\r\n                title=\"Allocate numbers\"\r\n                successText=\"Allocate\"\r\n                update={update}\r\n                extraDisabled={!trunk_id}\r\n                onClose={onClose}\r\n                width={windowWidth < 800 ? windowWidth : 800}\r\n                checkFirstAll\r\n            >\r\n\r\n                <>\r\n                    {windowWidth < 800 &&\r\n                        <Tabs\r\n                            activeTab={activeTab}\r\n                            onSelect={onSelect}\r\n                            spKey={sp_key}\r\n                            spAuth={spAuth}\r\n                            isMobile={true}\r\n                            spOtpType={spOtpType}\r\n                        />\r\n                    }\r\n                </>\r\n\r\n                <>\r\n                    {isDialerTrunkFiltered &&\r\n                    <AccountsGetFormWrapper>\r\n                        <AccountsGetForm\r\n                            setLoading={setFilteredAccountsLoading}\r\n                            setFilteredAccounts={setFilteredAccounts}\r\n                        />\r\n                    </AccountsGetFormWrapper>\r\n                    }\r\n                </>\r\n\r\n                {windowWidth >= 568\r\n                    ? <DialerTrunk\r\n                        trunkId={trunk_id}\r\n                        onClear={clearChosenTrunkInfo}\r\n                        onChange={handleChangeDialerTrunk}\r\n                        disabledTrunk={disabledTrunk || filteredAccountsLoading}\r\n                        accounts={filteredAccounts}\r\n                        dialerTrunkList={dialerTrunkList}\r\n                    />\r\n                    : <DialerTrunkDropdown\r\n                        trunkId={trunk_id}\r\n                        onClear={clearChosenTrunkInfo}\r\n                        onChange={handleChangeDialerTrunk}\r\n                        disabledTrunk={disabledTrunk || filteredAccountsLoading}\r\n                        accounts={filteredAccounts}\r\n                        dialerTrunkList={dialerTrunkList}\r\n                    />\r\n                }\r\n\r\n                <>\r\n                    {windowWidth >= 800 &&\r\n                        <Tabs\r\n                            activeTab={activeTab}\r\n                            onSelect={onSelect}\r\n                            spKey={sp_key}\r\n                            spAuth={spAuth}\r\n                            isMobile={false}\r\n                            spOtpType={spOtpType}\r\n                        />\r\n                    }\r\n                </>\r\n\r\n                {getForm({\r\n                    activeTab,\r\n                    onSelect,\r\n                    activeTrunk,\r\n                    target: {trunk_id},\r\n                    sp_key,\r\n                    spAuth: spAuth,\r\n                    allocateByPrefixesStatus,\r\n                    setAllocateByPrefixesStatus,\r\n                    showResult: () => setShowResult(true),\r\n                    setSummaryState,\r\n                    setTotalNumbersForced,\r\n                    getTrunkNumberCsvById,\r\n                    setCsvContent,\r\n                    setTransactionId,\r\n                    account_id,\r\n                    setHideBufferButtons,\r\n                    setNotAllocatedNumbers,\r\n                    allocationLimit: client_allocation_limit,\r\n                    isMobile: windowWidth < 800,\r\n                })}\r\n\r\n            </ModalSendApi>\r\n            }\r\n\r\n            <AllocationResult\r\n                show={showResult}\r\n                accountId={account_id}\r\n                summaryState={summaryState}\r\n                totalNumbersForced={totalNumbersForced}\r\n                allocatedByPrefix={allocateByPrefixesStatus}\r\n                trunkId={trunk_id}\r\n                showFullList={activeTab !== 'massForm'}\r\n                hideBufferButtons={hideBufferButtons}\r\n                csvContent={csvContent}\r\n                transactionId={transactionId}\r\n                notAllocatedNumbers={notAllocatedNumbers}\r\n                pageId={pageId}\r\n                isGoogleOtp={activeTab === \"googleOTP\"}\r\n                \r\n                allocatedByOTP={spOtpType || spOtpType === 0}\r\n                onClose={() => {\r\n                    setShowResult(false);\r\n\r\n                    if (totalNumbersForced)\r\n                        setTotalNumbersForced(null);\r\n\r\n                    if (csvContent)\r\n                        setCsvContent(null);\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst getForm = (props) => {\r\n    switch (props.activeTab) {\r\n        case 'numberForm':\r\n            return <NumberForm {...props} />;\r\n        case 'massForm':\r\n            return <MassForm {...props} />;\r\n        case 'listForm':\r\n            return <ListForm {...props} />;\r\n        case 'templateListForm':\r\n            return <TemplateListForm {...props} />;\r\n        case 'sequenceForm':\r\n            return <SequenceForm {...props} />;\r\n        case 'googleOTP':\r\n            return <GoogleOTPForm {...props} />;\r\n        default:\r\n            return null;\r\n    }\r\n};\r\n\r\n\r\nconst mapState = ({references}) => ({\r\n    client_allocation_limit: references.client_allocation_limit,\r\n    dialerTrunkList: references.dialerTrunkList,\r\n});\r\n\r\n\r\nexport default connect(mapState, {getDialerTrunk})(AllocateModal);\r\n\r\n\r\nconst AccountsGetFormWrapper = styled.div`\r\n    margin-bottom: 10px;\r\n`;","import React from 'react';\r\nimport Modal from '../Account/Trunks/AllocatedNumbers/AllocateNumbersModal/Modal';\r\nimport {connect} from \"react-redux\";\r\nimport {closeAllocationModal} from \"../../actions\";\r\nimport {withRouter} from \"react-router\";\r\n\r\nconst NumberAlocation = ({show, onClose, defaultSPKey, match}) => {\r\n\r\n    return <Modal\r\n            show={show}\r\n            pageId={\"/number-allocation\"}\r\n            match={match}\r\n            disabledTrunk={false}\r\n            sp_key={defaultSPKey}\r\n            onClose={onClose}\r\n            isDialerTrunkFiltered={true}\r\n        />\r\n    ;\r\n};\r\n\r\nconst mapState = ({settings, references}) => ({\r\n    show: settings.showAllocation,\r\n    defaultSPKey: references.defaultSPKey,\r\n});\r\n\r\nexport default connect(mapState, {\r\n    onClose: closeAllocationModal\r\n})( withRouter(NumberAlocation) );","import React from 'react';\r\nimport {Message} from 'rsuite';\r\n\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({\r\n            hasError: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError)\r\n            return <Message type=\"error\" description=\"Error\" />;\r\n\r\n        return this.props.children;\r\n    }\r\n}","import React from 'react';\r\nimport css from './VersionLabel.module.css';\r\nimport {APP_VERSION} from \"index\";\r\n\r\nconst VersionLabel = () => {\r\n    return (\r\n        <div className={css.versionLabel}>\r\n            {APP_VERSION}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VersionLabel;","import {\r\n    REGISTRATION_ACCOUNT_API,\r\n    REGISTRATION_APPROVE_API,\r\n    REGISTRATION_CREATE_API, REGISTRATION_GET_COUNT_API,\r\n    REGISTRATION_GET_LIST_API, REGISTRATION_REJECT_API\r\n} from '../const/apiMethods'\r\nimport {\r\n    REGISTRATION_LIST,\r\n    REGISTRATION_ACCOUNT\r\n} from \"../const/\";\r\nimport { api } from \"../api/loginRoutes\";\r\nimport {createAction} from './defaults';\r\nimport {REGISTRATION_COUNT} from '../const'\r\n\r\nconst setRegistrationList = createAction(REGISTRATION_LIST);\r\nconst setRegistrationCount = createAction(REGISTRATION_COUNT);\r\n\r\nexport const registerCreate = (data) => async (dispatch) => {\r\n    return await api(REGISTRATION_CREATE_API, data);\r\n};\r\n\r\nexport const getRegistrationList = (data) => (dispatch) => {\r\n\r\n    api(REGISTRATION_GET_LIST_API, data).then( (response) => {\r\n        if (response) {\r\n            dispatch(setRegistrationList(response));\r\n        }\r\n    })\r\n};\r\n\r\nexport const getRegistrationCount = (data) => (dispatch) => {\r\n    api(REGISTRATION_GET_COUNT_API, data).then( (response) => {\r\n        if (response) {\r\n            dispatch(setRegistrationCount(response));\r\n        }\r\n    })\r\n};\r\nexport const approveRegistration = (data) => async (dispatch) => {\r\n    return await api(REGISTRATION_APPROVE_API, data);\r\n};\r\n\r\nexport const rejectRegistration = (data) => async (dispatch) => {\r\n    return await api(REGISTRATION_REJECT_API, data);\r\n};","import React, {useContext} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Button, Icon, Whisper, Popover} from \"rsuite\";\r\nimport styled, {css} from \"styled-components\";\r\nimport {APP_TYPE_CLIENT} from 'const';\r\nimport {RtlContext} from 'App';\r\n\r\n\r\nconst SkypeWidget = ({supportContacts, appType}) => {\r\n    \r\n    const rtl = useContext(RtlContext);\r\n\r\n    if (!supportContacts || !supportContacts.arabic || appType !== APP_TYPE_CLIENT) {\r\n        return null;\r\n    }\r\n\r\n    const {skype} = supportContacts.arabic;\r\n\r\n    return (\r\n        <Whisper \r\n            placement={rtl ? \"right\" : \"left\"} \r\n            trigger=\"hover\" \r\n            speaker={<Popover>Premiumy Support</Popover>}\r\n            enterable={true}\r\n        >\r\n            <SkypeButton rtl={rtl} href={`skype:${skype}?chat`}>\r\n                <Icon icon=\"skype\" />\r\n            </SkypeButton>\r\n        </Whisper>\r\n    );\r\n}\r\n\r\n\r\nconst SkypeButton = styled(Button)`\r\n    && {\r\n        padding: 0;\r\n        width: 60px;\r\n        height: 60px;\r\n        border-radius: 60px;\r\n        background: linear-gradient(#88d9f8, #00aff0);\r\n        box-shadow: rgba(0, 0, 0, 0.16) 0px 4px 4px;\r\n        position: relative;\r\n\r\n        &:before {\r\n            content: \"\";\r\n            display: block;\r\n            height: 100%;\r\n            width: 100%;\r\n            position: absolute;\r\n            background: #00aff0;\r\n            z-index: -1;\r\n            opacity: 0;\r\n            transition: opacity 0.2s ease;\r\n        }\r\n\r\n        &:hover {\r\n            background: linear-gradient(#88d9f8, #00aff0);\r\n            \r\n            &:before {\r\n                opacity: 1;\r\n            }\r\n        }\r\n\r\n        &:focus, \r\n        &:active, \r\n        &:active:hover, \r\n        &:active:focus, \r\n        &:active.focus {\r\n            background: linear-gradient(#88d9f8, #00aff0);\r\n        }\r\n\r\n        .rs-icon {\r\n            color: #fff;\r\n            font-size: 40px;\r\n            line-height: 60px;\r\n        }\r\n\r\n        bottom: 20px;\r\n        position: fixed;\r\n        right: 35px;\r\n        z-index: 10;\r\n\r\n        @media (max-width: 767px) {\r\n            bottom: 10px;\r\n            right: 10px;\r\n        }\r\n\r\n        ${props => props.rtl && css`\r\n            left: 35px;\r\n            right: auto;\r\n\r\n            @media (max-width: 767px) {\r\n                left: 10px;\r\n                right: auto;\r\n            }\r\n        `}\r\n    }\r\n`;\r\n\r\n\r\nconst mapState = ({references, auth})=> ({\r\n    supportContacts: references.support_contacts,\r\n    appType: auth.appType,\r\n});\r\n\r\nexport default connect(mapState)(SkypeWidget);","import React, {useEffect} from 'react';\r\nimport {Container, Content, FlexboxGrid, Header} from \"rsuite\";\r\nimport Menu from \"components/Navigation/Navigation\";\r\nimport NumberAllocation from \"../pages/NumberAllocation\";\r\nimport ErrorBoundary from \"./Error\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getRealtimePaymentStatus,\r\n    modifyAccountRequest,\r\n    openAllocationModal,\r\n} from '../actions'\r\nimport {logoutUser} from \"../actions/auth\";\r\nimport VersionLabel from \"components/VersionLabel/VersionLabel\";\r\n\r\nimport {pageIdLogObject} from \"../utils/pageIdLogger\";\r\nimport {useRouteMatch} from \"react-router\";\r\nimport {useWindowWidth} from \"../hooks\";\r\nimport {getRegistrationCount} from \"../actions/registration\";\r\nimport {APP_TYPE_CLIENT, APP_TYPE_DEFAULT} from \"../const\";\r\nimport SkypeWidget from \"./SkypeWidget\";\r\n\r\n\r\nconst Layout = ({\r\n    showModalInterface,\r\n    showModalColor,\r\n    logoutUser,\r\n    openAllocationModal,\r\n    method_list,\r\n    modifyAccountRequest,\r\n    modifyPasswordRequest,\r\n    getRegistrationCount,\r\n    getRealtimePaymentStatus,\r\n    accountInfo,\r\n    error,\r\n    roles,\r\n    errorMessage,\r\n\r\n    lang,\r\n    rtl,\r\n\r\n    ...props\r\n}) => {\r\n\r\n    const windowWidth = useWindowWidth();\r\n    const routeMatch = useRouteMatch();\r\n\r\n    // set logger\r\n    pageIdLogObject.pageMatch = routeMatch;\r\n\r\n    // set rtl DOM\r\n    useEffect(() => {\r\n        if (APP_TYPE_DEFAULT !== APP_TYPE_CLIENT) {\r\n            return;\r\n        }\r\n\r\n        if ( rtl && ![\"/login\", \"/reset-password\"].includes(routeMatch.path) ) {\r\n            document.body.classList.add(\"rtl\");\r\n        } else {\r\n            document.body.classList.remove(\"rtl\");\r\n        }\r\n\r\n    }, [rtl, lang, routeMatch]);\r\n\r\n    return (\r\n        <Container style={{minHeight: '100vh'}}>\r\n            <Header>\r\n                <Menu {...{\r\n                    logoutUser,\r\n                    openAllocationModal,\r\n                    method_list,\r\n                    modifyAccountRequest,\r\n                    modifyPasswordRequest,\r\n                    getRegistrationCount,\r\n                    getRealtimePaymentStatus,\r\n                    accountInfo,\r\n                    error,\r\n                    roles,\r\n                    errorMessage\r\n                }}/>\r\n                <NumberAllocation/>\r\n            </Header>\r\n            <Content>\r\n                <FlexboxGrid justify=\"center\">\r\n                    <FlexboxGrid.Item colspan={windowWidth < 768 ? 24 : 22}>\r\n                        <ErrorBoundary>\r\n                            {props.children}\r\n                        </ErrorBoundary>\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n            </Content>\r\n            \r\n            <VersionLabel/>\r\n            <SkypeWidget/>\r\n            {/* <Footer>Footer</Footer> */}\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst mapState = ( {auth, references, accounts, roles} )=> ({\r\n    auth: auth.auth,\r\n    lang: auth.lang,\r\n    rtl: auth.rtl,\r\n    roles: roles.role_list,\r\n    method_list: references.method_list,\r\n    accountInfo: accounts.accountInfo,\r\n    error: accounts.editError,\r\n    errorMessage: accounts.editErrorMessage\r\n});\r\n\r\nexport default connect(mapState, {\r\n    openAllocationModal,\r\n    logoutUser,\r\n    modifyAccountRequest,\r\n    getRegistrationCount,\r\n    getRealtimePaymentStatus\r\n})(Layout);","import React, {useEffect} from 'react';\r\nimport {Route, useRouteMatch} from \"react-router-dom\";\r\nimport Layout from \"../Layout\";\r\nimport {APP_TYPE_CLIENT, APP_TYPE_DEFAULT} from \"../../const\";\r\n\r\nconst RouteWithLayout = ({layout = Layout, component: Component, lang, rtl, ...rest}) => {\r\n\r\n    if (Component) {\r\n        return (\r\n            <Route\r\n                {...rest}\r\n                render={(props) => React.createElement(layout, props, React.createElement(Component, props))}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <Route {...rest}>\r\n                {rest.children}\r\n            </Route>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default RouteWithLayout;","import React, {useEffect} from 'react';\r\nimport RouteWithLayout from \"./RouteWithLayout\";\r\nimport {connect} from \"react-redux\";\r\nimport {Route, Redirect} from \"react-router-dom\";\r\nimport {APP_TYPE_CLIENT, APP_TYPE_DEFAULT, DEFAULT_NOT_AUTH_PATH} from \"../../const\";\r\nimport {useRouteMatch} from \"react-router\";\r\n\r\nconst AuthRoute = ({auth, ...props}) => {\r\n\r\n    if (!auth) {\r\n        return <Redirect to={DEFAULT_NOT_AUTH_PATH} />;\r\n    }\r\n\r\n    return <RouteWithLayout {...props} />\r\n};\r\n\r\nconst mapState = ({auth})=> ({\r\n    auth: auth.auth,\r\n    lang: auth.lang,\r\n    rtl: auth.rtl,\r\n});\r\n\r\nexport default connect(mapState)(AuthRoute);","import styled, { css } from \"styled-components\";\r\nimport {Table as Table_, FormControl, ControlLabel, FormGroup as FormGroup_, Button} from \"rsuite\";\r\nimport Modal from \"../../components/Modal\";\r\nimport BaseTable from \"../../components/base/BaseTable\";\r\n\r\nexport const Table = styled(BaseTable).attrs(props => ({\r\n    rowHeight: 30,\r\n    headerHeight: 40\r\n}))``;\r\n\r\nexport const FlexBlock = styled.div`\r\n    align-items: center;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n\r\n    color: #8256C8;\r\n    font-family: Roboto;\r\n    font-size: 18px;\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    line-height: 21px;\r\n    padding: 15px 0px;\r\n    \r\n    flex-grow: 1;\r\n    margin: 0;\r\n    width: auto;\r\n    \r\n    @media (min-width: 768px) {\r\n        max-width: 200px;\r\n    }\r\n`;\r\n\r\nexport const ActionButtonWrapper = styled.div`\r\n    \r\n    @media (min-width: 768px) {\r\n        text-align: right;\r\n    }\r\n`;\r\n\r\nexport const FormModal = styled(Modal)`\r\n    .rs-modal-content {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .rs-modal-footer {\r\n        margin-top: auto;\r\n        padding-bottom: 20px;\r\n        padding-top: 20px;\r\n    }\r\n`;\r\n\r\nexport const Label = styled(ControlLabel)`\r\n    flex-shrink: 0;\r\n    font-size: 18px;\r\n    padding: 0;   \r\n    text-align: left;\r\n    \r\n    @media (min-width: 768px) {\r\n        font-size: 14px;\r\n    }\r\n\r\n    && {\r\n        margin: 0 10px 0 0;\r\n    }\r\n\r\n    .rtl & {\r\n        text-align: right;\r\n        margin: 0 0 0 10px;\r\n    }\r\n    \r\n    ${props =>\r\n        props.disabled &&\r\n        css`\r\n            color: var(--color-disabled)\r\n        `\r\n    }\r\n`;\r\n\r\nexport const Field = styled(FormControl)`\r\n\r\n    &&& {\r\n        min-width: 0;\r\n        width: 100%;\r\n\r\n        ${props => \r\n            props.componentClass === 'textarea' &&\r\n            css`\r\n                min-height: 120px;\r\n                background: #fff;\r\n                // overflow-x: scroll;\r\n            `\r\n        }\r\n    }\r\n\r\n    ${props =>\r\n        props.disabled &&\r\n        css`\r\n            opacity: var(--value-disabled-opacity)\r\n        `\r\n    }\r\n`;\r\n\r\nexport const FieldAmountWrapper = styled.div`\r\n    width: 80px;\r\n`;\r\n\r\nexport const FormRow = styled.div`\r\n    margin-bottom: -20px;\r\n    \r\n    @media (min-width: 600px) {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n    }\r\n`;\r\n\r\nexport const FormItem = styled.div`\r\n    padding-bottom: 20px;\r\n    padding-right: 20px;\r\n\r\n    .rtl & {\r\n        padding-right: 0;\r\n        padding-left: 20px;\r\n    }\r\n\r\n    &:last-child {\r\n        padding-right: 0;\r\n    }\r\n\r\n    .rs-form-control-wrapper {\r\n        width: 100%;\r\n        vertical-align: top;\r\n    }\r\n\r\n    ${props =>\r\n        props.grow && \r\n        css`\r\n            flex-grow: 1;\r\n        `\r\n    }\r\n`;\r\n\r\nexport const FormGroup = styled(FormGroup_)`\r\n    display: block;\r\n    align-items: center;\r\n    display: flex;\r\n`;\r\n\r\nexport const Currency = styled.span`\r\n    display: block;\r\n    margin-left: 10px;\r\n\r\n    .rtl & {\r\n        margin-left: 0;\r\n        margin-right: 10px;\r\n    }\r\n`;\r\n\r\n\r\nexport const StyledTableActions = styled.div`\r\n    margin-top: -3px;\r\n\r\n    .rtl & {\r\n        direction: rtl;\r\n    }\r\n\r\n    ${props => \r\n        props.alignEnd && css`\r\n            text-align: right;\r\n        \r\n            .rtl & {\r\n                text-align: left;\r\n            }\r\n        `\r\n    }\r\n`;\r\n\r\n\r\nexport const StyledTableButton = styled(Button).attrs(props => ({\r\n    appearance: \"primary\",\r\n    size: \"sm\"\r\n}))`\r\n    && {\r\n        line-height: 25px;\r\n        height: 25px;\r\n        margin-right: 10px;\r\n        padding: 0 7px;\r\n\r\n        &:last-child {\r\n            margin-right: 0;\r\n        }\r\n\r\n        .rtl & {\r\n            margin-right: 0;\r\n            margin-left: 10px;\r\n\r\n            &:last-child {\r\n                margin-left: 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    ${props => props.color && props.color === 'green' && css`\r\n        &&& {\r\n            background-color: #20BA88 !important;\r\n        }\r\n    `}\r\n\r\n    ${props => props.color && props.color === 'red' && css`\r\n        &&& {\r\n            background-color: #F8432F !important;\r\n        }\r\n    `}\r\n`;\r\n\r\n\r\nexport const ToggleButton = styled(Button).attrs(props => ({\r\n    size: \"sm\"\r\n}))`\r\n    && {\r\n        background-color: #8256c8;\r\n        color: #ffffff;\r\n\r\n        &:focus,\r\n        &:active,\r\n        &:active:focus,\r\n        &:hover {\r\n            background-color: #8256c8;\r\n            color: #ffffff;\r\n        }\r\n\r\n        .rs-icon {\r\n            color: #ffffff;\r\n        }\r\n    }\r\n`;","import React from \"react\";\r\nimport {renderColumn} from \"../../utils/helpers\";\r\nimport {Table} from 'rsuite';\r\nimport {SCREEN_MEDIA} from '../../const';\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport * as S from \"./styled.js\";\r\n\r\nconst {sm} = SCREEN_MEDIA;\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\nexport default ({\r\n    data = [], \r\n    loading = false,\r\n    columns,\r\n    tableActions,\r\n    height\r\n}) => {\r\n\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    // push table actions\r\n    const renderedColumns = columns.map(renderColumn);\r\n    if (tableActions) {\r\n        renderedColumns.push(tableActions);\r\n    }\r\n\r\n    // add fixing column to fix horizontal scroll\r\n    const columnMobileFix = <Column key=\"table_scrollfix\" width={0} fixed><HeaderCell></HeaderCell><Cell></Cell></Column>;\r\n    renderedColumns.push(columnMobileFix);\r\n\r\n    return (\r\n        <S.Table\r\n            shouldUpdateScroll={false}\r\n            virtualized\r\n            data={data}\r\n            loading={loading}\r\n            autoHeight={resizedWidth <= sm.max}\r\n            height={height || 700}\r\n        >\r\n            {renderedColumns}\r\n        </S.Table>\r\n    )\r\n};","import React from \"react\";\r\nimport {getFormattedTime} from \"../../../utils/helpers\";\r\nimport {Table} from \"rsuite\";\r\nimport CommonTable from '../CommonTable';\r\nimport * as S from \"../styled.js\";\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\nexport default ({\r\n    data = [], \r\n    loading = false, \r\n    handleCancelPaymentRequest,\r\n    handleApprovePaymentRequest,\r\n    handleManagePaymentDetails,\r\n    height = null,\r\n    withFilters = false,\r\n}) => {\r\n\r\n    const statusLabels = [\"Active\", \"Canceled\", \"Approved\", \"Rejected\", \"Completed\"];\r\n\r\n    const columns = [\r\n        {\r\n            id: 'amount',\r\n            label: \"Amount\",\r\n            value: ({amount, currency_name}) => `${amount}${currency_name ? ' ' + currency_name : ''}`,\r\n            width: 150,\r\n            // width: 287,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'date',\r\n            label: \"Date\",\r\n            value: ({date}) => getFormattedTime(date),\r\n            width: 150,\r\n            // width: 287,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'paymentInfo',\r\n            label: \"Payment Info\",\r\n            value: ({payment_detail_info, move_to_account_name}) => {\r\n                if (payment_detail_info)\r\n                    return payment_detail_info;\r\n\r\n                if (move_to_account_name)\r\n                    return 'Transfer to account ' + move_to_account_name;\r\n\r\n                return '-';\r\n            },\r\n            flexGrow: 4,\r\n            width: 150,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'status',\r\n            label: \"Status\",\r\n            value: ({status}) => statusLabels[status],\r\n            flexGrow: 0,\r\n            width: 150,\r\n            align: 'center'\r\n        },\r\n    ];\r\n\r\n\r\n    if (withFilters) {\r\n        columns.unshift({\r\n            id: 'account',\r\n            label: \"Account\",\r\n            value: ({account_name, account_manager_name}) => `${account_name} / ${account_manager_name || 'no manager'}`,\r\n            flexGrow: 2,\r\n            minWidth: 300,\r\n            align: 'center'\r\n        })\r\n    }\r\n\r\n    const tableActions = (\r\n        <Column key=\"table__actions\" width={handleManagePaymentDetails ? 340 : 160}>\r\n            <HeaderCell> </HeaderCell>\r\n            <Cell>\r\n                {rowData => {\r\n\r\n                    if (rowData.status !== 0)\r\n                        return null;\r\n\r\n                    return (\r\n                        <S.StyledTableActions>\r\n\r\n                            {handleManagePaymentDetails &&\r\n                                <S.StyledTableButton\r\n                                    onClick={() => handleManagePaymentDetails(rowData)}\r\n                                >\r\n                                    Manage payment details\r\n                                </S.StyledTableButton>\r\n                            }\r\n\r\n                            <S.StyledTableButton\r\n                                color=\"green\"\r\n                                onClick={() => handleApprovePaymentRequest(rowData)}\r\n                            >\r\n                                Approve\r\n                            </S.StyledTableButton>\r\n\r\n                            <S.StyledTableButton\r\n                                color=\"red\"\r\n                                onClick={() => handleCancelPaymentRequest(rowData)}\r\n                            >\r\n                                Cancel\r\n                            </S.StyledTableButton>\r\n                            \r\n                        </S.StyledTableActions>\r\n                    );\r\n                }}\r\n            </Cell>\r\n        </Column>\r\n    );  \r\n\r\n    return (\r\n        <CommonTable\r\n            height={height}\r\n            data={data}\r\n            loading={loading}\r\n            columns={columns}\r\n            tableActions={tableActions}\r\n        />\r\n    )\r\n};","import styled from \"styled-components\";\r\nimport {FlexboxGrid} from \"rsuite\";\r\nimport {SCREEN_MEDIA} from \"../../const\";\r\n\r\nconst {md} = SCREEN_MEDIA;\r\nconst defaultVSpace = 20;\r\nconst defaultHSpace = 10;\r\n\r\n\r\nexport const FlexGrid = styled(FlexboxGrid)`\r\n    margin-bottom: ${props => props.vSpace || `-${defaultVSpace}px`};\r\n    \r\n    @media (min-width: ${md.min}px) {\r\n        margin-left: ${props => props.hSpace || `-${defaultHSpace}px`};\r\n        margin-right: ${props => props.hSpace || `-${defaultHSpace}px`};\r\n    }\r\n\r\n    && {\r\n        flex-wrap: ${props => props.noWrap ? 'nowrap' : 'wrap'};\r\n    }\r\n`;\r\n\r\nexport const FlexGridItem = styled(FlexboxGrid.Item)`\r\n    padding-bottom: ${props => props.vSpace || `${defaultVSpace}px`};\r\n    position: relative;\r\n    width: ${props => props.width ? props.width : \"auto\"};\r\n\r\n    @media (min-width: ${md.min}px) {\r\n        padding-left: ${props => props.hSpace || `${defaultHSpace}px`};\r\n        padding-right: ${props => props.hSpace || `${defaultHSpace}px`};\r\n    }\r\n    \r\n    && {\r\n        flex-shrink: ${props => props.shrink || 1};\r\n        flex-grow: ${props => props.grow || 0};\r\n    }\r\n`;","import React from \"react\";\r\nimport {useWindowWidth} from \"../../../hooks\";\r\nimport {Checkbox, CheckboxGroup, CheckPicker, Form, FormControl} from \"rsuite\";\r\nimport {FlexGrid, FlexGridItem} from \"../../../components/base/FlexGrid\";\r\nimport {debounce} from \"lodash\";\r\n\r\nexport default ({defaultFilter, onChangeFilters, accounts}) => {\r\n\r\n    const filteredAccounts = accounts.filter( item => {\r\n        return item.is_managed;\r\n    } );\r\n\r\n    return (\r\n        <Form\r\n            formDefaultValue={defaultFilter}\r\n            onChange={debounce((value) => {\r\n                onChangeFilters(value);\r\n            }, 500)}\r\n        >\r\n            <FlexGrid align=\"middle\">\r\n                <FlexGridItem>\r\n                    <FormControl\r\n                        accepter={CheckPicker}\r\n                        sticky\r\n                        name=\"account_id_list\"\r\n                        data={filteredAccounts}\r\n                        valueKey=\"id\"\r\n                        labelKey=\"name\"\r\n                        style={{ width: 224 }}\r\n                    />\r\n                </FlexGridItem>\r\n                <FlexGridItem>\r\n                    <FormControl\r\n                        inline={true}\r\n                        name=\"status\"\r\n                        accepter={CheckboxGroup}\r\n                    >\r\n                        <Checkbox value={0}>Processing</Checkbox>\r\n                        <Checkbox value={2}>Passed to financial</Checkbox>\r\n                        <Checkbox value={4}>Show completed</Checkbox>\r\n                        <Checkbox value={1}>Show cancelled</Checkbox>\r\n                        <Checkbox value={3}>Show declined</Checkbox>\r\n                    </FormControl>\r\n                </FlexGridItem>\r\n            </FlexGrid>\r\n        </Form>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport Modal from '../../../components/Modal';\r\nimport {useWindowWidth} from \"../../../hooks\";\r\n\r\nexport default ({\r\n    show,\r\n    onClose,\r\n    maxWidth = 600,\r\n    onSuccess,\r\n    title = \"\"\r\n}) => {\r\n\r\n    const resizedWidth = useWindowWidth();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleSuccess = async () => {\r\n        setLoading(true);\r\n\r\n        await onSuccess();\r\n\r\n        setLoading(false);\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            {...{show, onClose}}\r\n            onClose={() => onClose(false)}\r\n            title={title}\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            footer={true}\r\n            loading={loading}\r\n            onSuccessClose={false}\r\n            successText=\"Yes\"\r\n            focusTarget=\"close\"\r\n            onSuccess={handleSuccess}\r\n        >\r\n            Are you sure?\r\n        </Modal>\r\n    )\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport PaymentsRequestTable from \"./PaymentsRequestTable\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\nimport PaymentsRequestFilter from \"./PaymentsRequestFilter\";\r\nimport ModalChangePaymentRequestStatus from \"../ModalChangePaymentRequestStatus\";\r\n\r\n\r\nexport default ({\r\n    paymentRequestItems, \r\n    paymentRequestLoading, \r\n    accounts = [],\r\n    setShowModalPaymentDetail,\r\n    setActiveAccountId,\r\n\r\n    getPaymentRequestList,\r\n    cancelPaymentRequest,\r\n    approvePaymentRequest,\r\n}) => {\r\n\r\n    const [selectedRequest, setSelectedRequest] = useState(null);\r\n    const [filter, setFilter] = useState({status: [0, 2]});\r\n    const [showModalCancelPaymentRequest, setShowModalCancelPaymentRequest] = useState(false);\r\n    const [showModalApprovePaymentRequest, setShowModalApprovePaymentRequest] = useState(false);\r\n\r\n\r\n    useEffect( () => {\r\n        const data = {\r\n            target: {account_id_list: null},\r\n            filter: {status: [0, 2]}\r\n        };\r\n        getPaymentRequestList(data);\r\n    }, [] );\r\n\r\n\r\n    const handleManagePaymentDetails = (value) => {\r\n        setActiveAccountId(value.account_id);\r\n        setShowModalPaymentDetail(true);\r\n    };\r\n\r\n\r\n    const onChangeFilters = (value) => {\r\n        const filterValue = {...value};\r\n        setFilter({...value});\r\n\r\n        const accountIdList = value.account_id_list !== undefined ? value.account_id_list : [];\r\n        delete filterValue.account_id_list;\r\n\r\n        getPaymentRequestList({\r\n            target: {\r\n                account_id_list: accountIdList.length ? accountIdList : null\r\n            },\r\n            filter: filterValue});\r\n    };\r\n\r\n\r\n    const handleApprovePaymentRequest = (value) => {\r\n        setSelectedRequest(value);\r\n        setShowModalApprovePaymentRequest(true);\r\n    };\r\n\r\n\r\n    const handleApprovePayment = async () => {\r\n        const data = {\r\n            target: {\r\n                payment_request_id: (selectedRequest || {})['id']\r\n            },\r\n        };\r\n\r\n        await approvePaymentRequest(data);\r\n\r\n        const filterValue = {...filter};\r\n        const accountIdList = filterValue.account_id_list !== undefined ? filterValue.account_id_list : [];\r\n        delete filterValue.account_id_list;\r\n\r\n        getPaymentRequestList({\r\n            target: {\r\n                account_id_list: accountIdList.length ? accountIdList : null\r\n            },\r\n            filter: filterValue});\r\n    };\r\n\r\n\r\n    const handleCancelPaymentRequest = (value) => {\r\n        setSelectedRequest(value);\r\n        setShowModalCancelPaymentRequest(true);\r\n    };\r\n\r\n\r\n    const handleCancelPayment = async () => {\r\n        const data = {\r\n            target: {\r\n                payment_request_id: (selectedRequest || {})['id']\r\n            },\r\n        };\r\n\r\n        await cancelPaymentRequest(data);\r\n\r\n        const filterValue = {...filter};\r\n        const accountIdList = filterValue.account_id_list !== undefined ? filterValue.account_id_list : [];\r\n        delete filterValue.account_id_list;\r\n\r\n        getPaymentRequestList({\r\n            target: {\r\n                account_id_list: accountIdList.length ? accountIdList : null\r\n            },\r\n            filter: filterValue});\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <PaymentsRequestFilter\r\n                defaultFilter={filter}\r\n                accounts={accounts}\r\n                onChangeFilters={onChangeFilters}\r\n            />\r\n\r\n            <Spacer/>\r\n\r\n            <PaymentsRequestTable\r\n                withFilters\r\n                data={paymentRequestItems}\r\n                loading={paymentRequestLoading}\r\n                {...{\r\n                    handleManagePaymentDetails,\r\n                    handleCancelPaymentRequest,\r\n                    handleApprovePaymentRequest,\r\n                }}\r\n            />\r\n\r\n            <ModalChangePaymentRequestStatus\r\n                title={`Approve payment request${selectedRequest && \" (account: \" + selectedRequest.account_name + \")\"}`}\r\n                show={showModalApprovePaymentRequest}\r\n                onClose={() => {\r\n                    setShowModalApprovePaymentRequest(false)\r\n                }}\r\n                onSuccess={handleApprovePayment}\r\n            />\r\n\r\n            <ModalChangePaymentRequestStatus\r\n                title={`Cancel payment request${selectedRequest && \" (account: \" + selectedRequest.account_name + \")\"}`}\r\n                show={showModalCancelPaymentRequest}\r\n                onClose={() => {\r\n                    setShowModalCancelPaymentRequest(false)\r\n                }}\r\n                onSuccess={handleCancelPayment}\r\n            />\r\n        </>\r\n    )\r\n};","import React from \"react\";\r\nimport CommonTable from \"../CommonTable\";\r\n\r\nexport default ({\r\n    height = null,\r\n    data = [],\r\n    loading = false,\r\n    withFilters = false,\r\n}) => {\r\n\r\n    const columns = [\r\n        {\r\n            id: 'amount',\r\n            label: \"Amount\",\r\n            value: ({sum, currency_name}) => `${sum}${currency_name ? ' ' + currency_name : ''}`,\r\n            width: 150,\r\n            flexGrow: !withFilters ? 2 : null,\r\n            minWidth: !withFilters ? 200 : null,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'date',\r\n            label: \"Date\",\r\n            dataKey: \"date\",\r\n            width: 150,\r\n            flexGrow: !withFilters ? 2 : null,\r\n            minWidth: !withFilters ? 200 : null,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'paymentDetails',\r\n            label: \"Payment details\",\r\n            dataKey: \"bank_detail\",\r\n            width: 150,\r\n            flexGrow: !withFilters ? 2 : null,\r\n            minWidth: !withFilters ? 200 : null,\r\n            align: 'center'\r\n        },\r\n    ];\r\n\r\n    if (withFilters) {\r\n        columns.unshift({\r\n            id: 'account',\r\n            label: \"Account\",\r\n            value: ({account_name, account_manager_name}) => `${account_name} / ${account_manager_name || 'no manager'}`,\r\n            flexGrow: 2,\r\n            minWidth: 300,\r\n            align: 'center'\r\n        })\r\n    }\r\n\r\n    return (\r\n        <CommonTable\r\n            height={height}\r\n            data={data}\r\n            loading={loading}\r\n            columns={columns}\r\n        />\r\n    )\r\n}","import React from \"react\";\r\nimport { useWindowWidth } from \"../../hooks\";\r\nimport { DateRangePicker } from \"rsuite\";\r\nimport CustomField from \"./CustomField\";\r\n\r\nexport default ({name = \"start_end_date\", ...props}) => {\r\n\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    return (\r\n        <CustomField\r\n            name={name}\r\n            showOneCalendar={resizedWidth > 767 ? false : true}\r\n            accepter={DateRangePicker}\r\n            placement=\"auto\"\r\n            cleanable={false}\r\n            ranges={[\r\n                {\r\n                    label: \"Yesterday\",\r\n                    value: [\r\n                        new Date(new Date(new Date().setDate(new Date().getDate() - 1)).setHours(0, 0, 0, 0)),\r\n                        new Date(new Date(new Date().setDate(new Date().getDate() - 1)).setHours(23, 59, 59, 999))\r\n                    ]\r\n                },\r\n                {\r\n                    label: \"Today\",\r\n                    value: [\r\n                        new Date(new Date().setHours(0, 0, 0, 0)),\r\n                        new Date(new Date().setHours(23, 59, 59, 999))\r\n                    ]\r\n                },\r\n                {\r\n                    label: \"Last 7 days\",\r\n                    value: [\r\n                        new Date(new Date(new Date().setDate(new Date().getDate() - 6)).setHours(0, 0, 0, 0)),\r\n                        new Date(new Date().setHours(23, 59, 59, 999))\r\n                    ]\r\n                }\r\n            ]}\r\n            {...props}\r\n        />\r\n    )\r\n}","import React from \"react\";\r\nimport {Checkbox, CheckboxGroup, CheckPicker, Form, FormControl} from \"rsuite\";\r\nimport {FlexGrid, FlexGridItem} from \"../../../components/base/FlexGrid\";\r\nimport FieldDataRange from \"../../../components/Form/FieldDataRange\";\r\nimport {debounce} from \"lodash\";\r\n\r\nexport default ({filters, onChangeFilters, accounts}) => {\r\n\r\n    const filteredAccounts = accounts.filter( item => {\r\n        return item.is_managed;\r\n    } );\r\n\r\n    return (\r\n        <Form\r\n            formDefaultValue={filters}\r\n            onChange={debounce((value) => {\r\n                onChangeFilters(value);\r\n            }, 500)}\r\n        >\r\n            <FlexGrid align=\"middle\">\r\n                <FlexGridItem>\r\n                    <FormControl\r\n                        accepter={CheckPicker}\r\n                        sticky\r\n                        name=\"account_id_list\"\r\n                        data={filteredAccounts}\r\n                        valueKey=\"id\"\r\n                        labelKey=\"name\"\r\n                        style={{ width: 224 }}\r\n                    />\r\n                </FlexGridItem>\r\n                <FlexGridItem>Date from</FlexGridItem>\r\n                <FlexGridItem>\r\n                    <FieldDataRange name=\"start_end_date\"/>\r\n                </FlexGridItem>\r\n            </FlexGrid>\r\n        </Form>\r\n    )\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport PaymentsListTable from \"./PaymentsListTable\";\r\nimport { Spacer } from \"../../../components/base/Spacer\";\r\nimport {getISOTime} from \"../../../utils/helpers\";\r\nimport PaymentsListFilter from \"./PaymentsListFilter\";\r\n\r\n\r\nexport default ({\r\n    paymentItems, \r\n    paymentItemsLoading,\r\n    getPaymentList,\r\n    accounts\r\n}) => {\r\n\r\n    const dateStart = new Date();\r\n    dateStart.setDate(1);\r\n    dateStart.setHours(0, 0, 0, 0);\r\n    dateStart.setMonth(dateStart.getMonth() - 1);\r\n    const dateEnd = new Date(new Date().setHours(23, 59, 59, 999));\r\n\r\n\r\n\r\n    useEffect( () => {\r\n        const data = {\r\n            target: {\r\n                account_id_list: null\r\n            },\r\n            filter: {\r\n                start_date: getISOTime(dateStart),\r\n                end_date: getISOTime(dateEnd),\r\n            }\r\n        };\r\n        getPaymentList(data);\r\n    }, [] );\r\n\r\n\r\n    const handleChangeFilters = (value) => {\r\n        const dateStart = new Date(value.start_end_date[0].setHours(0, 0, 0, 0));\r\n        const dateEnd = new Date(value.start_end_date[1].setHours(23, 59, 59, 999));\r\n\r\n        let filterValue = {...value};\r\n        const accountIdList = value.account_id_list !== undefined ? value.account_id_list : []\r\n\r\n        delete filterValue.account_id_list;\r\n        filterValue = {\r\n            start_date: getISOTime(dateStart),\r\n            end_date: getISOTime(dateEnd),\r\n            start_end_date: value.start_end_date\r\n        };\r\n\r\n        getPaymentList({\r\n            target: {\r\n                account_id_list: accountIdList.length ? accountIdList : null\r\n            },\r\n            filter: filterValue\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <PaymentsListFilter\r\n                accounts={accounts}\r\n                filters={{\r\n                    start_end_date: [dateStart, dateEnd]\r\n                }}\r\n                onChangeFilters={handleChangeFilters}\r\n            />\r\n\r\n            <Spacer/>\r\n\r\n            <PaymentsListTable\r\n                withFilters\r\n                data={paymentItems}\r\n                loading={paymentItemsLoading}\r\n            />\r\n        </>\r\n    )\r\n};","import React from \"react\";\r\nimport {getFormattedTime, getISOTime} from \"../../../utils/helpers\";\r\n// import {LOCAL_STORAGE_TRAFFIC_STAT_FILTERS} from '../../../../const';\r\nimport {Table} from \"rsuite\";\r\nimport * as S from \"../styled.js\";\r\nimport CommonTable from \"../CommonTable\";\r\nimport {LOCAL_STORAGE_TRAFFIC_STAT_FILTERS} from \"../../../const/localStorageKeys\";\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\nexport default ({\r\n    data = [], \r\n    loading = false, \r\n    openModalRequestPayment,\r\n    setSelectedRequest,\r\n    height,\r\n    checkedStatus = [],\r\n    withFilters = false\r\n}) => {\r\n\r\n    const statusLabels = [\"Pending\", \"Ready for payment\", \"Paid\"];\r\n\r\n    const columns = [\r\n        {\r\n            id: 'trafficPeriod',\r\n            label: \"Traffic period\",\r\n            value: ({date_from, date_to}) => (\r\n                `${ getFormattedTime( date_from.replace(\" \", \"T\") ) } - ${ getFormattedTime( date_to.replace(\" \", \"T\") )}`\r\n            ),\r\n            width: 200,\r\n            flexGrow: !withFilters ? 2 : null,\r\n            minWidth: !withFilters ? 200 : null,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'date',\r\n            label: \"Date\",\r\n            dataKey: \"date2\",\r\n            width: 150,\r\n            flexGrow: !withFilters ? 2 : null,\r\n            minWidth: !withFilters ? 200 : null,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'amount',\r\n            label: \"Amount\",\r\n            value: ({agr_send, currency_name}) => `${agr_send}${currency_name ? ' ' + currency_name : ''}`,\r\n            width: 150,\r\n            flexGrow: !withFilters ? 2 : null,\r\n            minWidth: !withFilters ? 200 : null,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'status',\r\n            label: \"Status\",\r\n            value: ({status}) => statusLabels[status],\r\n            width: 150,\r\n            flexGrow: !withFilters ? 2 : null,\r\n            minWidth: !withFilters ? 200 : null,\r\n            align: 'center'\r\n        },\r\n    ];\r\n\r\n    if (withFilters) {\r\n        columns.unshift({\r\n            id: 'account',\r\n            label: \"Account\",\r\n            value: ({account_name, account_manager_name}) => `${account_name} / ${account_manager_name || 'no manager'}`,\r\n            flexGrow: 2,\r\n            minWidth: 300,\r\n            align: 'center'\r\n        })\r\n    }\r\n\r\n    const tableActions = (\r\n        <Column width={210} key=\"table__actions\">\r\n            <HeaderCell> </HeaderCell>\r\n            <Cell>\r\n                {rowData => {\r\n\r\n                    return (\r\n                        <S.StyledTableActions alignEnd>\r\n\r\n                            {rowData.status === 1 &&\r\n                                <S.StyledTableButton\r\n                                    onClick={() => openModalRequestPayment(rowData)}\r\n                                >\r\n                                    Request payment\r\n                                </S.StyledTableButton>\r\n                            }\r\n\r\n                            <S.StyledTableButton\r\n                                onClick={(e) => {\r\n                                    const dateFrom = new Date( rowData.date_from.replace(\" \", \"T\") );\r\n                                    const dateTo = new Date( rowData.date_to.replace(\" \", \"T\") );\r\n                                    const filtersDefaultValue = {\r\n                                        range: [getISOTime(dateFrom), getISOTime(dateTo)],\r\n                                        start_end_date: [dateFrom, dateTo],\r\n                                        dialer_id: rowData.account_id,\r\n                                        group_checkbox: ['originator_key'],\r\n                                    }\r\n                                    localStorage.setItem(LOCAL_STORAGE_TRAFFIC_STAT_FILTERS, JSON.stringify(filtersDefaultValue));\r\n                                    window.open('/traffic-reports');\r\n                                }}\r\n                            >\r\n                                Details\r\n                            </S.StyledTableButton>\r\n\r\n                        </S.StyledTableActions>\r\n                    );\r\n                }}\r\n            </Cell>\r\n        </Column>\r\n    );\r\n\r\n    const filteredData = withFilters && checkedStatus.length \r\n        ? data.filter(item => {\r\n            // exclude pended\r\n            if (item.status === 2)\r\n                return false;\r\n\r\n            // exclude all except ready for payment\r\n            if (checkedStatus.includes(1) && item.status !== 1) {\r\n                return false\r\n            }\r\n\r\n            return true;\r\n        })\r\n        : data;\r\n\r\n    return (\r\n        <CommonTable\r\n            height={height}\r\n            data={filteredData}\r\n            loading={loading}\r\n            columns={columns}\r\n            tableActions={tableActions}\r\n        />\r\n    )\r\n};","import React, {useRef, useMemo} from \"react\";\r\nimport {Checkbox, CheckboxGroup, CheckPicker, Form, FormControl, Schema} from \"rsuite\";\r\nimport {FlexGrid, FlexGridItem} from \"../../../components/base/FlexGrid\";\r\nimport FieldDataRange from \"../../../components/Form/FieldDataRange\";\r\nimport {debounce} from \"lodash\";\r\nimport {daysCount} from \"../../../utils\";\r\n\r\nconst {ArrayType} = Schema.Types;\r\n\r\nexport default ({filters, onChangeFilters, accounts, setStatus, checkedStatus, globalSettings}) => {\r\n\r\n    const formRef = useRef(null);\r\n\r\n    const formModel = useMemo(() => {\r\n        const daysInterval = globalSettings.billing_interval_multy_account_days || 0;\r\n        return Schema.Model({\r\n            start_end_date: ArrayType()\r\n                .addRule((value, data) => {\r\n                    if ( daysCount(value[0], value[1]) > daysInterval ) {\r\n                        if (!data.account_id_list || !data.account_id_list.length)\r\n                            return false;\r\n\r\n                        if (data.account_id_list.length > 1)\r\n                            return false;\r\n                    }\r\n                    return true;\r\n                }, `For multiple accounts selection difference is more than ${daysInterval} days`),\r\n        })\r\n    }, []);\r\n\r\n    const filteredAccounts = accounts.filter( item => {\r\n        return item.is_managed;\r\n    } );\r\n\r\n    const onChangeStatusFilter = (value) => {\r\n        setStatus(value.map(item => item));\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            model={formModel}\r\n            ref={formRef}\r\n            formDefaultValue={filters}\r\n            onChange={debounce((value) => {\r\n                if (!formRef.current.check())\r\n                    return;\r\n                onChangeFilters(value);\r\n            }, 500)}\r\n        >\r\n            <FlexGrid align=\"middle\">\r\n                <FlexGridItem>\r\n                    <FormControl\r\n                        accepter={CheckPicker}\r\n                        sticky\r\n                        name=\"account_id_list\"\r\n                        data={filteredAccounts}\r\n                        valueKey=\"id\"\r\n                        labelKey=\"name\"\r\n                        style={{ width: 224 }}\r\n                    />\r\n                </FlexGridItem>\r\n                <FlexGridItem>Date from</FlexGridItem>\r\n                <FlexGridItem>\r\n                    <FieldDataRange name=\"start_end_date\"/>\r\n                </FlexGridItem>\r\n                <FlexGridItem>\r\n                    <CheckboxGroup\r\n                        inline={true}\r\n                        name=\"status\"\r\n                        onChange={onChangeStatusFilter}\r\n                        defaultValue={checkedStatus}\r\n                    >\r\n                        <Checkbox value={0}>Only unpaid</Checkbox>\r\n                        <Checkbox value={1}>Only ready for payment</Checkbox>\r\n                    </CheckboxGroup>\r\n                </FlexGridItem>\r\n            </FlexGrid>\r\n        </Form>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport PaymentsTrafficReportsTable from \"./PaymentsTrafficReportsTable\";\r\nimport { Spacer } from \"../../../components/base/Spacer\";\r\nimport { getISOTime } from \"../../../utils/helpers\";\r\nimport PaymentsTrafficReportsFilter from \"./PaymentsTrafficReportsFilter\";\r\n\r\nexport default ({\r\n    paymentTrafficReportsItems, \r\n    paymentTrafficReportsLoading,\r\n    openModalRequestPayment,\r\n    getTrafficReportsList,\r\n    globalSettings = {},\r\n    accounts\r\n}) => {\r\n\r\n    const dateStart = new Date();\r\n    dateStart.setDate(1);\r\n    dateStart.setHours(0, 0, 0, 0);\r\n    dateStart.setMonth(dateStart.getMonth() - 1);\r\n    const dateEnd = new Date(new Date().setHours(23, 59, 59, 999));\r\n    \r\n    const [checkedStatus, setCheckedStatus] = useState([]);\r\n\r\n\r\n    useEffect( () => {\r\n        const data = {\r\n            target: {account_id_list: null},\r\n            filter: {\r\n                start_date: getISOTime(dateStart),\r\n                end_date: getISOTime(dateEnd),\r\n            }\r\n        };\r\n        getTrafficReportsList(data);\r\n    }, [] );\r\n\r\n\r\n    const handleChangeFilters = (value) => {\r\n        const dateStart = new Date(value.start_end_date[0].setHours(0, 0, 0, 0));\r\n        const dateEnd = new Date(value.start_end_date[1].setHours(23, 59, 59, 999));\r\n    console.log(value);\r\n        const filterValue = {\r\n            ...value,\r\n            start_date: getISOTime(dateStart),\r\n            end_date: getISOTime(dateEnd),\r\n            start_end_date: value.start_end_date\r\n        };\r\n        const accountIdList = value.account_id_list !== undefined ? value.account_id_list : []\r\n        delete filterValue.account_id_list;\r\n        getTrafficReportsList({\r\n            target: {\r\n                account_id_list: accountIdList.length ? accountIdList : null\r\n            },\r\n            filter: filterValue\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <PaymentsTrafficReportsFilter\r\n                filters={{start_end_date: [dateStart, dateEnd]}}\r\n                onChangeFilters={handleChangeFilters}\r\n                accounts={accounts}\r\n                globalSettings={globalSettings}\r\n                setStatus={setCheckedStatus}\r\n                checkedStatus={checkedStatus}\r\n            />\r\n\r\n            <Spacer/>\r\n\r\n            <PaymentsTrafficReportsTable\r\n                withFilters\r\n                checkedStatus={checkedStatus}\r\n                data={paymentTrafficReportsItems}\r\n                loading={paymentTrafficReportsLoading}\r\n                {...{\r\n                    openModalRequestPayment,\r\n                }}\r\n            />\r\n        </>\r\n    )\r\n};","import React, {useState, useEffect} from \"react\";\r\nimport { useWindowWidth } from \"../../../hooks\";\r\nimport { Form, InputNumber, SelectPicker, Button, Input, Schema, Message } from \"rsuite\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\nimport * as S from \"../styled\";\r\nimport {SCREEN_MEDIA} from '../../../const';\r\n\r\nconst {sm} = SCREEN_MEDIA;\r\n\r\nconst {StringType, NumberType} = Schema.Types;\r\n\r\nconst AMOUNT_MIN = 0.01;\r\n\r\nexport default ({\r\n    show,\r\n    onClose,\r\n    maxWidth = 700,\r\n    paymentDetailsItems,\r\n    currencyName,\r\n    requestPayment,\r\n    getPaymentRequestList,\r\n    handleShowModalAddPaymentDetail,\r\n    accountId,\r\n    dropdownVisibility,\r\n    amountLimit,\r\n    amountLimitMin = 0.01,\r\n    accounts = [],\r\n    filter,\r\n\r\n    formValue,\r\n    setFormValue,\r\n}) => {\r\n\r\n    let formRef = null;\r\n    \r\n    const formModel = Schema.Model({\r\n        amount: NumberType()\r\n            .isRequired(\"This field is required\")\r\n            .min(AMOUNT_MIN, `The minimum number is ${AMOUNT_MIN}`)\r\n            .max(amountLimit, `The maximum number is ${amountLimit}`),\r\n        payment_detail_id: StringType()\r\n            .addRule((value, data) => {\r\n                if (!value && !data.move_to_account_id)\r\n                    return false;\r\n\r\n                return true;\r\n            }, \"This field is required\", true)\r\n            .addRule((value, data) => {\r\n                if (value && data.move_to_account_id)\r\n                    return false;\r\n                \r\n                    return true;\r\n            }, 'You cannot choose payment details with \"Transfer to another account\" option'),\r\n    });\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const resizedWidth = useWindowWidth();\r\n    const [formIsChanged, setFormIsChanged] = useState(false);\r\n\r\n\r\n    // clean Amount error on limit change\r\n    useEffect( () => {\r\n        if (formRef)\r\n            formRef.cleanErrorForFiled('amount');\r\n    }, [amountLimitMin] );\r\n\r\n\r\n    const handleSubmit = async () => {\r\n\r\n        if (!formIsChanged)\r\n            setFormIsChanged(true);\r\n        \r\n        if (!formRef.check() )\r\n            return null;\r\n\r\n        setLoading(true);\r\n\r\n        const value = formRef.getFormValue();\r\n        const data = {\r\n            ...value,\r\n            amount: +value.amount,\r\n            target: {\r\n                account_id: accountId,\r\n                payment_detail_id: value.payment_detail_id,\r\n            },\r\n        };\r\n        delete data.payment_detail_id;\r\n\r\n        if (data.move_to_account_id) {\r\n            data.target.account1_id = data.move_to_account_id;\r\n            delete data.move_to_account_id;\r\n        }\r\n\r\n        await requestPayment(data);\r\n\r\n        if (getPaymentRequestList) {\r\n            const dataGetList = {target: {account_id_list: [accountId]}};\r\n            if (filter) {\r\n                dataGetList.filter = filter;\r\n            }\r\n            getPaymentRequestList(dataGetList);\r\n        }\r\n\r\n        setLoading(false);\r\n        onClose();\r\n    };\r\n\r\n    const handleAmountChange = () => {\r\n        if (!formIsChanged)\r\n            setFormIsChanged(true);\r\n    }\r\n\r\n    const renderMenuItem = (label, item) => {\r\n        return item.status === 1 ? label : <span style={{color: '#939191'}}>{label}</span>;\r\n    };\r\n\r\n    return (\r\n        <S.FormModal\r\n            {...{show, onClose}}\r\n            title=\"Payment request\"\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            showCloseSuccessButtons={true}\r\n            onSuccessClose={false}\r\n            successButton=\"Confirm\"\r\n            loading={loading}\r\n            focusTarget=\"close\"\r\n            footer={true}\r\n            onSuccess={handleSubmit}\r\n            onClose={() => {\r\n                onClose(false);\r\n            }}\r\n            onExited={() => {\r\n                setFormValue({amount: 0});\r\n            }}\r\n        >\r\n            <Form\r\n                ref={ref => formRef = ref}\r\n                model={formModel}\r\n                formValue={formValue}\r\n                onChange={setFormValue}\r\n            >\r\n\r\n                <p>{`${amountLimit || 0} ${currencyName || ''} is available for payment now. You cannot request more than this amount`}</p>\r\n\r\n                <Spacer/>\r\n\r\n                <S.FormRow>\r\n                    <S.FormItem>\r\n\r\n                        <S.FormGroup>\r\n                            <S.Label>Amount</S.Label>\r\n                            <S.FieldAmountWrapper>\r\n                                <S.Field\r\n                                    accepter={InputNumber}\r\n                                    name='amount'\r\n                                    onChange={handleAmountChange}\r\n                                />\r\n                            </S.FieldAmountWrapper>\r\n                            {currencyName && <S.Currency>{currencyName}</S.Currency>}\r\n                        </S.FormGroup>\r\n\r\n                    </S.FormItem>\r\n                    <S.FormItem grow>\r\n\r\n                        <S.FormGroup>\r\n                            <S.Label>Payment info</S.Label>\r\n                            <S.Field\r\n                                accepter={SelectPicker}\r\n                                data={paymentDetailsItems}\r\n                                cleanable={true}\r\n                                name='payment_detail_id'\r\n                                valueKey=\"id\"\r\n                                block={true}\r\n                                errorPlacement={resizedWidth <= sm ? \"auto\" : \"bottomEnd\"}\r\n                                labelKey=\"payment_detail_info\"\r\n                                menuClassName={dropdownVisibility ? \"\" : \"hide-dropdown\"}\r\n                                renderMenuItem={renderMenuItem}\r\n                                renderExtraFooter={() => {\r\n                                    return (\r\n                                        <Button \r\n                                            appearance=\"link\"\r\n                                            onClick={() => {\r\n                                                handleShowModalAddPaymentDetail();\r\n                                            }}\r\n                                        >\r\n                                            + Add new\r\n                                        </Button>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </S.FormGroup>\r\n                    </S.FormItem>\r\n                \r\n                </S.FormRow>\r\n\r\n                <Spacer/>\r\n\r\n                <S.FormRow>\r\n                    <S.FormItem grow>\r\n                        <S.FormGroup>\r\n                            <S.Label>or transfer to another account</S.Label>\r\n                            <S.Field\r\n                                accepter={SelectPicker}\r\n                                data={accounts.filter((item) => item.is_managed)}\r\n                                cleanable={true}\r\n                                name='move_to_account_id'\r\n                                valueKey=\"id\"\r\n                                labelKey=\"name\"\r\n                                block={true}\r\n                                errorPlacement={resizedWidth <= sm ? \"auto\" : \"bottomStart\"}\r\n                                menuClassName={dropdownVisibility ? \"\" : \"hide-dropdown\"}\r\n                            />\r\n                        </S.FormGroup>\r\n                    </S.FormItem>\r\n                </S.FormRow>\r\n\r\n                <Spacer/>\r\n\r\n                <S.Field\r\n                    name=\"comment\"\r\n                    accepter={Input}\r\n                    componentClass=\"textarea\"\r\n                    placeholder=\"Comment\"\r\n                />\r\n\r\n                {amountLimitMin > formValue.amount && formValue.payment_detail_id && formIsChanged &&\r\n                    <>\r\n                        <Spacer/>\r\n                        <Message \r\n                            type=\"warning\" \r\n                            closable \r\n                            description={<p><b>Amount</b> should be greater than <b>{amountLimitMin}</b></p>}\r\n                        />\r\n                    </>\r\n                }\r\n                \r\n            </Form>\r\n        </S.FormModal>\r\n    )\r\n};","import {\r\n    PAYMENT_DETAIL as PREFIX,\r\n} from \"../const\";\r\n\r\nimport {\r\n    PAYMENT_DETAIL_LIST_API,\r\n    PAYMENT_DETAIL_GET_API,\r\n    PAYMENT_DETAIL_CREATE_API,\r\n    PAYMENT_DETAIL_MODIFY_API,\r\n    PAYMENT_DETAIL_REMOVE_API,\r\n    PAYMENT_DETAIL_CONFIRM_API,\r\n    PAYMENT_DETAIL_CONFIRM_STATUS_API\r\n} from \"../const/apiMethods\";\r\n\r\nimport {createAction} from './defaults';\r\nimport {api, apiWithHeaders} from \"../api/loginRoutes\";\r\nimport Fingerprint2 from 'fingerprintjs2';\r\n\r\nconst setLoading = createAction('SET_LOADING_' + PREFIX);\r\nconst setPaymentMethodsList = createAction('SET_ITEMS_' + PREFIX);\r\nconst setConfirmPayment = createAction(PAYMENT_DETAIL_CONFIRM_API);\r\nconst setConfirmStatus = createAction(PAYMENT_DETAIL_CONFIRM_STATUS_API);\r\n\r\n// get list\r\nexport const getPaymentDetailsList = (data) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    api(PAYMENT_DETAIL_LIST_API, data)\r\n        .then((response) => {\r\n            if (response !== undefined) {\r\n                dispatch(setPaymentMethodsList({\r\n                    items: response.payment_detail_list || []\r\n                }));\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch(setLoading(false));\r\n        });\r\n};\r\n\r\n// get single\r\nexport const getPaymentDetailsSingle = (data) => async (dispatch) => {\r\n    const response = await api(PAYMENT_DETAIL_GET_API, data);\r\n    return response;\r\n};\r\n\r\n// create new\r\nexport const createPaymentDetails = (data) => async (dispatch) => {\r\n    const response = await api(PAYMENT_DETAIL_CREATE_API, data);\r\n    return response;\r\n};\r\n\r\n// modify single\r\nexport const modifyPaymentDetails = (data) => async (dispatch) => {\r\n    const response = await api(PAYMENT_DETAIL_MODIFY_API, data);\r\n    return response;\r\n};\r\n\r\n// remove single\r\nexport const removePaymentDetails = (data) => async (dispatch) => {\r\n    const response = await api(PAYMENT_DETAIL_REMOVE_API, data);\r\n    return response;\r\n};\r\n\r\n// confirm\r\nexport const confirmPaymentDetails = (token) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    Fingerprint2.get({\r\n        preprocessor: ((key, value) => {\r\n            return value\r\n        })\r\n    }, ((components) => {\r\n        const convertArrayToObject = (array, key) => {\r\n            const initialValue = {};\r\n            return array.reduce((obj, item) => {\r\n                return {\r\n                    ...obj,\r\n                    [item[key]]: item,\r\n                };\r\n            }, initialValue);\r\n        };\r\n        const objectUserData = convertArrayToObject(components, 'key');\r\n\r\n        apiWithHeaders(PAYMENT_DETAIL_CONFIRM_API, {token, user_data: objectUserData})\r\n            .then((response) => {\r\n\r\n                if (response !== undefined) {\r\n                    dispatch(setConfirmPayment({\r\n                        items: response.payment_detail || []\r\n                    }));\r\n                    dispatch(setConfirmStatus({\r\n                        status: response.confirm_status\r\n                    }))\r\n                }\r\n            })\r\n            .finally(() => {\r\n                dispatch(setLoading(false));\r\n            });\r\n    }));\r\n\r\n};","import React, {useEffect} from \"react\";\r\n// import Table from \"../../components/Table\";\r\nimport {renderColumn} from \"../../utils/helpers\";\r\nimport {Table as Table_, Icon, Button} from 'rsuite';\r\nimport styled from \"styled-components\";\r\nimport {render} from 'redux-logger/src/diff';\r\nimport Checkbox from 'rsuite/es/Checkbox';\r\nimport BaseTable from \"../../components/base/BaseTable\";\r\n\r\nconst {Column, HeaderCell, Cell} = Table_;\r\n\r\nconst PaymentDetailsTable = ({\r\n    data, \r\n    loading, \r\n    loadingEditButtonsSet,\r\n    intl, \r\n    handleRemovePaymentDetails,\r\n    handleEditPaymentDetails,\r\n    ...props\r\n}) => {\r\n\r\n    const statuses = [\"Pending\", \"Confirmed\", \"Declined\"];\r\n\r\n    const columns = [\r\n        {\r\n            id: 'details',\r\n            label: \"Details\",\r\n            dataKey: \"payment_detail_info\",\r\n            flexGrow: 5,\r\n            minWidth: 200,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'created',\r\n            label: \"Created\",\r\n            value: ({start_date, customer_name, customer_last_name}) => {\r\n                const name = customer_name\r\n                    ? customer_name + (customer_last_name !== null ? (' ' + customer_last_name) : '' )\r\n                    : null;\r\n                return `${start_date}${name ? ' ' + `by ${name}` : ''}`;\r\n            },\r\n            flexGrow: 2,\r\n            minWidth: 200,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'status',\r\n            label: \"Status\",\r\n            value: ({status}) => {\r\n                return statuses[status]\r\n            },\r\n            flexGrow: 2,\r\n            minWidth: 200,\r\n            align: 'center'\r\n        }\r\n    ];\r\n\r\n    const tableActions = (\r\n        <Column key=\"table__actions\">\r\n            <HeaderCell> </HeaderCell>\r\n            <Cell>\r\n\r\n                {rowData => {\r\n                    return (\r\n                        <StyledTableActions>\r\n\r\n                            <StyledTableButton\r\n                                appearance=\"primary\"\r\n                                size=\"sm\"\r\n                                disabled={loadingEditButtonsSet.size && !loadingEditButtonsSet.has(rowData.id)}\r\n                                loading={loadingEditButtonsSet.has(rowData.id)}\r\n                                onClick={() => {\r\n                                    handleEditPaymentDetails(rowData);\r\n                                }}\r\n                            >\r\n                                <Icon icon=\"edit2\"/>\r\n                            </StyledTableButton>\r\n                            \r\n                            <StyledTableButton\r\n                                appearance=\"primary\"\r\n                                size=\"sm\"\r\n                                onClick={() => {\r\n                                    handleRemovePaymentDetails(rowData)\r\n                                }}\r\n                            >\r\n                                <Icon icon=\"trash2\"/>\r\n                            </StyledTableButton>\r\n                            \r\n                        </StyledTableActions>\r\n                    );\r\n                }}\r\n\r\n            </Cell>\r\n        </Column>\r\n    );\r\n\r\n    const renderedColumns = columns.map(renderColumn);\r\n    // renderedColumns.push(confirmedColumn);\r\n    renderedColumns.push(tableActions);\r\n\r\n    // return (\r\n        {/*<Table*/}\r\n            // height=\"300px\"\r\n            // data={data}\r\n            // autoHeight={true}\r\n            // loading={loading}\r\n            // columns={columns}\r\n            // rowHeight={46}\r\n            // ActionCell={tableActions}\r\n        // >\r\n        // </Table>\r\n    // )\r\n\r\n    return (\r\n        <BaseTable\r\n            height={300}\r\n            shouldUpdateScroll={true}\r\n            data={data}\r\n            loading={loading}\r\n            rowHeight={46}\r\n        >\r\n            {renderedColumns}\r\n        </BaseTable>\r\n    )\r\n};\r\n\r\nexport default PaymentDetailsTable;\r\n\r\nconst StyledTableActions = styled.div`\r\n    margin-top: -3px;\r\n\r\n    .rtl & {\r\n        direction: rtl;\r\n    }\r\n`;\r\n\r\nconst StyledTableButton = styled(Button).attrs(props => ({\r\n    appearance: \"primary\",\r\n    size: \"sm\"\r\n}))`\r\n    && {\r\n        height: 25px;\r\n        margin-right: 10px;\r\n        padding: 0;\r\n        width: 25px;\r\n\r\n        &:last-child {\r\n            margin-right: 0;\r\n        }\r\n\r\n        .rtl & {\r\n            margin-right: 0;\r\n            margin-left: 10px;\r\n\r\n            &:last-child {\r\n                margin-left: 0;\r\n            }\r\n        }\r\n    }\r\n`;","import styled, { css } from \"styled-components\";\r\nimport Modal from \"../../../components/Modal\";\r\nimport { FormGroup, ControlLabel, FormControl } from \"rsuite\";\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\n\r\nexport const FormModal = styled(Modal)`\r\n    &&& {\r\n        margin-bottom: 40px !important;\r\n    }\r\n\r\n    .rs-modal-content {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .rs-modal-footer {\r\n        margin-top: auto;\r\n        padding-bottom: 20px;\r\n        padding-top: 20px;\r\n    }\r\n`;\r\n\r\nexport const FileUploader = styled(FormControl).attrs(props => ({\r\n    listType: \"picture-text\",\r\n    autoUpload: false,\r\n    multiple: true,\r\n    accept: \"image/jpeg,image/gif,image/png,image/x-eps,application/pdf,application/zip,application/x-zip,application/x-zip-compressed\",\r\n}))`\r\n    &&& {\r\n        .rs-uploader-file-item-size {\r\n            display: none;\r\n        }\r\n    }\r\n\r\n    .rtl &&& {\r\n        \r\n        .rs-uploader-file-item {\r\n            padding-left: 30px;\r\n            padding-right: 50px;\r\n        }\r\n\r\n        .rs-uploader-file-item-preview {\r\n            left: auto;\r\n            right: 0;\r\n        }\r\n\r\n        .rs-uploader-file-item-progress {\r\n            padding-left: 0;\r\n            padding-right: 50px;\r\n        }\r\n\r\n        .rs-uploader-file-item-btn-remove {\r\n            left: 12px;\r\n            right: auto;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Group = styled(FormGroup)`\r\n    margin-bottom: 15px;\r\n    \r\n    @media (min-width: 768px) {\r\n        align-items: center;\r\n        display: flex;\r\n    }\r\n`;\r\n\r\nexport const Label = styled(ControlLabel)`\r\n    flex-shrink: 0;\r\n    font-weight: 600;\r\n    padding-right: 20px;\r\n    text-align: left;\r\n    width: auto;\r\n\r\n    .rtl & {\r\n        padding-left: 20px;\r\n        padding-right: 0;\r\n        text-align: right;\r\n    }\r\n    \r\n    && {\r\n        \r\n        @media (min-width: 768px) {\r\n            margin-bottom: 0;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Field = styled(FormControl)`\r\n    &&& {\r\n        min-width: 100%;\r\n        width: 100%;\r\n    } \r\n`;\r\nexport const FieldTextAreaAutoResize = styled(TextareaAutosize)`\r\n    &&& {\r\n        min-width: 100%;\r\n        width: 100%;\r\n        overflow: hidden;\r\n        resize: none;\r\n    } \r\n`;\r\n\r\nexport const LabelWrapper = styled.div`\r\n    flex-shrink: 0;\r\n    width: 160px;\r\n    \r\n    ${props => props.vAlign &&\r\n        css`\r\n            align-self: ${props.vAlign};\r\n        `\r\n    }\r\n\r\n    ${props => props.top &&\r\n        css`\r\n            margin-top: ${props.top}px;\r\n        `\r\n    }\r\n`;\r\n\r\nexport const FormColumns = styled.div`\r\n    align-items: stretch;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const FormColumn = styled.div`\r\n    flex: 0 0 auto;\r\n    padding: 0 20px;\r\n    position: relative;\r\n    width: 100%;\r\n\r\n    ${props => \r\n        props.flexGrow && css`\r\n            flex-grow: ${props.flexGrow};\r\n        `\r\n    }\r\n\r\n    @media (min-width: 600px) {\r\n        flex-grow: 1;\r\n        width: 1px;\r\n        \r\n        &&& {\r\n            .rs-form-control-wrapper {\r\n                max-width: 450px;\r\n                width: 100%;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const FlexBlock = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const FlexChild = styled.div`\r\n    padding-left: 20px;\r\n    padding-right: 20px;\r\n`;","export default {\r\n    customer_name: {\r\n        name: 'customer_name',\r\n        label: 'Name',\r\n        labelId: 'name'\r\n    },\r\n    customer_last_name: {\r\n        name: 'customer_last_name',\r\n        label: 'Last name',\r\n        labelId: 'lastName'\r\n    },\r\n    customer_phone: {\r\n        name: 'customer_phone',\r\n        label: 'Phone',\r\n        labelId: 'phone'\r\n    },\r\n    tax_vat_number: {\r\n        name: 'tax_vat_number',\r\n        label: 'Tax/VAT number',\r\n        labelId: 'taxVATNumber'\r\n    },\r\n    ext_files: {\r\n        name: 'ext_files',\r\n        type: 'file',\r\n        label: 'Attachments',\r\n        labelId: 'attachments'\r\n    },\r\n    customer_cntr_code: {\r\n        name: 'customer_cntr_code',\r\n        type: 'select_country',\r\n        label: 'Country',\r\n        labelId: 'country'\r\n    },\r\n    'customer_address.region': {\r\n        name: 'customer_address.region',\r\n        label: 'Region',\r\n        labelId: 'region'\r\n    },\r\n    'customer_address.city': {\r\n        name: 'customer_address.city',\r\n        label: 'City',\r\n        labelId: 'city'\r\n    },\r\n    'customer_address.address': {\r\n        name: 'customer_address.address',\r\n        label: 'Address',\r\n        labelId: 'address'\r\n    },\r\n    'customer_address.postal_code': {\r\n        name: 'customer_address.postal_code',\r\n        label: 'Postal code',\r\n        labelId: 'postalCode'\r\n    },\r\n    bank_name: {\r\n        name: 'bank_name',\r\n        label: 'Bank name',\r\n        labelId: 'bankName'\r\n    },\r\n    account_iban_number: {\r\n        name: 'account_iban_number',\r\n        label: 'Account number/IBAN',\r\n        labelId: 'accountIbanNumber'\r\n    },\r\n    swift_number: {\r\n        name: 'swift_number',\r\n        label: 'SWIFT',\r\n        labelId: 'swift'\r\n    },\r\n    intermediate_bank_details: {\r\n        name: 'intermediate_bank_details',\r\n        label: 'Intermediate bank details',\r\n        labelId: 'intermediateBankDetails',\r\n        componentClass: 'textarea'\r\n    },\r\n    bank_cntr_code: {\r\n        name: 'bank_cntr_code',\r\n        type: 'select_country',\r\n        label: 'Bank country',\r\n        labelId: 'bankCountry'\r\n    },\r\n    'bank_address.region': {\r\n        name: 'bank_address.region',\r\n        label: 'Bank region',\r\n        labelId: 'bankRegion'\r\n    },\r\n    'bank_address.city': {\r\n        name: 'bank_address.city',\r\n        label: 'Bank city',\r\n        labelId: 'bankCity'\r\n    },\r\n    'bank_address.address': {\r\n        name: 'bank_address.address',\r\n        label: 'Bank address',\r\n        labelId: 'bankAddress'\r\n    },\r\n    'bank_address.postal_code': {\r\n        name: 'bank_address.postal_code',\r\n        label: 'Bank postal code',\r\n        labelId: 'bankPostalCode'\r\n    },\r\n    beneficiary_name: {\r\n        name: 'beneficiary_name',\r\n        label: 'Beneficiary name',\r\n        labelId: 'beneficiaryName'\r\n    },\r\n    beneficiary_last_name: {\r\n        name: 'beneficiary_last_name',\r\n        label: 'Beneficiary last name',\r\n        labelId: 'beneficiaryLastName',\r\n        hideOn: [{ot_key: 2, pm_key: 1}]},\r\n    beneficiary_cntr_code: {\r\n        name: 'beneficiary_cntr_code',\r\n        type: 'select_country',\r\n        label: 'Country',\r\n        labelId: 'country'\r\n    },\r\n    'beneficiary_address.region': {\r\n        name: 'beneficiary_address.region',\r\n        label: 'Region',\r\n        labelId: 'region'\r\n    },\r\n    'beneficiary_address.city': {\r\n        name: 'beneficiary_address.city',\r\n        label: 'City',\r\n        labelId: 'city'\r\n    },\r\n    'beneficiary_address.address': {\r\n        name: 'beneficiary_address.address',\r\n        label: 'Address',\r\n        labelId: 'address'\r\n    },\r\n    'beneficiary_address.postal_code': {\r\n        name: 'beneficiary_address.postal_code',\r\n        label: 'Postal code',\r\n        labelId: 'postalCode'\r\n    },\r\n\r\n    paypal_id: {\r\n        name: 'paypal_id',\r\n        label: 'Paypal ID',\r\n        labelId: 'paypalId'\r\n    },\r\n    btc_wallet_number: {\r\n        name: 'btc_wallet_number',\r\n        label: 'Wallet number',\r\n        labelId: 'walletNumber'\r\n    },\r\n    hawala_description: {\r\n        name: 'hawala_description',\r\n        label: 'Message',\r\n        labelId: 'message',\r\n        componentClass: 'textarea'\r\n    },\r\n}\r\n\r\n\r\nexport const customerFields = [\r\n    'customer_name',\r\n    'customer_last_name',\r\n    'customer_cntr_code',\r\n    'customer_address.region',\r\n    'customer_address.city',\r\n    'customer_address.address',\r\n    'customer_address.postal_code',\r\n    'customer_phone',\r\n    'ext_files',\r\n];\r\n\r\n\r\nexport const companyFields = [\r\n    'customer_name',\r\n    'tax_vat_number',\r\n    'customer_cntr_code',\r\n    'customer_address.region',\r\n    'customer_address.city',\r\n    'customer_address.address',\r\n    'customer_address.postal_code',\r\n    'customer_phone',\r\n    'ext_files',\r\n];\r\n\r\n\r\nexport const bankTransferFields = [\r\n    'beneficiary_name',\r\n    'beneficiary_last_name',\r\n    'beneficiary_cntr_code',\r\n    'beneficiary_address.region',\r\n    'beneficiary_address.city',\r\n    'beneficiary_address.address',\r\n    'beneficiary_address.postal_code',\r\n    'bank_name',\r\n    'bank_cntr_code',\r\n    'bank_address.region',\r\n    'bank_address.city',\r\n    'bank_address.address',\r\n    'bank_address.postal_code',\r\n    'account_iban_number',\r\n    'swift_number',\r\n    'intermediate_bank_details',\r\n];\r\n\r\n\r\nexport const paypalFields = [\r\n    'paypal_id',\r\n];\r\n\r\n\r\nexport const bitcoinFields = [\r\n    'btc_wallet_number',\r\n];\r\n\r\n\r\nexport const hawalaFields = [\r\n    'hawala_description',\r\n];\r\n\r\n\r\nexport const otherTransferSystems = [\r\n    'beneficiary_name',\r\n    'beneficiary_last_name',\r\n    'beneficiary_cntr_code',\r\n    'beneficiary_address.city',\r\n];","import React, {useState, useEffect} from \"react\";\r\nimport {Form, FormControl, Icon, SelectPicker, Uploader, Schema, Divider} from \"rsuite\";\r\nimport * as S from \"./styled\";\r\nimport {useWindowWidth} from \"../../../hooks\";\r\nimport { parse } from 'object-flaser';\r\nimport { Spacer } from \"../../../components/base/Spacer\";\r\nimport fields, {\r\n    \r\n    // organization field groups\r\n    customerFields,\r\n    companyFields,\r\n\r\n    // payment method field groups\r\n    bankTransferFields, \r\n    paypalFields, \r\n    bitcoinFields, \r\n    hawalaFields, \r\n    otherTransferSystems\r\n} from \"./fields\";\r\nimport { toBase64 } from \"../../../utils/helpers\";\r\n\r\nconst MAX_CHARACTERS = 255;\r\n\r\nconst methodFields = [\r\n    bankTransferFields,\r\n    paypalFields,\r\n    otherTransferSystems,\r\n    otherTransferSystems,\r\n    hawalaFields,\r\n    bitcoinFields\r\n];\r\n\r\nconst {StringType, NumberType, ArrayType} = Schema.Types;\r\n\r\nconst maxFileSize = 5; // MB\r\nconst maxFiles = 5;\r\n\r\nconst defaultValue = {ot_key: 1, pm_key: 1};\r\n\r\nexport default ({\r\n    show,\r\n    onClose,\r\n    maxWidth = 1000,\r\n    modify = false,\r\n    accountId,\r\n\r\n    organizationTypeList,\r\n    countryList,\r\n    paymentMethodList,\r\n    createPaymentDetails,\r\n    modifyPaymentDetails,\r\n    getPaymentDetailsList,\r\n\r\n    value = false,\r\n}) => {\r\n\r\n    const formModel = Schema.Model({\r\n        // type fields\r\n        ot_key: NumberType().isRequired( \"This field is required\" ),\r\n        pm_key: NumberType()\r\n            .isRequired( \"This field is required\" )\r\n            .addRule((value, data) => {\r\n                if (data.ot_key === 2 && value === 5)\r\n                    return false;\r\n            }, 'This method is not allowed with the \"company\" option'),\r\n\r\n        // customer fields\r\n        customer_name: StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        customer_last_name: StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        tax_vat_number: StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        customer_cntr_code: StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        'customer_address.city': StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        'customer_address.region': StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`),\r\n        'customer_address.address': StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        'customer_address.postal_code': StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        'customer_phone': StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        ext_files: ArrayType()\r\n            .addRule( (value, data) => {\r\n                return (data.ot_key === 2 || (value && value.length > 0)) ? true : false;\r\n            }, \"This field is required\", true )\r\n            .addRule( (value) => value.length > maxFiles ? false : true, `Maximum number of files is ${maxFiles}` )\r\n            .addRule( (value) => {\r\n                const names = [];\r\n                for (const file of value) {\r\n                    if (file.blobFile && file.blobFile.size > (1024 * 1024 * maxFileSize))\r\n                        names.push(file.name);\r\n                }\r\n                return !names.length\r\n            }, `File size should not exceed ${maxFileSize} MB`),\r\n\r\n        // beneficiary fields\r\n        beneficiary_name: StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        beneficiary_last_name: StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`)\r\n            .addRule( (value, data) => {\r\n                if ( !value ) {\r\n                    if (data.ot_key === 2 && data.pm_key === 1)\r\n                        return true;\r\n    \r\n                    return false\r\n                }\r\n            }, \"This field is required\", true ),\r\n        beneficiary_cntr_code: StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        'beneficiary_address.region': StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`),\r\n        'beneficiary_address.city': StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        'beneficiary_address.address': StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        'beneficiary_address.postal_code': StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n\r\n        // bank transfer fields\r\n        bank_name: StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        bank_cntr_code: StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        'bank_address.region': StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`),\r\n        'bank_address.city': StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        'bank_address.address': StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`),\r\n        'bank_address.postal_code': StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`),\r\n        account_iban_number: StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        swift_number: StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        intermediate_bank_details: StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n\r\n        // paypal fields\r\n        paypal_id: StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        \r\n        // btc fields\r\n        btc_wallet_number: StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n        \r\n        // hawala fields\r\n        hawala_description: StringType().maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS}`).isRequired( \"This field is required\" ),\r\n    });\r\n\r\n\r\n    let formRef = null;\r\n\r\n    const [formValue, setFormValue] = useState(value || defaultValue);\r\n    const [activeFields, setActiveFields] = useState([]);\r\n    const resizedWidth = useWindowWidth();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n\r\n    // effect: change form data by defaults\r\n    useEffect(() => {\r\n        if (value) {\r\n            setFormValue({...value});\r\n        } else {\r\n            setFormValue({...defaultValue});\r\n        }\r\n    }, [value]);\r\n\r\n\r\n    // effect: set active fields\r\n    useEffect( () => {\r\n        const [personal, beneficiary] = setFormFields(formValue.ot_key, formValue.pm_key);\r\n        setActiveFields([...personal, ...beneficiary]);\r\n    }, [formValue.ot_key, formValue.pm_key] );\r\n\r\n\r\n    // effect: prevent \"hawala\" && \"company\" option\r\n    useEffect( () => {\r\n        if (formValue.ot_key === 2 && formValue.pm_key === 5) {\r\n            setFormValue({...formValue, pm_key: 1});\r\n        }\r\n    }, [formValue.ot_key, formValue.pm_key] );\r\n\r\n\r\n    // submit data\r\n    const handleFormSubmit = async () => {\r\n\r\n        const fieldsValidity = [];\r\n        for (const fieldName of activeFields) {\r\n            fieldsValidity.push( formRef.checkForField(fieldName) );\r\n        }\r\n        if (fieldsValidity.includes(false))\r\n            return;\r\n\r\n        setLoading(true);\r\n        const formValue = formRef.getFormValue();\r\n        const data = {\r\n            target: {\r\n                account_id: accountId\r\n            },\r\n            ot_key: formValue.ot_key,\r\n            pm_key: formValue.pm_key\r\n        };\r\n        if (modify && formValue.id) {\r\n            delete data.ot_key;\r\n            delete data.pm_key;\r\n            data.target = {\r\n                payment_detail_id: formValue.id\r\n            }\r\n        }\r\n\r\n        for (const field of activeFields) {\r\n            \r\n            if (formValue[field] === undefined || formValue[field] === null)\r\n                continue;\r\n           \r\n            if (field === \"ext_files\") {\r\n                const files = [];\r\n                for (const file of formValue[field]) {\r\n                    const fileBase64 = file.blobFile \r\n                        ? await toBase64(file.blobFile)\r\n                        : file.url;\r\n                    const [type, content] = fileBase64.split(',');\r\n    \r\n                    files.push( {\r\n                        file: content,\r\n                        type: type.split(';')[0].split(':')[1],\r\n                        fileKey: file.fileKey,\r\n                        name: file.name,\r\n                        status: file.status\r\n                    } );\r\n                }\r\n                data[field] = files;\r\n                continue;\r\n            }\r\n\r\n            data[field] = formValue[field];\r\n        }\r\n\r\n        const response = !modify\r\n            ? await createPaymentDetails( parse(data) ) \r\n            : await modifyPaymentDetails( parse(data) );\r\n\r\n        if (response) {\r\n            getPaymentDetailsList({target: {account_id: accountId}});\r\n            onClose(response);\r\n        }\r\n        \r\n        setLoading(false);\r\n    };\r\n\r\n\r\n    const setFormFields = (organizationType, paymentMethod) => {\r\n        // company + hawala\r\n        if (organizationType === 2 && paymentMethod === 5) {\r\n            return [[], []];\r\n        }\r\n        // private person + hawala\r\n        if (organizationType === 1 && paymentMethod === 5) {\r\n            return [[], ['hawala_description']];\r\n        }\r\n        // default\r\n        const organizationFields = organizationType === 1 ? customerFields : companyFields;\r\n        return [organizationFields, methodFields[paymentMethod - 1]]\r\n    };\r\n\r\n\r\n    const renderFields = (fieldNames = [], formValue) => (\r\n        fieldNames.map((fieldName) => {\r\n            const {type, name, label: defaultLabel, labelId, hideOn, ...props} = fields[fieldName];\r\n\r\n            // hide on option\r\n            if (hideOn && Array.isArray(hideOn)) {\r\n                for (const conditionItem of hideOn) {\r\n                    const keys = Object.keys(conditionItem || {});\r\n                    const status = keys.map(key => {\r\n                        return formValue[key] && formValue[key] === conditionItem[key];\r\n                    });\r\n                    \r\n                    if (!status.includes(false))\r\n                        return null;\r\n                }\r\n            }\r\n\r\n            // get label\r\n            const label = defaultLabel;\r\n\r\n            switch (type) {\r\n                case 'select_country':\r\n                    return <FieldSelectCountry key={name} name={name} label={label} data={countryList} {...props} />;\r\n\r\n                case 'file':\r\n                    const label_ = formValue.ot_key === 1 \r\n                        ? \"Passport scans\"\r\n                        : \"Certificate of Incorporation\";\r\n                    return <FieldFile key={name} name={name} defaultFileList={formValue[name]} label={label_} {...props} />;\r\n\r\n                default:\r\n                    return <FieldInput key={name} name={name} label={label} {...props} />\r\n            }\r\n        })\r\n    );\r\n\r\n\r\n    const clearForm = () => {\r\n        setFormValue(defaultValue);\r\n    };\r\n\r\n\r\n    const cleanErrors = () => {\r\n        formRef.cleanErrors();\r\n    };\r\n\r\n    return (\r\n        <S.FormModal\r\n            {...{show, onClose}}\r\n            title={modify \r\n                ? \"Modify payment details\"\r\n                : \"Add new payment details\"\r\n            }\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            footer={true}\r\n            onSuccessClose={false}\r\n            successButton=\"Save changes\"\r\n            loading={loading}\r\n            keyboard={false}\r\n            onSuccess={handleFormSubmit}\r\n            onClose={() => {\r\n                onClose(false);\r\n            }}\r\n            onExited={() => {\r\n                clearForm();\r\n            }}\r\n        >\r\n\r\n                <Form\r\n                    ref={ref => formRef = ref}\r\n                    model={formModel}\r\n                    formValue={formValue}\r\n                    onChange={setFormValue}\r\n                >\r\n                    <S.FlexBlock>\r\n                        <S.FlexChild>\r\n                            <S.Group>\r\n                                <S.Label>Choose organization type</S.Label>\r\n                                <FormControl\r\n                                    name=\"ot_key\"\r\n                                    accepter={SelectPicker}\r\n                                    data={organizationTypeList}\r\n                                    labelKey=\"name\"\r\n                                    valueKey=\"ot_key\"\r\n                                    cleanable={false}\r\n                                    searchable={false}\r\n                                    disabled={modify}\r\n                                    onChange={cleanErrors}\r\n                                />\r\n                            </S.Group>\r\n                        </S.FlexChild>\r\n\r\n                        <S.FlexChild>\r\n                            <S.Group>\r\n                                <S.Label>Payment method</S.Label>\r\n                                <FormControl\r\n                                    name=\"pm_key\"\r\n                                    accepter={SelectPicker}\r\n                                    data={paymentMethodList}\r\n                                    labelKey=\"name\"\r\n                                    valueKey=\"pm_key\"\r\n                                    cleanable={false}\r\n                                    searchable={false}\r\n                                    disabled={modify}\r\n                                    disabledItemValues={formValue.ot_key === 2 ? [5] : []}\r\n                                    onChange={cleanErrors}\r\n                                />\r\n                            </S.Group>\r\n                        </S.FlexChild>\r\n\r\n                    </S.FlexBlock>\r\n\r\n                    <Spacer size={30}/>\r\n\r\n                    <S.FormColumns>\r\n                        {setFormFields(formValue.ot_key, formValue.pm_key)\r\n                            .map((fieldsGroup, index, arr) => {\r\n                                if (!fieldsGroup.length)\r\n                                    return null;\r\n                                \r\n                                return (\r\n                                    <>\r\n                                        {index > 0 && arr[0].length > 0 && \r\n                                            <Divider style={{width: 0}} vertical />\r\n                                        }\r\n                                        <S.FormColumn colWidth=\"50%\">\r\n                                            {renderFields(fieldsGroup, formValue)}\r\n                                        </S.FormColumn>\r\n                                    </>\r\n                                )\r\n                            })\r\n                        }\r\n                    </S.FormColumns>\r\n                </Form>\r\n        </S.FormModal>\r\n    )\r\n};\r\n\r\n\r\nconst FieldInput = ({name, label, type, ...props}) => (\r\n    <S.Group>\r\n        <S.LabelWrapper>\r\n            <S.Label>{label}</S.Label>\r\n        </S.LabelWrapper>\r\n        <S.Field name={name} {...props}/>\r\n    </S.Group>\r\n);\r\n\r\nconst FieldSelectCountry = ({name, label, type, data, ...props}) => (\r\n    <S.Group>\r\n        <S.LabelWrapper>\r\n            <S.Label>{label}</S.Label>\r\n        </S.LabelWrapper>\r\n        <S.Field\r\n            name={name}\r\n            accepter={SelectPicker}\r\n            cleanable={false}\r\n            data={data}\r\n            valueKey=\"cntr_code\"\r\n            labelKey=\"name\"\r\n            {...props}\r\n        />\r\n    </S.Group>\r\n);\r\n\r\nconst FieldFile = ({name, label, type, defaultFileList, ...props}) => (\r\n    <S.Group>\r\n        <S.LabelWrapper \r\n            vAlign=\"flex-start\" \r\n            top={18}\r\n        >\r\n            <S.Label>{label}</S.Label>\r\n        </S.LabelWrapper>\r\n\r\n        <S.FileUploader \r\n            name={name}\r\n            defaultFileList={defaultFileList || []}\r\n            accepter={Uploader}\r\n            {...props}\r\n        >\r\n            <button><Icon icon='file-image-o' size=\"2x\" /></button>\r\n        </S.FileUploader>\r\n    </S.Group>\r\n)","import React, {useState} from \"react\";\r\nimport Modal from '../../components/Modal';\r\nimport { useWindowWidth } from \"../../hooks\";\r\n\r\nexport default ({\r\n    key,\r\n    show,\r\n    onClose,\r\n    maxWidth = 600,\r\n    selectedItem,\r\n    accountId,\r\n    removePaymentDetails,\r\n    getPaymentDetailsList\r\n}) => {\r\n\r\n    const resizedWidth = useWindowWidth();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleSuccess = async () => {\r\n        setLoading(true);\r\n\r\n        const data = {\r\n            target: {\r\n                payment_detail_id: (selectedItem || {})['id']\r\n            },\r\n        }\r\n\r\n        await removePaymentDetails(data);\r\n\r\n        getPaymentDetailsList({target: {account_id: accountId}});\r\n        setLoading(false);\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            {...{show, onClose}}\r\n            onClose={() => onClose(false)}\r\n            title=\"Remove payment detail\"\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            footer={true}\r\n            loading={loading}\r\n            onSuccessClose={false}\r\n            successButton=\"Yes\"\r\n            focusTarget=\"close\"\r\n            onSuccess={handleSuccess}\r\n        >\r\n            Are you sure?\r\n        </Modal>\r\n    )\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport PaymentDetailsTable from \"./PaymentDetailsTable\";\r\nimport styled from \"styled-components\";\r\nimport {Button, FlexboxGrid} from \"rsuite\";\r\nimport {Spacer} from \"../../components/base/Spacer\";\r\nimport ModalAddPayment from \"./ModalAddPaymentDetail\";\r\nimport ModalRemovePaymentDetail from \"./ModalRemovePaymentDetail\";\r\nimport flaser from \"object-flaser/lib/flaser\";\r\nimport {SCREEN_MEDIA} from \"../../const\";\r\nimport {ButtonContent} from \"../../components/base/BaseButton\";\r\n\r\nconst {sm, md} = SCREEN_MEDIA;\r\n\r\n\r\nconst PaymentDetails = ({\r\n    accountId,\r\n    data, \r\n    loading,\r\n    organizationTypeList,\r\n    countryList,\r\n    paymentMethodList, \r\n    getPaymentDetailsList,\r\n    getPaymentDetailsSingle,\r\n    createPaymentDetails,\r\n    modifyPaymentDetails,\r\n    removePaymentDetails,\r\n    allowGetList = true\r\n}) => {\r\n\r\n    const [showModalAddPaymentDetail, setShowModalAddPaymentDetail] = useState(false);\r\n    const [showModalRemovePaymentDetail, setShowModalRemovePaymentDetail] = useState(false);\r\n    const [selectedItem, setSelectedItem] = useState(null);\r\n    const [isModify, setIsModify] = useState(false);\r\n    const [addPaymentDefaultValue, setAddPaymentDefaultValue] = useState(false);\r\n    const [loadingEditElementsSet, setLoadingEditElementsSet] = useState(new Set());\r\n    \r\n    useEffect(() => {\r\n        if (allowGetList && accountId) {\r\n            getPaymentDetailsList({target: {account_id: accountId}});\r\n        }\r\n    }, [accountId, allowGetList]);\r\n\r\n    const onShowModalAddPaymentDetail = () => {\r\n        setShowModalAddPaymentDetail(true);\r\n    };\r\n\r\n    const closeModalAddPaymentDetail = () => {\r\n        setIsModify(false);\r\n        setAddPaymentDefaultValue(false);\r\n        setShowModalAddPaymentDetail(false);\r\n    };\r\n\r\n    const handleEditPaymentDetails = async (value) => {\r\n        const {id} = value;\r\n\r\n        // set elements loading status\r\n        const editElements = new Set(loadingEditElementsSet);\r\n        setLoadingEditElementsSet( editElements.add(id) );\r\n\r\n        const response = await getPaymentDetailsSingle({target: {payment_detail_id: id}});\r\n\r\n        // remove elements loading status\r\n        if (editElements.has(id)) {\r\n            editElements.delete(id);\r\n            setLoadingEditElementsSet(editElements);\r\n        }\r\n\r\n        if (!response && response.payment_detail) {\r\n            return;\r\n        }\r\n\r\n        const fetchedData = response.payment_detail;\r\n\r\n        let files = null;\r\n        if (fetchedData.ext_files) {\r\n            files = [];\r\n            for (const file of fetchedData.ext_files) {\r\n                files.push({\r\n                    url: `data:${file.type};base64,${file.file}`,\r\n                    fileKey: file.file_id,\r\n                    name: file.name,\r\n                });\r\n            }\r\n        }\r\n\r\n        const defaultValue = {\r\n            ...fetchedData,\r\n            ext_files: files\r\n        };\r\n\r\n        setIsModify(true);\r\n        setAddPaymentDefaultValue( flaser(defaultValue) );\r\n        setShowModalAddPaymentDetail(true);\r\n    };\r\n\r\n    const handleRemovePaymentDetails = (value) => {\r\n        setSelectedItem(value);\r\n        setShowModalRemovePaymentDetail(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FlexboxGrid justify=\"end\">\r\n                <FlexboxGrid.Item>\r\n                    <StyledActionButtonWrapper>\r\n                        <ActionButton\r\n                            onClick={onShowModalAddPaymentDetail}\r\n                        >\r\n                            + Add new\r\n                        </ActionButton>\r\n                    </StyledActionButtonWrapper>\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n\r\n            <Spacer/>\r\n \r\n            <PaymentDetailsTable\r\n                data={data}\r\n                loading={loading || !allowGetList}\r\n                loadingEditButtonsSet={loadingEditElementsSet}\r\n                {...{\r\n                    handleRemovePaymentDetails,\r\n                    handleEditPaymentDetails\r\n                }}\r\n            />\r\n\r\n            <ModalAddPayment\r\n                show={showModalAddPaymentDetail}\r\n                onClose={closeModalAddPaymentDetail}\r\n                value={isModify ? addPaymentDefaultValue : false }\r\n                modify={isModify}\r\n                {...{\r\n                    accountId,\r\n                    organizationTypeList,\r\n                    countryList,\r\n                    paymentMethodList,\r\n                    getPaymentDetailsList,\r\n                    createPaymentDetails,\r\n                    modifyPaymentDetails,\r\n                }}\r\n            />\r\n\r\n            <ModalRemovePaymentDetail\r\n                show={showModalRemovePaymentDetail}\r\n                onClose={() => {\r\n                    setShowModalRemovePaymentDetail(false)\r\n                }}\r\n                {...{\r\n                    accountId,\r\n                    selectedItem,\r\n                    getPaymentDetailsList,\r\n                    removePaymentDetails\r\n                }}\r\n            />\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default PaymentDetails;\r\n\r\nconst StyledActionButtonWrapper = styled.div`\r\n    text-align: center;\r\n    \r\n    @media (min-width: 768px) {\r\n        text-align: right;\r\n    }\r\n`;\r\n\r\n\r\nexport const ActionButton = styled(ButtonContent).attrs(() => ({\r\n    size: 'md',\r\n    buttonStyle: 'secondary',\r\n}))`\r\n    && {\r\n        padding: ${props => props.isLink ? '0' : '12px 20px'};\r\n        width: auto;\r\n    \r\n        .rs-icon {\r\n            margin-right: 5px;\r\n        }\r\n    \r\n        @media (min-width: ${sm.min}px) {\r\n            min-width: 160px;\r\n        }\r\n        \r\n        @media (min-width: ${md.min}px) {\r\n            padding: ${props => props.isLink ? '0' : '8px 12px'};\r\n        }\r\n    }\r\n`;","import { connect } from \"react-redux\";\r\nimport {\r\n    getPaymentDetailsList,\r\n    getPaymentDetailsSingle,\r\n    createPaymentDetails,\r\n    modifyPaymentDetails,\r\n    removePaymentDetails\r\n} from \"../../actions/paymentDetails\";\r\nimport PaymentDetails from \"./PaymentDetails\";\r\n\r\nconst mapState = ({paymentDetails, references}) => ({\r\n    organizationTypeList: references.organization_type_list,\r\n    countryList: references.country_list,\r\n    paymentMethodList: references.payment_method_list,\r\n    data: paymentDetails.items,\r\n    loading: paymentDetails.loading\r\n});\r\n\r\nexport default connect(mapState, {\r\n    getPaymentDetailsList,\r\n    getPaymentDetailsSingle,\r\n    createPaymentDetails,\r\n    modifyPaymentDetails,\r\n    removePaymentDetails\r\n})(PaymentDetails);","import React, {useState} from \"react\";\r\nimport Modal from '../../../components/Modal';\r\nimport {useWindowWidth} from \"../../../hooks\";\r\nimport PaymentDetails from \"../../PaymentDetails\";\r\nimport { Spacer } from \"../../../components/base/Spacer\";\r\n\r\nexport default ({\r\n    accountId,\r\n    show,\r\n    onClose\r\n}) => {\r\n\r\n    const [allowGetList, setAllowGetList] = useState(false);\r\n\r\n    return (\r\n        <Modal\r\n            {...{show, onClose}}\r\n            title=\"Payment details\"\r\n            width={'90%'}\r\n            overflow={false}\r\n            onEntered={() => {\r\n                setAllowGetList(true);\r\n            }}\r\n            onClose={() => {\r\n                onClose(false);\r\n                setAllowGetList(false);\r\n            }}\r\n        >\r\n            <PaymentDetails allowGetList={allowGetList} accountId={accountId}/>\r\n            <Spacer/>\r\n        </Modal>\r\n    )\r\n}","import React, {useLayoutEffect} from \"react\";\r\nimport {withRouter} from \"react-router\";\r\nimport {Dropdown, Icon} from \"rsuite\";\r\nimport {connect} from \"react-redux\";\r\nimport {pageIdLogObject} from \"../../utils/pageIdLogger\";\r\nimport BaseNav from \"../base/BaseNav\";\r\n\r\nconst PageTabs = ({\r\n    isMobile,\r\n    activeTab,\r\n    onSelect,\r\n    menuItems = [],\r\n    match\r\n}) => {\r\n\r\n    useLayoutEffect(() => {\r\n        savePageId(activeTab);\r\n    }, [activeTab]);\r\n\r\n    console.log(\"activeTab\", activeTab);\r\n\r\n\r\n    const savePageId = (val) => {\r\n        pageIdLogObject.pageMatch = {...match, path: match.path + '/' + val};\r\n        pageIdLogObject.lastTab = val;\r\n    };\r\n\r\n\r\n    if (isMobile) {\r\n        return (\r\n            <Dropdown\r\n                icon={<Icon icon=\"bars\" />}\r\n                appearance=\"ghost\"\r\n                placement={\"bottomEnd\"}\r\n                onSelect={onSelect}\r\n                activeKey={activeTab}\r\n            >\r\n                {menuItems.map(item => (\r\n                    <Dropdown.Item key={item.id} eventKey={item.eventKey}>{item.title}</Dropdown.Item>\r\n                ))}\r\n            </Dropdown>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <BaseNav\r\n            activeKey={activeTab}\r\n            onSelect={onSelect}\r\n            appearance=\"tabs\"\r\n        >\r\n            {menuItems.map(item => (\r\n                <BaseNav.Item key={item.id} eventKey={item.eventKey}>{item.title}</BaseNav.Item>\r\n            ))}\r\n        </BaseNav>\r\n    )\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    {}\r\n)(withRouter(PageTabs));","import React, {useEffect} from 'react';\r\nimport {Nav} from 'rsuite';\r\nimport {Spacer} from \"../../components/base/Spacer\";\r\nimport PageTabs from \"../../components/PageTabs\";\r\n\r\n\r\nconst menuItems = [\r\n    {id: \"payment-requests\", eventKey: \"payment-requests\", title: \"Payment requests\"},\r\n    {id: \"payments\", eventKey: \"payments\", title: \"Payments\"},\r\n    {id: \"invoices\", eventKey: \"invoices\", title: \"Invoices\"},\r\n    {id: \"hawala-payment-request\", eventKey: \"hawala-payment-request\", title: \"Hawala payment request\"},\r\n];\r\n\r\n\r\nexport default ({\r\n    activeTab,\r\n    onSelect\r\n}) => {\r\n\r\n    return (\r\n            <>\r\n                <PageTabs\r\n                    {...{activeTab, onSelect, menuItems}}\r\n                />\r\n                <Spacer size={30}/>\r\n            </>    \r\n        )\r\n}","import React, {Component} from 'react';\r\nimport {sortData} from \"utils\";\r\nimport {ASC_SORT} from \"const\";\r\nimport Table from './Table';\r\nimport _ from \"lodash\";\r\n\r\nfunction TableClientSortHOC(TableComponent) {\r\n    return class extends Component {\r\n        constructor(props) {\r\n            super(props);\r\n\r\n            this.state = {\r\n                sortType: props.defaultSortType || props.sortType || ASC_SORT,\r\n                sortColumn: props.defaultSortColumn || props.sortColumn || _.get(props,'columns[0].dataKey', undefined),\r\n                data: props.data || []\r\n            };\r\n        }\r\n\r\n        componentDidUpdate(prevProps, prevState, snapshot) {\r\n            const {sortType, sortColumn, defaultSortType, defaultSortColumn} = this.props;\r\n\r\n            //Apply when page changed or count per page\r\n            if (this.props.data !== prevProps.data) {\r\n                this.setState({\r\n                    data: sortData(this.state.data, this.state.sortColumn, this.state.sortType)\r\n                })\r\n            }\r\n\r\n            if (prevProps.sortType !== sortType || prevProps.sortColumn !== sortColumn) {\r\n                this.setState({\r\n                    sortType: sortType || defaultSortType ||  ASC_SORT,\r\n                    sortColumn: sortColumn || defaultSortColumn || _.get(this.props,'columns[0].dataKey', undefined),\r\n                    data: sortData(this.state.data, sortColumn, sortType),\r\n                });\r\n            }\r\n        }\r\n\r\n        static getDerivedStateFromProps(props, state) {\r\n            return {\r\n                data: props.data,\r\n            };\r\n        }\r\n\r\n        handleSortColumn = (column, type) => {\r\n            this.setState({\r\n                sortColumn: column,\r\n                sortType: type,\r\n                data: sortData(this.state.data, column, type),\r\n            });\r\n        };\r\n\r\n        render() {\r\n            const {...props} = this.props;\r\n\r\n            return (\r\n                <>\r\n                    <TableComponent\r\n                        {...props}\r\n                        data={this.state.data}\r\n                        onSortColumn={this.handleSortColumn}\r\n                        sortType={this.state.sortType}\r\n                        sortColumn={this.state.sortColumn}\r\n                    />\r\n                </>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport {TableClientSortHOC};\r\nexport default TableClientSortHOC(Table);\r\n\r\n","import React, {useCallback, useEffect, useMemo, useState} from 'react'\r\nimport {Alert, Input, SelectPicker, Form, Schema} from 'rsuite'\r\nimport styled, {css} from 'styled-components'\r\nimport Button from 'rsuite/es/Button'\r\nimport Icon from 'rsuite/es/Icon'\r\nimport TableClientSort from '../../../components/Table/TableClientSort'\r\nimport {HAWALA_PAYMENT_MININUM} from '../../../const'\r\nimport {compareTwoArrays} from '../../../utils'\r\n\r\nconst {NumberType} = Schema.Types;\r\n\r\nconst paymentModels = {};\r\n\r\nexport default ({\r\n    data = [],\r\n    loading = false,\r\n    filter = {},\r\n    height = null,\r\n    setSelected,\r\n    paymentMethodList,\r\n    clearSelectedData,\r\n    setClearSelectedData,\r\n    ...props\r\n}) => {\r\n    let formRefMap = new Map();\r\n    let tableRef = null;\r\n\r\n    const [hawalaPaymentList, onChangeHawalaPaymentList] = useState(data);\r\n    const [selectedData, setSelectedData] = useState(new Map());\r\n    const [availablePayment, onChangeAvailablePayment] = useState(new Map());\r\n    const [selectedItems, setSelectedItems] = useState(new Map());\r\n    const [paymentValue, onChangePaymentValue] = useState(new Map());\r\n    const [openEditAvailable, setOpenEditAvailable] = useState(new Set());\r\n    const [formErrors, updateFormErrors] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (!compareTwoArrays(data, hawalaPaymentList)) {\r\n            onChangeHawalaPaymentList(data);\r\n        }\r\n    }, [data]);\r\n\r\n    useEffect(() => {\r\n        if (clearSelectedData) {\r\n            setSelectedData(new Map());\r\n            onChangeAvailablePayment(new Map());\r\n            setSelectedItems(new Map());\r\n            onChangePaymentValue(new Map());\r\n            setOpenEditAvailable(new Set());\r\n            updateFormErrors({});\r\n            setClearSelectedData(false);\r\n        }\r\n    }, [clearSelectedData]);\r\n\r\n    const hawalaMethod = useMemo(() => paymentMethodList && paymentMethodList.length && paymentMethodList.find(item => item.pm_key === 5), [paymentMethodList]);\r\n    const filteredData = useMemo(() => {\r\n        if (!hawalaPaymentList)\r\n            return [];\r\n\r\n        const filteredData = hawalaPaymentList.filter(item => {\r\n            if (!item.is_managed)\r\n                return false;\r\n\r\n            if (filter.paid_only && (\r\n                (hawalaMethod && (hawalaMethod.limit > item.available_for_payment) ) ||\r\n                !item.available_for_payment\r\n            )) {\r\n                return  false\r\n            }\r\n\r\n            if (filter.account_manager_id && filter.account_manager_id !== item.account_manager_id) {\r\n\r\n                return  false\r\n            }\r\n\r\n            if (filter.payment_terms_name && filter.payment_terms_name !== item.payment_terms_name) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        return filteredData.map(item => item.available_for_payment && item.available_for_payment > 0\r\n            ? (hawalaMethod && (HAWALA_PAYMENT_MININUM > item.available_for_payment))\r\n                ? {...item, preventCheck: true}\r\n                : item\r\n            : {...item, preventCheck: true, disabled: true}\r\n        )\r\n    }, [hawalaPaymentList, filter, hawalaMethod]);\r\n\r\n    // clear selections on data update\r\n    useEffect(() => {\r\n        if (tableRef && tableRef.clear) {\r\n            tableRef.clear();\r\n        }\r\n        setClearSelectedData(true);\r\n        if (filteredData.length) {\r\n            const paymentValueCopy = new Map(paymentValue);\r\n            filteredData.forEach(item => {\r\n                paymentModels[item.id] = Schema.Model({\r\n                    \"available_for_payment\": NumberType('Enter a valid number')\r\n                        .isRequired('Enter a valid number')\r\n                        .max(item.available_for_payment, `Value greater than ready for payment`)\r\n                        .min(HAWALA_PAYMENT_MININUM, `Value lesser than minimum ${HAWALA_PAYMENT_MININUM}`)\r\n                })\r\n                if (Object.keys(paymentValue).length < filteredData.length) {\r\n                    const currentValue = availablePayment && availablePayment.has(item.id) ? availablePayment.get(item.id)[\"available_for_payment\"] : item.available_for_payment || 0;\r\n                    paymentValueCopy.set(item.id, currentValue);\r\n                }\r\n            })\r\n            onChangePaymentValue(paymentValueCopy)\r\n        }\r\n    }, [filteredData, filter, tableRef]);\r\n\r\n    useEffect(() => {\r\n        const selectedItemsKeys = Array.from(selectedItems.keys());\r\n        const selectedDataKeys = Array.from(selectedData.keys());\r\n        if (selectedDataKeys.length && selectedItemsKeys.some(key => selectedDataKeys.find(sd_key => sd_key === key))) {\r\n            const resultData = Array.from(selectedData.keys()).reduce((items, key) => {\r\n                items[key] = selectedData.get(key);\r\n                return items;\r\n            }, {});\r\n\r\n            setSelected(resultData)\r\n        } else {\r\n            setSelected({})\r\n        }\r\n    }, [selectedItems])\r\n\r\n    const onCheckPrevented = useCallback(() => {\r\n        Alert.warning(\"Minimum payment limit is greater than the balance\");\r\n    }, []);\r\n\r\n    const fillFormsMap = (id, ref) => {\r\n        const formRefMapCopy = new Map(formRefMap);\r\n        formRefMapCopy.set(id, ref);\r\n        formRefMap = formRefMapCopy;\r\n    }\r\n\r\n    const selectItem = async (id, value, check) => {\r\n        const selectedDataCopy = new Map(selectedData);\r\n        const selectedItemsCopy = new Map(selectedItems);\r\n\r\n        if (check) {\r\n            if (value.has(id)) {\r\n                const selectedValue = value.get(id);\r\n                if (selectedValue.hasOwnProperty(\"available_for_payment\")) {\r\n                    selectedItemsCopy.set(id, {\"available_for_payment\": selectedValue[\"available_for_payment\"]});\r\n                }\r\n            }\r\n\r\n            if (onCheckPrevented) {\r\n                const checkedItem = filteredData.find(item => item.id === id);\r\n                if (checkedItem.preventCheck)\r\n                    onCheckPrevented();\r\n            }\r\n            setShowEditAvailable(true, id);\r\n        } else {\r\n            selectedItemsCopy.delete(id);\r\n\r\n            if (selectedDataCopy.has(id))\r\n                selectedDataCopy.delete(id)\r\n\r\n\r\n            setShowEditAvailable(false, id);\r\n        }\r\n\r\n        if (Array.from(selectedDataCopy.keys()).length < Array.from(selectedData.keys()).length)\r\n            setSelectedData(selectedDataCopy);\r\n\r\n        setSelectedItems(selectedItemsCopy);\r\n\r\n        return selectedItemsCopy;\r\n    };\r\n\r\n    const selectAllItems = (checked, selectedList) => {\r\n        const selectedItemsCopy = new Map(selectedItems);\r\n        const selectedDataCopy = new Map(selectedData);\r\n        const paymentValueCopy = new Map(paymentValue);\r\n        const availablePaymentCopy = new Map(availablePayment);\r\n\r\n        const openEditAvailableCopy = new Set(openEditAvailable);\r\n\r\n        selectedList.forEach(selectedItem => {\r\n            if (checked) {\r\n                const currentAvailablePayment = availablePayment.has(selectedItem.id)\r\n                    && availablePayment.get(selectedItem.id).available_for_payment\r\n                    || selectedItem.available_for_payment\r\n                    || undefined;\r\n\r\n                selectedItemsCopy.set(selectedItem.id, {\"available_for_payment\": currentAvailablePayment});\r\n                selectedDataCopy.set(selectedItem.id, {\"available_for_payment\": undefined});\r\n            } else {\r\n                selectedItemsCopy.delete(selectedItem.id);\r\n\r\n                if (selectedDataCopy.has(selectedItem.id)) {\r\n                    selectedDataCopy.delete(selectedItem.id);\r\n\r\n                }\r\n                if (paymentValueCopy.has(selectedItem.id)) {\r\n                    paymentValueCopy.delete(selectedItem.id);\r\n                }\r\n                if (availablePaymentCopy.has(selectedItem.id)) {\r\n                    availablePaymentCopy.delete(selectedItem.id);\r\n                }\r\n\r\n                openEditAvailableCopy.delete(selectedItem.id);\r\n            }\r\n        });\r\n\r\n        Array.from(selectedItemsCopy.keys()).forEach(key => {\r\n            const formValid = formErrors.hasOwnProperty(key) && !formErrors[key].hasError;\r\n\r\n            if (formValid) {\r\n                const currentValue = availablePaymentCopy.has(key) && Object.keys(availablePaymentCopy.get(key)).length\r\n                && availablePaymentCopy.get(key)[\"available_for_payment\"]\r\n                    ? parseFloat(availablePaymentCopy.get(key)[\"available_for_payment\"]) : undefined;\r\n                selectedDataCopy.set(key,\r\n                    {\"available_for_payment\": currentValue}\r\n                );\r\n            }\r\n\r\n        });\r\n\r\n        if (Array.from(availablePaymentCopy.keys()).length < Array.from(availablePayment.keys()).length)\r\n            onChangeAvailablePayment(availablePaymentCopy);\r\n\r\n        setSelectedData(selectedDataCopy);\r\n\r\n        setSelectedItems(selectedItemsCopy);\r\n        onChangePaymentValue(paymentValueCopy);\r\n        setOpenEditAvailable(openEditAvailableCopy);\r\n    };\r\n\r\n    const getItemId = (row) => {\r\n        return row['id'];\r\n    };\r\n\r\n    const fillSelectedItems = (selectedList) => {\r\n        const selectedItemsCopy = new Map(selectedItems);\r\n\r\n        selectedList.forEach(selectedItem => {\r\n            selectedItemsCopy.set(selectedItem.id, {})\r\n        });\r\n\r\n        setSelectedItems(selectedItemsCopy);\r\n    };\r\n\r\n    const checkMapValueExits = (id, map) => {\r\n        return map && map.has(id) && map.get(id) && Object.keys(map.get(id)).length;\r\n    };\r\n\r\n    const setAvailablePayment = async (id, value, check = null) => {\r\n        const availablePaymentCopy = new Map(availablePayment);\r\n        const selectedItemsCopy = new Map(selectedItems);\r\n        const paymentValueCopy = new Map(paymentValue);\r\n        const selectedDataCopy = new Map(selectedData);\r\n\r\n        const formError = Object.keys(formErrors).length && formErrors.hasOwnProperty(id) ? formErrors[id][\"available_for_payment\"] : null;\r\n\r\n        const newAvailableData = {\"available_for_payment\": value};\r\n\r\n        if (check === true) {\r\n            availablePaymentCopy.set(id, newAvailableData);\r\n            paymentValueCopy.set(id, value);\r\n            selectedDataCopy.set(id, {});\r\n        } else if (check === false) {\r\n            if (selectedDataCopy.has(id))\r\n                selectedDataCopy.delete(id);\r\n\r\n            paymentValueCopy.delete(id);\r\n            availablePaymentCopy.delete(id);\r\n        }\r\n\r\n        const formValid = formErrors.hasOwnProperty(id) && !formErrors[id].hasError;\r\n        if (formValid) {\r\n            const currentValue = paymentValueCopy.has(id) && paymentValueCopy.get(id)\r\n                ? parseFloat(paymentValueCopy.get(id)) : undefined;\r\n            selectedDataCopy.set(id, {\"available_for_payment\": currentValue});\r\n        }\r\n\r\n        if (!formError || formError && !formError.hasError)\r\n            setSelectedData(selectedDataCopy);\r\n\r\n        setSelectedItems(selectedItemsCopy);\r\n        onChangeAvailablePayment(availablePaymentCopy);\r\n        onChangePaymentValue(paymentValueCopy);\r\n        setShowEditAvailable(false, id);\r\n        return availablePaymentCopy;\r\n    }\r\n\r\n    const setDefaultPayment = (id, row) => {\r\n        const availablePaymentCopy = new Map(availablePayment);\r\n        const defaultValue = parseFloat(row.available_for_payment);\r\n        const defaultData = {\"available_for_payment\": defaultValue};\r\n\r\n        const formModel = Object.keys(paymentModels).length && paymentModels.hasOwnProperty(id) ? paymentModels[id] : null;\r\n\r\n        let newFormError = formModel.check({\"available_for_payment\": defaultValue})\r\n        newFormError = newFormError && newFormError.hasOwnProperty(\"available_for_payment\") ? newFormError.available_for_payment : {};\r\n        updateFormErrors({...formErrors, [id]: newFormError})\r\n        availablePaymentCopy.set(id, defaultData);\r\n        onChangeAvailablePayment(availablePaymentCopy);\r\n        const paymentValueCopy = new Map(paymentValue);\r\n        paymentValueCopy.set(id, row.available_for_payment);\r\n        onChangePaymentValue(paymentValueCopy);\r\n    }\r\n\r\n    const setShowEditAvailable = (flag, id) => {\r\n        const openEditAvailableCopy = new Set(openEditAvailable);\r\n        if (flag)\r\n            openEditAvailableCopy.add(id);\r\n        else if (!flag && openEditAvailableCopy.has(id))\r\n            openEditAvailableCopy.delete(id);\r\n\r\n        setOpenEditAvailable(openEditAvailableCopy);\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            label: 'Name',\r\n            dataKey: 'name',\r\n            value: ((rowData) => (\r\n                <span className=\"tableFilters__previewText\">{rowData[\"name\"]} / {rowData[\"account_manager_name\"] || 'no manager'}</span>\r\n            )),\r\n            flexGrow: 1,\r\n            minWidth: 300,\r\n        },\r\n        {\r\n            label: 'Payment terms',\r\n            dataKey: 'payment_terms_name',\r\n            value: ((rowData) => (\r\n                <span className=\"tableFilters__previewText\">{rowData[\"payment_terms_name\"]}</span>\r\n            )),\r\n            width: 150,\r\n        },\r\n        {\r\n            label: 'Email',\r\n            dataKey: 'name',\r\n            value: ((rowData) => (\r\n                    <span className=\"tableFilters__previewText\">\r\n                        {rowData[\"contact_email_list\"] && rowData[\"contact_email_list\"].length\r\n                            ? rowData[\"contact_email_list\"][0] : ''}\r\n                    </span>)\r\n            ),\r\n            flexGrow: 2\r\n        },\r\n        {\r\n            label: 'Ready for payment',\r\n            name: 'available_for_payment',\r\n            dataKey: 'available_for_payment',\r\n            value: ((rowData) => {\r\n                const resultData = Array.from(selectedData.keys()).reduce((items, key) => {\r\n                    items[key] = selectedData.get(key);\r\n                    return items;\r\n                }, {});\r\n                const defaultDataSelected = Object.keys(resultData).length && Object.keys(resultData).includes(rowData.id) && !resultData[rowData.id]\r\n                    || Object.keys(resultData).length && !Object.keys(resultData).includes(rowData.id)\r\n                    || !Object.keys(resultData).length;\r\n\r\n                return <StyledTableText\r\n                    disabled={!defaultDataSelected}\r\n                    className=\"tableFilters__previewText\">{rowData[\"available_for_payment\"]}</StyledTableText>\r\n            }),\r\n            sortable: true,\r\n            flexGrow: 1\r\n        },\r\n        {\r\n            label: 'Available for payment',\r\n            name: 'available_for_payment1',\r\n            dataKey: 'available_for_payment1',\r\n            value: ((rowData) => {\r\n                const openEditAvailableIds = Array.from(openEditAvailable.values());\r\n                const resultData = Array.from(selectedData.keys()).reduce((items, key) => {\r\n                    items[key] = selectedData.get(key);\r\n                    return items;\r\n                }, {});\r\n                const defaultDataSelected = Object.keys(resultData).length\r\n                    && Object.keys(resultData).includes(rowData.id)\r\n                    && resultData[rowData.id] !== undefined;\r\n\r\n                if (availablePayment.has(rowData.id) && availablePayment.get(rowData.id) && openEditAvailableIds.includes(rowData.id)) {\r\n                    const formModel = Object.keys(paymentModels).length && paymentModels.hasOwnProperty(rowData.id) ? paymentModels[rowData.id] : null;\r\n\r\n                    let newFormError;\r\n\r\n                    const currentPaymentValue = paymentValue && paymentValue.has(rowData.id) && paymentValue.get(rowData.id);\r\n                    const currentFormError = Object.keys(formErrors).length && formErrors.hasOwnProperty(rowData.id) && formErrors[rowData.id].hasOwnProperty(\"hasError\") ? formErrors[rowData.id] : {};\r\n                    const formErrorHasError = currentFormError && currentFormError.hasOwnProperty(\"hasError\") ? currentFormError.hasError : false;\r\n                    const formErrorMessage = currentFormError && currentFormError.hasOwnProperty(\"errorMessage\") ? currentFormError.errorMessage : null;\r\n\r\n                    return <StyledForm\r\n                        ref={ref => {\r\n                            fillFormsMap(rowData.id, ref)\r\n                        }}\r\n                        className=\"rs-form-control-wrapper\"\r\n                    >\r\n                        <EditField\r\n                            as={Input}\r\n                            value={currentPaymentValue}\r\n                            name=\"available_for_payment\"\r\n                            placeholder=\"Available for payment\"\r\n                            onChange={(value) => {\r\n                                const paymentValueCopy = new Map(paymentValue);\r\n                                paymentValueCopy.set(rowData.id, value);\r\n                                onChangePaymentValue(paymentValueCopy);\r\n\r\n                                newFormError = formModel.check({\"available_for_payment\": value})\r\n                                newFormError = newFormError && newFormError.hasOwnProperty(\"available_for_payment\") ?\r\n                                    newFormError.available_for_payment : {};\r\n\r\n                                updateFormErrors({...formErrors, [rowData.id]: newFormError})\r\n                            }}\r\n                        />\r\n                        {formErrorHasError ? <EditFieldError text={formErrorMessage}/> : null}\r\n                        <Button\r\n                            color=\"green\"\r\n                            disabled={formErrorHasError}\r\n                            className=\"edit_field_button submit\"\r\n                            onClick={() => {\r\n                                const currentValue = paymentValue && paymentValue.has(rowData.id)\r\n                                    && paymentValue.get(rowData.id) || rowData.available_for_payment || 0;\r\n                                setAvailablePayment(rowData.id, currentValue, true);\r\n                                setShowEditAvailable(false, rowData.id);\r\n\r\n                                const formValid = formErrors.hasOwnProperty(rowData.id) && !formErrors[rowData.id].hasError;\r\n                                if (!formValid) {\r\n                                    const defaultPayment = filteredData.length && filteredData.find(item => item.id === rowData.id);\r\n                                    setDefaultPayment(rowData.id, defaultPayment);\r\n                                }\r\n\r\n                                if (currentValue < hawalaMethod.limit) {\r\n                                    Alert.warning(`Available for payment is lesser than the minimum payment limit (${hawalaMethod.limit})`)\r\n                                }\r\n                            }}\r\n                        >\r\n                            <Icon icon=\"check\"/>\r\n                        </Button>\r\n                        <Button\r\n                            color=\"red\"\r\n                            className=\"edit_field_button cancel\"\r\n                            onClick={() => {\r\n                                setDefaultPayment(rowData.id, rowData)\r\n                            }}\r\n                        >\r\n                            <Icon icon=\"close\"/>\r\n                        </Button>\r\n                    </StyledForm>\r\n                }\r\n\r\n                return <StyledConfirmedPayment>\r\n                    <StyledTableText\r\n                        disabled={!defaultDataSelected}\r\n                        className=\"tableFilters__previewText\">{Array.from(paymentValue.keys()).length &&\r\n                    paymentValue.has(rowData.id) && paymentValue.get(rowData.id) || rowData[\"available_for_payment\"]}\r\n                    </StyledTableText>\r\n                    {checkMapValueExits(getItemId(rowData), selectedItems) && <StyledReturnButton\r\n                        appearance=\"primary\"\r\n                        onClick={() => {\r\n                            setDefaultPayment(rowData.id, rowData);\r\n                            setShowEditAvailable(true, rowData.id);\r\n                        }}\r\n                    >\r\n                        <Icon icon=\"pencil\"/>\r\n                    </StyledReturnButton>}\r\n                </StyledConfirmedPayment>\r\n            }),\r\n            width: 220,\r\n            flexGrow: 1\r\n        },\r\n        {\r\n            label: 'Currency',\r\n            dataKey: 'currency',\r\n            value: ((rowData) => (\r\n                <span className=\"tableFilters__previewText\">{rowData[\"currency\"]}</span>\r\n            )),\r\n            width: 100,\r\n            flexGrow: 1\r\n        }\r\n    ];\r\n    return (\r\n        <StyledTableClientSort\r\n            ref={ref => tableRef = ref}\r\n            shouldUpdateScroll={true}\r\n            extraHeight={height || 700}\r\n            data={filteredData}\r\n            loading={loading}\r\n            virtualized={true}\r\n            rowHeight={36}\r\n            defaultSortColumn=\"available_for_payment\"\r\n            {...{\r\n                columns,\r\n                onCheckPrevented,\r\n                ...props\r\n            }}\r\n            isselected\r\n            partialSelectedAll\r\n            clearSelected={clearSelectedData}\r\n            setSelected={(selected) => {\r\n                if (selected && Object.keys(selected).length) {\r\n                    const selectedList = selected.list && filteredData.filter(item => selected.list.includes(item.id));\r\n                    selected.all = selectedList.length === filteredData.length && selectedList.length > 1 || selected.list && !selected.list.length;\r\n\r\n                    fillSelectedItems(selectedList);\r\n\r\n                    const uncheckedListToDelete = filteredData.filter(item => {\r\n                        return checkMapValueExits(item.id, selectedItems) && !selectedList.map(selectedItem => selectedItem.id).includes(item.id)\r\n                    });\r\n                    if (uncheckedListToDelete.length) {\r\n                        selectAllItems(false, uncheckedListToDelete);\r\n                    } else if (selectedList.length) {\r\n                        selectAllItems(true, selectedList)\r\n                    }\r\n                }\r\n            }}\r\n        />\r\n    )\r\n};\r\n\r\nconst EditFieldError = ({text}) => (\r\n    <ErrorMessageWrapper className=\"rs-error-message-wrapper rs-form-control-message-wrapper rs-error-message-placement-top-end\">\r\n        <span className=\"rs-error-message rs-error-message-show\">\r\n            <span className=\"rs-error-message-inner\">{text}</span>\r\n        </span>\r\n    </ErrorMessageWrapper>\r\n);\r\n\r\nconst StyledTableClientSort = styled(TableClientSort)`\r\n    .rs-table-cell-content {\r\n        padding: 0 0 0 10px !important;\r\n    }\r\n`;\r\n\r\nconst StyledConfirmedPayment = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nconst ErrorMessageWrapper = styled.div`\r\n    position: relative !important;\r\n    margin-top: -10px;\r\n    \r\n    .rs-error-message {\r\n        font-size: 9px !important;\r\n        padding: 0 1px 1px 1px !important;\r\n    }\r\n`;\r\n\r\nconst EditField = styled(SelectPicker).attrs(props => ({\r\n    className: \"tableFilters_field\",\r\n    errorPlacement: \"topEnd\",\r\n    type: \"text\",\r\n}))`\r\n  width: 130px !important;\r\n`;\r\n\r\nconst StyledForm = styled(Form)`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    height: 36px;\r\n    right: 0;\r\n    position: absolute;\r\n    \r\n    .edit_field_button {\r\n        margin-left: 5px;\r\n        width: 30px;\r\n        height: 30px;\r\n        padding: 0;\r\n    }\r\n`;\r\nconst StyledReturnButton = styled(Button)`\r\n    position: absolute !important;\r\n    right: 0;\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 5px;\r\n    &.rs-btn {\r\n        padding: 0;\r\n    }\r\n`;\r\n\r\nconst StyledTableText = styled.span`\r\n   ${props =>\r\n    props.disabled && css`\r\n        color: var(--color-disabled);\r\n    `}\r\n`;\r\n\r\n\r\n","import React from 'react';\r\nimport {FormGroup, FormControl, ControlLabel, HelpBlock} from 'rsuite'\r\nimport styled from \"styled-components\";\r\n\r\nexport default class  extends React.PureComponent {\r\n    \r\n    render() {\r\n        const { name, message, label,widthLabel, accepter, error, ...props } = this.props;\r\n        \r\n        return (\r\n            <FormGroup className={error ? 'has-error' : ''} style={{marginBottom: 10, width:'100%'}}>\r\n                \r\n                {label && \r\n                    <ControlLabel style={{width:'100%', textAlign:'left', display:'block'}}>{label}</ControlLabel>\r\n                }\r\n\r\n                <StyledFieldWrapper>\r\n                    <FormControl\r\n                        name={name}\r\n                        accepter={accepter}\r\n                        errorMessage={error}\r\n                        errorPlacement=\"topRight\"\r\n                        {...props}\r\n                    />\r\n                </StyledFieldWrapper>\r\n\r\n            </FormGroup>\r\n      );\r\n    }\r\n}\r\n\r\nconst StyledFieldWrapper = styled.div`\r\n    max-width: 250px;\r\n`;","import React from \"react\";\r\nimport {Form, FormControl, Icon, InputGroup} from 'rsuite'\r\nimport CheckboxControl from \"../../../components/Form/CheckboxControl\";\r\nimport styled from 'styled-components'\r\nimport SelectPicker from 'rsuite/es/SelectPicker'\r\nimport CustomField from '../../NewAccount/CustomField'\r\n\r\nexport default ({\r\n    filters,\r\n    account_manager_list,\r\n    paymentTermsList,\r\n    onChangeFilters,\r\n}) => {\r\n\r\n    return (\r\n        <StyledForm\r\n            formDefaultValue={filters}\r\n            onChange={(value) => {\r\n                console.log('onChange', value);\r\n                onChangeFilters(value);\r\n            }}\r\n        >\r\n            <StyledFormControl\r\n                accepter={SelectPicker}\r\n                placeholder=\"Account manager\"\r\n                data={account_manager_list}\r\n                labelKey=\"name\"\r\n                valueKey=\"id\"\r\n                name=\"account_manager_id\"\r\n                label=\"Account manager\"\r\n                searchable={false}\r\n                errorPlacement=\"topRight\"\r\n            />\r\n\r\n            <StyledFormControl\r\n                accepter={SelectPicker}\r\n                data={paymentTermsList}\r\n                labelKey=\"name\"\r\n                valueKey=\"name\"\r\n                style={{width: 224}}\r\n                placeholder=\"Payment term\"\r\n                name=\"payment_terms_name\"\r\n                searchable={false}\r\n                errorPlacement=\"topRight\"\r\n            />\r\n\r\n            <CheckboxControl\r\n                name=\"paid_only\"\r\n                defaultChecked={true}\r\n            >\r\n                Show amounts above $100\r\n            </CheckboxControl>\r\n        </StyledForm>\r\n    )\r\n}\r\nconst StyledForm = styled(Form)`\r\n    && {\r\n        width: 100%;\r\n        display: flex;\r\n    }\r\n    .rs-form-control-wrapper {\r\n        width: auto;\r\n        margin-right: 20px;\r\n    }\r\n`;\r\nconst StyledFormControl = styled(FormControl)`\r\n    && {\r\n        width: 100%;\r\n        min-width: 200px;\r\n        max-width: 220px;\r\n        overflow: hidden;\r\n    }\r\n`\r\n","import React from \"react\";\r\nimport Modal from '../../../components/Modal';\r\nimport {useWindowWidth} from \"../../../hooks\";\r\n\r\nexport default ({\r\n    accountId,\r\n    show,\r\n    onClose,\r\n    onSuccess,\r\n    maxWidth = 700,\r\n    loading = false,\r\n    data,\r\n    selectedItems,\r\n    getKeysFromSelectedItems,\r\n    getValueFromSelectedItems\r\n}) => {\r\n\r\n    const resizedWidth = useWindowWidth();\r\n    const selectedItemsKeys = getKeysFromSelectedItems(selectedItems);\r\n    const selectedAccounts = data\r\n        ? data.filter(item => {\r\n            return selectedItemsKeys.includes(item.id);\r\n        }).map(item => {\r\n            return {...item, ...getValueFromSelectedItems(item.id, selectedItems)}\r\n        })\r\n        : [];\r\n\r\n    let amountUsd = 0;\r\n    let amountEur = 0;\r\n\r\n    for (const account of selectedAccounts) {\r\n        if (!account.available_for_payment)\r\n            continue;\r\n            \r\n        switch (account.currency_name) {\r\n            case 'EUR':\r\n                amountEur += account.available_for_payment;\r\n                continue;\r\n            default:\r\n                amountUsd += account.available_for_payment;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            {...{show, onClose, onSuccess}}\r\n            onClose={() => {\r\n                onClose(false);\r\n            }}\r\n            title=\"Request Hawala Payments\"\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            footer={true}\r\n            disabled={loading}\r\n            successText=\"Confirm\"\r\n        >\r\n            {`Please confirm making ${selectedItemsKeys.length} payments to Havala on amount ${amountUsd.toFixed(2)} USD and ${amountEur.toFixed(2)} EUR`}\r\n        </Modal>\r\n    )\r\n}","import React from \"react\";\r\nimport Modal from '../../../components/Modal';\r\nimport {useWindowWidth} from \"../../../hooks\";\r\nimport Table from '../../../components/Table';\r\nimport {saveFileBlob} from \"../../../utils\";\r\nimport {ButtonPrimary} from \"../../../components/base/BaseButton\";\r\n\r\nexport default ({\r\n    show,\r\n    onClose,\r\n    maxWidth = 700,\r\n    data = []\r\n}) => {\r\n\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    const columns = [\r\n        {\r\n            id: 'name',\r\n            label: \"Name\",\r\n            value: ({name, account_manager_name}) => `${name} / ${account_manager_name}`,\r\n            flexGrow: 3,\r\n            minWidth: 150,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'email',\r\n            label: 'Email',\r\n            value: ({contact_email_list}) => contact_email_list && contact_email_list.length\r\n                ? contact_email_list[0]\r\n                : '',\r\n            flexGrow: 3,\r\n            minWidth: 150,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'ready_for_payment',\r\n            label: 'Paid',\r\n            value: ({available_for_payment}) => available_for_payment || 0,\r\n            flexGrow: 2,\r\n            minWidth: 80,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'currency',\r\n            label: 'Currency',\r\n            dataKey: 'currency',\r\n            flexGrow: 2,\r\n            minWidth: 80,\r\n            align: 'center'\r\n        },\r\n    ];\r\n\r\n    let amountUsd = 0;\r\n    let amountEur = 0;\r\n    for (const account of data) {\r\n        if (!account.available_for_payment)\r\n            continue;\r\n            \r\n        switch (account.currency_name) {\r\n            case 'EUR':\r\n                amountEur += account.available_for_payment;\r\n                continue;\r\n            default:\r\n                amountUsd += account.available_for_payment;\r\n        }\r\n    }\r\n\r\n    const savePaymentsReport = () => {\r\n        const txt = [`Name;Email;Paid;Currency`];\r\n        for (const item of data) {\r\n            const email = item.contact_email_list && item.contact_email_list.length\r\n                ? item.contact_email_list[0]\r\n                : '';\r\n            txt.push(`${item.name}/${item.account_manager_name};${email};${item.available_for_payment || 0};${item.currency}`);\r\n        }\r\n        saveFileBlob(txt.join(\"\\n\"), \"payments.csv\");\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            {...{show, onClose}}\r\n            onClose={() => {\r\n                onClose(false);\r\n            }}\r\n            title=\"Request Hawala Payments\"\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            footer={false}\r\n            successText=\"Confirm\"\r\n        >\r\n            <p \r\n                style={{\r\n                    paddingBottom: '20px',\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                <b>{data.length}</b> {`payments to Havala on amount ${amountUsd.toFixed(2)} USD and ${amountEur.toFixed(2)} EUR were created`}\r\n            </p>\r\n\r\n            <Table\r\n                extraHeight={250}\r\n                data={data}\r\n                columns={columns}\r\n            />\r\n\r\n            <div style={{textAlign: 'center', paddingTop: '20px'}}>\r\n                <ButtonPrimary\r\n                    onClick={savePaymentsReport}\r\n                >\r\n                    Download\r\n                </ButtonPrimary>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}","import React from \"react\";\r\nimport {Form, FormControl, Icon, InputGroup} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport {debounce} from \"lodash\";\r\n\r\nexport default ({\r\n    filters,\r\n    onChange,\r\n}) => {\r\n\r\n    return (\r\n        <StyledForm\r\n            formDefaultValue={filters}\r\n            onChange={debounce(onChange, 500)}\r\n        >\r\n            <StyledInputGroup>\r\n                <FormControl\r\n                    name=\"str\"\r\n                    errorPlacement=\"topRight\"\r\n                    placeholder={\"Account name/Email address\"}\r\n                />\r\n                <InputGroup.Addon><Icon icon=\"search\" /></InputGroup.Addon>\r\n            </StyledInputGroup>\r\n        </StyledForm>\r\n    )\r\n}\r\n\r\nconst StyledForm = styled(Form)`\r\n    && {\r\n        margin-right: 20px;\r\n    }\r\n`\r\n\r\nconst StyledInputGroup = styled(InputGroup)`\r\n    && {\r\n        max-width: 320px; \r\n        width: 100%;\r\n        overflow: visible;\r\n    }\r\n\r\n    &&&& {\r\n        .rs-input {\r\n            border-bottom-left-radius: 6px;\r\n            border-top-left-radius: 6px;\r\n        }\r\n    }\r\n`;","import React, {useEffect, useState, useCallback} from \"react\";\r\nimport HawalaPaymentRequestTable from \"./HawalaPaymentRequestTable\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\nimport {FlexboxGrid} from \"rsuite\";\r\nimport HawalaPaymentRequestFilter from \"./HawalaPaymentRequestFilter\";\r\nimport ModalHawalaRequest from \"./ModalHawalaRequest\";\r\nimport ModalHawalaResult from \"./ModalHawalaResult\";\r\nimport HawalaPaymentRequestApiFilter from \"./HawalaPaymentRequestApiFilter\";\r\nimport {ButtonPrimary} from \"../../../components/base/BaseButton\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default ({\r\n    requestPayment,\r\n    paymentMethodList,\r\n    paymentTermsList,\r\n    data,\r\n    loading,\r\n    fetchData,\r\n    account_manager_list,\r\n    getAccountManagersList\r\n}) => {\r\n    const [apiFilter, setApiFilter] = useState({str: \"\"});\r\n    const [filter, setFilter] = useState({payment_terms_name: \"\", account_manager_id: \"\", paid_only: true});\r\n    const [selectedItems, setSelectedItems] = useState([]);\r\n    const [requestedPayments, setRequestedPayments] = useState([]);\r\n\r\n    const [modalRequestShow, setModalRequestShow] = useState(false);\r\n    const [modalRequestLoading, setModalRequestLoading] = useState(false);\r\n    const [modalResultShow, setModalResultShow] = useState(false);\r\n    const [clearSelectedData, setClearSelectedData] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getAccountManagersList()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchData({filter: apiFilter});\r\n    }, [apiFilter]);\r\n\r\n    const handleShowModalRequest = useCallback(() => setModalRequestShow(true), []);\r\n\r\n    const exportPayments = async () => {\r\n        setModalRequestLoading(true);\r\n        const selectedItemsKeys = getKeysFromSelectedItems(selectedItems);\r\n        const selectedAccounts = data.filter(item => {\r\n            return selectedItemsKeys.includes(item.id);\r\n        }).map(item => {\r\n            return {...item, ...getValueFromSelectedItems(item.id, selectedItems)}\r\n        });\r\n\r\n        const results = await Promise.all(\r\n            selectedAccounts.map( item => requestPayment({\r\n                target: {\r\n                    account_id: item.id,\r\n                    payment_detail_id: item.hawala_payment_detail.id\r\n                },\r\n                amount: item.available_for_payment,\r\n                hawala: true\r\n            }))\r\n        );\r\n\r\n        const requestedPayments = results.reduce((prev, item, index) => {\r\n            if (!item || !item.payment_request || !item.payment_request.id)\r\n                return prev;\r\n\r\n            return [...prev, selectedAccounts[index]];\r\n        }, []);\r\n\r\n        setRequestedPayments(requestedPayments);\r\n        setModalRequestLoading(false);\r\n        setModalRequestShow(false);\r\n        setModalResultShow(true);\r\n        setClearSelectedData(true);\r\n        fetchData({filter: apiFilter});\r\n    };\r\n\r\n    const getKeysFromSelectedItems = (items) => {\r\n        return items && Object.keys(items).length && Object.keys(items) || [];\r\n    };\r\n\r\n    const getValueFromSelectedItems = (key, items) => {\r\n        const valueObject = items && items.hasOwnProperty(key) && items[key] !== undefined && Object.keys(items[key]).length && items[key];\r\n        const resultObject = Object.entries(valueObject).filter(([_, value]) => {\r\n            return !!value;\r\n        }).reduce((result, [key, value]) => {\r\n            result[key] = value\r\n            return result\r\n        }, {}) || {};\r\n\r\n        return resultObject\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FlexboxGrid>\r\n                <FlexboxGrid.Item>\r\n\r\n                    <HawalaPaymentRequestApiFilter\r\n                        onChange={setApiFilter}\r\n                    />\r\n\r\n                </FlexboxGrid.Item>\r\n                <FlexboxGrid.Item>\r\n                    <HawalaPaymentRequestFilter\r\n                        filters={filter}\r\n                        account_manager_list={account_manager_list}\r\n                        paymentTermsList={paymentTermsList}\r\n                        onChangeFilters={(value) => setFilter(value)}\r\n                    />\r\n                </FlexboxGrid.Item>\r\n                <StyledItemAutoMargin>\r\n                    <ButtonPrimary\r\n                        disabled={!getKeysFromSelectedItems(selectedItems).length}\r\n                        onClick={handleShowModalRequest}\r\n                    >\r\n                        Export payments\r\n                    </ButtonPrimary>\r\n                </StyledItemAutoMargin>\r\n            </FlexboxGrid>\r\n\r\n            <Spacer/>\r\n\r\n            <HawalaPaymentRequestTable\r\n                paymentMethodList={paymentMethodList}\r\n                filter={filter}\r\n                data={data}\r\n                loading={loading}\r\n                setSelected={(value) => setSelectedItems(value)}\r\n                {...{\r\n                    clearSelectedData,\r\n                    setClearSelectedData\r\n                }}\r\n            />\r\n\r\n            <ModalHawalaRequest\r\n                show={modalRequestShow}\r\n                onClose={() => setModalRequestShow(false)}\r\n                onSuccess={exportPayments}\r\n                loading={modalRequestLoading}\r\n                {...{\r\n                    data,\r\n                    selectedItems,\r\n                    getKeysFromSelectedItems,\r\n                    getValueFromSelectedItems\r\n                }}\r\n            />\r\n\r\n            <ModalHawalaResult\r\n                show={modalResultShow}\r\n                data={requestedPayments}\r\n                onClose={() => setModalResultShow(false)}\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nconst StyledItemAutoMargin = styled(FlexboxGrid.Item)`\r\n    && {\r\n        margin-left: auto;\r\n    }\r\n`","import {\r\n    PAYMENTS as PREFIX,\r\n    PAYMENT_REQUEST_LIST,\r\n    PAYMENT_LIST,\r\n    PAYMENT_TRAFFIC_REPORTS_LIST, PAYMENT_HAWALA_LIST, APP_TYPE_ADMIN,\r\n} from \"../const\";\r\n\r\nimport {\r\n    PAYMENT_REQUEST_LIST_API,\r\n    PAYMENT_LIST_API,\r\n    PAYMENT_LIST_DIALER_API,\r\n    INVOICE_LIST_API,\r\n    INVOICE_LIST_DIALER_API,\r\n    PAYMENT_REQUEST_HAWALA_GET_LIST_API,\r\n    PAYMENT_REQUEST_CREATE_API,\r\n    PAYMENT_REQUEST_CANCEL_API,\r\n    PAYMENT_REQUEST_APPROVE_API,\r\n    ACCOUNT_SETTINGS_MODIFY_API,\r\n} from \"../const/apiMethods\";\r\n\r\nimport {createAction} from './defaults';\r\nimport {api} from \"../api/loginRoutes\";\r\nimport store from \"../store/index\";\r\n\r\n\r\nconst setPaymentRequestList = createAction('SET_ITEMS_' + PAYMENT_REQUEST_LIST);\r\nconst setPaymentRequestLoading = createAction('SET_LOADING_' + PAYMENT_REQUEST_LIST);\r\nconst setPaymentList = createAction('SET_ITEMS_' + PAYMENT_LIST);\r\nconst setPaymentListLoading = createAction('SET_LOADING_' + PAYMENT_LIST);\r\nconst setTrafficReportsList = createAction('SET_ITEMS_' + PAYMENT_TRAFFIC_REPORTS_LIST);\r\nconst setTrafficReportsLoading = createAction('SET_LOADING_' + PAYMENT_TRAFFIC_REPORTS_LIST);\r\nconst setHawalaPaymentRequestList = createAction('SET_ITEMS_' + PAYMENT_HAWALA_LIST);\r\nconst setHawalaPaymentRequestLoading = createAction('SET_LOADING_' + PAYMENT_HAWALA_LIST);\r\n\r\nexport const getPaymentRequestList = (data = {}) => (dispatch) => {\r\n    dispatch( setPaymentRequestLoading(true) );\r\n    api(PAYMENT_REQUEST_LIST_API, {...data})\r\n        .then((response) => {\r\n            if (response !== undefined) {\r\n                dispatch( setPaymentRequestList({\r\n                    items: response.payment_request_list || []\r\n                }) );\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch( setPaymentRequestLoading(false) );\r\n        });\r\n};\r\n\r\nexport const getPaymentList = (data = {}) => (dispatch) => {\r\n    dispatch(setPaymentListLoading(true));\r\n    const appType = store.getState().auth.appType;\r\n    const request = appType === APP_TYPE_ADMIN ? PAYMENT_LIST_API : PAYMENT_LIST_DIALER_API;\r\n    api(request, {...data})\r\n        .then((response) => {\r\n            if (response !== undefined) {\r\n                dispatch(setPaymentList({\r\n                    items: response.payment_list || []\r\n                }));\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch(setPaymentListLoading(false));\r\n        });\r\n};\r\n\r\nexport const getTrafficReportsList = (data = {}) => (dispatch) => {\r\n    dispatch(setTrafficReportsLoading(true));\r\n    const appType = store.getState().auth.appType;\r\n    const request = appType === APP_TYPE_ADMIN ? INVOICE_LIST_API : INVOICE_LIST_DIALER_API;\r\n    api(request, {...data})\r\n        .then((response) => {\r\n            if (response !== undefined) {\r\n\r\n                dispatch(setTrafficReportsList({\r\n                    items: response.invoice_list || []\r\n                }));\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch(setTrafficReportsLoading(false));\r\n        });\r\n};\r\n\r\nexport const requestPayment = (data) => async (dispatch) => {\r\n    const response = api(PAYMENT_REQUEST_CREATE_API, {...data});\r\n    if (response && response.response && response.response.data.error) {\r\n        return response.response.data.error;\r\n    }\r\n    return response;\r\n};\r\n\r\nexport const cancelPaymentRequest = (data) => async (dispatch) => {\r\n    const response = await api(PAYMENT_REQUEST_CANCEL_API, {...data});\r\n    if (response && response.response && response.response.data.error) {\r\n        return response.response.data.error;\r\n    }\r\n    return response;\r\n};\r\n\r\nexport const approvePaymentRequest = (data) => async (dispatch) => {\r\n    const response = await api(PAYMENT_REQUEST_APPROVE_API, {...data});\r\n    if (response && response.response && response.response.data.error) {\r\n        return response.response.data.error;\r\n    }\r\n    return response;\r\n};\r\n\r\nexport const modifyPaymentSettings = (data) => async (dispatch) => {\r\n    const response = await api(ACCOUNT_SETTINGS_MODIFY_API, data);\r\n    return response;\r\n};\r\n\r\nexport const getHawalaPaymentRequestList = (data = {}) => (dispatch) => {\r\n    dispatch(setHawalaPaymentRequestLoading(true));\r\n    api(PAYMENT_REQUEST_HAWALA_GET_LIST_API, {...data})\r\n        .then((response) => {\r\n            if (response !== undefined) {\r\n                dispatch (setHawalaPaymentRequestList({\r\n                    items: response.account_list || []\r\n                }) );\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch(setHawalaPaymentRequestLoading(false));\r\n        });\r\n};","import {DROPDOWN_ACCOUNTS as PREFIX} from '../const/';\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from  './defaults';\r\n\r\nconst setAccounts = createAction('SET_ITEMS_' + PREFIX);\r\nconst setLoading = createAction('SET_LOADING_' + PREFIX);\r\n\r\nexport const getDropdownAccounts = (filters = null) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n\r\n    api('account:get_dropdown_list', {\r\n        filter: filters || {}\r\n    }).then(({account_list = []}) => {\r\n        dispatch( setAccounts({\r\n            items: account_list,\r\n            filter: filters\r\n        }) );\r\n\r\n    }).finally(() => dispatch(setLoading(false)));\r\n};","import {\r\n    ACCOUNT_MANAGERS_SET_LOADING,\r\n    ACCOUNT_MANAGERS_LIST,\r\n    ACCOUNT_MANAGERS_REFERENCES,\r\n    ACCOUNT_MANAGERS_BIL,\r\n} from \"../const\";\r\n\r\nimport {\r\n    ACCOUNT_MANAGERS_LIST_API,\r\n    ACCOUNT_MANAGERS_REFERENCES_API,\r\n    ACCOUNT_MANAGERS_MODIFY_API,\r\n    ACCOUNT_MANAGERS_BIL_API, ACCOUNT_MANAGERS_REMOVE_API, ACCOUNT_MANAGERS_CREATE_API,\r\n} from \"../const/apiMethods\";\r\n\r\nimport {createAction} from './defaults';\r\nimport {api} from \"../api/loginRoutes\";\r\n\r\nconst setAccountManagersList = createAction(ACCOUNT_MANAGERS_LIST);\r\nconst setAccountManagersLoading = createAction(ACCOUNT_MANAGERS_SET_LOADING);\r\nconst setAccountManagersReferences = createAction(ACCOUNT_MANAGERS_REFERENCES);\r\nconst setAccountManagersBillingList = createAction(ACCOUNT_MANAGERS_BIL);\r\n\r\n\r\n// get list\r\nexport const getAccountManagersList = (filter = {}) => async (dispatch) => {\r\n    dispatch( setAccountManagersLoading(true) );\r\n\r\n    await api(ACCOUNT_MANAGERS_LIST_API, {filter})\r\n        .then((response) => {\r\n            if (response && response.account_manager_list) {\r\n\r\n                dispatch( setAccountManagersList({\r\n                    list: response.account_manager_list || [],\r\n                }) );\r\n\r\n                // update scroll after updating each row height\r\n                dispatch( setAccountManagersList({\r\n                    list: [...response.account_manager_list] || [],\r\n                }) );\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch( setAccountManagersLoading(false) );\r\n        })\r\n};\r\n\r\nexport const getAccountManagersReferences = () => (dispatch) => {\r\n    api(ACCOUNT_MANAGERS_REFERENCES_API)\r\n        .then((response) => {\r\n            if (response !== undefined) {\r\n\r\n                dispatch( setAccountManagersReferences({\r\n                    userList: response.account_user_manager_list || [],\r\n                    teamLeadList: response.account_user_teamlead_list || [],\r\n                }) );\r\n            }\r\n        })\r\n};\r\n\r\nexport const getAccountManagersBillingList = () => (dispatch) => {\r\n    api(ACCOUNT_MANAGERS_BIL_API, {})\r\n        .then((response) => {\r\n            if (response !== undefined) {\r\n\r\n                dispatch( setAccountManagersBillingList({\r\n                    list: response.billing_account_manager_list || [],\r\n                }) );\r\n            }\r\n        })\r\n};\r\n\r\nexport const modifyAccountManager = ({name, skype, email, ...params}) => async (dispatch) => {\r\n    const response = await api(ACCOUNT_MANAGERS_MODIFY_API, {\r\n        name: name,\r\n        skype: skype,\r\n        email: email,\r\n        target: {\r\n            ...params,\r\n            account_user_manager_id_list: params.account_user_manager_id_list || []\r\n        }\r\n    });\r\n    return response;\r\n};\r\n\r\nexport const removeAccountManager = (id) => async (dispatch) => {\r\n    const response = await api(ACCOUNT_MANAGERS_REMOVE_API, {\r\n        target: {\r\n            account_manager_id: id\r\n        }\r\n    });\r\n    return response;\r\n};\r\n\r\nexport const createAccountManager = (data) => async (dispatch) => {\r\n    const params = {target: {}, ...data};\r\n    if (params.account_user_teamlead_id) {\r\n        params.target.account_user_teamlead_id = params.account_user_teamlead_id;\r\n        delete params.account_user_teamlead_id;\r\n    }\r\n\r\n    if (params.account_user_manager_id_list) {\r\n        params.target.account_user_manager_id_list = params.account_user_manager_id_list;\r\n        delete params.account_user_manager_id_list;\r\n    }\r\n\r\n    const response = await api(ACCOUNT_MANAGERS_CREATE_API, {...params});\r\n    return response;\r\n};\r\n\r\n","import {connect} from \"react-redux\";\r\nimport Payments from \"./Payments\";\r\nimport {\r\n    getPaymentList,\r\n    getPaymentRequestList,\r\n    getTrafficReportsList,\r\n    requestPayment,\r\n    cancelPaymentRequest,\r\n    approvePaymentRequest,\r\n    modifyPaymentSettings, getHawalaPaymentRequestList,\r\n} from \"../../actions/payments\";\r\nimport {\r\n    getPaymentDetailsList,\r\n    getPaymentDetailsSingle,\r\n    createPaymentDetails,\r\n    modifyPaymentDetails,\r\n    removePaymentDetails\r\n} from \"../../actions/paymentDetails\";\r\nimport {getAccount} from \"../../actions\";\r\nimport {getDropdownAccounts} from \"../../actions/dropdown_accounts\";\r\nimport {getAccountManagersList} from '../../actions/account_managers'\r\n\r\n\r\nconst mapStateToProps = ({account_managers, payments, paymentDetails, references, dropdown_accounts}) => ({\r\n    paymentItems: payments.paymentItems,\r\n    paymentItemsLoading: payments.paymentItemsLoading,\r\n\r\n    paymentRequestItems: payments.paymentRequestItems,\r\n    paymentRequestLoading: payments.paymentRequestLoading,\r\n    \r\n    paymentTrafficReportsItems: payments.paymentTrafficReportsItems,\r\n    paymentTrafficReportsLoading: payments.paymentTrafficReportsLoading,\r\n\r\n    hawalaItems: payments.hawalaItems,\r\n    hawalaLoading: payments.hawalaLoading,\r\n    \r\n    paymentDetailsItems: paymentDetails.items,\r\n    paymentDetailsLoadinig: paymentDetails.loading,\r\n    \r\n    accounts: dropdown_accounts.items,\r\n    account_manager_list: account_managers.list,\r\n    globalSettings: references.global_setting,\r\n    organizationTypeList: references.organization_type_list,\r\n    countryList: references.country_list,\r\n    paymentMethodList: references.payment_method_list,\r\n    paymentTermsList: references.payment_terms_list\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getPaymentList,\r\n    getPaymentRequestList,\r\n    getTrafficReportsList,\r\n    requestPayment,\r\n    cancelPaymentRequest,\r\n    approvePaymentRequest,\r\n    modifyPaymentSettings,\r\n    getHawalaPaymentRequestList,\r\n    \r\n    getPaymentDetailsList,\r\n    getPaymentDetailsSingle,\r\n    createPaymentDetails,\r\n    modifyPaymentDetails,\r\n    removePaymentDetails,\r\n\r\n    getAccounts: getDropdownAccounts,\r\n    getAccount,\r\n    getAccountManagersList\r\n})(Payments);","import React, {useEffect, useState} from \"react\";\r\nimport PaymentsRequestSection from \"./PaymentsRequestSection\";\r\nimport PaymentsListSection from \"./PaymentsListSection\";\r\nimport PaymentsTrafficReportsSection from \"./PaymentsTrafficReportsSection\";\r\nimport ModalRequestPayment from \"./ModalRequestPayment\";\r\nimport ModalPaymentDetails from \"./ModalPaymentDetails\";\r\nimport ModalAddPaymentDetail from \"../PaymentDetails/ModalAddPaymentDetail\";\r\nimport {Panel} from \"rsuite\";\r\nimport PaymentsHeader from \"./PaymentsHeader\";\r\nimport HawalaPaymentRequest from \"./HawalaPaymentRequest\";\r\n\r\n\r\nexport default ({\r\n    paymentItems,\r\n    paymentItemsLoading,\r\n    paymentRequestItems,\r\n    paymentRequestLoading,\r\n    paymentTrafficReportsItems,\r\n    paymentTrafficReportsLoading,\r\n    paymentDetailsItems,\r\n    hawalaItems,\r\n    hawalaLoading,\r\n\r\n    accounts,\r\n    account_manager_list,\r\n    organizationTypeList,\r\n    paymentMethodList,\r\n    paymentTermsList,\r\n    countryList,\r\n    globalSettings,\r\n\r\n    // API methods\r\n    getPaymentList,\r\n    getTrafficReportsList,\r\n    getPaymentRequestList,\r\n    getHawalaPaymentRequestList,\r\n    getAccountManagersList,\r\n    requestPayment,\r\n    cancelPaymentRequest,\r\n    approvePaymentRequest,\r\n    getPaymentDetailsList,\r\n    createPaymentDetails,\r\n    modifyPaymentDetails,\r\n    getAccount,\r\n    getAccounts,\r\n}) => {\r\n\r\n    const [activeTab, setActiveTab] = useState('payment-requests'); // invoices, payment-requests, payments\r\n    const [requestPaymentFormValue, setRequestPaymentFormValue] = useState({amount: 0});\r\n    const [showModalRequestPayment, setShowModalRequestPayment] = useState(false);\r\n    const [showModalAddPaymentDetail, setShowModalAddPaymentDetail] = useState(false);\r\n    const [showModalPaymentDetail, setShowModalPaymentDetail] = useState(false);\r\n    const [dropdownVisibility, setDropdownVisibility] = useState(true);\r\n    const [amountLimitMin, setAmountLimitMin] = useState(0.01);\r\n\r\n    // active account info (on action button click)\r\n    const [activeAccountId, setActiveAccountId] = useState(null);\r\n    const [activeAccountBalance, setActiveAccountBalance]  = useState(0);\r\n    const [activeAccountCurrency, setActiveAccountCurrency]  = useState(null);\r\n\r\n    useEffect( () => {\r\n        getAccounts();\r\n    }, [] );\r\n\r\n    useEffect( () => {\r\n        // get account and set options\r\n        if (activeAccountId)\r\n            getAccount(activeAccountId);\r\n    }, [activeAccountId]);\r\n\r\n\r\n    // set payment detail amount min limit\r\n    useEffect( () => {\r\n        if (!requestPaymentFormValue.payment_detail_id || !paymentMethodList.length || !paymentDetailsItems.length) {\r\n            setAmountLimitMin(0.01);\r\n            return;\r\n        }\r\n        const currentPaymentDetail = paymentDetailsItems.find(item => item.id === requestPaymentFormValue.payment_detail_id);\r\n        if (!currentPaymentDetail) {\r\n            setAmountLimitMin(0.01);\r\n            return;\r\n        }\r\n\r\n        const currentPaymentMethod = paymentMethodList.find(item => item.pm_key === currentPaymentDetail.pm_key);\r\n        const currentPaymentMethodLimit = currentPaymentMethod && currentPaymentMethod.limit\r\n            ? currentPaymentMethod.limit\r\n            : 0.01;\r\n        setAmountLimitMin(currentPaymentMethodLimit);\r\n    }, [requestPaymentFormValue, paymentMethodList, paymentDetailsItems] );\r\n\r\n\r\n    const clearActiveData = () => {\r\n        setActiveAccountId(null);\r\n        setActiveAccountBalance(0);\r\n        setActiveAccountCurrency(null);\r\n    };\r\n\r\n\r\n    const openModalRequestPayment = (value) => {\r\n        setActiveAccountId(value.account_id);\r\n        setActiveAccountBalance(value.available_for_payment);\r\n        setActiveAccountCurrency(value.currency_name);\r\n        setShowModalRequestPayment(true);\r\n    };\r\n\r\n\r\n    const closeModalRequestPayment = () => {\r\n        setShowModalRequestPayment(false);\r\n        clearActiveData();\r\n    };\r\n\r\n\r\n    const openModalPaymentDetail = () => {\r\n        setShowModalPaymentDetail(true);\r\n    };\r\n\r\n\r\n    const handleShowModalAddPaymentDetail = () => {\r\n        setShowModalAddPaymentDetail(true);\r\n        setDropdownVisibility(false);\r\n    };\r\n\r\n\r\n    const closeModalAddPaymentDetail = (value) => {\r\n        if (value) {\r\n            setRequestPaymentFormValue({\r\n                ...requestPaymentFormValue,\r\n                payment_detail_id: value.payment_detail.id\r\n            });\r\n        }\r\n        setShowModalAddPaymentDetail(false);\r\n        setDropdownVisibility(true);\r\n    };\r\n\r\n\r\n    const handleSetActiveTab = (activeTab) => {\r\n        // setBreadcrumbs(`${document.location.pathname}/${activeTab}`);\r\n        setActiveTab(activeTab);\r\n    };\r\n\r\n\r\n    return (\r\n        <Panel\r\n            style={{marginTop: 10}}\r\n            classPrefix=\"white-panel\"\r\n        >\r\n\r\n            <PaymentsHeader\r\n                activeTab={activeTab}\r\n                onSelect={handleSetActiveTab}\r\n            />\r\n\r\n            {( () => {\r\n\r\n                switch (activeTab) {\r\n\r\n                    case 'payment-requests':\r\n                        return (\r\n                            <PaymentsRequestSection\r\n                                {...{\r\n                                    paymentRequestItems,\r\n                                    setActiveAccountId,\r\n                                    setShowModalPaymentDetail,\r\n                                    paymentRequestLoading,\r\n                                    cancelPaymentRequest,\r\n                                    approvePaymentRequest,\r\n                                    getPaymentRequestList,\r\n                                    openModalRequestPayment,\r\n                                    openModalPaymentDetail,\r\n                                    accounts,\r\n                                }}\r\n                            />\r\n                        );\r\n\r\n                    case 'payments':\r\n                        return (\r\n                            <PaymentsListSection\r\n                                {...{\r\n                                    paymentItems,\r\n                                    paymentItemsLoading,\r\n                                    getPaymentList,\r\n                                    accounts,\r\n                                }}\r\n                            />\r\n                        );\r\n\r\n                    case 'invoices':\r\n                        return (\r\n                            <PaymentsTrafficReportsSection\r\n                                {...{\r\n                                    globalSettings,\r\n                                    paymentTrafficReportsItems,\r\n                                    paymentTrafficReportsLoading,\r\n                                    openModalRequestPayment,\r\n                                    getTrafficReportsList,\r\n                                    accounts,\r\n                                }}\r\n                            />\r\n                        );\r\n\r\n                    case 'hawala-payment-request':\r\n                        return (\r\n                            <HawalaPaymentRequest\r\n                                data={hawalaItems}\r\n                                loading={hawalaLoading}\r\n                                fetchData={getHawalaPaymentRequestList}\r\n                                {...{\r\n                                    account_manager_list,\r\n                                    requestPayment,\r\n                                    paymentMethodList,\r\n                                    paymentTermsList,\r\n                                    getAccountManagersList\r\n                                }}\r\n                            />\r\n                        );\r\n\r\n                    default:\r\n                        return null;\r\n                }\r\n\r\n            } )()}\r\n\r\n            <ModalRequestPayment\r\n                accountId={activeAccountId}\r\n                show={showModalRequestPayment}\r\n                onClose={closeModalRequestPayment}\r\n                formValue={requestPaymentFormValue}\r\n                setFormValue={setRequestPaymentFormValue}\r\n                amountLimit={activeAccountBalance}\r\n                amountLimitMin={amountLimitMin}\r\n                currencyName={activeAccountCurrency}\r\n                {...{\r\n                    requestPayment,\r\n                    paymentDetailsItems, \r\n                    dropdownVisibility,\r\n                    handleShowModalAddPaymentDetail,\r\n                    paymentMethodList,\r\n                    accounts,\r\n                }}\r\n            />\r\n\r\n            <ModalPaymentDetails\r\n                accountId={activeAccountId}\r\n                show={showModalPaymentDetail}\r\n                onClose={() => setShowModalPaymentDetail(false)}\r\n            />\r\n            \r\n            <ModalAddPaymentDetail\r\n                accountId={activeAccountId}\r\n                show={showModalAddPaymentDetail}\r\n                onClose={closeModalAddPaymentDetail}\r\n                {...{\r\n                    organizationTypeList,\r\n                    countryList,\r\n                    paymentMethodList,\r\n                    createPaymentDetails,\r\n                    modifyPaymentDetails,\r\n                    getPaymentDetailsList\r\n                }}\r\n            />\r\n\r\n        </Panel>\r\n    )\r\n};","import React, {useMemo, useState, useCallback, useEffect} from 'react';\r\nimport {Loader, Popover, Whisper, Icon} from 'rsuite';\r\nimport {TableClientSortHOC} from '../../components/Table/TableClientSort'\r\nimport { withRouter } from \"react-router\";\r\nimport {commentTypes} from \"../../const\";\r\nimport {api} from \"../../api/loginRoutes\";\r\nimport BaseTable, {Column, HeaderCell, Cell} from \"../../components/base/BaseTable\";\r\nimport styled from \"styled-components\";\r\nimport Badge from 'rsuite/es/Badge'\r\nimport Tooltip from 'rsuite/es/Tooltip'\r\n\r\n\r\nexport default TableClientSortHOC(withRouter(({\r\n    data = [],\r\n    loading,\r\n    history,\r\n    isMobile = false,\r\n    ...props\r\n}) => {\r\n\r\n    const columns = useMemo( () => {\r\n\r\n        const columns = [\r\n            {\r\n                flexGrow: 2,\r\n                minWidth: 260,\r\n                sortable: true,\r\n                name: \"Account\",\r\n                dataKey: \"name\",\r\n                value: ({name, id, account_note_last, account_manager_name = \"\"}) => {\r\n                    return <StyledAccountTableLink>\r\n                        <AccountNotesIcon\r\n                            type={account_note_last}\r\n                            accountId={id}\r\n                        />\r\n                        <span className=\"white-space-pre\">{name + '/' + account_manager_name}</span>\r\n                    </StyledAccountTableLink>\r\n                },\r\n                isMobile: false,\r\n            },\r\n            {\r\n                flexGrow: 1,\r\n                minWidth: 130,\r\n                sortable: true,\r\n                name: \"Currency\",\r\n                dataKey: \"currency\",\r\n                isMobile: false,\r\n            },\r\n            {\r\n                flexGrow: 1,\r\n                minWidth: 170,\r\n                sortable: true,\r\n                align: 'right',\r\n                dataKey: \"balance\",\r\n                name: \"Balance\",\r\n                value: ({balance, invoice_balance}) => balance + '/' + invoice_balance,\r\n                isMobile: false,\r\n            },\r\n            {\r\n                flexGrow: 1,\r\n                minWidth: 130,\r\n                sortable: true,\r\n                align: 'right',\r\n                name: \"Traffic for 1/7/30\",\r\n                dataKey: \"VOLUME_1_OUT\",\r\n                value: ({VOLUME_1_OUT = 0, VOLUME_7_OUT = 0, VOLUME_30_OUT = 0}) => (\r\n                    `${VOLUME_1_OUT}/${VOLUME_7_OUT}/${VOLUME_30_OUT}`\r\n                ),\r\n                isMobile: false,\r\n            },\r\n            {\r\n                flexGrow: 1,\r\n                minWidth: 130,\r\n                sortable: true,\r\n                align: 'right',\r\n                dataKey: \"allocated_numbers\",\r\n                name: \"Allocated Numbers\",\r\n                value: ({allocated_numbers = 0, numbers_with_traffic = 0}) => (\r\n                    `${allocated_numbers || 0}/${numbers_with_traffic || 0}`\r\n                ),\r\n                isMobile: false,\r\n            },\r\n            {\r\n                flexGrow: 1,\r\n                minWidth: 130,\r\n                sortable: true,\r\n                align: 'right',\r\n                name: \"Creation date\",\r\n                dataKey: \"created_at\",\r\n                value: ({created_at}) => {\r\n                    const date = new Date(created_at);\r\n                    const options = {year: 'numeric', month: 'long', day: 'numeric'};\r\n                    return date.toLocaleDateString('en-US', options);\r\n                },\r\n                isMobile: false,\r\n            },\r\n            {\r\n                width: 50,\r\n                sortable: false,\r\n                align: 'right',\r\n                name: \"\",\r\n                value: ({not_verified_users}) => {\r\n                    return <AccountNotVerifiedUsersIcon\r\n                        show={not_verified_users && not_verified_users !== 0 }\r\n                        count={not_verified_users}\r\n                    />\r\n                },\r\n                isMobile: false,\r\n            },\r\n            {\r\n                flexGrow: 2,\r\n                minWidth: 170,\r\n                sortable: true,\r\n                name: \"Account\",\r\n                dataKey: \"name\",\r\n                value: ({name, account_manager_name = \"\", account_note_last, id, payment_terms_name}) => (\r\n                    <StyledAccountCellMobile>\r\n                        <AccountNotesIcon\r\n                            type={account_note_last}\r\n                            accountId={id}\r\n                        />\r\n                        <div className=\"table-two-staged__cell\">\r\n                            <div\r\n                                className=\"table-two-staged__cell-first\"\r\n                            >\r\n                                {name}\r\n                            </div>\r\n                            <div\r\n                                className=\"table-two-staged__cell-second\"\r\n                            >\r\n                                {`${account_manager_name}, ${payment_terms_name}`}\r\n                            </div>\r\n                        </div>\r\n                    </StyledAccountCellMobile>\r\n                ),\r\n                isMobile: true,\r\n            },\r\n            {\r\n                flexGrow: 1,\r\n                minWidth: 100,\r\n                sortable: true,\r\n                dataKey: \"balance\",\r\n                name: \"Balance\",\r\n                value: ({balance, invoice_balance, currency}) => (\r\n                    <div className=\"table-two-staged__cell\">\r\n                        <div className=\"table-two-staged__cell-first\">{balance}</div>\r\n                        <div className=\"table-two-staged__cell-second\">{`${invoice_balance}, ${currency}`}</div>\r\n                    </div>\r\n                ),\r\n                isMobile: true,\r\n            },\r\n\r\n            {\r\n                width: 50,\r\n                sortable: false,\r\n                align: 'right',\r\n                name: \"\",\r\n                value: ({not_verified_users}) => {\r\n                    return <AccountNotVerifiedUsersIcon\r\n                        show={not_verified_users && not_verified_users !== 0 }\r\n                        count={not_verified_users}\r\n                    />\r\n                },\r\n                isMobile: true,\r\n            },\r\n        ];\r\n\r\n        return columns.filter(column => column.isMobile === isMobile);\r\n\r\n    }, [isMobile] );\r\n\r\n    return (\r\n        <BaseTable\r\n            virtualized\r\n            height={700}\r\n            data={data}\r\n            loading={loading}\r\n            rowHeight={!isMobile ? 30 : 50}\r\n            rowClassName={(rowData) => {\r\n                if (rowData) {\r\n                    let rowClassName = rowData.closed\r\n                        ? 'table-row-account__closed'\r\n                        : 'table-row-account table-row-account---link';\r\n                    \r\n                    if (!rowData.is_managed) {\r\n                        rowClassName += \" table-row-account--disabled\";\r\n                    }\r\n\r\n                    return rowClassName;\r\n                }\r\n            }}\r\n            onRowClick={ ({id, is_managed}) => {\r\n                if (is_managed)\r\n                    window.open(`/accounts/view/${id}`);\r\n            }}\r\n            {...props}\r\n        >\r\n            {columns.map(({dataKey, name, value = null, ...columnProps}) => (\r\n                <Column {...columnProps}>\r\n                    <HeaderCell>{name}</HeaderCell>\r\n                    <Cell dataKey={dataKey}>{value}</Cell>\r\n                </Column>\r\n            ))}\r\n\r\n            <Column key=\"table_scrollfix\" width={0} fixed>\r\n                <HeaderCell></HeaderCell>\r\n                <Cell></Cell>\r\n            </Column>\r\n\r\n        </BaseTable>\r\n    );\r\n}));\r\n\r\nconst AccountNotVerifiedUsersIcon = ({show, count}) => {\r\n\r\n    return (\r\n        <StyledAccountNotVerifiedUsersIcon\r\n            style={{\r\n                width: 20,\r\n                marginRight: 10,\r\n                display: 'inline-block'\r\n            }}\r\n        >\r\n            {show\r\n                ? <Whisper\r\n                    onClick={() => {\r\n                        localStorage.setItem(\"ACCOUNT_ACTIVE_TAB\", \"general\");\r\n                    }}\r\n                    placement=\"auto\"\r\n                    speaker={<Tooltip>Count of unconfirmed users: {count}</Tooltip>}\r\n                >\r\n                    <Badge\r\n                        content={<span className=\"badge-count\">{count}</span>}\r\n                    >\r\n                        <Icon icon=\"envelope-o\" className=\"badge-icon\"/>\r\n                    </Badge>\r\n                </Whisper>\r\n                : null\r\n            }\r\n        </StyledAccountNotVerifiedUsersIcon>\r\n    )\r\n}\r\n\r\nconst AccountNotesIcon = ({\r\n    accountId,\r\n    type\r\n}) => {\r\n\r\n    const [comments, setComments] = useState([]);\r\n    const [timerId, setTimerId] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        setComments([]);\r\n    }, [timerId]);\r\n\r\n\r\n    const getNotes = useCallback( () => {\r\n        const timerId = setTimeout(() => {\r\n            api('account_note:get_short_list', {\r\n                target: {account_id: accountId}\r\n            })\r\n                .then(res => {\r\n                    if (res && res.account_note_list)\r\n                        setComments(res.account_note_list);\r\n                })\r\n        }, 500);\r\n        setTimerId(timerId);\r\n    }, [accountId] );\r\n\r\n\r\n    const clearNotes = useCallback(() => {\r\n        clearTimeout(timerId);\r\n    }, [timerId]);\r\n\r\n\r\n    return (\r\n        <span style={{width: 20, display: 'inline-block'}}>\r\n            {type || type === 0\r\n                ? <Whisper\r\n                    enterable={comments.length}\r\n                    placement=\"auto\"\r\n                    speaker={\r\n                        <Popover\r\n                            title={\"Recent notes\"}\r\n                            onClick={() => {\r\n                                localStorage.setItem(\"ACCOUNT_ACTIVE_TAB\", \"notes\");\r\n                            }}\r\n                        >\r\n                            <div>\r\n                                {comments && comments.length\r\n                                    ? comments.map(item => (\r\n                                        <div style={{textAlign: 'left'}}>\r\n                                            <span\r\n                                                className={\"rs-icon rs-icon-\" + commentTypes[item.type].icon}\r\n                                                style={{\r\n                                                    width: 20,\r\n                                                    color: commentTypes[item.type].color,\r\n                                                }}\r\n                                            />\r\n                                            &nbsp;{item.text}\r\n                                        </div>\r\n                                    ))\r\n                                    : <Loader content=\"Loading...\" style={{paddingTop: 6}} size=\"xs\"/>\r\n                                }\r\n                            </div>\r\n                        </Popover>\r\n                    }\r\n                >\r\n                    <span\r\n                        onClick={() => {\r\n                            localStorage.setItem(\"ACCOUNT_ACTIVE_TAB\", \"notes\");\r\n                        }}\r\n                        onMouseEnter={getNotes}\r\n                        onMouseOut={clearNotes}\r\n                        className={\"rs-icon rs-icon-\" + commentTypes[type].icon}\r\n                        style={{color: commentTypes[type].color}}\r\n                    />\r\n                </Whisper>\r\n                : null\r\n            }\r\n        </span>\r\n    )\r\n};\r\n\r\n\r\nconst StyledAccountTableLink = styled.span`\r\n    .table-row-account--disabled .rs-table-cell-first & {\r\n        color: #8e8e93;\r\n        cursor: not-allowed;\r\n    }\r\n`;\r\n\r\n\r\nconst StyledAccountCellMobile = styled.div`\r\n    display: flex;\r\n    \r\n    & > * {\r\n        flex-shrink: 0;\r\n    }\r\n`;\r\n\r\nconst StyledAccountNotVerifiedUsersIcon = styled.span`\r\n    .rs-badge {\r\n    \r\n        padding: 2px;\r\n        font-size: 9px;\r\n        \r\n        .rs-badge-content {\r\n            box-shadow: 0 0 0 1px #ffffff;\r\n            background-color: var(--color-info);\r\n            border-radius: 11px;\r\n            font-size: 10px !important;\r\n            line-height: 11px;\r\n            padding: 0 2px;\r\n            color: #ffffff;\r\n            margin-right: 1px;\r\n            margin-top: 3px;\r\n            height: 11px;\r\n            min-width: 11px;\r\n            text-align: center;\r\n        }\r\n        \r\n        .badge-count {\r\n            font-weight: 700;\r\n            font-size: 9px;\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport {CheckPicker,FormControl} from 'rsuite';\r\n\r\n\r\n\r\nexport default (props) => {\r\n    return  <FormControl\r\n                name={props.name}\r\n                accepter={CheckPickerHOC}\r\n                {...props}                  \r\n            /> ;    \r\n}\r\n                    \r\n\r\n\r\nconst CheckPickerHOC = (props) => {    \r\n    let _values = [];\r\n    const onClose = () => console.log('onClose') ||  props.onChange(_values);\r\n    const onChange = (values) =>  _values = values;\r\n    const onClean = () => props.onChange(_values);\r\n\r\n    return <CheckPicker            \r\n            {...props} \r\n            onClose={onClose} onChange={onChange} onClean={onClean}\r\n            /> ;   \r\n}","import React from 'react';\r\nimport {formValid} from '../utils/validate';\r\nimport { deleteEmpty } from '../utils/helpers';\r\n\r\n\r\nexport default  (FilltersForm, model, timeout = 500) => {\r\n    \r\n    class FilltersFormHOC extends React.PureComponent{\r\n\r\n        ref = React.createRef();\r\n\r\n        formValue = null;\r\n        timer = null;\r\n\r\n        getValues = () => {\r\n            // console.log(\"this.props.proxy\", this.props.proxy, this.ref.current);\r\n            if(this.props.proxy)\r\n                return this.props.proxy(this.ref.current.getFormValue())\r\n            return this.ref.current.getFormValue()\r\n        };\r\n\r\n        onChange = (formValue) => {\r\n            clearTimeout(this.timer);\r\n\r\n            this.timer = setTimeout( () => {\r\n                if(!model || formValid(model.check(formValue))){\r\n                    let _formValue = deleteEmpty({...formValue});\r\n\r\n                    if(JSON.stringify(_formValue) !== JSON.stringify(this.formValue)){\r\n                        this.formValue = _formValue;\r\n                        this.props.onChange(\r\n                            this.props.proxy ? this.props.proxy(_formValue) : _formValue\r\n                        );\r\n                    }\r\n                }\r\n            }, timeout)\r\n            \r\n        }\r\n\r\n        render() {\r\n            return (<FilltersForm {...this.props} onChange={this.onChange} ref={this.ref}/>)\r\n        }\r\n    }\r\n\r\n    return FilltersFormHOC; \r\n}","import styled, {css} from \"styled-components\";\r\nimport {FlexboxGrid} from \"rsuite\";\r\n\r\nexport const Grid = styled(FlexboxGrid)`\r\n    \r\n    ${props => !props.noGutters && css`\r\n        margin-bottom: -15px;\r\n        margin-left: -7px;\r\n        margin-right: -7px;\r\n        \r\n        @media (min-width: 768px) {\r\n            margin-left: -15px;\r\n            margin-right: -15px; \r\n        }\r\n    `}\r\n    \r\n    ${props => props.noWrap && css`\r\n        && {\r\n            flex-wrap: nowrap;\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const GridItem = styled(FlexboxGrid.Item)`\r\n    padding-bottom: 15px;\r\n    \r\n    ${props => props.isFullWidth && css`\r\n        width: 100%;\r\n    `}\r\n    \r\n    ${props => !props.noGutters && css`\r\n        padding-left: 7px;\r\n        padding-right: 7px;    \r\n        \r\n        @media (min-width: 768px) {\r\n            padding-left: 15px;\r\n            padding-right: 15px;\r\n        }\r\n    `}\r\n    \r\n    && {\r\n        flex-shrink: 1;\r\n    }\r\n    \r\n    &:last-child {\r\n        margin-right: 0;\r\n    }\r\n`;","import React from 'react';\r\nimport {FormControl, Schema, SelectPicker} from 'rsuite'\r\nimport {Form, FormGroup} from 'rsuite';\r\nimport Checkbox from '../../hoc/Checkbox';\r\nimport CheckPicker from '../../hoc/CheckerPicker';\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport * as S from \"./styled\";\r\nimport {Collapse} from \"react-collapse\";\r\nimport {Spacer} from \"../../components/base/Spacer\";\r\n\r\nconst {ArrayType} = Schema.Types;\r\nconst accFiltersModel = Schema.Model({\r\n    account_manager: ArrayType()\r\n});\r\n\r\n\r\nexport default FormHOC( ( {\r\n    onChange, \r\n    account_manager_list,\r\n    paymentTermsList,\r\n    defaultValue,\r\n    isMobile,\r\n    show = false\r\n} ) => {\r\n\r\n    return (\r\n        <>\r\n            <Collapse isOpened={!isMobile || show}>\r\n                <Form\r\n                    onChange={onChange}\r\n                    model={accFiltersModel}\r\n                    formDefaultValue={defaultValue}\r\n                    fluid\r\n                >\r\n                    {isMobile && <Spacer />}\r\n                     <S.Grid\r\n                         noWrap={!isMobile}\r\n                         noGutters={isMobile}\r\n                     >\r\n                        <S.GridItem isFullWidth={isMobile}>\r\n                            <FormGroup\r\n                                style={{paddingBottom: isMobile ? '20px' : 0}}\r\n                            >\r\n                                <CheckPicker\r\n                                    sticky\r\n                                    data={account_manager_list.filter(item => item.is_managed)}\r\n                                    labelKey=\"name\"\r\n                                    valueKey=\"id\"\r\n                                    style={{width: 224}}\r\n                                    placeholder=\"All account manager\"\r\n                                    name=\"account_managger\"\r\n                                />\r\n                            </FormGroup>\r\n                        </S.GridItem>\r\n\r\n                        <S.GridItem isFullWidth={isMobile}>\r\n                            <FormGroup\r\n                                style={{paddingBottom: isMobile ? '20px' : 0}}\r\n                            >\r\n                                <FormControl\r\n                                    accepter={SelectPicker}\r\n                                    data={paymentTermsList}\r\n                                    labelKey=\"name\"\r\n                                    valueKey=\"pt_key\"\r\n                                    style={{width: 224}}\r\n                                    placeholder=\"Payment term\"\r\n                                    name=\"payment_term\"\r\n                                    searchable={false}\r\n                                />\r\n                            </FormGroup>\r\n                        </S.GridItem>\r\n\r\n                        <S.GridItem isFullWidth={isMobile}>\r\n                            <Checkbox\r\n                                name=\"traffic_check\"\r\n                                defaultChecked={defaultValue.traffic_check}\r\n                            >\r\n                                Only with traffic\r\n                            </Checkbox>\r\n                        </S.GridItem>\r\n\r\n                        <S.GridItem isFullWidth={isMobile}>\r\n                            <Checkbox\r\n                                name=\"allocated_check\"\r\n                                defaultChecked={defaultValue.allocated_check}\r\n                            >\r\n                                Only with Allocated numbers\r\n                            </Checkbox>\r\n                        </S.GridItem>\r\n\r\n                        <S.GridItem isFullWidth={isMobile}>\r\n                            <Checkbox\r\n                                name=\"closed_check\"\r\n                                defaultChecked={defaultValue.closed_check}\r\n                            >\r\n                                Show closed accounts\r\n                            </Checkbox>\r\n                        </S.GridItem>\r\n\r\n                    </S.Grid>\r\n                </Form>\r\n            </Collapse>\r\n        </>\r\n    );\r\n}, accFiltersModel, 500);","import styled, {css} from 'styled-components';\r\nimport {APP_TYPE_CLIENT} from \"../../const\";\r\n\r\nexport default styled.div`\r\n    margin-top: 10px;\r\n    background: #ffffff;\r\n    box-shadow: 0px 4px 30px rgba(0, 0, 0, 0.16);\r\n    border-radius: 5px;\r\n    padding: 10px;\r\n    min-height: 80vh;\r\n    \r\n    ${props => props.theme.appType === APP_TYPE_CLIENT && css`\r\n        background-color: rgb(242, 242, 242);\r\n        box-shadow: 0 4px 4px rgba(0,0,0,.12), 0 0 10px rgba(0,0,0,.06);\r\n        margin-bottom: 30px;\r\n        margin-top: 20px;\r\n        padding: 40px;\r\n        \r\n        @media (max-width: 767px) {\r\n            margin: 0;\r\n            border-radius: 0;\r\n            padding: 30px 15px 80px;\r\n            width: 100%;\r\n        }\r\n    `}\r\n`;","import React from 'react';\r\nimport {Icon, InputGroup, Schema} from 'rsuite'\r\nimport {Form, FormControl} from 'rsuite';\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport styled from 'styled-components';\r\n\r\nconst { StringType } = Schema.Types;\r\nconst MAX_LENGTH = 128;\r\nconst accFiltersModel = Schema.Model({\r\n    str: StringType().maxLength(MAX_LENGTH, `The maximum is only ${MAX_LENGTH} characters.`),\r\n});\r\n\r\n\r\nexport default FormHOC( ( {onChange, isMobile} ) => {\r\n    return (\r\n        <Form\r\n            onChange={onChange}\r\n            model={accFiltersModel}\r\n            formDefaultValue={{str: \"\"}}\r\n            fluid\r\n        >\r\n            <StyledInputGroup>\r\n                <FormControl \r\n                    name=\"str\" \r\n                    errorPlacement=\"topRight\"\r\n                    placeholder={!isMobile\r\n                        ? \"Account name/Email address\"\r\n                        : \"Account name / email\"\r\n                    }\r\n                />\r\n                <InputGroup.Addon>\r\n                    <Icon icon=\"search\" />\r\n                </InputGroup.Addon>\r\n            </StyledInputGroup>\r\n         \r\n        </Form>\r\n    );\r\n}, accFiltersModel, 500);\r\n\r\n\r\nconst StyledInputGroup = styled(InputGroup)`\r\n    && {\r\n        overflow: visible;\r\n        \r\n        @media (min-width: 1200px) {\r\n            margin-bottom: 10px;\r\n        }\r\n    }\r\n\r\n    &&&& {\r\n        .rs-input {\r\n            border-bottom-left-radius: 6px;\r\n            border-top-left-radius: 6px;\r\n        }\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport {Icon, IconButton} from 'rsuite';\r\nimport AccountsTable from './AccountsTable';\r\nimport AccountsFilters from './AccountsFilters';\r\nimport {pipe} from '../../utils/helpers';\r\nimport {newAccount} from '../../routes';\r\nimport {Link} from 'react-router-dom';\r\nimport PanelLayout from '../../components/base/PanelLayout';\r\nimport {checkPermissionsFor} from \"../../store/storeHelpers\";\r\nimport {ACCOUNT_CREATE_METHOD} from \"../../const/apiMethods\";\r\nimport AccountsApiFilters from './AccountsApiFilters';\r\nimport * as S from \"./styled\";\r\nimport {ButtonPrimary} from \"../../components/base/BaseButton\";\r\n\r\nconst FiltersFuncs = {\r\n    account_managger: (x,f) => f.some( am_key => am_key === x.account_manager_id),\r\n    payment_term: (x,f) => f === x.pt_key,\r\n    traffic_check: (x,f) => !!x.VOLUME_1_OUT ||  !!x.VOLUME_7_OUT ||  !!x.VOLUME_30_OUT,\r\n    allocated_check: (x,f) => !!x.allocated_numbers,\r\n    closed_check: (x,f) => x.closed || !x.closed,\r\n};\r\n\r\nexport default class extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            accounts: this.props.accounts,\r\n            accountsFirstFetched: false,\r\n            inner_loading: false,\r\n            resizedWidth: window.innerWidth,\r\n            filters: {\r\n                traffic_check: true\r\n            },\r\n            showMobileFilters: false\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.getAccounts({str: \"\"});\r\n        this.props.getAccountManagersList();\r\n        window.addEventListener('resize', this.handleResize);\r\n    };\r\n\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const {filters} = this.state;\r\n\r\n        if (prevProps.accounts !== this.props.accounts) {\r\n            this.setState({\r\n                accounts: filters.closed_check\r\n                    ? pipe(this.props.accounts, filters, FiltersFuncs)\r\n                    : this.onlyOpened(pipe(this.props.accounts, filters, FiltersFuncs)),\r\n                inner_loading: false\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    componentWillUnmount() {\r\n        const {setAccountsCurrentApiRequestStr} = this.props;\r\n        window.removeEventListener('resize', this.handleResize);\r\n        setAccountsCurrentApiRequestStr(\"\");\r\n    };\r\n\r\n\r\n    handleResize = () => {\r\n        this.setState({resizedWidth: window.innerWidth});\r\n    };\r\n\r\n\r\n    onlyOpened = (accounts) => {\r\n        return accounts.filter(acc => !acc.closed)\r\n    };\r\n\r\n\r\n    onChangeApiFilters = (filters) => {\r\n        const {setAccountsCurrentApiRequestStr} = this.props;\r\n        setAccountsCurrentApiRequestStr(filters.str);\r\n        this.props.getAccounts(filters);\r\n    };\r\n\r\n\r\n    onChangeFilters = (filters) => {\r\n        const {accounts} = this.props;\r\n\r\n        this.setState({\r\n            inner_loading: true,\r\n            filters: {...filters}\r\n        });\r\n        \r\n        setTimeout(() => this.setState({\r\n            accounts: filters.closed_check\r\n                ? pipe(accounts, filters, FiltersFuncs)\r\n                : this.onlyOpened(pipe(accounts, filters, FiltersFuncs)),\r\n            inner_loading: false\r\n        }), 0)\r\n    };\r\n\r\n\r\n    setLoading = (loading) => {\r\n        this.setState({inner_loading:loading});\r\n    };\r\n\r\n\r\n    render () {\r\n        const {loading, account_manager_list, paymentTermsList} = this.props;\r\n        const {accounts, inner_loading, resizedWidth, showMobileFilters} = this.state;\r\n\r\n        const isMobile = resizedWidth < 1200;\r\n\r\n        return (\r\n            <PanelLayout>\r\n                <S.Grid\r\n                    noWrap={!isMobile}\r\n                    align={!isMobile ? \"top\" : \"middle\"}\r\n                >\r\n\r\n                    <S.GridItem\r\n                        isFullWidth={resizedWidth < 420}\r\n                        style={{\r\n                            marginLeft: 'auto', \r\n                            order: resizedWidth >= 420 ? 1 : 0,\r\n                            textAlign: isMobile ? 'right' : 'inherit'\r\n                        }}\r\n                    >\r\n                        <ButtonAddAccount isMobile={isMobile}/>\r\n                    </S.GridItem>\r\n                    \r\n                    <S.GridItem style={{flexGrow: 1}}>\r\n                        <S.Grid noWrap>\r\n                            <S.GridItem style={{flexGrow: 1, width: '100%', maxWidth: 284}}>\r\n                                <AccountsApiFilters\r\n                                    onChange={this.onChangeApiFilters}\r\n                                    setLoading={this.setLoading}\r\n                                    isMobile={isMobile}\r\n                                />\r\n                            </S.GridItem>\r\n                            <S.GridItem>\r\n                                {!isMobile\r\n                                    ? <AccountsFilters\r\n                                        onChange={this.onChangeFilters}\r\n                                        defaultValue={this.state.filters}\r\n                                        setLoading={this.setLoading}\r\n                                        isMobile={false}\r\n                                        show={showMobileFilters}\r\n                                        {...{\r\n                                            account_manager_list,\r\n                                            paymentTermsList\r\n                                        }}\r\n                                    />\r\n                                    : <IconButton\r\n                                        appearance={showMobileFilters ? \"primary\" :  \"default\"}\r\n                                        icon={<Icon icon=\"filter\"/>}\r\n                                        onClick={() => this.setState({\r\n                                            showMobileFilters: !showMobileFilters\r\n                                        })}\r\n                                    >\r\n                                    </IconButton>\r\n                                }\r\n                            </S.GridItem>\r\n                        </S.Grid>\r\n                    </S.GridItem>\r\n\r\n                </S.Grid>\r\n\r\n                {isMobile\r\n                    && <AccountsFilters\r\n                        onChange={this.onChangeFilters}\r\n                        defaultValue={this.state.filters}\r\n                        setLoading={this.setLoading}\r\n                        isMobile={true}\r\n                        show={showMobileFilters}\r\n                        {...{account_manager_list}}\r\n                    />\r\n                }\r\n                \r\n                <AccountsTable\r\n                    data={accounts}\r\n                    loading={loading || inner_loading}\r\n                    defaultSortColumn=\"name\"\r\n                    isMobile={isMobile}\r\n                />\r\n            </PanelLayout>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst ButtonAddAccount = ({children, isMobile = false, ...props}) => (\r\n    checkPermissionsFor(ACCOUNT_CREATE_METHOD) &&\r\n        <ButtonPrimary\r\n            componentClass={Link}\r\n            to={newAccount}\r\n            isMobile={isMobile}\r\n            {...props}\r\n        >\r\n            {isMobile ?\r\n                <Icon icon=\"plus\"/>\r\n                : \"+Add account\"\r\n            }\r\n        </ButtonPrimary>\r\n);\r\n\r\n","export const newAccount = \"/accounts/new\";\r\n\r\n","import { connect } from 'react-redux';\r\nimport { \r\n    getAccounts, \r\n    setAccountsCurrentApiRequestStr \r\n} from '../actions/accounts';\r\nimport Accounts from '../pages/Accounts';\r\nimport {getAccountManagersList} from \"../actions/account_managers\";\r\n\r\nconst mapState = ( {accounts, account_managers, references} )=> ({\r\n    loading: accounts.loading, \r\n    accounts: accounts.items,\r\n    paymentTermsList: references.payment_terms_list,\r\n    account_manager_list: account_managers.list,\r\n});\r\n\r\nexport default connect( mapState, {\r\n    getAccounts, \r\n    setAccountsCurrentApiRequestStr,\r\n    getAccountManagersList,\r\n})(Accounts);\r\n  ","import {DESC_SORT, PRICE_NUMBERS, SET_NUMBERS, SET_NUMBERS_CSV} from '../const/';\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from  './defaults';\r\nimport {DEFAULT_PER_PAGE_TINY} from \"../const\";\r\nimport {TEMPLATE_GET} from '../const/apiMethods';\r\n\r\n\r\nconst setLoading = createAction('SET_LOADING_'+PRICE_NUMBERS);\r\nconst setNumbers = createAction(SET_NUMBERS);\r\nconst setNumbersCsv = createAction(SET_NUMBERS_CSV);\r\n\r\nexport const getNumbers = (pr_key, filter = {}, page = 1, per_page = DEFAULT_PER_PAGE_TINY, sort = {}) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n\r\n    let sort1, sort1_desc;\r\n\r\n    if (sort.column) {\r\n        sort1 = sort.column;\r\n        sort1_desc = sort.type && sort.type === DESC_SORT;\r\n    }\r\n\r\n    if (pr_key) {\r\n    api('price_range_number:get_list', {pr_key,\r\n        filter: {\r\n            show_allocated_numbers:false,\r\n            show_unallocated_numbers:false,\r\n            show_test_numbers:false,\r\n            show_block_allocation_numbers: false,\r\n            show_only_block_allocation_numbers: false,\r\n            ...(filter ? filter : {})\r\n        },\r\n        page,\r\n        per_page,\r\n        sort1,\r\n        sort1_desc\r\n    })\r\n        .then( (response) => {\r\n            if (response) {\r\n                dispatch(setNumbers({\r\n                    items: response.price_range_number_list || [],\r\n                    count: response.row_count || 0,\r\n                    allocatedNumbersCount: response.price_range_number_allocated_count,\r\n                    page,\r\n                    per_page,\r\n                }));\r\n            }\r\n        })\r\n        .finally(() => dispatch(setLoading(false)));\r\n    } else {\r\n        dispatch(setNumbers({\r\n            items: [],\r\n            count: 0,\r\n            page,\r\n            per_page\r\n        }));\r\n\r\n    }\r\n};\r\n\r\nexport const getTrunkNumberCsvById = (transaction_id) => (dispatch) => {\r\n    api('trunk_number:get_list', {target: {transaction_id}})\r\n        .then(({price_range_number_list = []}) => {\r\n            dispatch(setNumbersCsv(price_range_number_list));\r\n        })\r\n};\r\n\r\nexport const getTemplate = (account_id, type, table_name) => async () => {\r\n    return await api('template:get', {target: {account_id}, type, table_name});\r\n};","import {SPECIAL_RATES} from '../const/';\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from  './defaults';\r\n\r\n\r\nconst setLoading = createAction('SET_LOADING_'+SPECIAL_RATES);\r\nconst setRates = createAction(SPECIAL_RATES);\r\n\r\nexport const getRates = (account_id, filter,  page = 1 ,per_page= 10000) => (dispatch, getStore) => {\r\n    const store = getStore();\r\n\r\n    filter = filter || {sp_key: store.references.defaultSPKey};\r\n\r\n    dispatch(setLoading(true));\r\n\r\n    api('account_price:get_list', {\r\n        filter,\r\n        page,\r\n        per_page,\r\n        target: {account_id}\r\n    })\r\n        .then((r) => {\r\n            if (r === undefined) {\r\n                return;\r\n            }\r\n            dispatch(setRates(r.account_price_list || []))\r\n        })\r\n        .finally(() => dispatch(setLoading(false)));\r\n};\r\n","import React from 'react';\r\nimport {FormGroup, FormControl, ControlLabel, HelpBlock} from 'rsuite'\r\n\r\nexport default class  extends React.PureComponent {\r\n    render() {\r\n\r\n      const { name, message, label, widthLabel, accepter, error, ...props } = this.props;\r\n      return (\r\n            <FormGroup\r\n                className={error ? 'has-error' : ''}\r\n                style={{\r\n                    marginBottom: 10,\r\n                    marginRight:5,\r\n                    width: '180px'\r\n                }}\r\n            >\r\n                <FormControl\r\n                    style={{width: '100%'}}\r\n                    name={name}\r\n                    accepter={accepter}\r\n                    errorMessage={error}\r\n                    errorPlacement=\"topRight\"\r\n                    {...props}\r\n                />\r\n                <HelpBlock>{error}</HelpBlock>\r\n            </FormGroup>\r\n      );\r\n    }\r\n  }","import React from 'react';\r\nimport {Input, Form, CheckPicker, Schema} from 'rsuite';\r\nimport CustomField from './ContactCustomField';\r\nimport {fullPhoneRegex} from '../../utils';\r\nimport {ButtonListRemove} from \"../../components/base/BaseButton\";\r\n\r\nconst { StringType, ArrayType } = Schema.Types;\r\n\r\nexport const contactModel = Schema.Model({\r\n    person: StringType().isRequired('Required').maxLength(40, 'The maximum is only 40 characters.'),\r\n    email: StringType().isRequired('Required').isEmail('Email incorrect format'),\r\n    phone: StringType().addRule( value => fullPhoneRegex.test(value) , 'Please enter valid phone number'),\r\n    messenger: StringType().isRequired('Required').maxLength(40, 'The maximum is only 40 characters.'),\r\n    role_list: ArrayType().isRequired('This field required').minLength(1, 'Required')\r\n});\r\n\r\n\r\nexport const initContact = {person: '', email: '', phone: '', messenger: '', role_list: [], key: null};\r\nconst roles = [\"billing\", \"rates\", \"technical\", \"general\"].map(x => ({value: x, label: x}));\r\n\r\nexport default ( {disabled, contacts, updateContacts, formsRef, addableIsChanged, initialList, updateFormRef} ) => {\r\n    const updateFormValues = (formValues, key) => {\r\n        const value = [\r\n            ...contacts.map( contact =>\r\n                contact.key === key\r\n                    ?\r\n                    {...contact, ...formValues} : contact\r\n            )\r\n        ];\r\n        updateContacts(value);\r\n    };\r\n\r\n    const onRemove = (key) => {\r\n        updateContacts( contacts.filter( contact => contact.key !== key ) )\r\n    };\r\n\r\n    return contacts.map(\r\n        (contact) => {\r\n            const contactChanged = addableIsChanged(contact.id, initialList, contact);\r\n            return <Form\r\n                layout=\"inline\"\r\n                key={contact.key}\r\n                ref={ref => updateFormRef(ref, contact.key)}\r\n                onChange={(formValues) => {\r\n                    updateFormValues(formValues, contact.key)\r\n                }}\r\n                formDefaultValue={contact}\r\n                className={`tab-general-addable ${contactChanged && 'has-changed'}`}\r\n                model={contactModel}\r\n            >\r\n                <CustomField\r\n                    disabled={disabled}\r\n                    accepter={Input}\r\n                    name=\"person\"\r\n                    placeholder=\"Name\"\r\n                />\r\n                <CustomField\r\n                    disabled={disabled}\r\n                    accepter={Input}\r\n                    name=\"email\"\r\n                    placeholder=\"Email\"\r\n                />\r\n                <CustomField\r\n                    disabled={disabled}\r\n                    accepter={Input}\r\n                    name=\"phone\"\r\n                    placeholder=\"Phone\"\r\n                />\r\n                <CustomField\r\n                    disabled={disabled}\r\n                    accepter={Input}\r\n                    name=\"messenger\"\r\n                    placeholder=\"Messenger\"\r\n                />\r\n                <CustomField\r\n                    disabled={disabled}\r\n                    accepter={CheckPicker}\r\n                    name=\"role_list\"\r\n                    data={roles}\r\n                    placeholder=\"Roles\"\r\n                    searchable={false}\r\n                    classPrefix=\"minWidth\"\r\n                />\r\n                <div style={{marginTop: 5, marginLeft: 20, display: 'inline-block'}}>\r\n                    {contacts.length > 1 &&\r\n                    <ButtonListRemove onClick={() => onRemove(contact.key)}/>}\r\n                </div>\r\n            </Form>\r\n        }\r\n    );\r\n}","import React, {createRef} from 'react';\r\nimport {\r\n    CheckPicker,\r\n    Form,\r\n    Input,\r\n    Message,\r\n    Alert,\r\n    Schema,\r\n    Button,\r\n    Checkbox,\r\n    IconButton,\r\n    Icon,\r\n    Badge,\r\n    Tooltip, Whisper\r\n} from 'rsuite';\r\nimport CustomField from './ContactCustomField';\r\nimport {ButtonPrimary, BorderBtn, ButtonListRemove, BaseButton} from '../../components/base/BaseButton';\r\nimport Modal from '../../components/Modal';\r\nimport styled, {css} from 'styled-components';\r\nimport {copyToClipboard, generatePassword} from '../../utils';\r\nimport {api} from \"../../api/loginRoutes\";\r\n\r\nconst {StringType, ArrayType} = Schema.Types;\r\nconst passwordRegExp = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d#?!_@$%^&*-]{8,}$/;\r\n\r\n\r\nexport const userModel = Schema.Model({\r\n    name: StringType().isRequired('Required').maxLength(40, 'The maximum is only 40 characters.'),\r\n    login: StringType().isRequired('Required').maxLength(40, 'The maximum is only 40 characters.'),\r\n    email: StringType().isRequired('Required').isEmail('Email required'),\r\n    role_list: ArrayType()\r\n        .isRequired('This field required')\r\n        .minLength(1, 'Required')\r\n        .addRule((value, data) => {\r\n            if (value.length > 1 && !data.is_test_account) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }, 'You can choose only one option'),\r\n    password: StringType()\r\n        .maxLength(40, 'The maximum is only 40 characters.')\r\n        .addRule(value => passwordRegExp.test(value), 'Please enter legal characters'),\r\n});\r\n\r\nexport const userModelTest = Schema.Model({\r\n    name: StringType().isRequired('Required').maxLength(40, 'The maximum is only 40 characters.'),\r\n    login: StringType().isRequired('Required').maxLength(40, 'The maximum is only 40 characters.'),\r\n    email: StringType().isRequired('Required').isEmail('Email required'),\r\n    role_list: ArrayType()\r\n        .isRequired('This field required')\r\n        .minLength(1, 'Required'),\r\n    password: StringType()\r\n        .maxLength(40, 'The maximum is only 40 characters.')\r\n        .addRule(value => passwordRegExp.test(value), 'Please enter legal characters'),\r\n});\r\n\r\n\r\nconst userDisabledEmailModel = Schema.Model({\r\n    role_list: ArrayType()\r\n        .isRequired('This field required')\r\n        .minLength(1, 'Required')\r\n        .addRule((value, data) => {\r\n            if (value.length > 1 && !data.is_test_account) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }, 'You can choose only one option'),\r\n    });\r\n\r\nconst userDisabledEmailModelTest = Schema.Model({\r\n    role_list: ArrayType()\r\n        .isRequired('This field required')\r\n        .minLength(1, 'Required'),\r\n    });\r\n\r\n\r\nconst passwordModel = Schema.Model({\r\n    password: StringType()\r\n        .isRequired('Required')\r\n        .maxLength(40, 'The maximum is only 40 characters.')\r\n        .addRule(value => passwordRegExp.test(value), 'Please enter legal characters'),\r\n    confirm_password: StringType()\r\n        .isRequired('Required')\r\n        .addRule((value, data) => data.password === value, 'Password doesn\\'t match'),\r\n});\r\n\r\n\r\n\r\n// export const initUser = {name:'',login:'',email:'', password: null, key: null} \r\nexport const initUser = {name: '', login: '', email: '', role_list: [], key: null};\r\n\r\n\r\nexport default ({\r\n    disabled, \r\n    users, \r\n    updateUsers, \r\n    formsRef, \r\n    addableIsChanged, \r\n    initialList, \r\n    clientRoleList, \r\n    adminRoleList, \r\n    updateFormRef,\r\n    isTestAccount\r\n}) => {\r\n\r\n    let passwordRef = createRef();\r\n\r\n    const [verificationData, setVerificationData] = React.useState({});\r\n    const [resetPasswordData, setResetPassword] = React.useState({});\r\n\r\n    const [passwordModal, setShowPasswordModal] = React.useState(false);\r\n    const [errorsPasswordForm, setErrorsPasswordForm] = React.useState({\r\n        password: null,\r\n        confirm_password: null\r\n    });\r\n    const [passwordState, setPasswordState] = React.useState(null);\r\n    const [passwordUserObject, setPasswordUserObject] = React.useState({key: null, email: null, login: null});\r\n\r\n    const updateFormValues = (formValues, key) => {\r\n        users && updateUsers([\r\n            ...users.map(user =>\r\n                user.key === key\r\n                    ?\r\n                    {...user, ...formValues} : user\r\n            )\r\n        ]);\r\n    };\r\n    const onRemove = (key) => {\r\n        updateUsers(users.filter(user => user.key !== key));\r\n    };\r\n\r\n    const onShowPasswordModal = (user) => {\r\n        setShowPasswordModal(true);\r\n        setPasswordUserObject({...user});\r\n        setErrorsPasswordForm({\r\n            password: null,\r\n            confirm_password: null\r\n        });\r\n    };\r\n\r\n    const onCloseModal = () => {\r\n        setPasswordState(null);\r\n        setShowPasswordModal(false);\r\n    };\r\n    const setPassword = () => {\r\n        if (!errorsPasswordForm.password && !errorsPasswordForm.confirm_password) {\r\n            const formValue = passwordRef.getFormValue();\r\n            \r\n            if (!formValue)\r\n                return;\r\n\r\n            const password = passwordRef.getFormValue().password;\r\n            updateUsers([\r\n                ...users.map(user =>\r\n                    user.key === passwordUserObject.key\r\n                        ?\r\n                        {...user, password} : user\r\n                )\r\n            ]);\r\n            setPasswordState(null);\r\n            onCloseModal();\r\n        }\r\n    };\r\n\r\n    const onChangePasswordForm = (formValue) => {\r\n        setPasswordState(formValue);\r\n        setTimeout((passwordRef) => {\r\n            const status = passwordModel.check(passwordRef.getFormValue());\r\n            const password = status.password.hasError ? status.password.errorMessage : null;\r\n            const confirm_password = status.confirm_password.hasError ? status.confirm_password.errorMessage : null;\r\n            setErrorsPasswordForm({\r\n                password,\r\n                confirm_password\r\n            });\r\n        }, 100, passwordRef);\r\n    };\r\n\r\n    const generateNewPassword = () => {\r\n        const password = generatePassword();\r\n        setPasswordState({...passwordState, password, confirm_password: password});\r\n        const textToCopy = `login: ${passwordUserObject.login} password: ${password}`;\r\n        copyToClipboard(textToCopy);\r\n        Alert.success('New generated password has been copied!', 10000)\r\n    };\r\n\r\n    const sendVerification = (id) => {\r\n        setVerificationData({...verificationData, [id]: {loading: true, status: false}});\r\n        api(\"account_user:verify_email_create\", {\r\n            target: {account_user_id: id},\r\n            clean_password: true,\r\n        })\r\n            .then(r => {\r\n                setVerificationData({...verificationData, [id]: {loading: false, status: true}});\r\n                Alert.success(\"Confirmation email was sent\");\r\n            })\r\n            .catch(error => {\r\n                setVerificationData({...verificationData, [id]: {loading: false, status: false}});\r\n            });\r\n    };\r\n\r\n    const resetCustomerPassword = ({id, email}) => {\r\n        setResetPassword({...resetPasswordData, [id]: {loading: true, status: false}});\r\n        api(\"account_user__reset_password:request\", {\r\n            email: email,\r\n        })\r\n            .then(r => {\r\n                setResetPassword({...resetPasswordData, [id]: {loading: false, status: true}});\r\n                Alert.success(`Reset password link for \"${email}\" was successfully sent`);\r\n            })\r\n            .catch(error => {\r\n                setResetPassword({...resetPasswordData, [id]: {loading: false, status: false}});\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {users.map( (user, i) => {\r\n                const roles = (user.is_account_manager || isTestAccount\r\n                    ? [...adminRoleList]\r\n                    : clientRoleList\r\n                ).map(x => ({value: x, label: x}));\r\n\r\n                const changedClass = addableIsChanged(user.id, initialList, user) ? ' has-changed' : '';\r\n\r\n                return (\r\n                    \r\n                    <Form\r\n                        layout=\"inline\"\r\n                        key={user.key}\r\n                        ref={ref => updateFormRef(ref, user.key)}\r\n                        onChange={(formValues) => updateFormValues(formValues, user.key)}\r\n                        formDefaultValue={user}\r\n                        model={user.email_disabled\r\n                            ? isTestAccount ? userDisabledEmailModelTest : userDisabledEmailModel\r\n                            : isTestAccount ? userModelTest : userModel}\r\n                        className={`tab-general-addable${changedClass}`}\r\n                    >\r\n\r\n                        <CustomField\r\n                            disabled={disabled}\r\n                            accepter={Input}\r\n                            name=\"name\"\r\n                            placeholder=\"Name\"\r\n                        />\r\n\r\n                        <CustomField\r\n                            disabled={disabled || user.login_disabled}\r\n                            accepter={Input}\r\n                            name=\"login\"\r\n                            placeholder=\"Login\"\r\n                        />\r\n\r\n                        <CustomField\r\n                            disabled={disabled || user.email_disabled}\r\n                            accepter={Input}\r\n                            name=\"email\"\r\n                            placeholder=\"Email\"\r\n                        />\r\n\r\n                        <StyledCheckPicker>\r\n                            <CustomField\r\n                                className=\"custom-field-role-list\"\r\n                                disabled={disabled}\r\n                                accepter ={CheckPicker}\r\n                                name=\"role_list\"\r\n                                data={roles}\r\n                                placeholder=\"Roles\"\r\n                                searchable = {false}\r\n                                classPrefix=\"minWidth\"\r\n                            />\r\n                        </StyledCheckPicker>\r\n\r\n                        {(!isTestAccount && user.id) &&\r\n                            <span>\r\n                                <VerificationColumn>\r\n\r\n                                    {user.email_verified\r\n\r\n                                        ? <Whisper\r\n                                            placement=\"leftStart\"\r\n                                            trigger=\"hover\"\r\n                                            speaker={<Tooltip>Identity confirmed</Tooltip>}\r\n                                        >\r\n                                            <StyledActionButtonVerified confirmed buttonStyle=\"default\">\r\n                                                <Icon icon=\"envelope-open-o\"/>\r\n                                                <Icon className=\"button-badge\" icon=\"check-circle\"/>\r\n                                            </StyledActionButtonVerified>\r\n                                        </Whisper>\r\n\r\n                                        : <>\r\n                                            {user.email_verified === false || (verificationData[user.id] && verificationData[user.id].status)\r\n\r\n                                                ? <Whisper\r\n                                                    placement=\"leftStart\"\r\n                                                    trigger=\"hover\"\r\n                                                    speaker={<Tooltip>A confirmation email has been sent</Tooltip>}\r\n                                                >\r\n                                                    <StyledActionButtonSenVerification\r\n                                                        buttonStyle=\"secondary\"\r\n                                                        onClick={() => sendVerification(user.id)}\r\n                                                        loading={verificationData[user.id] && verificationData[user.id].loading}\r\n                                                    >\r\n                                                        <Icon icon=\"envelope-o\"/>\r\n                                                        <Icon className=\"button-badge\" icon=\"hourglass\"/>\r\n                                                    </StyledActionButtonSenVerification>\r\n                                                </Whisper>\r\n\r\n                                                : <Whisper\r\n                                                    placement=\"leftStart\"\r\n                                                    trigger=\"hover\"\r\n                                                    speaker={<Tooltip>Send verification link</Tooltip>}\r\n                                                >\r\n                                                    <StyledActionButtonSenVerification\r\n                                                        buttonStyle=\"secondary\"\r\n                                                        onClick={() => sendVerification(user.id)}\r\n                                                        loading={verificationData[user.id] && verificationData[user.id].loading}\r\n                                                    >\r\n                                                        <Icon icon=\"envelope-o\"/>\r\n                                                    </StyledActionButtonSenVerification>\r\n                                                </Whisper>\r\n                                            }\r\n                                        </>\r\n                                    }\r\n\r\n                                </VerificationColumn>\r\n                                <div style={{display: 'inline-block', marginRight: 10}}>\r\n                                    <Whisper\r\n                                        placement=\"leftStart\"\r\n                                        trigger=\"hover\"\r\n                                        speaker={<Tooltip>Send reset password link</Tooltip>}\r\n                                    >\r\n                                        <StyledActionButtonResetPassword\r\n                                            buttonStyle=\"default\"\r\n                                            onClick={() => resetCustomerPassword(user)}\r\n                                            loading={resetPasswordData[user.id] && resetPasswordData[user.id].loading}\r\n                                        >\r\n                                            <Icon icon=\"key\"/>\r\n                                            <Icon className=\"button-badge\" icon=\"refresh2\"/>\r\n                                        </StyledActionButtonResetPassword>\r\n                                    </Whisper>\r\n                                </div>\r\n                            </span>\r\n                        }\r\n\r\n\r\n                        {(isTestAccount || user.id) &&\r\n                            <div style={{display: 'inline-block'}}>\r\n                                <BorderBtn\r\n                                    withShadow\r\n                                    buttonStyle=\"primary\"\r\n                                    style={{marginRight: 10, width: 170}}\r\n                                    onClick={() => onShowPasswordModal(user)}\r\n                                    size=\"sm\"\r\n                                >\r\n                                    Set password\r\n                                </BorderBtn>\r\n                            </div>\r\n                        }\r\n\r\n                        <div \r\n                            style={{marginTop: 5, display: 'inline-block'}}\r\n                        >\r\n                            <ButtonListRemove\r\n                                className=\"remove-button\" \r\n                                onClick={() => onRemove(user.key)}\r\n                            />\r\n                        </div>\r\n\r\n                    </Form>\r\n                )\r\n            })}\r\n\r\n            <Modal width={700} show={passwordModal} onClose={onCloseModal}>\r\n\r\n                <Message\r\n                    type=\"info\"\r\n                    description={\r\n                        <p>The minimal length of password is 8 characters (just latin, digits special symbols\r\n                            #?!_@$%^&amp;* are allowed). Password must contain at least per one uppercase, lowercase and\r\n                            digit.</p>\r\n                    }\r\n                    style={{marginBottom: 10}}\r\n                />\r\n\r\n                <Form\r\n                    layout=\"inline\"\r\n                    ref={ref => passwordRef = ref}\r\n                    // model = {passwordModel}\r\n                    formValue={passwordState}\r\n                    onChange={(formValue) => onChangePasswordForm(formValue)}\r\n                >\r\n                    <CustomField\r\n                        disabled={disabled}\r\n                        accepter={Input}\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        errorMessage={errorsPasswordForm.password}\r\n                    />\r\n                    <CustomField\r\n                        disabled={disabled}\r\n                        accepter={Input}\r\n                        name=\"confirm_password\"\r\n                        type=\"password\"\r\n                        placeholder=\"Confirm password\"\r\n                        errorMessage={errorsPasswordForm.confirm_password}\r\n                    />\r\n                    <FormButton onClick={generateNewPassword}>Generate password</FormButton>\r\n                    <FormButton onClick={setPassword}>Set password</FormButton>\r\n                </Form>\r\n\r\n            </Modal>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\n\r\nconst FormButton = styled(BaseButton).attrs(() => ({\r\n    buttonStyle: \"primary\",\r\n    size: \"sm\"\r\n}))`\r\n    &&& {\r\n        height: 36px;\r\n        margin-right: 5px;\r\n    }\r\n`;\r\n\r\nconst StyledCheckPicker = styled.div`\r\n  display: inline-block;\r\n  margin-right: 0 !important;\r\n  .rs-form-group {\r\n      margin-right: 0 !important;\r\n  }\r\n`;\r\n\r\n\r\nconst VerificationColumn = styled.div`\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    padding-right: 10px;\r\n`;\r\n\r\nconst StyledActionButton = styled(BaseButton)`\r\n    position: relative;\r\n    \r\n    .button-badge {\r\n        position: absolute;\r\n        top: 3px;\r\n        right: 3px;\r\n        font-size: 10px;\r\n        line-height: 1;\r\n        font-size: 10px;\r\n    }\r\n`;\r\n\r\nconst StyledActionButtonSenVerification = styled(StyledActionButton)`\r\n    &&& {\r\n        \r\n        .button-badge {\r\n            font-size: 8px;\r\n        }\r\n    }\r\n`;\r\n\r\nconst StyledActionButtonVerified = styled(StyledActionButton)`\r\n    &&& {\r\n        cursor: not-allowed;\r\n        \r\n        .button-badge {\r\n            color: var(--color-secondary);\r\n        }\r\n    }\r\n`;\r\n\r\nconst StyledActionButtonResetPassword = styled(StyledActionButton)`\r\n    &&& {\r\n        \r\n        .button-badge {\r\n            color: var(--info);\r\n        }\r\n    }\r\n`;","export function  AccountCreate (form){\r\n    this.active = true;\r\n    this.description = 'Description is required? Realy??? You dont read task!';\r\n    this.is_dailer = true;\r\n    this.is_supplier = false;\r\n    this.permission_list = [];\r\n\r\n    form.allocate_number && this.permission_list.push('allocate_number');\r\n    form.allocate_pattern && this.permission_list.push('allocate_pattern');\r\n    form.google_otp_allocation && this.permission_list.push('google_otp_allocation');\r\n    form.google_otp_autorevoke && this.permission_list.push('google_otp_autorevoke');\r\n    this.trunk_notificaton = form.trunk_notificaton;\r\n\r\n    this.name  = form.name;\r\n    this.cur_key = form.cur_key;\r\n    this.pt_key = form.pt_key;\r\n    this.call_duration_max = form.call_duration_max ? Number.parseInt(form.call_duration_max) : 3600;\r\n    // this.account_manager_id = form.account_manager_id;\r\n    // this.CONTACT_LIST  = form.contacts;\r\n}\r\n","import React from 'react';\r\nimport {ApiRequest, API_Modal} from '../../components';\r\nimport { Alert } from 'rsuite';\r\nimport Icon from 'rsuite/es/Icon';\r\nimport {ButtonClose} from \"../../components/base/BaseButton\";\r\n\r\nexport default ({target, onUpdate}) => {\r\n    const [show, setShow] = React.useState(false);\r\n\r\n    return (\r\n        <>\r\n            <ButtonClose onClick={() => setShow(true)}><Icon icon=\"lock\" style={{marginRight: 5}}/>Close Account</ButtonClose>\r\n            { show && \r\n                <API_Modal\r\n                    title=\"Close Account\"\r\n                    onClose={() => setShow(false)}\r\n\r\n                >\r\n                    <ApiRequest\r\n                        method=\"account:remove\"\r\n                        target={target}\r\n                        checkResultKey=\"account\"\r\n                        update={() => {\r\n                            onUpdate();\r\n                            Alert.success(`Account was closed`)\r\n                        }}\r\n                    >\r\n                        <p>You are sure?</p>\r\n                        <p>All numbers will revoke and all trunks remove</p>\r\n                    </ApiRequest>   \r\n                </API_Modal>}\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport {ApiRequest, API_Modal} from '../../components'\r\nimport {Alert} from 'rsuite';\r\nimport Icon from 'rsuite/es/Icon';\r\nimport {ButtonPrimary} from \"../../components/base/BaseButton\";\r\n\r\nexport default ({target, onUpdate}) => {\r\n    const [show, setShow] = React.useState(false);\r\n\r\n    return (\r\n        <>\r\n            <ButtonPrimary\r\n                onClick={() => setShow(true)}\r\n            >\r\n                <Icon icon=\"unlock\" style={{marginRight: 5}}/> Open Account\r\n            </ButtonPrimary>\r\n\r\n            {show &&\r\n                <API_Modal\r\n                    title=\"Open Account\"\r\n                    onClose={() => setShow(false)}\r\n\r\n                >\r\n                    <ApiRequest\r\n                        method=\"account:restore\"\r\n                        target={target}\r\n                        checkResultKey=\"account\"\r\n                        update={() => {\r\n                            onUpdate();\r\n                            Alert.success(`Account was opened`)\r\n                        }}\r\n                    >\r\n                        <p>You are sure?</p>\r\n                    </ApiRequest>\r\n                </API_Modal>\r\n            }\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport {FlexboxGrid, Form, Input, Radio, RadioGroup, Schema, SelectPicker} from 'rsuite';\r\nimport Contacts, {contactModel, initContact} from './Contacts';\r\nimport Users, {initUser, userModel} from './Customers';\r\nimport CustomField from './CustomField';\r\nimport {ID, compareObjects} from '../../utils/helpers';\r\nimport {formValid} from '../../utils/validate';\r\nimport {AccountCreate} from './SaveModel';\r\nimport styled from 'styled-components';\r\nimport CloseAccount from './CloseAccount';\r\nimport OpenAccount from '../../pages/NewAccount/OpenAccount';\r\nimport './CreateForm.css';\r\nimport { useWindowWidth } from '../../hooks';\r\nimport { checkPermissionsFor } from '../../store/storeHelpers';\r\nimport {ButtonContent, ButtonListAdd, ButtonPrimary} from \"../../components/base/BaseButton\";\r\n\r\nconst {StringType, NumberType} = Schema.Types;\r\n\r\nconst accountModel = Schema.Model({\r\n    name: StringType().isRequired('Required').maxLength(40, 'The maximum is only 40 characters.'),\r\n    account_manager_id: StringType().isRequired('Required'),\r\n    cur_key: NumberType().isRequired('Required'),\r\n    pt_key: NumberType().isRequired('Required'),\r\n    call_duration_max: NumberType().min(0, 'Enter a positive number').max(10800, '3 hours is maximum').isRequired('Required')\r\n});\r\n\r\n\r\nconst styleRow = {margin: '10px 0px'};\r\n\r\nexport default ({\r\n    disabled, disabledCurrency = false, onSubmit: _onSubmit, currency_list, payment_terms_list,\r\n    account_manager_list, formDefaultValue, account_id, onCancel, active, getAccountManagersList,\r\n    client_role_list, admin_role_list, isTestAccount, isSeparatedPage, registration_key, ...props\r\n}) => {\r\n\r\n    const {users: formDefaultUsers, contacts: formDefaultContacts} = formDefaultValue || {};\r\n\r\n    const formDefaultValueInit = JSON.parse(JSON.stringify(formDefaultValue));\r\n    const formDefaultContactsInit = formDefaultContacts && formDefaultContacts.slice(0);\r\n    const formDefaultUsersInit = formDefaultUsers && formDefaultUsers.slice(0);\r\n\r\n    const [form, setForm] = React.useState(null);\r\n    const [formState, setFormState] = React.useState(formDefaultValue || {});\r\n    const [contacts, updateContacts] = React.useState(formDefaultContacts && formDefaultContacts.length ? formDefaultContacts : [{\r\n        ...initContact,\r\n        key: ID()\r\n    }]);\r\n    const [activeState, setActiveState] = React.useState(active);\r\n    const windowWidth = useWindowWidth();\r\n    const isMobile = windowWidth < 1200;\r\n\r\n    React.useEffect(() => {\r\n        getAccountManagersList();\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (!disabled && !contacts.length)\r\n            updateContacts(formDefaultContacts && formDefaultContacts.length ? formDefaultContacts : [{\r\n                ...initContact,\r\n                key: ID()\r\n            }]);\r\n    }, [formDefaultContacts, disabled]);\r\n\r\n    const [users, updateUsers] = React.useState(formDefaultUsers || []);\r\n\r\n    // Иногда пропадают юзеры, точнее в state users не попадает ничего и он undefined. Разботает раз через 5 раз. Какой-то странный рандом. Данное решение фиксит этот баг\r\n    React.useEffect(() => {\r\n        if (!disabled && !users.length)\r\n            updateUsers(formDefaultUsers || []);\r\n    }, [formDefaultUsers, disabled]);\r\n\r\n    const formsContactRef = {};\r\n    const updateContactFormRef = (ref, key) => formsContactRef[key] = ref;\r\n\r\n    const addContacts = () => {\r\n        const unValidContacts = contacts.filter(contact => !formValid(contactModel.check(contact)));\r\n\r\n        if (unValidContacts.length)\r\n            unValidContacts.map(\r\n                contact => formsContactRef[contact.key].check()\r\n            );\r\n        else\r\n            updateContacts([...contacts, {...initContact, key: ID()}]);\r\n    };\r\n\r\n    const onSubmit = () => {\r\n        const validContact =\r\n            !Object.keys(formsContactRef)\r\n                .map(key => formsContactRef[key].check())\r\n                .filter(check => !check).length;\r\n\r\n        const validUsers =\r\n            !Object.keys(formsUsersRef)\r\n                .map(key => formsUsersRef[key].check())\r\n                .filter(check => !check).length;\r\n\r\n        if (validContact && validUsers && form.check()) {\r\n            _onSubmit(new AccountCreate(form.getFormValue()),\r\n                form.getFormValue().account_manager_id,\r\n                users,\r\n                contacts,\r\n                registration_key\r\n            );\r\n        }\r\n    };\r\n\r\n    const formsUsersRef = {};\r\n    const updateUsersFormRef = (ref, key) => formsUsersRef[key] = ref;\r\n\r\n    const onAddUser = () => {\r\n        const unValidUsers = users.filter(user => !formValid(userModel.check(user)) && !user.email_disabled);\r\n\r\n        if (unValidUsers.length)\r\n            unValidUsers.map(\r\n                user => formsUsersRef[user.key].check()\r\n            );\r\n        else\r\n            updateUsers([{...initUser, key: ID()}, ...users]);\r\n    };\r\n    \r\n    const fieldIsChanged = (key) => {\r\n        return formState && formDefaultValueInit[key] !== formState[key]\r\n    };\r\n    \r\n    const radioIsPicked = (key, radioKey) => {\r\n        return fieldIsChanged(key) && formState[key] === radioKey;\r\n    };\r\n\r\n    const addableIsChanged = (id, addableObjectInitial, addableObject) => {\r\n        const addedNew = addableObjectInitial && !addableObjectInitial.map((addable) => addable.id).includes(id);\r\n        const changed = addableObjectInitial && !compareObjects(addableObjectInitial.find(obj => obj.id === id), addableObject);\r\n\r\n        return addedNew || changed;\r\n    };\r\n\r\n    const accountManagerList = account_manager_list.filter(value => !!value.is_managed);\r\n    return (\r\n        <Form\r\n            model={accountModel}\r\n            style={{marginBottom: '20px'}}\r\n            layout=\"horizontal\"\r\n            ref={ref => setForm(ref)}\r\n            onChange={setFormState}\r\n            formDefaultValue={formDefaultValue}\r\n        >\r\n            <FlexboxGrid style={styleRow}>\r\n\r\n                <FlexboxGrid.Item colspan={isMobile ? 24 : 6}>\r\n\r\n                    <CustomField\r\n                        disabled={disabled}\r\n                        accepter={Input}\r\n                        name=\"name\"\r\n                        placeholder=\"Account name\"\r\n                        label=\"Account name\"\r\n                        className={`tab-general-custom-field ${fieldIsChanged('name') && 'has-changed'}`}\r\n                    />\r\n\r\n                    <CustomField\r\n                        disabled={disabled}\r\n                        accepter={SelectPicker}\r\n                        size=\"sm\"\r\n                        placeholder=\"Account manager\"\r\n                        data={accountManagerList}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"id\"\r\n                        name=\"account_manager_id\"\r\n                        label=\"Account manager\"\r\n                        searchable={false}\r\n                        cleanable={false}\r\n                        className={`tab-general-select-field ${fieldIsChanged('account_manager_id') && 'has-changed'}`}\r\n                    />\r\n\r\n                    <CustomField\r\n                        disabled={disabled || disabledCurrency}\r\n                        accepter={SelectPicker}\r\n                        size=\"sm\"\r\n                        name=\"cur_key\"\r\n                        placeholder=\"Currency\"\r\n                        data={currency_list}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"cur_key\"\r\n                        label=\"Currency\"\r\n                        searchable={false}\r\n                        cleanable={false}\r\n                        className={`tab-general-select-field ${fieldIsChanged('cur_key') && 'has-changed'}`}\r\n                    />\r\n\r\n                    <CustomField\r\n                        disabled={disabled}\r\n                        accepter={SelectPicker}\r\n                        size=\"sm\"\r\n                        name=\"pt_key\"\r\n                        placeholder=\"Payment terms\"\r\n                        data={payment_terms_list}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"pt_key\"\r\n                        label=\"Payment terms\"\r\n                        searchable={false}\r\n                        cleanable={false}\r\n                        className={`tab-general-select-field ${fieldIsChanged('pt_key') && 'has-changed'}`}\r\n                    />\r\n                    <CustomField\r\n                        disabled={disabled}\r\n                        accepter={Input}\r\n                        name=\"call_duration_max\"\r\n                        placeholder=\"3600\"\r\n                        label=\"Call duration\"\r\n                        className={`tab-general-custom-field ${fieldIsChanged('call_duration_max') && 'has-changed'}`}\r\n                    />\r\n                </FlexboxGrid.Item>\r\n\r\n                <FlexboxGrid.Item \r\n                    colspan={isMobile ? 24 : 10}\r\n                    style={{marginTop: 33}}\r\n                >\r\n                    <CustomField\r\n                        disabled={disabled}\r\n                        accepter={RadioGroup}\r\n                        name=\"trunk_notificaton\"\r\n                    >\r\n                        <Radio\r\n                            style={{width: isMobile ? 'auto' : 450}}\r\n                            className={`tab-general-radio-field ${radioIsPicked('trunk_notificaton', 'all_numbers_trunk') && 'has-changed'}`}\r\n                            value={'all_numbers_trunk'}\r\n                        >Send full list of allocated numbers for trunk after update</Radio>\r\n                        <Radio\r\n                            style={{width: isMobile ? 'auto' : 450}}\r\n                            className={`tab-general-radio-field ${radioIsPicked('trunk_notificaton', 'all_numbers_all_trunks') && 'has-changed'}`}\r\n                            value={'all_numbers_all_trunks'}\r\n                        >Send full list of allocated numbers for all trunk after update</Radio>\r\n                        <Radio\r\n                            style={{width: isMobile ? 'auto' : 450}}\r\n                            className={`tab-general-radio-field ${radioIsPicked('trunk_notificaton', 'number_trunk') && 'has-changed'}`}\r\n                            value={'number_trunk'}\r\n                        >Send only new allocated numbers</Radio>\r\n                        <Radio\r\n                            style={{width: isMobile ? 'auto' : 450}}\r\n                            className={`tab-general-radio-field ${radioIsPicked('trunk_notificaton', 'nothing') && 'has-changed'}`}\r\n                            value={'nothing'}\r\n                        >Don't send notifications</Radio>\r\n\r\n                    </CustomField>\r\n\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n\r\n            {isSeparatedPage && !checkPermissionsFor(\"account_contact:create\") \r\n                ? null\r\n                : <>\r\n                    <FlexboxGrid style={styleRow}>\r\n                        <HeaderList>Contacts <ButtonListAdd onClick={addContacts}/> </HeaderList>\r\n                    </FlexboxGrid>\r\n\r\n                    <FlexboxGrid style={styleRow}>\r\n                        <Contacts  {...{contacts, updateContacts, disabled, addableIsChanged}} formsRef={formsContactRef}\r\n                                updateFormRef={updateContactFormRef} initialList={formDefaultContactsInit}/>\r\n                    </FlexboxGrid>\r\n                </>\r\n            }\r\n\r\n\r\n            {isSeparatedPage && !checkPermissionsFor(\"account_user:create\") \r\n                ? null\r\n                : <>\r\n                    <FlexboxGrid style={styleRow}>\r\n                        <HeaderList>Customers <ButtonListAdd onClick={onAddUser}/> </HeaderList>\r\n                    </FlexboxGrid>\r\n\r\n                    <FlexboxGrid style={styleRow}>\r\n                        <Users\r\n                            {...{\r\n                                users,\r\n                                updateUsers,\r\n                                disabled,\r\n                                addableIsChanged\r\n                            }}\r\n                            clientRoleList={client_role_list || []}\r\n                            adminRoleList={admin_role_list || []}\r\n                            isTestAccount={isTestAccount}\r\n                            formsRef={formsUsersRef}\r\n                            updateFormRef={updateUsersFormRef}\r\n                            initialList={formDefaultUsersInit}\r\n                        />\r\n                    </FlexboxGrid>\r\n                </>\r\n            }\r\n\r\n            <ButtonFooter>\r\n\r\n                <ButtonPrimary\r\n                    disabled={disabled}\r\n                    onClick={onSubmit}\r\n                >\r\n                    Save\r\n                </ButtonPrimary>\r\n\r\n                <ButtonContent\r\n                    onClick={() => onCancel()}\r\n                >\r\n                    Cancel\r\n                </ButtonContent>\r\n\r\n                {account_id &&\r\n                    <>\r\n                        {activeState\r\n                            ? <CloseAccount\r\n                                onUpdate={() => setActiveState(false)}\r\n                                target={{account_id}}\r\n                            />\r\n                            : <OpenAccount\r\n                                onUpdate={() => setActiveState(true)}\r\n                                target={{account_id}}\r\n                            />\r\n                        }\r\n                    </>\r\n                }\r\n\r\n            </ButtonFooter>\r\n        </Form>\r\n    );\r\n};\r\n\r\n\r\nconst HeaderList = styled.div`\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    font-size: 18px;\r\n    line-height: 21px;\r\n    /* identical to box height */\r\n    color: #8256C8;\r\n`;\r\n\r\n\r\nconst ButtonFooter = styled.div`\r\n    text-align: center;\r\n    margin-top: 30px;\r\n    > .rs-btn {\r\n        margin-right: 50px\r\n    }\r\n`;","import React from 'react';\r\nimport {Alert, Loader, Placeholder} from 'rsuite';\r\nimport CreateForm from '../../NewAccount/CreateForm';\r\nimport {api} from '../../../api/loginRoutes';\r\nimport {CRUDitems, ID} from '../../../utils';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {getAccountManagersList} from \"../../../actions/account_managers\";\r\n\r\nconst USER_NAME_ALREADY_USED_CODE = 4;\r\n\r\nconst {Paragraph} = Placeholder;\r\n\r\nfunction AccountForm(account, currency, payments, users) {\r\n    this.name = account.name;\r\n    this.account_manager_id = account.account_manager && account.account_manager.id;\r\n    this.call_duration_max = account.call_duration_max;\r\n    const cur = currency.filter(cur => cur.name === account.currency);\r\n    this.cur_key = cur[0] ? cur[0].cur_key : null;\r\n    const paymentsTerms = payments.filter(pt => pt.name === account.payment_terms)[0] || {};\r\n    this.pt_key = paymentsTerms.pt_key;\r\n    this.contacts = (account.account_contact_list || []).map(\r\n        contact => ({...contact, key: ID()})\r\n    );\r\n    this.users = users.map(\r\n        user => ({\r\n            ...user,\r\n            login_disabled: true,\r\n            email_disabled: true,\r\n            key: ID()\r\n        })\r\n    );\r\n\r\n    account.permission_list = Array.isArray(account.permission_list) ? account.permission_list : [];\r\n\r\n    this.allocate_number = account.permission_list.includes('allocate_number');\r\n    this.allocate_pattern = account.permission_list.includes('allocate_pattern');\r\n    this.google_otp_allocation = account.permission_list.includes('google_otp_allocation');\r\n    this.google_otp_autorevoke = account.permission_list.includes('google_otp_autorevoke');\r\n    this.trunk_notificaton = account.trunk_notificaton;\r\n}\r\n\r\nconst TabGeneral = ({\r\n    disabled = false, currency_list = [], payment_terms_list = [], account_manager_list = [], account,\r\n    accountUsers, account_user_modify_method, account_user_remove_method, getAccount, getAccountUsers,\r\n    client_role_list, admin_role_list, getAccountManagersList, ...props\r\n}) => {\r\n    const [loading, setLoading] = React.useState(false);\r\n\r\n    if (props.loading)\r\n        return (\r\n            <>\r\n                <Loader backdrop content=\"loading...\" vertical/>\r\n                <Paragraph rows={5}/>\r\n            </>\r\n        );\r\n\r\n    const onSubmit = async (data, account_manager_id, users, contacts) => {\r\n        const _users = JSON.parse(JSON.stringify(users)).map(\r\n            user => ({\r\n                ...user,\r\n                login_disabled: undefined,\r\n                email_disabled: undefined,\r\n                key: undefined\r\n            })\r\n        );\r\n        const [newAndChangesUsers, deletedUsers] = CRUDitems(accountUsers, _users);\r\n\r\n        const _contacts = JSON.parse(JSON.stringify(contacts)).map(\r\n            contact => ({\r\n                ...contact,\r\n                key: undefined\r\n            })\r\n        );\r\n        const [newAndChangesContacts, deletedContacts] = CRUDitems(account.account_contact_list || [], _contacts);\r\n\r\n        try {\r\n            setLoading(true);\r\n\r\n            const result = await api('account:modify', {\r\n                    ...data,\r\n                    cur_key: undefined,\r\n                    target: {\r\n                        account_id: account.id,\r\n                        account_manager_id\r\n                    }\r\n                },\r\n                true);\r\n            console.log(result);\r\n            if (result && result.account) {\r\n\r\n                const createMethod = account.is_test\r\n                    ? 'account_user:create_in_test_account'\r\n                    : 'account_user:create';\r\n\r\n                const modifyMethod = account.is_test\r\n                    ? 'account_user:modify_in_test_account'\r\n                    : account_user_modify_method;\r\n\r\n                const removeMethod = account.is_test\r\n                    ? 'account_user:remove_in_test_account'\r\n                    : account_user_remove_method;\r\n\r\n                const results =\r\n                    await Promise.all([\r\n                            ...newAndChangesUsers.map(\r\n                                (user) =>\r\n                                    user.id\r\n                                        ?\r\n                                        api(modifyMethod, {\r\n                                            name: user.name,\r\n                                            password: user.password,\r\n                                            target: {\r\n                                                // account_id: account.id, Женя сказал убрать\r\n                                                account_user_id: user.id\r\n                                            },\r\n                                            role_list: user.role_list\r\n                                        }, true)\r\n                                        :\r\n                                        api(createMethod, {...user, target: {account_id: account.id}}) // not manual Error\r\n                            ),\r\n                            ...deletedUsers.map(\r\n                                user => api(removeMethod, {\r\n                                    target: {\r\n                                        account_id: account.id,\r\n                                        account_user_id: user.id\r\n                                    }\r\n                                }, true)\r\n                            )],\r\n                        ...newAndChangesContacts.map(\r\n                            contact => contact.id\r\n                                ?\r\n                                api('account_contact:modify', {\r\n                                    ...contact,\r\n                                    target: {account_contact_id: contact.id}\r\n                                }, true)\r\n                                :\r\n                                api('account_contact:create', {\r\n                                    ...contact,\r\n                                    target: {account_id: account.id}\r\n                                }, true)\r\n                        ),\r\n                        ...deletedContacts.map(\r\n                            contact => api('account_contact:remove', {target: {account_contact_id: contact.id}}, true)\r\n                        )\r\n                    );\r\n\r\n                if (!results.map(r => JSON.stringify(r)).includes('{}')) {\r\n                    Alert.success('Saved');\r\n                    \r\n                    getAccount(account.id, true, true);\r\n                    getAccountUsers();\r\n                    props.history.replace('/reload');\r\n                    setTimeout((location, history) => {\r\n                            history.replace({\r\n                                ...location,\r\n                                search: '?tab=general'\r\n                            });\r\n                        },\r\n                        500,\r\n                        props.location, props.history);\r\n\r\n                }\r\n\r\n\r\n                setLoading(false);\r\n            } else {\r\n                if (result.error.code === USER_NAME_ALREADY_USED_CODE) {\r\n                    Alert.error('Account name already exists, please change to another');\r\n                }\r\n                setLoading(false);\r\n            }\r\n        } catch (e) {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const onCancel = () => {\r\n        props.history.replace('/reload');\r\n        setTimeout((location, history) => {\r\n                history.replace({\r\n                    ...location,\r\n                    search: '?tab=trunks'\r\n                });\r\n            },\r\n            0,\r\n            props.location, props.history);\r\n    };\r\n\r\n    return (\r\n        <CreateForm\r\n            formDefaultValue={new AccountForm(account, currency_list, payment_terms_list, accountUsers)}\r\n            disabledCurrency={true}\r\n            onCancel={onCancel}\r\n            account_id={account.id}\r\n            isTestAccount={account.is_test}\r\n            disabled={disabled || loading}\r\n            active={account.active}\r\n            {...{\r\n                onSubmit,\r\n                currency_list,\r\n                payment_terms_list,\r\n                account_manager_list,\r\n                client_role_list,\r\n                admin_role_list,\r\n                getAccountManagersList\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(TabGeneral);","import React from 'react';\r\nimport {Table} from 'rsuite';\r\nimport RenderedColumns from '../../../components/Table/RenderColumns';\r\nimport Pagination from '../../../components/base/Pagination'\r\nimport BaseTable from \"../../../components/base/BaseTable\";\r\nimport {ButtonRowDelete, ButtonRowEdit} from \"../../../components/base/BaseButton\";\r\n\r\nconst { Column, HeaderCell, Cell } = Table;\r\n\r\nconst columns = RenderedColumns([\r\n    {label: 'Subdestination', dataKey: 'subdestination_name'},\r\n    {label: 'Rate', dataKey: 'rate', align: 'right'},\r\n    {label: 'Start date', dataKey: 'start_date', formatData: 'date', align: 'right'},\r\n    {label: 'End date', dataKey: 'end_date', formatData: 'date', align: 'right'}\r\n], {end_date: true});\r\n\r\nexport default ({data = [], loading = false, total, per_page, activePage, onChangePage, onChangePerPage, onClickDelete, onClickEdit}) => {\r\n    \r\n    const getData = () =>  {\r\n        const start = per_page * (activePage - 1);\r\n        const end = start + per_page;\r\n        \r\n        return data.filter((v, i) => i >= start && i < end);\r\n    };\r\n\r\n    const _data = getData().map(item => ({\r\n        ...item,\r\n        start_date: item.start_date ? item.start_date.replace(\" \", \"T\") : \"\",\r\n        end_date: item.end_date ? item.end_date.replace(\" \", \"T\") : \"\",\r\n    }));\r\n\r\n    return (\r\n        <>\r\n            <BaseTable\r\n                data={_data}\r\n                loading={loading}\r\n                rowHeight={30}\r\n                height={ ((_data.length * 30) || 100) + 50}\r\n            >\r\n                {columns}\r\n                <Column width={50}>\r\n                    <HeaderCell/>\r\n                    <Cell style={{overflow: 'unset'}}>\r\n                        {(rate) => <ButtonRowEdit onClick = { () => onClickEdit(rate)} style={{top: '-2px'}}/> }\r\n                    </Cell>\r\n                </Column>\r\n                <Column width={50}>\r\n                    <HeaderCell/>\r\n                    <Cell style={{overflow: 'unset'}}>\r\n                        {({id}) => <ButtonRowDelete onClick = { () => onClickDelete(id)} style={{top: '-2px'}}/> }\r\n                    </Cell>\r\n                </Column>\r\n            </BaseTable>\r\n            <Pagination {...{total,per_page, activePage, onChangePage, onChangePerPage}} />\r\n        </>\r\n    );\r\n};","import React from 'react';\r\nimport { Form, FormGroup,SelectPicker, Input, InputGroup, Icon, Schema} from 'rsuite';\r\nimport CustomField from '../../../components/Form/CustomField';\r\nimport FormHOC from '../../../hoc/FilltersForm';\r\nimport ServicePlans from \"../../../components/Filters/ServicePlans\";\r\nimport {connect} from \"react-redux\";\r\nconst { StringType } = Schema.Types;\r\n\r\nconst filtersModel = Schema.Model({});\r\n\r\n\r\nconst filters = ({onChange, worldzone_list, subdestination_list, destination_list, defaultSPKey}) => {\r\n    return (\r\n            <>\r\n                <Form layout=\"inline\" \r\n                    onChange={onChange}\r\n                    formDefaultValue={{sp_key: defaultSPKey}}\r\n                    model={filtersModel}\r\n                    >\r\n                    <ServicePlans classPrefix=\"allocated\"/>\r\n                    <CustomField\r\n                        accepter={SelectPicker}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"wz_key\"\r\n                        data={worldzone_list}\r\n                        placeholder=\"Worldzone\"\r\n                        name=\"wz_key\"\r\n                        classPrefix=\"allocated\"\r\n                    />\r\n                     <CustomField\r\n                        accepter={SelectPicker}\r\n                        data={destination_list}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"de_key\"\r\n                        placeholder=\"Destination\"\r\n                        name=\"de_key\"\r\n                        classPrefix=\"allocated\"\r\n                    /> \r\n                    <CustomField\r\n                        accepter={SelectPicker}\r\n                        data={subdestination_list}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"sde_key\"\r\n                        placeholder=\"Subdestination\"\r\n                        name=\"sde_key\"\r\n                        classPrefix=\"allocated\"\r\n                    />\r\n                </Form>\r\n            </>\r\n        )\r\n};\r\n\r\nconst mapState = ({references})=> ({\r\n    defaultSPKey: references.defaultSPKey\r\n});\r\n\r\nexport default connect(mapState, null)(FormHOC(filters, filtersModel,300));","import React from 'react';\r\nimport {getFileResponse} from '../../../api/loginRoutes';\r\nimport {saveFileBlob} from '../../../utils/helpers';\r\nimport {ButtonSideIcon} from \"../../../components/base/BaseButton\";\r\n\r\nexport default ({account_id, filter = {}}) => {\r\n    const [loading, setLoading] = React.useState(false)\r\n    const exportFile = async () => {\r\n        setLoading(true);\r\n        const result = await getFileResponse('account_price:get_list',{\r\n            target: {account_id}, filter\r\n        })\r\n        if(result)\r\n            saveFileBlob(result,'prices.csv')\r\n        setLoading(false)\r\n\r\n    }\r\n    return (\r\n        <ButtonSideIcon\r\n            style={{marginTop: 10}}\r\n            onClick={() => exportFile()}\r\n            loading={loading}\r\n            icon=\"upload2\"\r\n        >\r\n            Export price\r\n        </ButtonSideIcon>\r\n    )\r\n};","import React, {useState} from 'react';\r\nimport Modal from '../../../components/Modal';\r\nimport {DatePicker, Form, Schema, SelectPicker} from 'rsuite';\r\nimport CustomField from '../../../components/Form/CustomField';\r\nimport {api} from '../../../api/loginRoutes';\r\nimport Checkbox from '../../../hoc/Checkbox';\r\nimport RateField from '../../../components/Form/RateField';\r\nimport ServicePlans from '../../../components/Filters/ServicePlans';\r\nimport {toStartDayUTCTime} from '../../../utils';\r\nimport {useWindowWidth} from \"../../../hooks\";\r\nimport {ButtonPrimary} from \"../../../components/base/BaseButton\";\r\n\r\nconst {NumberType} = Schema.Types;\r\n\r\n\r\nconst AddPrice = ({\r\n    subdestination_list,\r\n    account_id,\r\n    updateItems\r\n}) => {\r\n\r\n    let formRef = null;\r\n    const updateRandomFormRef = (ref) => formRef = ref;\r\n\r\n    const [show, setShow] = React.useState(false);\r\n    const [disabled, setDisabled] = React.useState(false);\r\n\r\n\r\n    const onSubmit = async () => {\r\n\r\n        if (!formRef.check())\r\n            return;\r\n\r\n        const data = {...formRef.getFormValue()};\r\n        setDisabled(true);\r\n\r\n        if (data.withDate) {\r\n\r\n            data.start_date = data.start_date\r\n                ? toStartDayUTCTime(new Date(data.start_date))\r\n                : null;\r\n\r\n        } else {\r\n            delete data.start_date;\r\n        }\r\n\r\n        delete data.withDate;\r\n\r\n        const result = await api('account_price:create', {\r\n            target: {account_id},\r\n            ...data,\r\n            rate: +formRef.getFormValue().rate\r\n        });\r\n\r\n        setDisabled(false);\r\n\r\n        if (result) {\r\n            setShow(false);\r\n            updateItems();\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div style={{float: 'right'}}>\r\n                <ButtonPrimary\r\n                    onClick={() => setShow(true)}\r\n                >\r\n                    + Add new special price\r\n                </ButtonPrimary>\r\n            </div>\r\n            <Modal\r\n                show={show}\r\n                title=\"Add new special rate\"\r\n                onClose={() => setShow(false)}\r\n                footer={true}\r\n                successText=\"Create\"\r\n                onSuccess={onSubmit}\r\n            >\r\n\r\n                <ModalForm\r\n                    updateFormRef={updateRandomFormRef}\r\n                    {...{\r\n                        subdestination_list,\r\n                        disabled\r\n                    }}\r\n                />\r\n\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddPrice;\r\n\r\n\r\nconst formModel = Schema.Model({\r\n    sp_key: NumberType().isRequired('Required'),\r\n    sde_key: NumberType().isRequired('Required'),\r\n    rate: NumberType().isRequired('Required'),\r\n});\r\n\r\nconst ModalForm = ({disabled = false, subdestination_list, updateFormRef}) => {\r\n    const [withDate, setWithDate] = useState(false);\r\n    const windowWidth = useWindowWidth();\r\n\r\n    return (\r\n        <Form\r\n            layout=\"inline\"\r\n            model={formModel}\r\n            formDefaultValue={{update_allocated_numbers: false}}\r\n            ref={ref => updateFormRef(ref)}\r\n            onChange={val => console.log(\"val\", val)}\r\n        >\r\n            <ServicePlans disabled={disabled} classPrefix=\"minWidth\"/>\r\n\r\n            <CustomField\r\n                disabled={disabled}\r\n                accepter={SelectPicker}\r\n                data={subdestination_list}\r\n                labelKey=\"name\"\r\n                valueKey=\"sde_key\"\r\n                placeholder=\"Subdestination\"\r\n                errorPlacement=\"topRight\"\r\n                name=\"sde_key\"\r\n                classPrefix=\"minWidth\"\r\n            />\r\n            <br/>\r\n            <RateField\r\n                name=\"rate\"\r\n                label=\"Rate\"\r\n            />\r\n            <br/>\r\n            <Checkbox\r\n                name={'withDate'}\r\n                onChange={(checked) => {\r\n                    setWithDate(checked);\r\n                }}\r\n            >\r\n                From date\r\n            </Checkbox>\r\n\r\n            <CustomField\r\n                accepter={DatePicker}\r\n                placeholder=\"Enter Date\"\r\n                name=\"start_date\"\r\n                disabled={!withDate}\r\n                ranges={[\r\n                    {\r\n                        label: 'Today',\r\n                        value: new Date()\r\n                    },\r\n                    {\r\n                        label: 'Tomorrow',\r\n                        value: new Date().setDate(new Date().getDate() + 1)\r\n                    }\r\n                ]}\r\n\r\n                // mobile\r\n                oneTap={windowWidth < 480 && withDate}\r\n                inline={windowWidth < 480 && withDate}\r\n            />\r\n\r\n            <Checkbox name=\"update_allocated_numbers\">\r\n                Update for all allocated number\r\n            </Checkbox>\r\n        </Form>\r\n    );\r\n};","import React, {useState, useEffect} from 'react';\r\nimport RatesTable from './RatesTable';\r\nimport RatesFilters from './RatesFilters';\r\nimport styled from 'styled-components';\r\nimport ExportPrice from './ExportPrice';\r\nimport {Form, RadioGroup, Radio, SelectPicker, Input, InputNumber, Schema, Alert, DatePicker, FormGroup} from 'rsuite';\r\nimport CustomField from '../../../components/Form/CustomField';\r\nimport Modal from '../../../components/Modal';\r\nimport {api} from '../../../api/loginRoutes';\r\nimport Checkbox from '../../../hoc/Checkbox';\r\nimport AddPrice from './AddPrice';\r\nimport { getRates } from '../../../actions/rates';\r\nimport RateField from \"../../../components/Form/RateField\";\r\nimport {connect} from \"react-redux\";\r\nimport {toStartDayUTCTime, toUTCDateTime} from 'utils';\r\nimport {DEFAULT_PER_PAGE_SMALL} from 'const';\r\nconst { StringType, NumberType } = Schema.Types;\r\n\r\nconst TabRates = ({rates, ratesLoading, worldzone_list, subdestination_list, destination_list, getItems, account_id, defaultSPKey}) => {\r\n    const [items, setItems] = React.useState(rates || []);\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [total, setTotal] = React.useState( (rates || []).length);\r\n    const [per_page, onChangePerPage]  = React.useState(+localStorage.getItem('ratesPerPage') || DEFAULT_PER_PAGE_SMALL);\r\n    const [activePage, onChangePage] = React.useState(1);\r\n\r\n    const [filter, setFilter] = React.useState({sp_key: defaultSPKey});\r\n\r\n    React.useEffect(() => {\r\n        setItems(rates || []);\r\n        setTotal((rates || []).length);\r\n        onChangePage(1);\r\n    },[rates]);\r\n\r\n    useEffect( () => {\r\n        getItems(filter);\r\n    }, [] );\r\n    \r\n    const onChangeFilters = (filter) => {\r\n        getItems(filter);\r\n        setFilter(filter);\r\n    };\r\n\r\n    const [deleteModal, setDeleteModal] = React.useState(false);\r\n    const [deleteID, setDeleteId] = React.useState(false);\r\n\r\n    const onClickDelete = (id) => { \r\n        setDeleteId(id);\r\n        setDeleteModal(true)\r\n    };\r\n\r\n    const deleteId = async () => {\r\n        setDeleteModal(false);\r\n        setLoading(true);\r\n        const result = await api('account_price:remove',{target: {account_id, account_price_id: deleteID}});\r\n        setLoading(false);\r\n        if(result){\r\n            return getItems(filter);\r\n        }\r\n        \r\n    };\r\n    const onSavePerPage = (per_page) => {\r\n        localStorage.setItem('ratesPerPage', per_page);\r\n        onChangePerPage(per_page);\r\n    };\r\n\r\n    const [editModal, setEditModal] = React.useState(false);\r\n    const [rateToEdit, setRateToEdit] = React.useState(null);\r\n    const [editDisabled, setEditDisabled] = React.useState(false);\r\n    const [formRef , setFormRef] = React.useState(null);\r\n\r\n    const onClickEdit = (rate) => {\r\n        setRateToEdit(rate);\r\n        setEditModal(true)   \r\n    };\r\n\r\n    const editId = async () => {\r\n        if(formRef.check()){\r\n            const data = {...formRef.getFormValue()};\r\n            setEditDisabled(true);\r\n\r\n            if (data.withDate) {\r\n                data.start_date = data.start_date ? toStartDayUTCTime(new Date(data.start_date)) : null;\r\n            } else {\r\n                delete data.start_date;\r\n            }\r\n\r\n            delete data.withDate;\r\n            if (data.hasOwnProperty('end_date'))\r\n                delete data.end_date;\r\n\r\n            const result = await api('account_price:modify',{\r\n                target:{account_id, account_price_id: rateToEdit.id},\r\n                ...data,\r\n                rate: +formRef.getFormValue().rate\r\n            });\r\n\r\n            setEditDisabled(false);\r\n\r\n            if (result) {\r\n                setEditModal(false);\r\n                getItems(filter);\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <RatesFiltersContainer>\r\n                <RatesFilters {...{\r\n                    worldzone_list, \r\n                    subdestination_list, \r\n                    destination_list\r\n                }}\r\n                onChange = {onChangeFilters}\r\n                />\r\n            </RatesFiltersContainer>\r\n            <ExportPrice account_id = {account_id} filter = {filter} />\r\n            <AddPrice {...{\r\n                subdestination_list,\r\n                account_id,\r\n                }}\r\n                updateItems = {() => getItems(filter)}\r\n            />\r\n            <RatesTable  \r\n                data={items} \r\n                loading={ratesLoading || loading}\r\n                onChangePerPage={onSavePerPage}\r\n                {...{\r\n                    total,\r\n                    per_page,\r\n                    activePage, \r\n                    onChangePage,\r\n                    onClickDelete,\r\n                    onClickEdit\r\n                }}\r\n\r\n            />\r\n            <Modal show={deleteModal} title=\"Deleting Price\" footer\r\n                onClose={() =>{setDeleteModal(false)}}\r\n                onSuccess={deleteId}\r\n                >\r\n                <p>You are sure ?</p>\r\n            </Modal>\r\n\r\n            <Modal show={editModal} title=\"Change Rate\" footer\r\n                onClose={() =>{setEditModal(false)}}\r\n                onSuccess={editId}\r\n                successText=\"Update\"\r\n                >\r\n                \r\n                <ModalForm  disabled={editDisabled} updateFormRef={setFormRef} rate={rateToEdit}/>\r\n            </Modal>\r\n        </Container>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = ({references}) => ({\r\n    defaultSPKey: references.defaultSPKey\r\n});\r\n\r\nexport default connect(mapStateToProps)(TabRates);\r\n\r\nconst Container = styled.div`\r\n    margin-top: 30px\r\n`;\r\n\r\nconst RatesFiltersContainer = styled.div`\r\n    display: inline-block;    \r\n`;\r\n\r\nconst formModel = Schema.Model({\r\n    rate: NumberType().isRequired('Required'),\r\n});\r\n\r\nconst ModalForm  =  ({updateFormRef, rate}) => {\r\n    const [withDate, setWithDate] = useState(false);\r\n\r\n    return (\r\n        <Form\r\n            layout = \"inline\"\r\n            model={formModel}\r\n            formDefaultValue={rate}\r\n            ref= { ref => updateFormRef(ref)}\r\n        >\r\n            <RateField name=\"rate\" label=\"Rate\"/>\r\n            <br/>\r\n                <Checkbox onChange={(checked) => {setWithDate(checked)}} name={'withDate'}>From date</Checkbox>\r\n                <CustomField\r\n                    accepter={DatePicker}\r\n                    placeholder=\"Enter Date\"\r\n                    name=\"start_date\"\r\n                    disabled={!withDate}\r\n                    ranges={[\r\n                        {\r\n                            label: 'Today',\r\n                            value: new Date()\r\n                        },\r\n                        {\r\n                            label: 'Tomorrow',\r\n                            value: new Date().setDate(new Date().getDate() + 1)\r\n                        }\r\n                    ]}\r\n                />\r\n            <br/>\r\n            <Checkbox name = \"update_allocated_numbers\">Update for all allocated number</Checkbox>          \r\n         </Form>\r\n    );\r\n};","import React, {Component} from 'react';\r\nimport {ASC_SORT} from \"const\";\r\nimport Table from './Table';\r\nimport _ from 'lodash';\r\n\r\nfunction TableServerSortHOC(TableComponent) {\r\n    class TableServerSort extends Component {\r\n        constructor(props) {\r\n            super(props);\r\n\r\n            this.state = {\r\n                sortType: props.defaultSortType || props.sortType || ASC_SORT,\r\n                sortColumn: props.defaultSortColumn || props.sortColumn || _.get(props,'columns[0].dataKey', undefined),\r\n            };\r\n        }\r\n\r\n        componentDidUpdate(prevProps, prevState, snapshot) {\r\n            const {sortType, sortColumn, defaultSortType, defaultSortColumn} = this.props;\r\n\r\n            if (prevProps.sortType !== sortType || prevProps.sortColumn !== sortColumn) {\r\n                this.setState({\r\n                    sortType: sortType || defaultSortType ||  ASC_SORT,\r\n                    sortColumn: sortColumn || defaultSortColumn || _.get(this.props,'columns[0].dataKey', undefined),\r\n                });\r\n            }\r\n        }\r\n\r\n        fetchData = (page = 1, per_page = this.props.per_page) =>{\r\n            const {sortColumn: column, sortType: type} = this.state;\r\n\r\n            this.props.getItems(page, per_page, {column, type});\r\n        };\r\n\r\n        handleSortColumn = (column, type) => {\r\n            if (this.props.onSort) this.props.onSort(column, type);\r\n\r\n            this.props.getItems(1, this.props.per_page, {column, type});\r\n\r\n            this.setState({\r\n                sortColumn: column,\r\n                sortType: type\r\n            });\r\n        };\r\n\r\n        render() {\r\n            const {forwardedRef, ...props} = this.props;\r\n\r\n            return (\r\n                <>\r\n                    <TableComponent\r\n                        {...props}\r\n                        ref={forwardedRef}\r\n                        onSortColumn={this.handleSortColumn}\r\n                        sortType={this.state.sortType}\r\n                        sortColumn={this.state.sortColumn}\r\n                        getItems={this.fetchData}\r\n                    />\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    return React.forwardRef((props, ref) => {\r\n        return <TableServerSort {...props} forwardedRef={ref}/>\r\n    })\r\n}\r\n\r\nexport default TableServerSortHOC(Table);\r\n\r\n","import React from 'react';\r\nimport { InputGroup, Input, Icon} from 'rsuite';\r\n\r\n\r\nconst InputSearch = ({onChange, placeholder,...props}) => (\r\n    <InputGroup >\r\n        <Input onChange={onChange} placeholder={placeholder} {...props}/>\r\n        <InputGroup.Addon>\r\n            <Icon icon=\"search\" />\r\n        </InputGroup.Addon>\r\n    </InputGroup>\r\n)\r\n\r\n\r\nexport default InputSearch;","import React from 'react';\r\nimport CustomField from '../Form/CustomField';\r\nimport InputSearch from '../Form/InputSearch';\r\nimport {Schema} from 'rsuite';\r\nconst { StringType } = Schema.Types;\r\n\r\nexport const str = StringType().maxLength(40, 'The maximum is only 40 characters.');\r\n\r\nconst Search = ({placeholder, ...props}) => (\r\n    <CustomField\r\n        name=\"str\"\r\n        accepter={InputSearch}\r\n        errorPlacement=\"topRight\"\r\n        placeholder={placeholder}\r\n        {...props}\r\n    />\r\n)\r\n\r\n\r\nexport default Search;","import styled, {css} from \"styled-components\";\r\nimport {FlexboxGrid} from \"rsuite\";\r\n\r\nexport const Grid = styled(FlexboxGrid)`\r\n    \r\n    ${props => !props.noGutters && css`\r\n        margin-bottom: -15px;\r\n        margin-left: -6px;\r\n        margin-right: -6px;\r\n    `}\r\n    \r\n    ${props => props.noWrap && css`\r\n        && {\r\n            flex-wrap: nowrap;\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const GridItem = styled(FlexboxGrid.Item)`\r\n    padding-bottom: 15px;\r\n    \r\n    ${props => props.isFullWidth && css`\r\n        width: 100%;\r\n    `}\r\n    \r\n    ${props => !props.noGutters && css`\r\n        padding-left: 6px;\r\n        padding-right: 6px;\r\n    `}\r\n    \r\n    && {\r\n        flex-shrink: 1;\r\n    }\r\n    \r\n    .rs-form-group {\r\n        margin: 0;\r\n    }\r\n    \r\n    &:last-child {\r\n        margin-right: 0;\r\n    }\r\n`;","import React from \"react\";\r\nimport Dropdown from \"rsuite/es/Dropdown\";\r\nimport styled from \"styled-components\";\r\nimport {Icon, Loader} from \"rsuite\";\r\n\r\nconst NumbersDownloadDropdown = ({\r\n    disabled,\r\n    loading,\r\n    onDownloadNumbersCsv,\r\n    onDownloadOnlyNumbersCsv,\r\n    isMobile = false,\r\n\r\n    ...props\r\n }) => {\r\n    return (\r\n        <StyledDropdown\r\n            isMobile={isMobile}\r\n            title={<>{loading\r\n                ? <StyledLoader/>\r\n                : isMobile ? <Icon icon={'download'}/> : \"Download\"}</>\r\n            }\r\n            appearance=\"default\"\r\n            placement={isMobile ? 'bottomEnd' : 'bottomStart'}\r\n            disabled={disabled}\r\n            {...props}\r\n        >\r\n            <Dropdown.Item\r\n                onClick={() => onDownloadNumbersCsv()}\r\n            >\r\n                Download allocated numbers as csv\r\n            </Dropdown.Item>\r\n            <Dropdown.Item\r\n                onClick={() => onDownloadOnlyNumbersCsv()}\r\n            >\r\n                Download only numbers (txt version)\r\n            </Dropdown.Item>\r\n        </StyledDropdown>\r\n    )\r\n};\r\n\r\nexport default NumbersDownloadDropdown;\r\n\r\nconst StyledDropdown = styled(Dropdown)`    \r\n    & > a {\r\n        padding: ${props => props.isMobile \r\n            ? '8px 32px 8px 12px !important' \r\n            : '12px 34px !important'\r\n        };\r\n        width: 100%;\r\n    }\r\n    &.rs-dropdown-disabled > a.rs-dropdown-toggle.rs-btn {\r\n        background-color: #d6d6db !important;\r\n    }\r\n`;\r\n\r\nconst StyledLoader = styled(Loader)`\r\n  & span.rs-loader-spin {\r\n    margin-top: 3px;\r\n    margin-right: 5px;\r\n  }\r\n`;","import React, {useEffect, useRef} from 'react';\r\nimport WZ from '../../../../components/Filters/WZ';\r\nimport DE from '../../../../components/Filters/DE';\r\nimport SDE from '../../../../components/Filters/SDE';\r\nimport Search, {str} from '../../../../components/Filters/Search';\r\nimport {\r\n    Form, FormGroup, Schema, DatePicker, SelectPicker,\r\n    FormControl, IconButton, Icon, RadioGroup, Radio\r\n} from 'rsuite';\r\nimport FormHOC from '../../../../hoc/FilltersForm';\r\nimport './Allocated.css';\r\nimport Checkbox from '../../../../hoc/Checkbox';\r\nimport {debounce} from 'lodash';\r\nimport {DEFAULT_EQUAL_SIGN} from '../../../../const'\r\nimport * as S from \"./styled\";\r\nimport {Collapse} from \"react-collapse\";\r\nimport styled from \"styled-components\";\r\nimport NumbersDownloadDropdown from \"./NumbersDownloadDropdown\";\r\n\r\nconst numbersFiltersModel = Schema.Model({str});\r\n\r\nconst NumbersFilters = React.forwardRef(({\r\n    onChange,\r\n    disabled,\r\n    filters,\r\n    currentDisplay,\r\n    currentRangeNumber,\r\n    onChangeGroup,\r\n    isMobile,\r\n\r\n    downloadLoading,\r\n    downloadDisabled,\r\n    onDownloadNumbersCsv,\r\n    onDownloadOnlyNumbersCsv,\r\n\r\n}, ref) => {\r\n\r\n    let searchRef = useRef(null);\r\n\r\n    const [showFilters, setShowFilters] = React.useState(false);\r\n    const [searchInput, onChangeSearchInput] = React.useState(currentRangeNumber);\r\n    const [formValue, onChangeFormValue] = React.useState({});\r\n    const [startDateState, onChangeStartDate] = React.useState(null);\r\n    const [equalSignState, onChangeEqualSign] = React.useState(DEFAULT_EQUAL_SIGN);\r\n    const equalObject = {\"<\": -1, \"=\": DEFAULT_EQUAL_SIGN, \">\": 1};\r\n\r\n    useEffect(() => {\r\n        onChangeSearchInput(currentRangeNumber);\r\n        if (searchRef && searchRef.current) {\r\n            if (!currentRangeNumber) {\r\n                searchRef.current.value = null;\r\n            }\r\n        }\r\n    }, [currentRangeNumber]);\r\n\r\n    useEffect(() => {\r\n        equalSignState && onChangeEqualSign(DEFAULT_EQUAL_SIGN);\r\n        onChangeStartDate(null);\r\n    }, [currentDisplay]);\r\n\r\n\r\n    const NumbersFiltersForm = (\r\n        <Form\r\n            defaultValue={filters || {}}\r\n            model={numbersFiltersModel}\r\n            ref={ref}\r\n            readOnly={disabled}\r\n            onChange={(value) => {\r\n                onChangeFormValue(value);\r\n                const equalSign = value.start_date_inequation || Number.isInteger(value.start_date_inequation)\r\n                    ? value.start_date_inequation.toString()\r\n                    : undefined;\r\n                let startDate = new Date(value.start_date);\r\n                startDate = value.start_date\r\n                    ? `${startDate.getFullYear()}-${startDate.getMonth() + 1}-${startDate.getDate()}`\r\n                    : undefined;\r\n                const filterObject = {\r\n                    ...value,\r\n                    str: searchInput,\r\n                    start_date: startDate,\r\n                    start_date_inequation: startDate\r\n                        ? startDateState ? equalSign : DEFAULT_EQUAL_SIGN.toString()\r\n                        : undefined\r\n                };\r\n                onChange(filterObject);\r\n            }}\r\n        >\r\n            <S.Grid noGutters={isMobile}>\r\n\r\n                <S.GridItem isFullWidth={isMobile}>\r\n                    <StyledField>\r\n                        <WZ disabled={disabled}/>\r\n                    </StyledField>\r\n                </S.GridItem>\r\n\r\n                <S.GridItem isFullWidth={isMobile}>\r\n                    <StyledField>\r\n                        <DE disabled={disabled}/>\r\n                    </StyledField>\r\n                </S.GridItem>\r\n\r\n                <S.GridItem isFullWidth={isMobile}>\r\n                    <StyledField>\r\n                        <SDE disabled={disabled}/>\r\n                    </StyledField>\r\n                </S.GridItem>\r\n\r\n                {currentDisplay === \"trunk_number\" &&\r\n                    <S.GridItem isFullWidth={isMobile}>\r\n                        <StyledField>\r\n                            <FormGroup style={{marginRight: 10}}>\r\n                                <FormControl\r\n                                    name=\"start_date\"\r\n                                    style={{width: 150}}\r\n                                    accepter={DatePicker}\r\n                                    placeholder=\"Enter Date\"\r\n                                    onChange={() => {\r\n                                        onChangeStartDate(true);\r\n                                    }}\r\n                                    onClean={() => {\r\n                                        onChangeStartDate(null);\r\n                                        onChangeEqualSign(DEFAULT_EQUAL_SIGN);\r\n                                    }}\r\n                                    defaultValue={!startDateState && filters && filters.start_date}\r\n                                    disabled={disabled}\r\n                                />\r\n                            </FormGroup>\r\n                        </StyledField>\r\n                    </S.GridItem>\r\n                }\r\n\r\n                {currentDisplay === \"trunk_number\" &&\r\n                    <S.GridItem isFullWidth={isMobile}>\r\n                        <StyledField>\r\n                            <FormGroup>\r\n                                <FormControl\r\n                                    labelKey=\"label\"\r\n                                    valueKey=\"value\"\r\n                                    cleanable={false}\r\n                                    searchable={false}\r\n                                    value={equalSignState}\r\n                                    accepter={SelectPicker}\r\n                                    disabled={!startDateState || disabled}\r\n                                    name=\"start_date_inequation\"\r\n                                    onChange={(value) => {\r\n                                        onChangeEqualSign(value)\r\n                                    }}\r\n                                    data={Object.keys(equalObject).map(val => { return {value: equalObject[val], label: val}})}\r\n                                />\r\n                            </FormGroup>\r\n                        </StyledField>\r\n                    </S.GridItem>\r\n                }\r\n\r\n                <S.GridItem\r\n                    isFullWidth={isMobile}\r\n                    style={{paddingLeft: isMobile ? 0 : 20}}\r\n                >\r\n                    <FormGroup>\r\n                        <StyledField>\r\n                            <Checkbox\r\n                                disabled={disabled}\r\n                                name=\"actual\"\r\n                                checked={(filters || {}).actual === false}\r\n                            >\r\n                                Show outdated/revoked\r\n                            </Checkbox>\r\n                        </StyledField>\r\n                    </FormGroup>\r\n                </S.GridItem>\r\n            </S.Grid>\r\n        </Form>\r\n    );\r\n\r\n    return (\r\n        <S.Grid>\r\n            <S.GridItem isFullWidth={isMobile}>\r\n                <S.Grid noWrap>\r\n                    <S.GridItem>\r\n                        <Form\r\n                            style={{paddingRight: isMobile ? 0 : 18}}\r\n                            formDefaultValue={{str: searchInput}}\r\n                        >\r\n                            <StyledField>\r\n                                <Search\r\n                                    inputRef={searchRef}\r\n                                    onBlur={(event) => {\r\n                                        // event.target && event.target.name === 'str' && event.target.focus();\r\n                                    }}\r\n                                    disabled={disabled}\r\n                                    placeholder=\"Range/Number search\"\r\n                                    onChange={debounce((value) => {\r\n                                        onChangeSearchInput(value);\r\n                                        onChange({...formValue, str: value})\r\n                                    }, 1000)}\r\n                                />\r\n                            </StyledField>\r\n                        </Form>\r\n                    </S.GridItem>\r\n\r\n                    {isMobile &&\r\n                        <S.GridItem>\r\n                            <IconButton\r\n                                icon={<Icon icon=\"filter\"/>}\r\n                                appearance={showFilters ? \"primary\" : \"default\"}\r\n                                onClick={() => setShowFilters(!showFilters)}\r\n                            >\r\n                            </IconButton>\r\n                        </S.GridItem>\r\n                    }\r\n\r\n                    {isMobile &&\r\n                        <S.GridItem style={{marginLeft: 'auto'}}>\r\n                            <NumbersDownloadDropdown\r\n                                loading={downloadLoading}\r\n                                disabled={downloadDisabled}\r\n                                onDownloadNumbersCsv={onDownloadNumbersCsv}\r\n                                onDownloadOnlyNumbersCsv={onDownloadOnlyNumbersCsv}\r\n                                isMobile={isMobile}\r\n                            />\r\n                        </S.GridItem>\r\n                    }\r\n                </S.Grid>\r\n            </S.GridItem>\r\n\r\n            <S.GridItem>\r\n                <Collapse isOpened={!isMobile || showFilters}>\r\n\r\n                    {NumbersFiltersForm}\r\n\r\n                    {isMobile &&\r\n                        <S.GridItem>\r\n                            <RadioGroup\r\n                                inline\r\n                                onChange={onChangeGroup}\r\n                                defaultValue={'trunk_number'}\r\n                                name=\"radioList\"\r\n                            >\r\n                                <Radio value=\"trunk_number\" disabled={disabled}>Numbers</Radio>\r\n                                <Radio value=\"price_range\" disabled={disabled}>Ranges</Radio>\r\n                                <Radio value=\"subdestination\" disabled={disabled}>Subdestinations</Radio>\r\n                            </RadioGroup>\r\n                        </S.GridItem>\r\n                    }\r\n                </Collapse>\r\n            </S.GridItem>\r\n        </S.Grid>\r\n    );\r\n});\r\n\r\nexport default FormHOC(NumbersFilters, numbersFiltersModel, 300);\r\n\r\nconst StyledField = styled.div`\r\n    display: inline-block;\r\n    \r\n    @media (max-width: 567px) {\r\n        display: block;\r\n        \r\n        .rs-input {\r\n            min-width: 30px;\r\n        }\r\n        \r\n        && .rs-control-label {\r\n            display: block;\r\n            margin-bottom: 5px;\r\n            margin-top: 0;\r\n        }\r\n        \r\n        && .rs-form-group {\r\n            display: block;\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst FooterActions_ = styled.div`\r\n    width: 100%;\r\n    position:relative;\r\n`;\r\nconst FooterActions__ = styled.div`\r\n    padding-bottom: 40px;\r\n    \r\n    @media (min-width: 1200px) {\r\n        padding-bottom: 0;\r\n        position: absolute;\r\n        right: 0;\r\n        top: -68px;\r\n    }\r\n`;\r\nexport const FooterActions = ({children}) => (<FooterActions_><FooterActions__>{children}</FooterActions__></FooterActions_>)\r\n\r\n\r\nexport const Header = styled.div`\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    font-size: 18px;\r\n    line-height: 21px;\r\n    color: #8256C8;\r\n    padding: 15px 0px;\r\n     div {\r\n        display: inline-block;\r\n        width: 50%;\r\n     }\r\n     div:last-child{\r\n         text-align: right\r\n     }\r\n`;\r\n\r\nconst HeaderTrunkActions_ = styled.div`\r\n    width: 100%;\r\n    position:relative;\r\n`;\r\nconst HeaderTrunkActions__ = styled.div`\r\n    // padding-top: 20px;\r\n`;\r\nexport const HeaderTrunkActions = ({children}) => (\r\n    <HeaderTrunkActions_>\r\n        <HeaderTrunkActions__>\r\n            {children}\r\n        </HeaderTrunkActions__>\r\n    </HeaderTrunkActions_>\r\n)","import React, {useState} from 'react';\r\nimport {ButtonPrimary} from '../../../../../components/base/BaseButton';\r\nimport Modal from './Modal';\r\n\r\nexport default ({\r\n    activeTrunk,\r\n    trunk_id,\r\n    sp_key,\r\n    spOtpType,\r\n    sp_auth,\r\n    update,\r\n    onClose,\r\n    forsed_open = false,\r\n    account_id,\r\n    disabled,\r\n    account,\r\n    getTrunkNumberCsvById,\r\n\r\n    hideBtn\r\n}) => {\r\n    const [show, setShow] = useState(false);\r\n\r\n    React.useEffect(() => {\r\n        if (forsed_open) {\r\n            setShow(true)\r\n        }\r\n    }, [forsed_open]);\r\n\r\n    return (\r\n        <>\r\n            {!hideBtn &&\r\n                <ButtonPrimary disabled={!trunk_id || disabled || !activeTrunk.active || activeTrunk.closed} onClick={() => setShow(true)}>\r\n                    Allocate new Numbers\r\n                </ButtonPrimary>\r\n            }\r\n            <Modal\r\n                show={show}\r\n                account={account}\r\n                activeTrunk={activeTrunk}\r\n                trunk_id={trunk_id}\r\n                disabledTrunk\r\n                sp_key={sp_key}\r\n                sp_auth={sp_auth}\r\n                spOtpType={spOtpType}\r\n                update={update}\r\n                onClose={() => {\r\n                    setShow(false);\r\n                    onClose();\r\n                }}\r\n                account_id={account_id}\r\n                {...{\r\n                    getTrunkNumberCsvById\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport {Button, SelectPicker} from 'rsuite';\r\n\r\nexport default ({actions, disabled, loading = false, disabledItemValues = []}) => {\r\n    const ref = React.createRef();\r\n\r\n    const [selectedAction, setSelectedAction] = useState(0);\r\n\r\n    const onClick = () => actions.find((action) => action.label === selectedAction).handler();\r\n\r\n    return (\r\n        <>\r\n            <Label>With selected:</Label>\r\n\r\n            <SelectPicker\r\n                data={actions}\r\n                valueKey=\"label\"\r\n                appearance=\"default\"\r\n                cleanable={false}\r\n                defaultValue={selectedAction}\r\n                searchable={false}\r\n                disabled={disabled}\r\n                onChange={(actionIndex) => setSelectedAction(actionIndex)}\r\n                style={{width: 224}}\r\n                ref={ref}\r\n                disabledItemValues={disabledItemValues}\r\n                placement={'autoVerticalEnd'}\r\n            />\r\n\r\n            <ButtonCss>\r\n                <Button onClick={onClick} loading={loading} disabled={!selectedAction || disabled}>Go</Button>\r\n            </ButtonCss>\r\n        </>\r\n    );\r\n};\r\n\r\nconst Label = styled.span`\r\n    padding-right: 5px;\r\n    display: inline-block;\r\n`;\r\n\r\nconst ButtonCss = styled.div`\r\n    display: inline-block;\r\n    padding: 0 15px;\r\n    button {\r\n        background: #20BA88;\r\n        color: #fff;\r\n        box-shadow: 0px 4px 30px rgba(0, 0, 0, 0.16);\r\n    }\r\n`;","import React, {useState, useEffect} from 'react';\r\nimport ModalSendApi from '../../../../../components/Modal/ModalSendApi';\r\nimport {Alert, Checkbox, DatePicker, Schema} from 'rsuite';\r\nimport ApiRequest from '../../../../../components/ApiRequest';\r\nimport {toStartDayUTCTime} from 'utils';\r\nimport FormControl from 'rsuite/es/FormControl';\r\nimport ControlLabel from 'rsuite/es/ControlLabel';\r\nimport FormGroup from 'rsuite/es/FormGroup';\r\nimport {MIN_RATE_VALUE} from 'const';\r\nimport MyForm from '../../../../../components/MyForm';\r\nimport {useWindowWidth} from \"../../../../../hooks\";\r\n\r\nconst {NumberType} = Schema.Types;\r\n\r\nexport default ({\r\n    initialValues,\r\n    getData,\r\n    target,\r\n    targetPrice,\r\n    update,\r\n    subDestinationsList,\r\n    ...props\r\n}) => {\r\n\r\n    const [canSend, setSend] = React.useState([]);\r\n    const [rate, setRate] = React.useState(0);\r\n    const [endDate, setEndDate] = useState(null);\r\n    const [withDate, setWithDate] = useState(false);\r\n    const windowWidth = useWindowWidth();\r\n    const data = getData();\r\n\r\n    const changeRateModel = {\r\n        rate: NumberType()\r\n            .min(MIN_RATE_VALUE, `The minimum value of this field is ${MIN_RATE_VALUE}`)\r\n            .max(10, `The minimum value of this field is 10`)\r\n    };\r\n\r\n    console.log(\"canSend\", canSend);\r\n\r\n    return (\r\n        <ModalSendApi\r\n            {...props}\r\n            title=\"Change Rate\"\r\n            successText=\"Change\"\r\n            update={update}\r\n            extraDisabled={!rate || withDate && (!endDate || !rate)}\r\n        >\r\n\r\n            {subDestinationsList.length && subDestinationsList.map(item => {\r\n                return (\r\n                    <ApiRequest\r\n                        key={item.sde_key}\r\n                        target={targetPrice}\r\n                        method=\"account_price:create\"\r\n                        checkResultKey='account_price'\r\n                        canSend={canSend.includes(item.sde_key)}\r\n                        data={{\r\n                            sp_key: data.sp_key,\r\n                            sde_key: item.sde_key,\r\n                            rate: rate\r\n                        }}\r\n                        update = { () => {\r\n                            Alert.success(`Default rate ${rate} for ${item.sde_name} was set`);\r\n                        }}\r\n                    >\r\n                        <Checkbox\r\n                            value={item.sde_key}\r\n                            onChange={(value, checked) => {\r\n                                if (checked) {\r\n                                    setSend([...canSend, item.sde_key]);\r\n                                    return;\r\n                                }\r\n                                setSend( canSend.filter(stateItem => stateItem !== item.sde_key) );\r\n                            }}\r\n                            className=\"mb-3\"\r\n                        >\r\n                            Set this  rate as default for {item.sde_name} for {data.account_name} (current: <b>{item.rate}</b>)\r\n                        </Checkbox>\r\n                    </ApiRequest>\r\n                )\r\n            })}\r\n\r\n            <MyForm\r\n                formDefaultValue={initialValues}\r\n                model={changeRateModel}\r\n                target={target}\r\n                method=\"trunk_number__filter:change_rate\"\r\n                checkResultKey = 'trunk_numbers'\r\n                update = { ({trunk_numbers}) => {\r\n                    Alert.success(`Change Rate for ${trunk_numbers} numbers`)\r\n                }}\r\n                addData={{\r\n                    rate: rate,\r\n                    ...(endDate ? {end_date: endDate} : {})\r\n                }}\r\n                className={`d-flex flex-column ${windowWidth >= 600 ? 'align-items-center' : null}`}\r\n\r\n                // life huck: disabled do not work. need to be refactored\r\n                deepCloned={false}\r\n            >\r\n                <FormGroup className=\"mb-3 mr-0\">\r\n                    <ControlLabel className=\"mr-3 mb-0\">New Rate</ControlLabel>\r\n                    <FormControl name=\"rate\"\r\n                                 label=\"New Rate\"\r\n                                 style={{width: 140}}\r\n                                 placeholder=\"0.0001\"\r\n                                 onChange={value => setRate(+value)}\r\n                                 errorPlacement=\"topStart\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup className=\"mb-0 mr-0\">\r\n                    <Checkbox\r\n                        inline\r\n                        className=\"mr-4 ml-0\"\r\n                        onChange={(v, checked) => {\r\n                            setWithDate(checked);\r\n\r\n                            if (!checked) {\r\n                                setEndDate(null);\r\n                            }\r\n                        }}\r\n                    >\r\n                        From date\r\n                    </Checkbox>\r\n\r\n                        <DatePicker\r\n                            name=\"end_date\"\r\n                            placeholder=\"Enter Date\"\r\n                            disabled={!withDate}\r\n                            onChange={(date) => {\r\n                                date && setEndDate(toStartDayUTCTime(date));\r\n                            }}\r\n                            ranges={[\r\n                                {\r\n                                    label: 'Today',\r\n                                    value: new Date()\r\n                                },\r\n                                {\r\n                                    label: 'Tomorrow',\r\n                                    value: new Date(new Date().setDate(new Date().getDate() + 1))\r\n                                }\r\n                            ]}\r\n\r\n                            // mobile\r\n                            inline={windowWidth < 600 && withDate}\r\n                            oneTap={windowWidth < 600 && withDate}\r\n                        />\r\n\r\n                </FormGroup>\r\n            </MyForm>\r\n        </ModalSendApi>\r\n    );\r\n};","import React, {useState} from 'react';\r\nimport {Alert, Checkbox, DatePicker} from 'rsuite';\r\nimport ModalSendApi from '../../../components/Modal/ModalSendApi'\r\nimport ApiRequest from '../../../components/ApiRequest'\r\nimport {toEndDayUTCTime, toStartDayUTCTime, toUTCDateTime} from 'utils';\r\nimport {useWindowWidth} from \"../../../hooks\";\r\n\r\n\r\nexport default ({initialValues, target, getCount, entity, ...props}) => {\r\n    const [endDate, setEndDate] = useState(null);\r\n    const [withDate, setWithDate] = useState(false);\r\n\r\n    const windowWidth = useWindowWidth();\r\n\r\n    const numbersCount = getCount();\r\n\r\n    return (\r\n        <ModalSendApi \r\n            {...props}\r\n            title=\"Revoke Number\"\r\n            successText=\"Yes\"\r\n            extraDisabled={withDate && !endDate}\r\n        >\r\n            <ApiRequest\r\n                method=\"trunk_number__filter:revoke\"\r\n                checkResultKey = 'trunk_numbers'\r\n                target= {target}\r\n                update = { ({trunk_numbers}) => {\r\n                    Alert.success(`Revoked ${trunk_numbers} numbers`)\r\n                }}\r\n                data={{\r\n                    ...(endDate ? {end_date: endDate} : {}),\r\n                    ...initialValues\r\n                }}\r\n            >\r\n                <div>\r\n                    <p>Selected <strong>{numbersCount}</strong> {numbersCount === 1 ? \"number\" : \"numbers\"} from this trunk will be revoked. Do you really want to do it?</p>\r\n                    <div\r\n                        style={{textAlign: windowWidth >= 600 ? 'center' : 'left'}}\r\n                        className=\"mt-4\"\r\n                    >\r\n                        <Checkbox inline className=\"mr-2\" onChange={(v, checked) => {\r\n                            setWithDate(checked);\r\n\r\n                            if (!checked) {\r\n                                setEndDate(null);\r\n                            }\r\n                        }}>From date</Checkbox>\r\n                        <DatePicker\r\n                            placeholder=\"Enter Date\" \r\n                            disabled={!withDate} \r\n                            onChange={(date) => {\r\n                                date && setEndDate(toStartDayUTCTime(date));\r\n                            }}\r\n                            ranges={[\r\n                                {\r\n                                    label: 'Today',\r\n                                    value: new Date()\r\n                                },\r\n                                {\r\n                                    label: 'Tomorrow',\r\n                                    value: new Date( new Date().setDate(new Date().getDate() + 1) )\r\n                                }\r\n                            ]}\r\n\r\n                            // mobile\r\n                            inline={windowWidth < 600 && withDate}\r\n                            oneTap={windowWidth < 600 && withDate}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </ApiRequest>\r\n        </ModalSendApi>\r\n    );\r\n};","import React from \"react\";\r\nimport {DatePicker} from \"rsuite\";\r\n\r\nexport default ({isMobile, ...props}) => {\r\n    return (\r\n        <DatePicker {...props}/>\r\n    )\r\n};","import React, {useState} from 'react';\r\nimport {Alert, Checkbox, DatePicker, SelectPicker} from 'rsuite';\r\nimport ModalSendApi from '../../../components/Modal/ModalSendApi'\r\nimport ApiRequest from '../../../components/ApiRequest'\r\nimport {toEndDayUTCTime, toStartDayUTCTime} from 'utils';\r\nimport CustomDatePicker from \"../../../components/Form/CustomDatePicker\";\r\nimport {useWindowWidth} from \"../../../hooks\";\r\n\r\n\r\nexport default ({initialValues, target, getCount, entity, trunks, ...props}) => {\r\n    const [trunkToModeId, setTrunkToMoveId] = useState(null);\r\n    const [endDate, setEndDate] = useState(null);\r\n    const [withDate, setWithDate] = useState(false);\r\n\r\n    const windowWidth = useWindowWidth();\r\n\r\n    const numbersCount = getCount();\r\n\r\n    return (\r\n        <ModalSendApi\r\n            {...props}\r\n            title=\"Move Number\"\r\n            successText=\"Yes\"\r\n            extraDisabled={!trunkToModeId || withDate && (!endDate || !trunkToModeId)}\r\n        >\r\n            <ApiRequest\r\n                method=\"trunk_number__filter:move_to_trunk\"\r\n                checkResultKey = 'trunk_numbers'\r\n                target = {{...target, trunk1_id: trunkToModeId }}\r\n                update = { ({trunk_numbers}) => {\r\n                    Alert.success(`Moved ${trunk_numbers} numbers`)\r\n                }}\r\n                data={{\r\n                    ...(endDate ? {end_date: endDate} : {}),\r\n                    ...initialValues\r\n                }}\r\n            >\r\n                <div>\r\n                    <p>Selected <strong>{numbersCount}</strong> {numbersCount === 1 ? \"number\" : \"numbers\"} from this trunk will be moved. Do you really want to do it?</p>\r\n                    <div\r\n                        style={{textAlign: windowWidth >= 600 ? 'center' : 'left'}}\r\n                        className=\"mt-5\"\r\n                    >\r\n                        <span className=\"mr-4\">Move to trunk</span>\r\n                        <SelectPicker\r\n                            cleanable={false}\r\n                            data={trunks}\r\n                            placeholder={'Select trunk to move'}\r\n                            valueKey=\"id\"\r\n                            labelKey=\"name\"\r\n                            onChange={(trunkId) => setTrunkToMoveId(trunkId || null)}\r\n                            style={{\r\n                                width: 250\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div\r\n                        style={{textAlign: windowWidth >= 600 ? 'center' : 'left'}}\r\n                        className=\"mt-4\"\r\n                    >\r\n                        <Checkbox\r\n                            inline\r\n                            className=\"mr-4\"\r\n                            onChange={(v, checked) => {\r\n                                setWithDate(checked);\r\n                                if (!checked) {\r\n                                    setEndDate(null);\r\n                                }\r\n                            }}\r\n                        >\r\n                            From date\r\n                        </Checkbox>\r\n                        <CustomDatePicker\r\n                            placeholder=\"Enter Date\"\r\n                            disabled={!withDate}\r\n                            onChange={(date) => {\r\n                                date && setEndDate(toStartDayUTCTime(date));\r\n                            }}\r\n                            style={{width: 150}}\r\n                            ranges={[\r\n                                {\r\n                                    label: 'Today',\r\n                                    value: new Date()\r\n                                },\r\n                                {\r\n                                    label: 'Tomorrow',\r\n                                    value: new Date( new Date().setDate(new Date().getDate() + 1) )\r\n                                }\r\n                            ]}\r\n\r\n                            // mobile\r\n                            inline={windowWidth < 600 && withDate}\r\n                            oneTap={windowWidth < 600 && withDate}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </ApiRequest>\r\n        </ModalSendApi>\r\n    );\r\n};","/* eslint-disable default-case */\r\nimport React from 'react';\r\nimport TableServerSort from '../../../../components/Table/TableServerSort';\r\nimport Filters from './NumbersFilters';\r\nimport {Alert, Radio, RadioGroup} from 'rsuite';\r\nimport {FooterActions} from '../styled';\r\nimport AllocatedNumbersModal from './AllocateNumbersModal';\r\nimport NumbersActions from './NumbersActions';\r\nimport ChangeRateModal from './AllocateNumbersModal/ChangeRateModal';\r\nimport RevokeNumbersModal from '../RevokeNumbersModal';\r\nimport MoveNumbersModal from 'pages/Account/Trunks/MoveNumbersModal';\r\nimport {\r\n    canIMoveNumbersToAnotherTrunk,\r\n    convertDataInColumn,\r\n    getRangeByNumber, makeNumbersFromPrefixesToCsv,\r\n    makeRangeFromPrefixesToCsv,\r\n    saveFileBlob\r\n} from 'utils';\r\nimport {DEFAULT_EQUAL_SIGN} from '../../../../const'\r\nimport {getFileResponse} from 'api/loginRoutes';\r\nimport {getBlobContent} from \"../../../../utils\";\r\nimport NumbersDownloadDropdown from \"./NumbersDownloadDropdown\";\r\nimport * as S from \"./styled\";\r\nimport {api} from \"../../../../api/loginRoutes\";\r\n\r\n\r\nconst NUMBER_KEY = \"trn_key\";\r\nconst RANGE_KEY = \"pr_key\";\r\nconst SUBDEST_KEY = \"sde_key\";\r\n\r\nconst columns = [\r\n    {\r\n        label: 'Number',\r\n        dataKey: 'number',\r\n        sortable: true,\r\n        value: (({number, numbers_count}) => {\r\n            return getRangeByNumber(number, numbers_count)\r\n        }),\r\n        displayWhen: ['trunk_number'],\r\n        minWidth: 196,\r\n        minWidthMobile: 225,\r\n    },\r\n    {\r\n        label: 'Range', \r\n        dataKey: 'name', \r\n        sortable: true, \r\n        displayWhen: ['trunk_number', 'price_range'],\r\n        minWidth: 196,\r\n        minWidthMobile: 300,\r\n    },\r\n    {\r\n        label: 'User',\r\n        dataKey: 'user_name',\r\n        displayWhen: ['trunk_number'],\r\n        minWidth: 196,\r\n        minWidthMobile: 300,\r\n    },\r\n    {\r\n        label: 'Rate', \r\n        dataKey: 'rate', \r\n        sortable: true, \r\n        displayWhen: ['trunk_number', 'price_range', 'subdestination'], \r\n        width: 100, \r\n        align: 'right'\r\n    },\r\n    {\r\n        label: 'Created Date',\r\n        dataKey: 'start_date',\r\n        displayWhen: ['trunk_number'],\r\n        formatData: 'date',\r\n        sortable: true,\r\n        align: 'right',\r\n        minWidth: 196,\r\n    },\r\n    {\r\n        label: 'Revoked Date',\r\n        dataKey: 'end_date',\r\n        displayWhen: ['trunk_number'],\r\n        formatData: 'date',\r\n        sortable: true,\r\n        align: 'right',\r\n        minWidth: 196,\r\n    },\r\n    {\r\n        label: 'Allocated numbers', \r\n        dataKey: 'trunk_numbers', \r\n        sortable: true, \r\n        displayWhen: ['price_range'], \r\n        align: 'right',\r\n        minWidth: 196,\r\n    },\r\n    {\r\n        label: 'Subdestination', \r\n        dataKey: 'subdestination_name', \r\n        sortable: true, \r\n        displayWhen: ['subdestination'],\r\n        minWidth: 196,\r\n        minWidthMobile: 300,\r\n    },\r\n    {\r\n        label: 'Allocated numbers and ranges', \r\n        dataKey: 'allocated_numbers_and_ranges', \r\n        displayWhen: ['subdestination'], \r\n        align: 'right',\r\n        minWidth: 196,\r\n    },\r\n];\r\n\r\n\r\nexport default class extends React.Component {\r\n\r\n    filters = null;\r\n    tableRef = null;\r\n    _selectedList = new Set();\r\n\r\n    state = {\r\n        footerActionsDisabled: false,\r\n        footerActionsLoading: false,\r\n\r\n\r\n        selected: {all: false, list: []},\r\n        filterState: null,\r\n        currentDisplay: 'trunk_number',\r\n        showChangeRateModal: false,\r\n        currentSubDestinationsList: [],\r\n        showRevokeModal: false,\r\n        showMoveModal: false,\r\n        showAllocatedNumbersModal: false,\r\n        searchLoading: false,\r\n        sort: {},\r\n\r\n        isDownloadInProgress: false,\r\n        selectedItems: new Map(),\r\n        resizedWidth: window.innerWidth\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {currentDisplay, filterState} = this.state;\r\n        const {allocatedNumbersPerPage, currentRangeNumber} = this.props;\r\n\r\n        const filters = {\r\n            start_date_inequation: 0,\r\n            ...(currentRangeNumber ? {str: currentRangeNumber} : {}),\r\n            ...(filterState || this.filters.getValues())\r\n        };\r\n\r\n        this.props.getNumbers(currentDisplay, filters, 1, allocatedNumbersPerPage, {});\r\n\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    componentDidUpdate({trunk_id}) {\r\n        if (trunk_id !== this.props.trunk_id) {\r\n            const {currentDisplay, filterState} = this.state;\r\n            const {allocatedNumbersPerPage, currentRangeNumber} = this.props;\r\n\r\n            const filters = {\r\n                start_date_inequation: 0,\r\n                ...(currentRangeNumber ? {str: currentRangeNumber} : {}),\r\n                ...(filterState || this.filters.getValues())\r\n            };\r\n            this.props.getNumbers(currentDisplay, filters, 1, allocatedNumbersPerPage);\r\n            this.tableRef.clear();\r\n            this._selectedList.clear();\r\n            this.clearSelectedNumbers();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    handleResize = () => {\r\n        this.setState({resizedWidth: window.innerWidth});\r\n    };\r\n\r\n    getFilters = () => ({...this.filters.getValues()});\r\n\r\n    getSelectedList = () => ({\r\n        ...this.state.selected, \r\n        countAll: this.props.allocatedNumbersCount\r\n    });\r\n\r\n    getNumbers = (page, per_page, sort) => {\r\n        const {currentDisplay, filterState} = this.state;\r\n\r\n        this.props.getNumbers(currentDisplay, filterState || this.filters.getValues(), page, per_page, sort);\r\n    };\r\n\r\n    setFocusOnInput = (input) => {\r\n        if (input.ref.current._reactInternalFiber.firstEffect.stateNode.focus)\r\n            input.ref.current._reactInternalFiber.firstEffect.stateNode.focus();\r\n    };\r\n\r\n    onChangeFilters = (filters) => {\r\n        const {currentDisplay, sort, searchLoading} = this.state;\r\n\r\n        if (!searchLoading) this.setState({searchLoading: true});\r\n        const filterState = {...filters, start_date_inequation: filters.start_date_inequation ? Number.parseInt(filters.start_date_inequation) : DEFAULT_EQUAL_SIGN};\r\n        Object.keys(filterState).forEach(key => filterState[key] === undefined  || filterState[key] === null ? delete filterState[key] : {});\r\n\r\n        const intervalTimer = () => {\r\n            setTimeout(() => {\r\n                this.setState({searchLoading: false, filterState: filterState});\r\n                this.setFocusOnInput(this.filters);\r\n            }, 1000);\r\n        };\r\n        intervalTimer();\r\n        this.props.getNumbers(currentDisplay, filterState, 1, this.props.allocatedNumbersPerPage, sort);\r\n        // ref>current>_reactInternalFiber>firstEffect>stateNode\r\n    };\r\n\r\n    onChangeGroup = (currentDisplay) => {\r\n        const {filterState} = this.state;\r\n\r\n        this.tableRef.clear();\r\n        this._selectedList.clear();\r\n        this.clearSelectedNumbers();\r\n        this.setState({currentDisplay});\r\n        this.props.getNumbers(currentDisplay, filterState || this.filters.getValues(), 1, this.props.allocatedNumbersPerPage, this.state.sort);\r\n    };\r\n\r\n    getInitialValues = () => {\r\n        const {currentDisplay, selected, filterState} = this.state;\r\n        let list = null;\r\n\r\n        if (selected.all) {\r\n            return {filter: filterState || this.filters.getValues(), filterAll: true};\r\n        }\r\n\r\n        switch (currentDisplay) {\r\n            case 'trunk_number':\r\n                list = {trn_key_list: selected.list};\r\n                break;\r\n            case 'price_range':\r\n                list = {pr_key_list: selected.list};\r\n                break;\r\n            case 'subdestination':\r\n                list = {sde_key_list: selected.list};\r\n                break;\r\n\r\n        }\r\n        return {...list};\r\n    };\r\n\r\n    getCurrentEntityName = () => {\r\n        return {\r\n            'trunk_number': 'number',\r\n            'price_range': 'range',\r\n            'subdestination': 'subdestination'\r\n        }[this.state.currentDisplay];\r\n    };\r\n\r\n    updateItems = () => {\r\n        const {currentDisplay, sort, filterState} = this.state;\r\n        const {allocatedNumbersPerPage: per_page, allocatedNumbersPage: page, getNumbers} = this.props;\r\n        this.tableRef && this.tableRef.clear();\r\n        this._selectedList.clear();\r\n        this.clearSelectedNumbers();\r\n        getNumbers(currentDisplay, filterState || this.filters.getValues(), page, per_page, sort);\r\n    };\r\n\r\n    proxyFilters = (filters) => {\r\n        return {\r\n            ...filters,\r\n            actual: !filters.actual\r\n        };\r\n\r\n    };\r\n\r\n    getRowKey = () => {\r\n        const {currentDisplay} = this.state;\r\n        switch (currentDisplay) {\r\n            case 'trunk_number':\r\n                return NUMBER_KEY;\r\n            case 'price_range':\r\n                return RANGE_KEY;\r\n            case 'subdestination':\r\n                return SUBDEST_KEY;\r\n        }\r\n    };\r\n\r\n    updateSelectedList = (selected) => {\r\n        const {allocatedNumbers} = this.props;\r\n        const rowKey = this.getRowKey();\r\n\r\n        for (let item of this._selectedList) {\r\n            if (!selected.list.find(key => key === item[rowKey]))\r\n                this._selectedList.delete(item);\r\n        }\r\n\r\n        selected.list.map(key => {\r\n            const value = allocatedNumbers.find(item => item[rowKey] === key);\r\n            if (value)\r\n                this._selectedList.add(value);\r\n        });\r\n\r\n        if (selected.list.length === 0) {\r\n            this.clearSelectedNumbers();\r\n        }\r\n\r\n        this.setState({selected});\r\n    };\r\n\r\n    getDataForChangeRate = () => {\r\n        for (let item of this._selectedList) {\r\n            return {\r\n                sde_key: item.sde_key,\r\n                sde_name: item.subdestination_name,\r\n                account_name: this.props.account_name,\r\n                sp_key: this.props.sp_key\r\n            };\r\n        }\r\n    };\r\n\r\n    onDownloadNumbersCsv = async () => {\r\n        const {acc_key: account_id, trunk_id} = this.props;\r\n        const {filterState} = this.state;\r\n\r\n        this.setState({isDownloadInProgress: true});\r\n\r\n\r\n        const filter = filterState || this.filters.getValues();\r\n\r\n        const result = await getFileResponse('trunk_number__get_list', {\r\n            target: {trunk_id}, filter\r\n        });\r\n\r\n        if (result) {\r\n            getBlobContent(result).then((text) => {\r\n                const csvContent = this.props.sp_auth ? makeRangeFromPrefixesToCsv(text) : text;\r\n                const csvDataList = csvContent.split('\\n').map((data) => {\r\n                    const line = data.split(';');\r\n                    return [line[0], ...line.slice(2)].join(';')\r\n                });\r\n                const csvData = csvDataList.join('\\n');\r\n                saveFileBlob(csvData, 'allocated_numbers.csv');\r\n            })\r\n        }\r\n        \r\n        this.setState({isDownloadInProgress: false});\r\n    };\r\n\r\n    onDownloadOnlyNumbersCsv = async () => {\r\n        const {trunk_id} = this.props;\r\n        const {filterState} = this.state;\r\n\r\n        this.setState({isDownloadInProgress: true});\r\n\r\n        const filter = filterState || this.filters.getValues();\r\n\r\n        const result = await getFileResponse('trunk_number__get_list', {\r\n            target: {trunk_id}, filter\r\n        });\r\n\r\n        if (result) {\r\n            getBlobContent(result).then((text) => {\r\n                const csvContent = this.props.sp_auth ? makeNumbersFromPrefixesToCsv(text) : text;\r\n                const csvDataList = csvContent.split('\\n').slice(1).map((data) => {\r\n                    const line = data.split(';');\r\n                    return line[0]\r\n                });\r\n                const csvData = csvDataList.join('\\n');\r\n                saveFileBlob(csvData, 'allocated_numbers.txt');\r\n            })\r\n        }\r\n\r\n        this.setState({isDownloadInProgress: false});\r\n    };\r\n\r\n    /* section: Count Selected Numbers */\r\n\r\n    keepSelectedItems = (data, checked) => {\r\n        const {selectedItems} = this.state;\r\n        const updatedCollection = new Map(selectedItems);\r\n\r\n        const rowKey = this.getRowKey();\r\n\r\n        for (const item of data) {\r\n            if (checked) {\r\n                updatedCollection.set(item[rowKey], item);\r\n            } else {\r\n                updatedCollection.delete(item[rowKey]);\r\n            }\r\n        }\r\n\r\n        this.setState({selectedItems: updatedCollection});\r\n    };\r\n\r\n    getSelectedNumbersCount = () => {\r\n        const {selectedItems, selected: {list, all}} = this.state;\r\n\r\n        if (all)\r\n            return this.props.allocatedNumbersTotalCount;\r\n\r\n        const rowKey = this.getRowKey();\r\n        let key = \"id\";\r\n        switch (rowKey) {\r\n            case NUMBER_KEY:\r\n                key = \"numbers_count\";\r\n                break;\r\n            case RANGE_KEY:\r\n                key = \"price_range_trunk_numbers\";\r\n                break;\r\n            case SUBDEST_KEY:\r\n                key = \"subdestination_trunk_numbers\";\r\n                break;\r\n        }\r\n\r\n        let count = 0;\r\n        for (const item of selectedItems) {\r\n            count += item[1][key];\r\n        }\r\n\r\n        return count;\r\n    };\r\n\r\n    clearSelectedNumbers = () => {\r\n        this.setState({\r\n            selectedItems: new Map()\r\n        });\r\n    };\r\n\r\n    handleOpenChangeRateModal = () => {\r\n        this.setState({\r\n            footerActionsDisabled: true,\r\n            footerActionsLoading: true,\r\n        });\r\n\r\n        this.getSubDestinations()\r\n            .then(response => {\r\n                if (!response || !response.subdestination_list)\r\n                    return;\r\n\r\n                const isUniqueDest = response.subdestination_list\r\n                    .map(item => item.de_key)\r\n                    .every( (val, index, arr) => val === arr[0] );\r\n\r\n                if (!isUniqueDest) {\r\n                    Alert.error(`You cannot change the rate for different destinations at one time`);\r\n                    return;\r\n                }\r\n\r\n                this.setState({\r\n                    currentSubDestinationsList: response.subdestination_list,\r\n                    showChangeRateModal: true,\r\n                });\r\n            })\r\n            .finally(() => {\r\n                this.setState({\r\n                    footerActionsDisabled: false,\r\n                    footerActionsLoading: false,\r\n                });\r\n            })\r\n    };\r\n\r\n    getSubDestinations = async () => {\r\n        const {trunk_id} = this.props;\r\n        const initialData = this.getInitialValues();\r\n        const target = {trunk_id};\r\n\r\n        return await api('trunk_number__filter:get_subdestination_list', {target, ...initialData});\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            trunk_id, acc_key, account, spOtpType, showAllocatedNumbersModal, closeAllocatedNumbersModal,\r\n            allocatedNumbers, allocatedNumbersLoading, allocatedNumbersCount, allocatedNumbersPage,\r\n            allocatedNumbersPerPage, trunksLoading, getTrunkNumberCsvById, currentRangeNumber\r\n        } = this.props;\r\n\r\n        const {selected, currentDisplay, showChangeRateModal, showRevokeModal, showMoveModal, searchLoading,\r\n            filterState, isDownloadInProgress, resizedWidth, currentSubDestinationsList, footerActionsDisabled,\r\n            footerActionsLoading\r\n        } = this.state;\r\n\r\n        const isMobile = resizedWidth < 1200;\r\n        const loading = trunksLoading || allocatedNumbersLoading;\r\n        const currentTrunk = this.props.trunks.find((trunk) => trunk.id === trunk_id);\r\n\r\n        const isselected = this.filters && this.filters.formValue ? !this.filters.formValue.actual : true;\r\n\r\n        const formattedData = allocatedNumbers.map(item => ({\r\n            ...item,\r\n            start_date: item.start_date ? item.start_date.replace(\" \", \"T\") : \"\",\r\n            end_date: item.end_date ? item.end_date.replace(\" \", \"T\") : \"\",\r\n        }));\r\n        \r\n        const data = convertDataInColumn(formattedData, \"end_date\", (value, column, key) => {\r\n            return {\r\n                ...column, \r\n                [key]: value \r\n                    ? new Date( new Date( new Date(value).setSeconds(new Date(value).getSeconds() - 1) ) ) \r\n                    : null\r\n                }\r\n        });\r\n\r\n        const disabledActions = [];\r\n        if (!this.props.account_name) {\r\n            disabledActions.push('Revoke numbers');\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Filters\r\n                    ref={ref => this.filters = ref}\r\n                    onChange={this.onChangeFilters}\r\n                    proxy={this.proxyFilters}\r\n                    disabled={searchLoading || loading}\r\n                    filters={filterState}\r\n                    isMobile={isMobile}\r\n                    currentDisplay={currentDisplay}\r\n                    currentRangeNumber={currentRangeNumber}\r\n                    onChangeGroup={this.onChangeGroup}\r\n\r\n                    downloadLoading={isDownloadInProgress}\r\n                    downloadDisabled={currentDisplay !== \"trunk_number\" || !trunk_id || isDownloadInProgress}\r\n                    onDownloadNumbersCsv={this.onDownloadNumbersCsv}\r\n                    onDownloadOnlyNumbersCsv={this.onDownloadOnlyNumbersCsv}\r\n                />\r\n\r\n\r\n                    <S.Grid align={'middle'} justify={'space-between'}>\r\n                        {!isMobile &&\r\n                            <S.GridItem>\r\n                                <RadioGroup\r\n                                    inline\r\n                                    onChange={this.onChangeGroup}\r\n                                    defaultValue={'trunk_number'}\r\n                                    name=\"radioList\"\r\n                                >\r\n                                    <Radio value=\"trunk_number\" disabled={loading}>Numbers</Radio>\r\n                                    <Radio value=\"price_range\" disabled={loading}>Ranges</Radio>\r\n                                    <Radio value=\"subdestination\" disabled={loading}>Subdestinations</Radio>\r\n                                </RadioGroup>\r\n                            </S.GridItem>\r\n                        }\r\n\r\n                        <S.GridItem>\r\n                            <S.Grid>\r\n                                {!isMobile &&\r\n                                    <S.GridItem>\r\n                                        <NumbersDownloadDropdown\r\n                                            loading={isDownloadInProgress}\r\n                                            disabled={currentDisplay !== \"trunk_number\" || !trunk_id || isDownloadInProgress}\r\n                                            onDownloadNumbersCsv={this.onDownloadNumbersCsv}\r\n                                            onDownloadOnlyNumbersCsv={this.onDownloadOnlyNumbersCsv}\r\n                                        />\r\n                                    </S.GridItem>\r\n                                }\r\n\r\n                                <S.GridItem>\r\n                                    <AllocatedNumbersModal\r\n                                        hideBtn={isMobile}\r\n                                        account={account}\r\n                                        forsed_open={showAllocatedNumbersModal}\r\n                                        onClose={closeAllocatedNumbersModal}\r\n                                        activeTrunk={currentTrunk}\r\n                                        trunk_id={trunk_id}\r\n                                        sp_key={this.props.sp_key}\r\n                                        sp_auth={this.props.sp_auth}\r\n                                        spOtpType={spOtpType}\r\n                                        update={this.updateItems}\r\n                                        account_id={acc_key}\r\n                                        disabled={this.props.readonly}\r\n                                        {...{\r\n                                            getTrunkNumberCsvById\r\n                                        }}\r\n                                    />\r\n                                </S.GridItem>\r\n                            </S.Grid>\r\n                        </S.GridItem>\r\n\r\n                    </S.Grid>\r\n\r\n                <TableServerSort\r\n                    shouldUpdateScroll={false}\r\n                    ref={ref => this.tableRef = ref}\r\n                    data={data}\r\n                    height=\"50%\"\r\n                    loading={searchLoading || loading}\r\n                    columns={columns.filter(el => el.displayWhen.indexOf(currentDisplay) !== -1)}\r\n                    count={allocatedNumbersCount}\r\n                    per_page={allocatedNumbersPerPage}\r\n                    page={allocatedNumbersPage}\r\n                    useSelectedData={this.keepSelectedItems}\r\n                    getItems={this.getNumbers}\r\n                    row_key={this.getRowKey()}\r\n                    setSelected={this.updateSelectedList}\r\n                    disabled={!trunk_id}\r\n                    ispagination\r\n                    isselected={isselected}\r\n                    isSelectedAll={isselected}\r\n                    onSort={(column, type) => this.setState({sort: {column, type}})}\r\n                    isMobile={isMobile}\r\n                />\r\n\r\n                <FooterActions>\r\n                    <NumbersActions\r\n                        actions={[\r\n                            {\r\n                                label: 'Change rate',\r\n                                handler: () => this.handleOpenChangeRateModal()\r\n                            },\r\n                            {\r\n                                label: 'Revoke numbers',\r\n                                handler: () => this.setState({showRevokeModal: true}),\r\n                                hidden: true,\r\n                            },\r\n                            {\r\n                                label: 'Move to another trunk',\r\n                                handler: () => this.setState({showMoveModal: true})\r\n                            },\r\n                        ]}\r\n                        disabled={!selected.list.length || footerActionsDisabled}\r\n                        loading={footerActionsLoading}\r\n                        disabledItemValues={disabledActions}\r\n                    />\r\n                </FooterActions>\r\n\r\n                {showChangeRateModal &&\r\n                    <ChangeRateModal\r\n                        subDestinationsList={currentSubDestinationsList}\r\n                        target={{trunk_id}}\r\n                        targetPrice={{account_id: acc_key}}\r\n                        initialValues={this.getInitialValues()}\r\n                        update={this.updateItems}\r\n                        getData={this.getDataForChangeRate}\r\n                        onClose={() => {\r\n                            this.setState({\r\n                                showChangeRateModal: false,\r\n                                currentSubDestinationsList: [],\r\n                            })\r\n                        }}\r\n                    />\r\n                }\r\n\r\n                {showRevokeModal &&\r\n                    <RevokeNumbersModal\r\n                        target={{trunk_id}}\r\n                        initialValues={this.getInitialValues()}\r\n                        getCount={this.getSelectedNumbersCount}\r\n                        update={this.updateItems}\r\n                        onClose={() => this.setState({showRevokeModal: false})}\r\n                    />\r\n                }\r\n\r\n                {showMoveModal &&\r\n                    <MoveNumbersModal\r\n                        target={{trunk_id}}\r\n                        trunks={this.props.trunks.filter((trunk) => canIMoveNumbersToAnotherTrunk(currentTrunk, trunk))}\r\n                        initialValues={this.getInitialValues()}\r\n                        getCount={this.getSelectedNumbersCount}\r\n                        update={this.updateItems}\r\n                        onClose={() => this.setState({showMoveModal: false})}\r\n                    />\r\n                }\r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { SelectPicker } from 'rsuite';\r\nimport CustomField from '../Form/CustomField';\r\n\r\nconst Protocols = ({protocols, ...props}) => (\r\n    <CustomField\r\n        block\r\n        data={protocols}\r\n        accepter={SelectPicker}\r\n        labelKey=\"name\"\r\n        valueKey=\"prt_key\"\r\n        placeholder=\"Protocols\"\r\n        name=\"prt_key\"\r\n        searchable={false}\r\n        errorPlacement=\"topRight\"\r\n        {...props}\r\n        // classPrefix=\"\"\r\n    />\r\n)\r\n\r\nconst mapState = ( {references} )=> ({\r\n    protocols: references.protocol_list\r\n});\r\n\r\nexport default connect( mapState, {})(Protocols);","import {DatePicker, FlexboxGrid, Form, FormControl, Radio, RadioGroup, Schema} from \"rsuite\";\r\nimport Text, {str40} from \"../../../../components/Form/Text\";\r\nimport ServicePlans from \"../../../../components/Filters/ServicePlans\";\r\nimport CustomField from \"../../../../components/Form/CustomField\";\r\nimport Protocols from \"../../../../components/Filters/Protocols\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {DEFAULT_PRT_KEY} from \"../../../../const\";\r\nimport CheckboxControl from \"components/Form/CheckboxControl\";\r\nimport styled, {css} from \"styled-components\";\r\n\r\nconst {StringType, NumberType} = Schema.Types;\r\n\r\nconst formModel = Schema.Model({\r\n    name: str40,\r\n});\r\n\r\nconst formDialerModel = Schema.Model({\r\n    tprefix: StringType()\r\n        .pattern(/^\\d*[#]?\\d*$/, 'Techprefix can contain only numbers and one character\"#\"')\r\n        .maxLength(10, 'Technical prefix can contain a maximum of 10 characters'),\r\n    port: NumberType()\r\n        .isRequired('Required')\r\n        .range(0, 65535, 'Enter the correct port'),\r\n    ip: StringType()\r\n        .isRequired('Required')\r\n        .pattern(\r\n            /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\r\n            'Please enter legal IP Address'\r\n        ),\r\n    prt_key: NumberType().isRequired('Required')\r\n});\r\n\r\n\r\nconst TrunkForm  =  ({disabled, updateFormRef,updateFormRef2, is_default, onChangeDefault, initialValues, defaultSPKey, isMobile}) => {\r\n\r\n    const [chosenSpKey, setChosenSpKey] = React.useState( (initialValues && initialValues.sp_key) || 1 );\r\n\r\n    const defaultFormValue = {\r\n        sp_key: defaultSPKey,\r\n        active: true,\r\n        ...initialValues,\r\n        is_default_term_point:is_default,\r\n    };\r\n\r\n    if (initialValues.option_google_otp) {\r\n        defaultFormValue.otp_type = \"google_otp\";\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            layout={isMobile ? null : \"inline\"}\r\n            model={formModel}\r\n            formDefaultValue={defaultFormValue}\r\n            ref= {updateFormRef}\r\n            style={{margin: 0, width: '100%'}}\r\n        >\r\n            <FlexboxGrid\r\n                align={isMobile ? 'flex-start' : 'center'}\r\n                style={{margin: 0, width: '100%'}}\r\n            >\r\n                <FlexboxGrid.Item className={'mb-2'}>\r\n                    <Text\r\n                        name=\"name\"\r\n                        placeholder=\"Name\"\r\n                        style={{width: 240, marginLeft: 0}}\r\n                    />\r\n                    <ServicePlans\r\n                        classPrefix=\"\"\r\n                        disabled={!!initialValues.id}\r\n                        style={{verticalAlign: 'none', marginLeft: 10, height: 36}}\r\n                        onChange={(value) => {\r\n                            if (chosenSpKey === value)\r\n                                return;\r\n                            setChosenSpKey(value);\r\n                        }}\r\n                    />\r\n                    <CheckboxControl\r\n                        name=\"active\"\r\n                        defaultChecked={defaultFormValue.active}\r\n                    >\r\n                        Active\r\n                    </CheckboxControl>\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n\r\n\r\n            <StyledGrid\r\n                isMobile={isMobile}\r\n                align={isMobile ? 'flex-start' : 'center'}\r\n                style={{margin: 0, width: '100%'}}\r\n            >\r\n                <FlexboxGrid.Item className={'mb-2 ml-2'}>\r\n                    {isMobile && <p>Start Date</p>}\r\n                    <FormControl\r\n                        name=\"start_date\"\r\n                        placeholder=\"Start Date\"\r\n                        cleanable={false}\r\n                        accepter={DatePicker}\r\n                        className={'mr-2'}\r\n                        style={{width: 165}}\r\n                        ranges={[\r\n                            {\r\n                                label: 'Today',\r\n                                value: new Date()\r\n                            },\r\n                            {\r\n                                label: 'Tomorrow',\r\n                                value: new Date( new Date().setDate(new Date().getDate() + 1) )\r\n                            }\r\n                        ]}\r\n\r\n                        // mobile\r\n                        inline={isMobile}\r\n                        oneTap={isMobile}\r\n                    />\r\n                </FlexboxGrid.Item>\r\n                <FlexboxGrid.Item className={'mb-2 ml-2'}>\r\n                    {isMobile && initialValues.id &&\r\n                        <p>End Date</p>\r\n                    }\r\n                    {isMobile && !initialValues.id\r\n                        ? null\r\n                        : <FormControl\r\n                        name=\"end_date\"\r\n                        placeholder=\"End Date\"\r\n                        accepter={DatePicker}\r\n                        style={{width: 165}}\r\n                        disabled={!initialValues.id}\r\n                        ranges={[\r\n                            {\r\n                                label: 'Today',\r\n                                value: new Date()\r\n                            },\r\n                            {\r\n                                label: 'Tomorrow',\r\n                                value: new Date( new Date().setDate(new Date().getDate() + 1) )\r\n                            }\r\n                        ]}\r\n\r\n                        // mobile\r\n                        inline={isMobile}\r\n                        oneTap={isMobile}\r\n                    />}\r\n                </FlexboxGrid.Item>\r\n            </StyledGrid>\r\n\r\n\r\n            <FlexboxGrid\r\n                align={isMobile ? 'flex-start' : 'center'}\r\n                style={{margin: 0, width: '100%'}}\r\n            >\r\n                <FlexboxGrid.Item className={'mb-2'}>\r\n                    <CustomField\r\n                        disabled={disabled}\r\n                        accepter={RadioGroup}\r\n                        onChange = {onChangeDefault}\r\n                        name=\"is_default_term_point\"\r\n                        inline={isMobile ? false : true}\r\n                        style={{marginLeft: '-10px'}}\r\n                    >\r\n                        <Radio value={true}>Default termination point</Radio>\r\n                        <Radio value={false}>Dialer panel</Radio>\r\n                    </CustomField>\r\n                </FlexboxGrid.Item>\r\n                <FlexboxGrid.Item>\r\n                    {!is_default  &&\r\n                    <DialerForm\r\n                        initialValues = {initialValues}\r\n                        disabled = {disabled}\r\n                        updateFormRef = {updateFormRef2}\r\n                        defaultSPKey = {defaultSPKey}\r\n                    />}\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst mapState = ({references})=> ({\r\n    defaultSPKey: references.defaultSPKey\r\n});\r\n\r\nexport default connect(mapState, null)(TrunkForm);\r\n\r\n\r\nconst DialerForm  =  ({disabled, updateFormRef, initialValues, defaultSPKey}) => {\r\n    if (initialValues.ip == null) {\r\n        delete initialValues.ip;\r\n        delete initialValues.tprefix;\r\n        delete initialValues.port;\r\n        delete initialValues.prt_key;\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            layout=\"inline\"\r\n            model={formDialerModel}\r\n            ref= {updateFormRef}\r\n            formDefaultValue={{prt_key: DEFAULT_PRT_KEY, sp_key: defaultSPKey, port: '5060', tprefix: '', ...initialValues }}\r\n            style={{margin: '0px', width: '100%'}}\r\n        >\r\n            <FlexboxGrid align='center' style={{margin: '0px', width: '100%'}}>\r\n                <FlexboxGrid.Item>\r\n                    <Text name=\"ip\" label=\"IP\" disabled={disabled} labelWidth={65} style={{marginBottom: '20px'}}/>\r\n                    <FlexboxGrid align='center' justify=\"space-between\" style={{margin: '0 0 20px 0'}}>\r\n                        <FlexboxGrid.Item>\r\n                            <Protocols style={{marginLeft: '-10px', width: '160px'}}/>\r\n                        </FlexboxGrid.Item>\r\n                        <FlexboxGrid.Item>\r\n                            <Text name=\"port\" label=\"Port\" disabled={disabled} style={{width: '90px'}}  />\r\n                        </FlexboxGrid.Item>\r\n                    </FlexboxGrid>\r\n                    <Text name=\"tprefix\" label=\"Techprefix\" disabled={disabled} labelWidth={65}/>\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n        </Form>\r\n    );\r\n};\r\n\r\n\r\nconst StyledGrid = styled(FlexboxGrid)`\r\n    ${props => props.isMobile && css`\r\n        &&& {\r\n            flex-direction: column;\r\n        }\r\n    `}\r\n`;","import React, {useState} from 'react'\r\nimport Modal from '../../../../components/Modal';\r\nimport { api } from '../../../../api/loginRoutes';\r\nimport TrunkForm from \"./TrunkForm\";\r\nimport {toStartDayUTCTimeNextDay, toStartDayUTCTime} from 'utils';\r\nimport {Alert} from \"rsuite\";\r\nimport {useWindowWidth} from \"../../../../hooks\";\r\n\r\nexport default ({\r\n    onClose,\r\n    trunksList,\r\n    account_id,\r\n    initialValues,\r\n    update,\r\n    account_name\r\n}) => {\r\n\r\n    let form;\r\n    let dialerForm;\r\n    const windowWidth = useWindowWidth();\r\n    const [disabled, setDisabled ] = React.useState(false);\r\n\r\n    const [is_default, onChangeDefault] = useState( initialValues.is_default_term_point !== undefined\r\n        ? initialValues.is_default_term_point\r\n        : true\r\n    );\r\n\r\n    const onSubmit = async() => {\r\n        if(!form.check()) return;\r\n        if(!is_default && !dialerForm.check()) return;\r\n\r\n        setDisabled(true);\r\n\r\n        const method = initialValues.id ? 'trunk:modify' : 'trunk:create';\r\n\r\n        let _data = form.getFormValue();\r\n\r\n        const todayDate = toStartDayUTCTime( new Date() );\r\n        let startDate = _data.start_date \r\n            ? toStartDayUTCTime( new Date(_data.start_date) ) \r\n            : null;\r\n        \r\n        const isToday = startDate && (\r\n            todayDate.getFullYear() === startDate.getFullYear() &&\r\n            todayDate.getMonth() === startDate.getMonth() &&\r\n            todayDate.getDate() === startDate.getDate()\r\n        );\r\n\r\n        const data = {\r\n            name: _data.name,\r\n            sp_key: _data.sp_key,\r\n            is_default_term_point: _data.is_default_term_point,\r\n            prt_key: _data.prt_key || null,\r\n\r\n            start_date: !initialValues.id \r\n                ? (startDate && !isToday) ? startDate : null\r\n                \r\n                : isToday \r\n                    ?_data.start_date ? _data.start_date : null\r\n                    : startDate,\r\n            end_date: _data.end_date\r\n                ? toStartDayUTCTimeNextDay( new Date(_data.end_date) ) \r\n                : null,\r\n            \r\n                active: !!_data.active,\r\n        };\r\n\r\n        if (_data.otp_type && _data.otp_type === \"google_otp\" && data.sp_key === 3) {\r\n            data.option_google_otp = true;\r\n        }\r\n\r\n        if(!is_default){\r\n            _data = dialerForm.getFormValue();\r\n            data.prt_key = _data.prt_key;\r\n            data.ip = _data.ip;\r\n            data.port = +_data.port;\r\n            data.tprefix = _data.tprefix;\r\n        }\r\n\r\n        if (data.tprefix) {\r\n            for (let trunkData of trunksList) {\r\n\r\n                if ( data.sp_key !== trunkData.sp_key) {\r\n                    if ( (data.sp_key === 3 || trunkData.sp_key === 3) && data.tprefix === trunkData.tprefix ) {\r\n                        setDisabled(false);\r\n                        Alert.error(`Techprefix: ${data.tprefix} is not unique '${account_name}' trunk '${trunkData.name}'`, 5000);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // debugger;\r\n\r\n        try {\r\n            await api(method,{\r\n                target:{\r\n                    account_id,\r\n                    trunk_id: _data.id\r\n                },\r\n                ...data,\r\n                sp_key: data.sp_key // _data.id ? undefined : data.sp_key - непонятный костыль\r\n            });\r\n\r\n            onClose();\r\n            update();\r\n        } catch (e) {\r\n            console.log('Change trunk error');\r\n        }\r\n\r\n        setDisabled(false);\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            {...{onClose}}\r\n            show={true}\r\n            onSuccess={onSubmit}\r\n            disabled ={disabled}\r\n            title=\"Create/Edit Trunk\"\r\n            footer\r\n            successText = \"Save\"\r\n            width={windowWidth >= 620 ? 620 : windowWidth}\r\n        >\r\n              <TrunkForm\r\n                  disabled = {disabled}\r\n                  is_default = {is_default}\r\n                  updateFormRef  = { ref => form = ref}\r\n                  updateFormRef2 = { ref => dialerForm = ref}\r\n                  onChangeDefault = {onChangeDefault}\r\n                  initialValues ={initialValues}\r\n                  isMobile={windowWidth < 620}\r\n            />\r\n        </Modal>\r\n    )\r\n};","import React, {useState} from 'react'\r\nimport Modal from '../../../components/Modal';\r\nimport {api} from '../../../api/loginRoutes';\r\n\r\nexport default ({onClose, update, account_id, trunk_id}) => {\r\n    \r\n    const [disabled, setDisabled ] = React.useState(false)\r\n\r\n    const onSubmit = async () => {\r\n        setDisabled(true)\r\n        const result = await api('trunk:revoke_all_numbers',{\r\n            target:{\r\n                account_id,\r\n                trunk_id\r\n            }\r\n        })\r\n        if(result) {\r\n            onClose();\r\n            update()\r\n        }\r\n        setDisabled(false)\r\n    }\r\n\r\n    return (\r\n\r\n        <Modal \r\n            show \r\n            onClose={onClose}\r\n            footer\r\n            successText = \"Yes\"\r\n            onSuccess = {onSubmit}\r\n            disabled = {disabled}\r\n        >\r\n            All numbers from this trunk will be revoked. Do you really want to do it?\r\n        </Modal>\r\n    )\r\n};\r\n\r\n","import React, {useState} from 'react'\r\nimport {\r\n    SelectPicker,\r\n} from 'rsuite'\r\nimport Modal from '../../../components/Modal';\r\nimport {api} from '../../../api/loginRoutes';\r\n\r\nexport default ({onClose, update, account_id, trunk_id, data, trunkList}) => {\r\n    const [disabled, setDisabled ] = React.useState(false)\r\n    const [trunk1_id, setTrunk1 ] = React.useState(null)\r\n\r\n    const onSubmit = async () => {\r\n        setDisabled(true)\r\n        const result = await api('trunk:remove',{\r\n            target:{\r\n                account_id,\r\n                trunk_id,\r\n                trunk1_id: trunk1_id || undefined\r\n            }\r\n        })\r\n        if(result && result.trunk) {\r\n            onClose();\r\n            update()\r\n        }\r\n        setDisabled(false)\r\n    }\r\n\r\n    return (\r\n        <Modal \r\n            show \r\n            onClose={onClose}\r\n            footer\r\n            successText = \"Yes\"\r\n            onSuccess = {onSubmit}\r\n            disabled = {disabled}\r\n            title='Delete trunk'>    \r\n                Trunk {data.name} for dialer {data.account_name} will be deleted. Do you want to move numbers to another trunk?\r\n                <br />\r\n                Move to trunk\r\n                <SelectPicker\r\n                    labelKey=\"name\"\r\n                    valueKey=\"id\"\r\n                    data={[{id:null,name: 'Delete trunk with all numbers'},...trunkList]}\r\n                    cleanable={false}\r\n                    searchable = {false}\r\n                    defaultValue = {null}\r\n                    onChange = {(id) => setTrunk1(id)}\r\n                    style = {{marginLeft: 10}}\r\n                    // classPrefix=\"minWidth\"\r\n                />\r\n        </Modal>\r\n    )\r\n};","import React from 'react';\r\nimport Table from '../../../components/Table';\r\nimport {ButtonPrimary as Add, ButtonRowAllocate, ButtonRowDelete, ButtonRowDownload, ButtonRowEdit, ButtonRowRevoke} from '../../../components/base/BaseButton';\r\nimport {Checkbox, FlexboxGrid, Table as _Table} from 'rsuite';\r\nimport TrunkModal from './TrunkModal/TrunkModal';\r\nimport {getFileResponse} from '../../../api/loginRoutes';\r\nimport {saveFileBlob} from '../../../utils/helpers';\r\nimport {Header, HeaderTrunkActions} from './styled';\r\nimport RevokeTrunkModal from './RevokeTrunkModal';\r\nimport RemoveTrunkModal from './RemoveTrunkModal';\r\nimport {canIMoveNumbersToAnotherTrunk} from 'utils';\r\nimport styled from \"styled-components\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\n\r\nconst {Column, HeaderCell, Cell} = _Table;\r\n\r\nconst columns = [\r\n    {\r\n        label: 'Name',\r\n        dataKey: 'name',\r\n        minWidth: 96,\r\n    },\r\n    {\r\n        label: 'Type',\r\n        dataKey: 'type',\r\n        minWidth: 96,\r\n    },\r\n    {\r\n        label: 'Price',\r\n        dataKey: 'service_plan_name',\r\n        minWidth: 96,\r\n    },\r\n    {\r\n        id: 'allocated_numbers',\r\n        label: 'Allocated Numbers',\r\n        value: (({allocated_numbers, numbers_with_traffic}) => (\r\n            `${allocated_numbers||0}/${numbers_with_traffic||0}`)\r\n        ),\r\n        align: 'center',\r\n        minWidth: 192,\r\n        flexGrow: 2\r\n    },\r\n    {\r\n        label: 'Start Date',\r\n        dataKey: 'start_date',\r\n        formatData: 'date',\r\n        align: 'right',\r\n        minWidth: 96,\r\n    },\r\n    {\r\n        label: 'End Date',\r\n        dataKey: 'end_date',\r\n        value: ({end_date}) => {\r\n            if (!end_date)\r\n                return \"\";\r\n\r\n            const endDate = new Date(end_date);\r\n            const endDateObg = new Date( \r\n                endDate.getFullYear(), \r\n                endDate.getMonth(), \r\n                endDate.getDate(), \r\n                endDate.getHours(), \r\n                endDate.getMinutes(), \r\n                endDate.getSeconds() - 1 \r\n            );\r\n\r\n            return new Date(endDateObg).toLocaleDateString();\r\n        },\r\n        formatData: 'date',\r\n        align: 'right',\r\n        minWidth: 96,\r\n    },\r\n];\r\n\r\nconst mobileColumns = [\r\n    {\r\n        id: 'name',\r\n        label: 'Name',\r\n        value: (({name, type, service_plan_name}) => (\r\n                <div className={\"table-two-staged__cell\"}>\r\n                    <div className=\"table-two-staged__cell-first\">{name}</div>\r\n                    <div className=\"table-two-staged__cell-second\">{`${type}, ${service_plan_name}`}</div>\r\n                </div>\r\n            )\r\n        ),\r\n        minWidth: 150,\r\n        flexGrow: 1\r\n    },\r\n];\r\n\r\n\r\nexport default class extends React.Component {\r\n    dataTrunk = {};\r\n    currentTop = 0;\r\n    state = {\r\n        data: [],\r\n        showModal: false,\r\n        showRemoveTrunkModal: false,\r\n        showRevokeTrunkModal: false\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        const {setCurrentTrunkId} = this.props;\r\n        setCurrentTrunkId(null)\r\n    }\r\n\r\n    componentDidUpdate({trunks, closedTrunksShow}) {\r\n        const {currentTrunkId} = this.props;\r\n        const columnHeight = 30;\r\n\r\n        if (trunks !== this.props.trunks || closedTrunksShow !== this.props.closedTrunksShow) {\r\n            const trunksList = this.props.trunks.filter((trunk) => {\r\n                return this.props.closedTrunksShow ? true : !trunk.closed\r\n            });\r\n            let top;\r\n            if (!currentTrunkId)\r\n                top = Math.abs(this.currentTop);\r\n            else {\r\n                top =  Math.abs((trunksList.map(trunk => trunk.id).indexOf(currentTrunkId) || 0) * columnHeight);\r\n            }\r\n\r\n            this.currentTop = top;\r\n\r\n            if (!this.props.currentTrunkId && trunksList.length) {\r\n                this.props.setCurrentTrunkId(trunksList[0].id)\r\n            }\r\n            this.setState({data: trunksList});\r\n        }\r\n    }\r\n\r\n\r\n    onClickTrunk = (id) => {\r\n        const {setTrunk, setCurrentRangeNumber} = this.props;\r\n        setTrunk(id);\r\n        setCurrentRangeNumber(null)\r\n    };\r\n\r\n\r\n    showTrunk = () => {\r\n        this.dataTrunk = {};\r\n        this.setState({showModal: true});\r\n    };\r\n\r\n\r\n    onDownloadNumbers = async (id) => {\r\n        this.setState(({data, ...state}) => ({\r\n            ...state,\r\n            data: data.map(\r\n                trunk => ({\r\n                    ...trunk,\r\n                    downloadLoading: trunk.id === id ? true : trunk.downloadLoading\r\n                })\r\n            )\r\n        }));\r\n\r\n        const {acc_key: account_id, trunk_id} = this.props;\r\n        const result = await getFileResponse('trunk_number:get_list', {\r\n            target: {trunk_id: id} //  trunk_id => id\r\n        });\r\n\r\n        if (result)\r\n            saveFileBlob(result, 'allocated_numbers.csv');\r\n\r\n        this.setState(({data, ...state}) => ({\r\n            ...state,\r\n            data: data.map(\r\n                trunk => ({\r\n                    ...trunk,\r\n                    downloadLoading: trunk.id === id ? false : trunk.downloadLoading\r\n                })\r\n            )\r\n        }));\r\n    };\r\n\r\n\r\n    onEditTrunk = (rowData) => {\r\n        const endDate = rowData.end_date ? new Date(rowData.end_date) : null;\r\n\r\n        this.dataTrunk = {\r\n            ...rowData,\r\n            end_date: endDate \r\n                ? new Date( \r\n                    endDate.getFullYear(), \r\n                    endDate.getMonth(), \r\n                    endDate.getDate(), \r\n                    endDate.getHours(), \r\n                    endDate.getMinutes(), \r\n                    endDate.getSeconds() - 1 \r\n                )\r\n                : null\r\n        };\r\n        this.setState({showModal: true});\r\n    };\r\n\r\n\r\n    onRevokeTrunk = () => {\r\n        this.setState({showRevokeTrunkModal: true})\r\n    };\r\n\r\n\r\n    onRemoveTrunk = (rowData) => {\r\n        this.dataTrunk = {...rowData};\r\n        this.setState({showRemoveTrunkModal: true});\r\n    };\r\n\r\n    render() {\r\n\r\n        const {\r\n            onAllocateNumbers, account_name, trunks, trunksLoading, isMobile, setClosedTrunksShow,\r\n            allocatedNumbersLoading, trunk_id, getTrunks, acc_key,\r\n        } = this.props;\r\n\r\n        const {data, showModal, showRevokeTrunkModal, showRemoveTrunkModal} = this.state;\r\n\r\n        const transformedData = data.map(item => {\r\n            return {\r\n                ...item,\r\n                start_date: item.start_date ? item.start_date.replace(\" \", \"T\") : \"\",\r\n                end_date: item.end_date ? item.end_date.replace(\" \", \"T\") : \"\",\r\n            }\r\n        });\r\n\r\n        const currentTrunk = this.props.trunks.find((trunk) => trunk.id === trunk_id);\r\n\r\n        return (\r\n            <div>\r\n                <Spacer size={10}/>\r\n                <FlexboxGrid align={\"middle\"}>\r\n                    {!isMobile &&\r\n                        <FlexboxGrid.Item>\r\n                            <Header>Trunks</Header>\r\n                        </FlexboxGrid.Item>\r\n                    }\r\n                    <FlexboxGrid.Item  style={{marginLeft: 'auto'}}>\r\n                        <FlexboxGrid align={\"middle\"}>\r\n\r\n                            {!isMobile &&\r\n                                <FlexboxGrid.Item>\r\n                                    <StyledFilter>\r\n                                        <Checkbox onClick={setClosedTrunksShow}/>\r\n                                        <span>Show closed trunks</span>\r\n                                    </StyledFilter>\r\n                                </FlexboxGrid.Item>\r\n                            }\r\n\r\n                            <FlexboxGrid.Item>\r\n                                <HeaderTrunkActions>\r\n                                    <Add onClick={this.showTrunk}>+Add New Trunk</Add>\r\n                                </HeaderTrunkActions>\r\n                            </FlexboxGrid.Item>\r\n\r\n                        </FlexboxGrid>\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n\r\n                {showModal &&\r\n                    <TrunkModal\r\n                        initialValues={this.dataTrunk}\r\n                        account_id={acc_key}\r\n                        account_name={account_name}\r\n                        update={getTrunks}\r\n                        trunksList={trunks}\r\n                        onClose={() => this.setState({showModal: false})}\r\n                    />\r\n                }\r\n\r\n                <Table\r\n                    shouldUpdateScroll={false}\r\n                    rowHeight={!isMobile ? 30 : 50}\r\n                    scrollTopValue={this.currentTop}\r\n                    data={transformedData}\r\n                    loading={trunksLoading || allocatedNumbersLoading}\r\n                    columns={!isMobile ? columns : mobileColumns}\r\n                    height=\"25%\"\r\n                    active_id={trunk_id}\r\n                    onRowClick={this.onClickTrunk}\r\n                    rowClassName={(rowData) => rowData && rowData.closed\r\n                        ? 'closed-row'\r\n                        : (rowData && !rowData.active) ? 'row-disabled' : ''\r\n                    }\r\n                    ActionCell={ActionCell(\r\n                        this.onEditTrunk,\r\n                        this.onDownloadNumbers,\r\n                        onAllocateNumbers,\r\n                        this.onRevokeTrunk,\r\n                        this.onRemoveTrunk,\r\n                    )}\r\n                />\r\n\r\n                {showRevokeTrunkModal &&\r\n                    <RevokeTrunkModal\r\n                        account_id={acc_key}\r\n                        trunk_id={trunk_id}\r\n                        onClose={() => this.setState({showRevokeTrunkModal: false})}\r\n                        update={getTrunks}\r\n                    />\r\n                }\r\n\r\n                {showRemoveTrunkModal &&\r\n                    <RemoveTrunkModal\r\n                        account_id={acc_key}\r\n                        trunk_id={trunk_id}\r\n                        data={this.dataTrunk}\r\n                        trunkList={data.filter(trunk => canIMoveNumbersToAnotherTrunk(currentTrunk, trunk))}\r\n                        onClose={() => this.setState({showRemoveTrunkModal: false})}\r\n                        update={getTrunks}\r\n                    />\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst ActionCell = (edit, download, allocate, revoke, remove) => (\r\n    <Column width={218}>\r\n        <HeaderCell>Options</HeaderCell>\r\n        <Cell>\r\n            {rowData => (\r\n                <StyledActionCell>\r\n                    <ButtonRowEdit onClick={() => edit(rowData)}/>\r\n                    <ButtonRowDownload loading={rowData.downloadLoading} onClick={() => download(rowData.id)}/>\r\n                    <ButtonRowAllocate disabled={rowData.closed || !rowData.active} onClick={() => allocate(rowData.id)}/>\r\n                    <ButtonRowRevoke onClick={() => revoke(rowData.id)}/>\r\n                    <ButtonRowDelete onClick={() => remove(rowData)}/>\r\n                </StyledActionCell>\r\n            )}\r\n        </Cell>\r\n    </Column>\r\n);\r\n\r\n\r\nconst StyledFilter = styled.div.attrs(props => ({\r\n    className: \"\",\r\n}))`\r\n    align-items: center !important;\r\n    display: flex !important;\r\n    padding-right: 20px;\r\n`;\r\n\r\nconst StyledActionCell = styled.div`\r\n    align-items: center;\r\n    display: flex;\r\n    height: 100%;\r\n`;","import React from 'react';\r\nimport AllocatedNumbers from './AllocatedNumbers/AllocatedNumbers';\r\nimport Trunks from './Trunks';\r\nimport {Header} from './styled';\r\n\r\n\r\nexport default class extends React.Component{\r\n    state = {\r\n        showAllocatedNumbersModal: false,\r\n        showClosedTrunks: false,\r\n        numbersTableReadonly: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {trunks, currentTrunkId, setCurrentTrunkId} = this.props;\r\n        const trunkId = trunks && trunks.length && trunks[0].id;\r\n\r\n        !currentTrunkId && setCurrentTrunkId(trunkId);\r\n    }\r\n\r\n    getNumbers = (group, filter, page, per_page, sort, first=false) => {\r\n        const {trunks, currentTrunkId} = this.props;\r\n        const trunkId = trunks.map(item => item.id).includes(currentTrunkId) && !first ? currentTrunkId : trunks && trunks.length && trunks[0].id;\r\n\r\n        this.props.getNumbers(trunkId, group, filter, page, per_page, sort)();\r\n    };\r\n\r\n    setTrunk = (trunk_id) => {\r\n        const {trunks, setCurrentTrunkId, allocatedNumbersLoading} = this.props;\r\n        if (allocatedNumbersLoading) return;\r\n\r\n        const activeTrunk = trunks.find((trunk) => trunk.id === trunk_id);\r\n        const numbersTableReadonly = activeTrunk ? activeTrunk.closed: true;\r\n\r\n        setCurrentTrunkId(trunk_id);\r\n        this.setState({numbersTableReadonly})\r\n    };\r\n\r\n    render () {\r\n        const {showAllocatedNumbersModal} = this.state;\r\n        const { account, activeTab,\r\n                trunks, trunksLoading, acc_key, getTrunks, setCurrentTrunkId, allocatedNumbers, allocatedNumbersLoading,\r\n                allocatedNumbersTotalCount, allocatedNumbersCount, allocatedNumbersPage, allocatedNumbersPerPage,\r\n                currentTrunkId, getTrunkNumberCsvById, currentRangeNumber, setCurrentRangeNumber, isMobile\r\n        } = this.props;\r\n\r\n        const trunkId = trunks\r\n            .map(item => item.id)\r\n            .includes(currentTrunkId)\r\n                ? currentTrunkId\r\n                : trunks && trunks.length && trunks[0].id;\r\n\r\n        const currentTrunk = trunks.find(trunk => trunk.id === trunkId) || {};\r\n\r\n        return (\r\n            <>\r\n\r\n                <Trunks\r\n                    trunk_id={trunkId}currentTrunkId\r\n                    account_name={account.name}\r\n                    onAllocateNumbers={()=>this.setState({showAllocatedNumbersModal:true})}\r\n                    getTrunks={getTrunks}\r\n                    setTrunk={this.setTrunk}\r\n                    setCurrentTrunkId={setCurrentTrunkId}\r\n                    setCurrentRangeNumber={setCurrentRangeNumber}\r\n                    closedTrunksShow={this.state.showClosedTrunks}\r\n                    setClosedTrunksShow={() => {\r\n                        this.setState({showClosedTrunks: !this.state.showClosedTrunks})\r\n                    }}\r\n                    trunks={trunks}\r\n                    {...{\r\n                        currentTrunkId,\r\n                        trunksLoading,\r\n                        allocatedNumbersLoading,\r\n                        acc_key,\r\n                        isMobile\r\n                    }}\r\n                />\r\n\r\n                <Header>Allocated numbers</Header>\r\n\r\n                <AllocatedNumbers\r\n                    {...{\r\n                        activeTab,\r\n                        account,\r\n                        currentRangeNumber,\r\n                        allocatedNumbers,\r\n                        allocatedNumbersLoading,\r\n                        allocatedNumbersCount,\r\n                        allocatedNumbersTotalCount,\r\n                        allocatedNumbersPage,\r\n                        allocatedNumbersPerPage,\r\n                        showAllocatedNumbersModal,\r\n                        getTrunkNumberCsvById,\r\n                        trunksLoading,\r\n                        trunks\r\n                    }}\r\n                    trunk_id={trunkId}\r\n                    closeAllocatedNumbersModal = {()=>this.setState({showAllocatedNumbersModal:false})}\r\n                    sp_key={currentTrunk.sp_key}\r\n                    sp_auth={currentTrunk.sp_auth}\r\n                    spOtpType={currentTrunk.sp_otp_type}\r\n                    acc_key={acc_key}\r\n                    account_name={account.name}\r\n                    getNumbers={this.getNumbers}\r\n                    readonly={this.state.numbersTableReadonly}\r\n                />\r\n\r\n            </>\r\n        )\r\n    }\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {Form, Schema, Alert} from 'rsuite';\r\nimport CustomField from 'pages/NewAccount/CustomField';\r\nimport styled from 'styled-components';\r\nimport Button from 'rsuite/es/Button';\r\nimport 'pages/Account/TabSelfAllocation/selfAllocation.css';\r\nimport {containsOnlyNumbers} from '../../../utils';\r\n\r\n\r\n\r\nexport default ({limitState, onChangeLimitState, cleanedFields, accountLimitKeys, defaultAllocationLimits,\r\n                    cleanLimit, model, formError, onSubmit, modifiedLimit, onChangeFormError, fillLimitFormRef,\r\n                    formLimitRefs}) => {\r\n\r\n    useEffect(() => {\r\n        Object.keys(formLimitRefs).map(limitKey => formLimitRefs[limitKey].check());\r\n    }, [limitState]);\r\n\r\n    return accountLimitKeys.map(limitKey => {\r\n        const {once = {}, daily = {}, daily_sde = {}} = Object.keys(model).includes(limitKey) && model[limitKey];\r\n        const limitLabels = `${limitKey.charAt(0).toUpperCase()}${limitKey.replace('_', ' ').slice(1)}`;\r\n        const combineModel = Schema.Model.combine(once, daily, daily_sde);\r\n\r\n        return <>\r\n            <Header><Name>{limitLabels}</Name></Header>\r\n            <InlineFormLimits\r\n                ref={ref => fillLimitFormRef(limitKey, ref)}\r\n                onCheck={(check) => {\r\n                    onChangeFormError((prevState) => {\r\n                        return {...prevState, [limitKey]: check}\r\n                    });\r\n                }}\r\n                formValue={limitState[limitKey]}\r\n                onChange={(value) => {\r\n                    Object.keys(value).map((elem) => {\r\n                        value[elem] = value[elem] && containsOnlyNumbers(value[elem]) ? parseInt(value[elem], 10) : 0\r\n                    });\r\n                    onChangeLimitState({\r\n                        ...limitState,\r\n                        [limitKey]: value\r\n                    });\r\n\r\n                }}\r\n                onSubmit={() => {\r\n                    onSubmit(null, {[limitKey]: limitState[limitKey]}, limitKey)\r\n                }}\r\n                {...{\r\n                    ...(Object.keys(defaultAllocationLimits).includes(limitKey) && limitKey ? {model: combineModel} : {})\r\n                }}\r\n            >\r\n                <BoxLimitFields>\r\n                    {(limitState[limitKey]['once'] || limitState[limitKey]['once'] === 0) && <CustomField\r\n                        errorPlacement=\"topStart\"\r\n                        className={`cleanable-custom-field ${cleanedFields[limitKey]['once'] && 'has-changed'} ${modifiedLimit === limitKey && 'has-modified'}`}\r\n                        name=\"once\" label=\"One time\"/>}\r\n                    {(limitState[limitKey]['daily'] || limitState[limitKey]['daily'] === 0) && <CustomField\r\n                        errorPlacement=\"bottomStart\"\r\n                        className={`cleanable-custom-field ${cleanedFields[limitKey]['daily'] && 'has-changed'} ${modifiedLimit === limitKey && 'has-modified'}`}\r\n                        name=\"daily\" label=\"Daily\"/>}\r\n                    {(limitState[limitKey]['daily_sde'] || limitState[limitKey]['daily_sde'] === 0) && <CustomField\r\n                        errorPlacement=\"topStart\"\r\n                        className={`cleanable-custom-field ${cleanedFields[limitKey]['daily_sde'] && 'has-changed'} ${modifiedLimit === limitKey && 'has-modified'}`}\r\n                        name=\"daily_sde\" label=\"Destination\"/>}\r\n                </BoxLimitFields>\r\n                <div>\r\n                    <CleanLimitButton><Button onClick={() => {\r\n                        Object.values(formLimitRefs).map(ref => ref.cleanErrors());\r\n                        cleanLimit(limitKey);\r\n                    }}>Clean</Button></CleanLimitButton>\r\n                    <SaveLimitButton><Button type=\"submit\" disabled={formError[limitKey] && Object.keys(formError[limitKey]).length > 0}>Save</Button></SaveLimitButton>\r\n                </div>\r\n            </InlineFormLimits>\r\n        </>\r\n    });\r\n};\r\nconst Header = styled.div`\r\n    margin-bottom: 15px;\r\n    margin-left: 5px;\r\n    margin-top: 10px;\r\n`;\r\nconst Name = styled.span`\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    line-height: 16px;\r\n    color: #8256C8;\r\n    margin-right: 3px;\r\n`;\r\nconst InlineFormLimits = styled(Form)`\r\n  margin-left: 5px;\r\n  display: flex;\r\n  white-space: nowrap;\r\n  .rs-control-label {\r\n      width: auto !important;\r\n      min-width: 75px;\r\n      white-space: nowrap;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      float: left !important;\r\n  }\r\n  .rs-form-group {\r\n      width: 100%;\r\n      max-width: 220px;\r\n      min-width: 165px;\r\n      display: flex;\r\n      margin-right: 10px;\r\n      margin-bottom: 0 !important;\r\n  }\r\n`;\r\nconst BoxLimitFields = styled.div`\r\n    min-width: 42%;\r\n    height: 36px;\r\n    display: flex;\r\n    margin-bottom: 15px;\r\n`;\r\nconst CleanLimitButton = styled.div`\r\n    display: inline-block;\r\n    padding: 0;\r\n    margin-right: 20px;\r\n    button {\r\n        background: #F8432F;\r\n        color: #fff;\r\n        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.16);\r\n        padding: 8px 60px;\r\n        border-radius: 5px;\r\n    }\r\n    button:disabled {\r\n        color: #fff;\r\n        background: #939191;\r\n        box-shadow: 0 4px 4px rgba(0, 0, 0, 0.16);\r\n        opacity: 0.3;\r\n    }\r\n    button:disabled:hover {\r\n        color: #fff;\r\n        opacity: 0.45;\r\n        background: #939191;\r\n    }\r\n`;\r\n\r\nconst SaveLimitButton = styled.div`\r\n    display: inline-block;\r\n    padding: 0;\r\n    margin-right: 20px;\r\n    button {\r\n        background: #20BA88;\r\n        color: #fff;\r\n        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.16);\r\n        padding: 8px 60px;\r\n        border-radius: 5px;\r\n    }\r\n    button:disabled {\r\n        color: #fff;\r\n        background: #939191;\r\n        box-shadow: 0 4px 4px rgba(0, 0, 0, 0.16);\r\n        opacity: 0.3;\r\n    }\r\n    button:disabled:hover {\r\n        color: #fff;\r\n        opacity: 0.45;\r\n        background: #939191;\r\n    }\r\n`;\r\n","import React from 'react';\r\n\r\nimport {FlexboxGrid, Form} from 'rsuite';\r\nimport CustomField from 'pages/NewAccount/CustomField';\r\nimport styled from 'styled-components';\r\nimport Button from 'rsuite/es/Button';\r\nimport 'pages/Account/TabSelfAllocation/selfAllocation.css';\r\nimport List from 'rsuite/es/List';\r\n\r\n\r\nexport default ({defaultLimitKeys, defaultAllocationLimits, ...props}) => {\r\n    return (\r\n        defaultLimitKeys && defaultLimitKeys.length ?\r\n            <>\r\n                <Header>Default limitations for self allocation is</Header>\r\n                <LimitList bordered autoScroll={false}>\r\n                    {defaultLimitKeys.map(limitKey => {\r\n                        const limits = defaultAllocationLimits;\r\n                        const limitLabels = `${limitKey.charAt(0).toUpperCase()}${limitKey.replace('_', ' ').slice(1)}`;\r\n                        return <LimitListItem>\r\n                            {limitKey === 'other' ? <Option>\r\n                                    <Value><Number>{limits[limitKey]['once']}</Number> for one-time\r\n                                        and <Number>{limits[limitKey]['daily']}</Number> a day for\r\n                                        rest types</Value>\r\n                                </Option>\r\n                                : <Option>\r\n                                    <Name>{limitLabels}:</Name><Value>\r\n                                    <Number>{limits[limitKey]['once']}</Number> numbers\r\n                                    for one-time allocation, <Number>{limits[limitKey]['daily_sde']}</Number> per\r\n                                    destination a day and <Number>{limits[limitKey]['daily']}</Number> summary</Value>\r\n                                </Option>}\r\n                        </LimitListItem>\r\n                    })}\r\n                </LimitList>\r\n                <Header>You can setup special limitations (lower or higher) for this account below</Header>\r\n            </>\r\n            : <Header>Sorry! No limitations for you</Header>\r\n    );\r\n};\r\nconst StyledFLexBoxItem = styled(FlexboxGrid.Item)`\r\n    width: 100%;\r\n    margin-top: 10px;\r\n    margin-bottom: 15px;\r\n    >div.rs-form-group[role=\"group\"] {\r\n      display: inline-block;\r\n      margin-bottom: 0;\r\n      width: 280px !important;\r\n    }\r\n    >div.rs-form-group[role=\"group\"] .rs-checkbox {\r\n      width: 100% !important;\r\n    }\r\n    >div.rs-form-group[role=\"group\"] label {\r\n      width: 300px;\r\n    }\r\n`;\r\nconst Header = styled.div`\r\n    margin-bottom: 15px;\r\n    margin-left: 5px;\r\n`;\r\nconst Name = styled.span`\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    line-height: 16px;\r\n    color: #8256C8;\r\n    margin-right: 3px;\r\n`;\r\nconst Value = styled.span`\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    font-size: 14px;\r\n    line-height: 16px;\r\n    color: #363434;\r\n    margin-right: 15px;\r\n`;\r\nconst Number = styled.span`\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n    line-height: 16px;\r\n    color: #2a2828;\r\n`;\r\nconst Option = styled.div`\r\n    margin-left: 10px\r\n`;\r\n\r\nconst LimitList = styled(List)`\r\n    margin-bottom: 10px;\r\n    margin-left: 5px;\r\n    border: 1px solid lightgray;\r\n    box-shadow: none;\r\n    overflow: visible;\r\n`;\r\nconst LimitListItem = styled(List.Item)`\r\n    box-shadow: 0 -1px 0 lightgray, 0 1px 0 lightgray !important;\r\n    padding-top: 6px !important;\r\n    padding-bottom: 6px !important;\r\n`;\r\n","import React, {useState} from 'react';\r\nimport {FlexboxGrid, Form, Schema} from 'rsuite';\r\nimport styled from 'styled-components';\r\nimport Checkbox from '../../../hoc/Checkbox';\r\nimport CustomField from '../../../pages/NewAccount/CustomField';\r\nimport LimitForm from '../../../pages/Account/TabSelfAllocation/LimitForm';\r\nimport DefaultLimitationDescription from '../../../pages/Account/TabSelfAllocation/DefaultLimitationDescription';\r\nimport {someFieldHasError, compareObjects} from '../../../utils';\r\nimport {ButtonContent, ButtonPrimary} from \"../../../components/base/BaseButton\";\r\nimport 'pages/Account/TabSelfAllocation/selfAllocation.css';\r\n\r\nconst {NumberType} = Schema.Types;\r\n\r\nconst modelOnce = Schema.Model({\r\n    once: NumberType().addRule((value, data) => {\r\n        if (value || value === 0) {\r\n            return value < data.daily || value < data.daily_sde;\r\n        }\r\n        return false;\r\n    }, 'You should use limit per once less than a day or destination')\r\n});\r\nconst modelDaily = Schema.Model({\r\n    daily: NumberType().addRule((value, data) => {\r\n        if (value || value === 0) {\r\n            return value >= data.once;\r\n        }\r\n        return false;\r\n    }, 'You should use limit per daily greater than once')\r\n});\r\nconst modelDailySde = Schema.Model({\r\n    daily_sde: NumberType().addRule((value, data) => {\r\n        if (value || value === 0) {\r\n            return value >= data.once;\r\n        }\r\n        return false;\r\n    }, 'You should use limit per daily sde greater than once')\r\n});\r\n\r\n\r\nexport function SelfAllocationUpdateAll(form, limitState) {\r\n    this.permission_list = [];\r\n    this.allocation_limit = {};\r\n\r\n    form.allocate_number && this.permission_list.push('allocate_number');\r\n    form.allocate_pattern && this.permission_list.push('allocate_pattern');\r\n    form.google_otp_allocation && this.permission_list.push('google_otp_allocation');\r\n    form.google_otp_autorevoke && this.permission_list.push('google_otp_autorevoke');\r\n\r\n    Object.keys(limitState).map((limitKey) => {\r\n        this.allocation_limit[limitKey] = limitState[limitKey];\r\n    });\r\n}\r\n\r\nexport function SelfAllocationUpdateSingleLimit(limitState) {\r\n    this.allocation_limit = {};\r\n\r\n    Object.keys(limitState).map((limitKey) => {\r\n        this.allocation_limit[limitKey] = limitState[limitKey];\r\n    });\r\n}\r\n\r\n\r\nconst styleRow = {margin: '10px 0px 20px 0px'};\r\n\r\nexport default ({disabled, reloadPage,  formDefaultValue, account_id, onCancel, defaultAllocationLimits,\r\n                    allocationLimits, setAllocationRestrictions, modifiedLimit, setModifiedLimitId}) => {\r\n    let cleanTimer;\r\n    let modifyTimer;\r\n\r\n    let formLimitRefs = {};\r\n\r\n    const [form, setForm] = useState(null);\r\n    const [formError, onChangeFormError] = useState({});\r\n\r\n    const defaultLimitKeys = Object.keys(defaultAllocationLimits);\r\n    defaultLimitKeys.length && defaultLimitKeys\r\n        .push(defaultLimitKeys.splice(defaultLimitKeys.indexOf(\"other\"), 1)[0]);\r\n\r\n    const objectsKeys = Object.keys(Object.assign({}, defaultAllocationLimits, allocationLimits));\r\n\r\n    let combinedLimitObject = JSON.parse(JSON.stringify(defaultAllocationLimits));\r\n\r\n    objectsKeys.map((key) =>\r\n        allocationLimits.hasOwnProperty(key) && Object.keys(allocationLimits[key]).map((accKey) => {\r\n            if (combinedLimitObject.hasOwnProperty(key)) {\r\n                if (combinedLimitObject[key].hasOwnProperty(accKey)) combinedLimitObject[key][accKey] = allocationLimits[key][accKey]\r\n            } else {\r\n                combinedLimitObject = {...combinedLimitObject, [key]: allocationLimits[key]}\r\n            }\r\n            return combinedLimitObject\r\n        })\r\n    );\r\n    const combinedLimitObjectKeys = Object.keys(combinedLimitObject);\r\n    combinedLimitObjectKeys.length && combinedLimitObjectKeys\r\n        .push(combinedLimitObjectKeys.splice(combinedLimitObjectKeys.indexOf(\"other\"), 1)[0]);\r\n\r\n    const [limitState, onChangeLimitState] = useState(combinedLimitObject);\r\n\r\n    const allocationLimitsCleanable = JSON.parse(JSON.stringify(combinedLimitObject));\r\n\r\n    Object.keys(allocationLimitsCleanable).map((limit) => {\r\n        const limitObject = allocationLimitsCleanable[limit];\r\n\r\n        Object.keys(limitObject).map((rule) => limitObject[rule] = false);\r\n        allocationLimitsCleanable[limit] = limitObject\r\n    });\r\n\r\n    const [cleanedFields, onCleanFields] = useState(allocationLimitsCleanable);\r\n\r\n    const onSubmit = (formValue, state, key) => {\r\n        const selfAllocationUpdateObject = formValue && new SelfAllocationUpdateAll(formValue, state);\r\n        const selfAllocationUpdateSingleLimitObject = !formValue && new SelfAllocationUpdateSingleLimit(state);\r\n        clearTimeout(modifyTimer);\r\n\r\n        if (formValue) {\r\n            setAllocationRestrictions(account_id, selfAllocationUpdateObject, key);\r\n        }\r\n        else {\r\n            setAllocationRestrictions(account_id, selfAllocationUpdateSingleLimitObject, key);\r\n        }\r\n\r\n        cleanTimer = setTimeout(() => {\r\n            setModifiedLimitId(null);\r\n        }, 3000);\r\n    };\r\n\r\n    const cleanLimit = (key) => {\r\n        const defaultAllocationRules = defaultAllocationLimits[key];\r\n        const defaultAllocationRulesKeys = defaultAllocationRules ? Object.keys(defaultAllocationRules): [];\r\n        const accountAllocationRules = limitState[key];\r\n        const accountAllocationRulesKeys = defaultAllocationRules ?  Object.keys(defaultAllocationRules) : [];\r\n        const keysToClean = defaultAllocationRulesKeys.filter(freqKey => defaultAllocationRules[freqKey] !== accountAllocationRules[freqKey]);\r\n        keysToClean.map((clKey) => {cleanedFields[key][clKey] = true});\r\n        onCleanFields({...cleanedFields, [key]: {...cleanedFields[key]}});\r\n        onChangeLimitState({...limitState, [key]: defaultAllocationLimits[key]});\r\n        clearTimeout(cleanTimer);\r\n\r\n        cleanTimer = setTimeout(() => {\r\n            accountAllocationRulesKeys.map((clKey) => {cleanedFields[key][clKey] = false});\r\n            onCleanFields({...cleanedFields, [key]: {...cleanedFields[key]}});\r\n        }, 1500);\r\n\r\n        onSubmit(null, {[key]: null}, null)\r\n    };\r\n\r\n    const accountModelCombined = JSON.parse(JSON.stringify(limitState));\r\n\r\n    Object.keys(accountModelCombined).map((key) => {\r\n        if (accountModelCombined[key].hasOwnProperty('once')) {\r\n            accountModelCombined[key]['once'] = modelOnce;\r\n        }\r\n        if (accountModelCombined[key].hasOwnProperty('daily')) {\r\n            accountModelCombined[key]['daily'] = modelDaily;\r\n        }\r\n        if (accountModelCombined[key].hasOwnProperty('daily_sde')) {\r\n            accountModelCombined[key]['daily_sde'] = modelDailySde;\r\n        }\r\n    });\r\n\r\n    const prepareDefaultObj = (accountData, combinedData = {}) => {\r\n        const combinedDataClone = JSON.parse(JSON.stringify(combinedData));\r\n        Object.keys(combinedDataClone).forEach((key) => {\r\n            if (!Object.keys(accountData).includes(key) && compareObjects(combinedDataClone[key], defaultAllocationLimits[key])) {\r\n                combinedDataClone[key] = null\r\n            } else {\r\n                combinedDataClone[key] = combinedData[key]\r\n            }\r\n        });\r\n        Object.keys(combinedDataClone).forEach(limitKey => {\r\n            onChangeFormError({...formError, [limitKey]: {}})\r\n        });\r\n\r\n        return combinedDataClone\r\n    };\r\n\r\n    const fillLimitFormRef = (key, ref) => {\r\n        formLimitRefs[key] = ref;\r\n\r\n\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            style={{marginBottom: '20px'}}\r\n            layout=\"horizontal\"\r\n            ref={ref => setForm(ref)}\r\n            formDefaultValue={formDefaultValue}\r\n        >\r\n            <FlexboxGrid style={styleRow} justify=\"start\" align=\"top\">\r\n                <StyledFLexBoxItem>\r\n\r\n                    <CustomField\r\n                        disabled={disabled}\r\n                        accepter={Checkbox}\r\n                        name=\"allocate_number\"\r\n                        defaultChecked={formDefaultValue.allocate_number}\r\n                    >\r\n                        Allow to allocate numbers himself\r\n                    </CustomField>\r\n\r\n                    <CustomField\r\n                        disabled={disabled}\r\n                        accepter={Checkbox}\r\n                        name=\"allocate_pattern\"\r\n                        defaultChecked={formDefaultValue.allocate_pattern}\r\n                    >\r\n                        Allow to allocate own numbers\r\n                    </CustomField>\r\n                    <CustomField\r\n                        disabled={disabled}\r\n                        accepter={Checkbox}\r\n                        name=\"google_otp_allocation\"\r\n                        defaultChecked={formDefaultValue.google_otp_allocation}\r\n                    >\r\n                        Google OTP Allocation\r\n                    </CustomField>\r\n                    <CustomField\r\n                        disabled={disabled}\r\n                        accepter={Checkbox}\r\n                        name=\"google_otp_autorevoke\"\r\n                        defaultChecked={formDefaultValue.google_otp_autorevoke}\r\n                    >\r\n                        Allow autorevoke for Google OTP numbers\r\n                    </CustomField>\r\n                </StyledFLexBoxItem>\r\n                <StyledFLexBoxItem>\r\n                    <DefaultLimitationDescription\r\n                        {...{\r\n                            defaultLimitKeys,\r\n                            defaultAllocationLimits\r\n                        }}\r\n                    />\r\n                </StyledFLexBoxItem>\r\n                <StyledFLexBoxItem>\r\n                    <LimitForm\r\n                        {...{\r\n                            onSubmit,\r\n                            formError,\r\n                            cleanLimit,\r\n                            limitState,\r\n                            cleanedFields,\r\n                            formLimitRefs,\r\n                            accountLimitKeys: combinedLimitObjectKeys,\r\n                            onChangeLimitState,\r\n                            defaultAllocationLimits,\r\n                            modifiedLimit,\r\n                            fillLimitFormRef,\r\n                            onChangeFormError,\r\n                            model: accountModelCombined\r\n                        }}\r\n                    />\r\n                </StyledFLexBoxItem>\r\n            </FlexboxGrid>\r\n            <ButtonFooter>\r\n                <ButtonPrimary\r\n                    disabled={disabled || someFieldHasError(formError)}\r\n                    onClick={() => {\r\n                        onSubmit(form.getFormValue(), prepareDefaultObj(allocationLimits, limitState), true);\r\n                        reloadPage()\r\n                    }}\r\n                >\r\n                    Save\r\n                </ButtonPrimary>\r\n                <ButtonContent onClick={() => onCancel()}>Cancel</ButtonContent>\r\n            </ButtonFooter>\r\n        </Form>\r\n    );\r\n};\r\nconst StyledFLexBoxItem = styled(FlexboxGrid.Item)`\r\n    width: 100%;\r\n    margin-top: 10px;\r\n    margin-bottom: 15px;\r\n    >div.rs-form-group[role=\"group\"] {\r\n      display: inline-block;\r\n      margin-bottom: 0;\r\n      width: 280px !important;\r\n    }\r\n    >div.rs-form-group[role=\"group\"] .rs-checkbox {\r\n      width: 100% !important;\r\n    }\r\n    >div.rs-form-group[role=\"group\"] label {\r\n      width: 300px;\r\n    }\r\n`;\r\n\r\nconst ButtonFooter = styled.div`\r\n    text-align: center\r\n    > * {\r\n        margin-right: 50px\r\n    }\r\n`;","import React, {useState} from 'react';\r\nimport {Alert, Loader, Placeholder} from 'rsuite';\r\nimport FormSelfAllocation from './FormSelfAllocation';\r\nimport {api} from '../../../api/loginRoutes';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst {Paragraph} = Placeholder;\r\n\r\nfunction SelfAllocationForm(account) {\r\n    this.allocate_number = account.permission_list && account.permission_list.includes('allocate_number');\r\n    this.allocate_pattern = account.permission_list && account.permission_list.includes('allocate_pattern');\r\n    this.google_otp_allocation = account.permission_list && account.permission_list.includes('google_otp_allocation');\r\n    this.google_otp_autorevoke = account.permission_list && account.permission_list.includes('google_otp_autorevoke');\r\n}\r\n\r\nconst TabSelfAllocation = ({disabled = false, account, getAccount, allocationLimits, defaultAllocationLimits,\r\n                               setAllocationRestrictions, modifiedLimit, setModifiedLimitId, ...props}) => {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    if (props.loading)\r\n        return (\r\n            <>\r\n                <Loader backdrop content=\"loading...\" vertical/>\r\n                <Paragraph rows={5}/>\r\n            </>\r\n        );\r\n\r\n    const reloadPage = () => {\r\n\r\n        try {\r\n            setLoading(true);\r\n\r\n            getAccount(account.id, true, true);\r\n            props.history.replace('/reload');\r\n            setTimeout((location, history) => {\r\n                history.replace({\r\n                    ...location,\r\n                    search: '?tab=self-allocation'\r\n                });\r\n            },\r\n            500,\r\n            props.location, props.history);\r\n\r\n            setLoading(false);\r\n        } catch (e) {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const onCancel = () => {\r\n        props.history.replace('/reload');\r\n        setTimeout((location, history) => {\r\n            history.replace({\r\n                ...location,\r\n                search: '?tab=trunks'\r\n            });\r\n        },\r\n        0,\r\n        props.location, props.history);\r\n    };\r\n\r\n    return (\r\n        <FormSelfAllocation\r\n            {...{\r\n                reloadPage, onCancel, defaultAllocationLimits, allocationLimits,\r\n                setAllocationRestrictions, modifiedLimit, setModifiedLimitId\r\n            }}\r\n            formDefaultValue={new SelfAllocationForm(account)}\r\n            account_id={account.id}\r\n            disabled={disabled || loading}\r\n            active={account.active}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(TabSelfAllocation);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport {Header as SectionHeader} from \"./Trunks/styled\";\r\nimport PageTabs from \"../../components/PageTabs\";\r\nimport {checkPermissionsFor} from 'store/storeHelpers';\r\nimport {PAYMENT_REQUEST_LIST_API} from \"../../const/apiMethods\";\r\nimport {FlexGrid, FlexGridItem} from \"../../components/base/FlexGrid\";\r\n\r\n\r\nexport default ({\r\n    activeTab,\r\n    onSelect,\r\n    account = {},\r\n}) => {\r\n\r\n    const {\r\n        name = '',\r\n        account_manager_name = '',\r\n        currency = '',\r\n        payment_terms = ''\r\n    } = account;\r\n\r\n    const windowWidth = useWindowWidth();\r\n\r\n    const menuItems = [\r\n        ...[account.id\r\n            ? {id: \"general\", eventKey: \"general\", title: \"General\"}\r\n            : null\r\n        ],\r\n        {id: \"trunks\", eventKey: \"trunks\", title: \"Trunks\"},\r\n        {id: \"rates\", eventKey: \"rates\", title: \"Rates\"},\r\n        {id: \"access\", eventKey: \"access\", title: \"Access List Filters\"},\r\n        {id: \"api\", eventKey: \"api\", title: \"API Keys\"},\r\n        {id: \"self-allocation\", eventKey: \"self-allocation\", title: \"Self Allocation Restrictions\"},\r\n        ...[checkPermissionsFor(PAYMENT_REQUEST_LIST_API)\r\n            ? {id: \"payment-management\", eventKey: \"payment-management\", title: \"Payment management\"}\r\n            : null\r\n        ],\r\n        {id: \"notes\", eventKey: \"notes\", title: \"Notes\"},\r\n    ].filter(item => !!item);\r\n\r\n    const dropdownTitle = (menuItems.find(item => item.eventKey === activeTab) || {}).title;\r\n    const isMobile = windowWidth < 1200;\r\n\r\n    return (\r\n            <>\r\n                <Header>\r\n                    <div><Name>Account:</Name><Value>{name}</Value></div>\r\n                    <div><Name>Manager:</Name><Value>{account_manager_name}</Value></div>\r\n                    <div><Name>Currency:</Name><Value>{currency}</Value></div>\r\n                    <div><Name>Payment terms:</Name><Value>{payment_terms}</Value></div>\r\n                </Header>\r\n\r\n                {!isMobile\r\n\r\n                    ? <PageTabs\r\n                        {...{activeTab, onSelect, menuItems}}\r\n                    />\r\n\r\n                    : <>\r\n                        <FlexGrid\r\n                            noWrap\r\n                            align={\"middle\"}\r\n                            justify={\"space-between\"}\r\n                        >\r\n                            <FlexGridItem>\r\n                                <SectionHeader>{dropdownTitle}</SectionHeader>\r\n                            </FlexGridItem>\r\n                            <FlexGridItem>\r\n                                <PageTabs\r\n                                    isMobile={true}\r\n                                    {...{activeTab, onSelect, menuItems}}\r\n                                />\r\n                            </FlexGridItem>\r\n                        </FlexGrid>\r\n                    </>\r\n                }\r\n            </>\r\n        )\r\n}\r\n\r\n\r\nconst Name = styled.span`\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    line-height: 16px;\r\n    color: #8256C8;\r\n    margin-right: 3px;\r\n`;\r\n\r\nconst Value = styled.span`\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    line-height: 16px;\r\n    color: #363434;\r\n    margin-right: 15px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    margin-bottom: 15px;\r\n    \r\n    & > div {\r\n        padding-bottom: 10px;\r\n    }\r\n`;","import React, {useState} from \"react\";\r\nimport {Table} from 'rsuite';\r\nimport {Form, Schema, SelectPicker, FormControl, Input, InputNumber, Button} from \"rsuite\";\r\nimport NumberField from \"../../../../../components/Form/NumberField\";\r\nimport Icon from \"rsuite/es/Icon\";\r\nimport BaseTable from \"../../../../../components/base/BaseTable\";\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\nconst FormAddFilter = React.memo( ({defaultFilter, ...props}) => {\r\n\r\n    const form = React.createRef();\r\n    const account_id = props.accountId;\r\n\r\n    const defaultValues = {rate_min: 0};\r\n    const [fields, setFields] = useState(defaultValues);\r\n\r\n    const {StringType, NumberType} = Schema.Types;\r\n    const formModel = Schema.Model({\r\n        a_sde_key: NumberType(),\r\n        a_prefix: StringType()\r\n            .pattern(/^[0-9][\\d]*$/, 'The number must contain only digits')\r\n            .minLength(6, 'The minimum is 6 characters.')\r\n            .maxLength(15, \"The minimum is 15 characters\"),\r\n        b_sde_key: NumberType(),\r\n        rate_min: NumberType(),\r\n        rate_min2: NumberType(),\r\n    });\r\n\r\n    const formControlItems = [\r\n        <FormControl placement={\"autoVerticalStart\"} errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"a_wz_key\" accepter={SelectPicker} data={props.worldzoneList} placeholder=\"Origin zone\" valueKey=\"wz_key\" labelKey=\"name\" type=\"text\" />,\r\n        <FormControl placement={\"autoVerticalStart\"} errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"a_de_key\" accepter={SelectPicker} data={props.destinationList} placeholder=\"Origin country\" valueKey=\"de_key\" labelKey=\"name\" type=\"text\" />,\r\n        <FormControl placement={\"autoVerticalStart\"} errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"a_sde_key\" accepter={SelectPicker} data={props.subdestinationList} placeholder=\"Origin operator\" valueKey=\"sde_key\" labelKey=\"name\" type=\"text\" />,\r\n        <FormControl errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"a_prefix\" accepter={Input} placeholder=\"Origin Prefix\" type=\"text\" />,\r\n        <FormControl placement={\"autoVerticalStart\"} errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"b_wz_key\" accepter={SelectPicker} data={props.worldzoneList} placeholder=\"Desctination zone\" valueKey=\"wz_key\" labelKey=\"name\" type=\"text\" />,\r\n        <FormControl placement={\"autoVerticalStart\"} errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"b_de_key\" accepter={SelectPicker} data={props.destinationList} placeholder=\"Destination country\" valueKey=\"de_key\" labelKey=\"name\" />,\r\n        <FormControl placement={\"autoVerticalStart\"} errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"b_sde_key\" accepter={SelectPicker} data={props.subdestinationList} placeholder=\"Destination operator\" valueKey=\"sde_key\" labelKey=\"name\" type=\"text\" />,\r\n        <FormControl errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"rate_min\" accepter={InputNumber} placeholder=\"Minimal payout\" step={0.1} min={0} />,\r\n    ];\r\n\r\n    const handleChange = (formValues) => {\r\n        setFields(formValues)\r\n    };\r\n\r\n    const handleSubmit = async (_, event) => {\r\n        event.preventDefault();\r\n\r\n        let validStatus = form.current.check();\r\n\r\n        if (!validStatus)\r\n            return;\r\n\r\n        let formValues = form.current.getFormValue();\r\n        let data = {\r\n            ...formValues,\r\n            rate_min: +formValues.rate_min\r\n        };\r\n\r\n        if (!data.a_prefix && data.a_prefix !== undefined) {\r\n            delete data.a_prefix;\r\n        }\r\n\r\n        props.addItem(account_id, data);\r\n\r\n    };\r\n\r\n    const formControlNames = [\"a_wz_key\", \"a_de_key\", \"a_sde_key\", \"a_prefix\", \"b_wz_key\", \"b_de_key\", \"b_sde_key\", \"rate_min\"];\r\n\r\n    const columns = formControlNames.map( key => {\r\n        return {dataKey: key, label: ''}\r\n    } );\r\n\r\n    const tableColumnsElements = {};\r\n    for (let i = 0; i < formControlNames.length; i++) {\r\n        tableColumnsElements[formControlNames[i]] = formControlItems[i];\r\n    }\r\n\r\n    const columnsElements = formControlNames.map( (item) => {\r\n        return (\r\n            <Column flexGrow>\r\n                <HeaderCell></HeaderCell>\r\n                <Cell dataKey={item}/>\r\n            </Column>\r\n        )\r\n    } );\r\n\r\n    return(\r\n        <>\r\n            <Form\r\n                onSubmit={handleSubmit}\r\n                ref={form}\r\n                model={formModel}\r\n                onChange={handleChange}\r\n                formDefaultValue={fields}\r\n                style={{margin: '0px', width: '100%'}}\r\n            >\r\n\r\n                <BaseTable\r\n                    data={[tableColumnsElements]}\r\n                    loading={false}\r\n                    columns={columns}\r\n                    headerHeight={0}\r\n                    autoHeight\r\n                    rowHeight={46}\r\n                    className=\"tableFilters tableFilters__form\"\r\n                >\r\n                    {columnsElements}\r\n                    <Column width={174}>\r\n                        <HeaderCell></HeaderCell>\r\n                        <Cell>\r\n                            {rowData => (\r\n                                <Button className=\"tableFilters_submit\" color=\"green\" type=\"submit\"><Icon icon=\"plus\"/></Button>\r\n                            )}\r\n                        </Cell>\r\n                    </Column>\r\n                </BaseTable>\r\n\r\n            </Form>\r\n        </>\r\n    )\r\n} );\r\n\r\nexport default FormAddFilter","import React, {useState} from 'react';\r\nimport {Alert, CheckPicker, Form, Loader, Schema, SelectPicker} from 'rsuite';\r\nimport {ControlLabel, FormControl, CheckboxGroup, FormGroup, Checkbox, Placeholder} from 'rsuite/es';\r\nimport ServicePlans from '../../../../../components/Filters/ServicePlans';\r\nimport {ButtonPrimary} from \"../../../../../components/base/BaseButton\";\r\n\r\nconst { StringType } = Schema.Types;\r\n\r\nconst formModel = Schema.Model({\r\n    // during: StringType().isRequired('Required')\r\n});\r\n\r\n// get During options\r\nlet getDuringOptions = () => {\r\n    let duringOptions = [];\r\n    for (let i = 0; i < 24; i++) {\r\n        const start_time = new Date(0,0,0, i);\r\n        const end_time = new Date(0,0,0, i + 1);\r\n\r\n        duringOptions.push({\r\n            dr_key: `${start_time.toLocaleTimeString('it-IT')}-23:59:59`,\r\n            dr_name: `${start_time.toLocaleTimeString(['it-IT'], { hour: '2-digit', minute: '2-digit' })} - ${end_time.toLocaleTimeString(['it-IT'], { hour: '2-digit', minute: '2-digit' })} GMT`});\r\n    }\r\n    return duringOptions;\r\n};\r\n\r\n\r\nconst AccessListFiltersSettings = ({settings, ...props}) => {\r\n\r\n    let [isDaily, setIsDaily] = React.useState(false);\r\n    let [loading, setLoading] = React.useState(false);\r\n\r\n    React.useEffect( () => {\r\n\r\n        console.log(\"settings\", settings);\r\n\r\n        if (settings && settings.daily) {\r\n            setIsDaily(true);\r\n        }\r\n    }, [settings]);\r\n\r\n    if (!settings) {\r\n        return  <>\r\n            <div style={{ height: 106, position: \"relative\" }}>\r\n                <Loader backdrop content=\"loading...\" vertical />\r\n                <Placeholder.Paragraph/>\r\n            </div>\r\n        </>\r\n    }\r\n\r\n    let formRef = null;\r\n\r\n    let getDefaultFilters = () => {\r\n        let start_time = settings.start_time;\r\n        let end_time = settings.end_time;\r\n        let during = `${start_time}-23:59:59`;\r\n        // let during = \"\";\r\n\r\n        return (\r\n            {\r\n                ...settings,\r\n                daily: settings.daily ? [true] : [],\r\n                appearance: settings.appearance ? [true] : [],\r\n                during: during,\r\n                prices: settings.prices\r\n            }\r\n        )\r\n    };\r\n\r\n    const handleChange = (value) => {\r\n        let isDaily = value.daily && value.daily.length ? true : false;\r\n        setIsDaily(isDaily);\r\n    };\r\n\r\n    const handleApply = () => {\r\n        // console.log(\"form value\", formRef.getFormValue() );\r\n        if ( !formRef.check() )\r\n            return;\r\n\r\n        setLoading(true);\r\n\r\n        let formValues = formRef.getFormValue();\r\n\r\n        //get time values\r\n        let during = formValues[\"during\"];\r\n        let start_time = \"00:00:00\";\r\n        let end_time = \"23:59:59\";\r\n        if (during !== null) {\r\n            [start_time, end_time] = during.split('-');\r\n        }\r\n\r\n        let newData = {\r\n            daily: formValues.daily && formValues.daily.length ? true : false,\r\n            appearance: formValues.appearance && formValues.appearance.length ? true : false,\r\n            sp_key_list: formValues.sp_key_list ? formValues.sp_key_list : [],\r\n            start_time: start_time,\r\n            end_time: end_time,\r\n            type: formValues.type ? formValues.type : 2\r\n        };\r\n\r\n        props.handleSubmit(props.accountId, newData).then( (r) => {\r\n            setLoading(false);\r\n            Alert.success('Saved');\r\n        } );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                disabled={true}\r\n                ref={ref => (formRef = ref)}\r\n                onChange={(value) => handleChange(value)}\r\n                formDefaultValue={getDefaultFilters()}\r\n                layout=\"inline\"\r\n                model={formModel}\r\n                className=\"mailingSettings\"\r\n            >\r\n                <div style={{marginBottom: \"10px\"}}>\r\n                    <FormGroup>\r\n                        <FormControl name=\"appearance\" accepter={CheckboxGroup}>\r\n                            <Checkbox value={true}> Per appearance for filtered destinations</Checkbox>\r\n                        </FormControl>\r\n                    </FormGroup>\r\n                </div>\r\n\r\n                <FormGroup>\r\n                    <FormControl name=\"daily\" accepter={CheckboxGroup}>\r\n                        <Checkbox value={true}> Daily</Checkbox>\r\n                    </FormControl>\r\n                </FormGroup>\r\n\r\n                <FormGroup className={(isDaily ? '' : 'disabled')}>\r\n                    <ControlLabel> for price</ControlLabel>\r\n                    <ServicePlans accepter={CheckPicker} name=\"sp_key_list\" disabled={!isDaily} filtered style={{marginLeft: '12px'}}/>\r\n                </FormGroup>\r\n                <FormGroup className={(isDaily ? '' : 'disabled')}>\r\n                    <ControlLabel> During </ControlLabel>\r\n                    <FormControl\r\n                        name=\"during\"\r\n                        accepter={SelectPicker}\r\n                        data={getDuringOptions()}\r\n                        labelKey=\"dr_name\"\r\n                        valueKey=\"dr_key\"\r\n                        placeholder=\"Timing\"\r\n                        style={{width: '180px'}}\r\n                        searchable={false}\r\n                        disabled={!isDaily}\r\n                        cleanable={false}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup className={(isDaily ? '' : 'disabled')}>\r\n                    <ControlLabel> Type </ControlLabel>\r\n                    <FormControl\r\n                        name=\"type\"\r\n                        accepter={SelectPicker}\r\n                        data={[\r\n                            {tp_key: 1, tp_name: \"Full price\"},\r\n                            {tp_key: 2, tp_name: \"Just for allocated\"},\r\n                            {tp_key: 4, tp_name: \"Only filtered destinations\"}\r\n                        ]}\r\n                        labelKey=\"tp_name\"\r\n                        valueKey=\"tp_key\"\r\n                        placeholder=\"Type\"\r\n                        style={{width: '180px'}}\r\n                        searchable={false}\r\n                        disabled={!isDaily}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <ButtonPrimary\r\n                        style={{padding: '8px 34px', marginLeft: 12}}\r\n                        onClick={handleApply}\r\n                        disabled={loading}\r\n                    >\r\n                        Save\r\n                    </ButtonPrimary>\r\n                </FormGroup>\r\n\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AccessListFiltersSettings","import React, {useState} from 'react';\r\nimport Modal from \"../../../../../components/Modal\";\r\nimport {api} from '../../../../../api/loginRoutes';\r\n\r\nconst ModalAccessListFilterRemove = (props) => {\r\n\r\n    let {account_id, data, handleClose, update} = props;\r\n\r\n    const [disabled, setDisabled] = React.useState(false);\r\n\r\n    const onSubmit = async () => {\r\n\r\n        setDisabled(true);\r\n\r\n        const result = await api('access_list_filter:remove',{\r\n            target: {\r\n                alf_key: data['alf_key']\r\n            }\r\n        })\r\n\r\n        if(result && result.access_list_filter) {\r\n            handleClose();\r\n            update();\r\n            setDisabled(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                show\r\n                footer\r\n                data={data}\r\n                disabled = {disabled}\r\n                onSuccess={onSubmit}\r\n                onClose={handleClose}\r\n                successText = \"Delete\"\r\n                title={\"Delete access list filter\"}\r\n            >\r\n                <p>Are you sure about that?</p>\r\n            </Modal>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ModalAccessListFilterRemove;","import React from \"react\";\r\nimport {Table, Form, Schema, SelectPicker, FormControl, Input, InputNumber, Button, Icon} from \"rsuite\";\r\nimport BaseTable from \"../../../../../components/base/BaseTable\";\r\n\r\n// Table components\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\n// Form validation schema model\r\nconst {StringType, NumberType} = Schema.Types;\r\nconst formModel = Schema.Model({\r\n    a_wz_key: NumberType(),\r\n    a_de_key: NumberType(),\r\n    a_sde_key: NumberType(),\r\n    a_prefix: StringType()\r\n        .pattern(/^[0-9][\\d]*$/, 'The number must contain only digits')\r\n        .minLength(6, \"Min length is 6 characters\")\r\n        .maxLength(15, \"Max length is 15 characters\"),\r\n    b_wz_key: NumberType(),\r\n    b_de_key: NumberType(),\r\n    b_sde_key: NumberType(),\r\n    rate_min: NumberType(),\r\n});\r\n\r\n\r\nconst AccessListFiltersTable = React.memo( (props) => {\r\n\r\n    // props\r\n    let {loading} = props;\r\n\r\n    // callbacks\r\n    let {onRemoveItem, onEditItem} = props;\r\n\r\n    // keeped form groups refs\r\n    let formGroupsRefs = new Map();\r\n\r\n    // hooks\r\n    let [tableData, setTableData] = React.useState([]);\r\n    let [currentEditedFilter, setCurrentEditedFilter] = React.useState(null);\r\n    let [editedFiltersKeys, setEditedFiltersKeys] = React.useState([]);\r\n    let [localLoading, setLocalLoading] = React.useState(false);\r\n\r\n    const searchedData = [\"a_worldzone_name\", \"a_destination_name\", \"a_subdestination_name\", \"a_prefix\", \"b_worldzone_name\", \"b_destination_name\", \"b_subdestination_name\"];\r\n\r\n    React.useEffect( () => {\r\n\r\n        let tableData = props.data.filter( (item) => {\r\n\r\n            // return item if filter is empty\r\n            if (!props.filter || !props.filter.str)\r\n                return true;\r\n\r\n            let match = props.filter.str.toLowerCase();\r\n\r\n            for (let keyName of searchedData) {\r\n                if (!item[keyName])\r\n                    continue;\r\n\r\n                let string = item[keyName].toString().toLowerCase();\r\n\r\n                if (keyName === \"a_prefix\" ) {\r\n                    \r\n                    // if \"a_prefix\" length less then match && match includes \"a_prefix\"\r\n                    if (match.length > string.length) {\r\n\r\n                        if ( match.indexOf(string) === 0 ) {\r\n                            return true;\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        if (string.indexOf(match) === 0) {\r\n                            return true;\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n\r\n                    // if string has matches\r\n                    if (string.includes(match)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        } );\r\n\r\n        // set filtered data\r\n        setTableData(tableData);\r\n        if (currentEditedFilter) {\r\n            let editedFilters = new Set([...editedFiltersKeys, currentEditedFilter]);\r\n            editedFilters.delete(currentEditedFilter);\r\n            setEditedFiltersKeys(Array.from(editedFilters));\r\n            setCurrentEditedFilter(null);\r\n        }\r\n    }, [props.data, props.filter] );\r\n\r\n\r\n    // a_prefix form ref\r\n    let aPrefixForm;\r\n\r\n\r\n    // add new form group refs\r\n    const createFormGroupRefs = (alf_key, ref) => {\r\n        if ( !formGroupsRefs.has(alf_key) ) {\r\n            formGroupsRefs.set(alf_key, new Set([ref]))\r\n        } else {\r\n            formGroupsRefs.get(alf_key).add(ref);\r\n        }\r\n    };\r\n\r\n\r\n    // On Edit submit\r\n    const handleSubmit = (alf_key) => {\r\n        const formsGroup = formGroupsRefs.get(alf_key);\r\n\r\n        let data = {};\r\n        for (let form of formsGroup) {\r\n            if (!form)\r\n                continue;\r\n\r\n            const formData = form.getFormValue();\r\n\r\n            // check \"a_prefix\" field\r\n            if (formData.a_prefix != undefined) {\r\n                if ( !form.check() ) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            data = Object.assign(data, formData);\r\n        }\r\n\r\n        // prepare data for sending\r\n        Object.keys(data).forEach( item => {\r\n            if (item === \"rate_min\") {\r\n                data[item] = +data[item];\r\n            }\r\n        } );\r\n\r\n        if (!data.a_prefix && data.a_prefix !== undefined) {\r\n            delete data.a_prefix\r\n        }\r\n\r\n        let promise = onEditItem(props.accountId, alf_key, data);\r\n        promise.then(r => {\r\n            if (!r)\r\n                return;\r\n\r\n            setCurrentEditedFilter(alf_key);\r\n            props.update();\r\n        })\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <BaseTable\r\n                virtualized\r\n                className=\"tableFilters\"\r\n                data={[...tableData]}\r\n                loading={loading || localLoading}\r\n                headerHeight={47}\r\n                rowHeight={46}\r\n                autoHeight\r\n            >\r\n                <Column flexGrow minWidth={130} className=\"tableFilters_column\" align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">Origin zone</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"a_worldzone_name\"}>\r\n                        {(rowData) => {\r\n                            if ( editedFiltersKeys.includes(rowData[\"alf_key\"]) ) {\r\n                                return (\r\n                                    <Form model={formModel}\r\n                                          ref={(ref) => createFormGroupRefs(rowData[\"alf_key\"], ref)} formDefaultValue={{a_wz_key: rowData[\"a_wz_key\"]}}>\r\n                                        <FormControl name=\"a_wz_key\"\r\n                                                     className=\"tableFilters_field\"\r\n                                                     errorPlacement=\"topEnd\"\r\n                                                     accepter={SelectPicker}\r\n                                                     data={props.worldzoneList}\r\n                                                     placeholder=\"Origin zone\"\r\n                                                     valueKey=\"wz_key\"\r\n                                                     labelKey=\"name\"\r\n                                                     type=\"text\"/>\r\n                                    </Form>\r\n                                )\r\n                            }\r\n                            return (\r\n                                <span className=\"tableFilters__previewText\">{rowData[\"a_worldzone_name\"]}</span>\r\n                            );\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow minWidth={130} align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">Origin country</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"a_destination_name\"}>\r\n                        {(rowData) => {\r\n                            if ( editedFiltersKeys.includes(rowData[\"alf_key\"]) ) {\r\n                                return (\r\n                                    <Form model={formModel}\r\n                                          ref={(ref) => createFormGroupRefs(rowData[\"alf_key\"], ref)} formDefaultValue={{a_de_key: rowData[\"a_de_key\"]}}>\r\n                                        <FormControl name=\"a_de_key\"\r\n                                                     className=\"tableFilters_field\"\r\n                                                     errorPlacement=\"topEnd\"\r\n                                                     accepter={SelectPicker}\r\n                                                     data={props.destinationList}\r\n                                                     placeholder=\"Origin country\"\r\n                                                     valueKey=\"de_key\"\r\n                                                     labelKey=\"name\"\r\n                                                     type=\"text\" />\r\n                                    </Form>\r\n                                )\r\n                            }\r\n                            return (\r\n                                <span className=\"tableFilters__previewText\">{rowData[\"a_destination_name\"]}</span>\r\n                            );\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow minWidth={130} align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">Origin operator</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"a_subdestination_name\"}>\r\n                        {(rowData) => {\r\n                            if ( editedFiltersKeys.includes(rowData[\"alf_key\"]) ) {\r\n                                return (\r\n                                    <Form model={formModel}\r\n                                          ref={(ref) => createFormGroupRefs(rowData[\"alf_key\"], ref)} formDefaultValue={{a_sde_key: rowData[\"a_sde_key\"]}}>\r\n                                        <FormControl name=\"a_sde_key\"\r\n                                                     className=\"tableFilters_field\"\r\n                                                     errorPlacement=\"topEnd\"\r\n                                                     accepter={SelectPicker}\r\n                                                     data={props.subdestinationList}\r\n                                                     placeholder=\"Origin operator\"\r\n                                                     valueKey=\"sde_key\"\r\n                                                     labelKey=\"name\"\r\n                                                     type=\"text\"/>\r\n                                    </Form>\r\n                                )\r\n                            }\r\n                            return (\r\n                                <span className=\"tableFilters__previewText\">{rowData[\"a_subdestination_name\"]}</span>\r\n                            );\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow minWidth={130} align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">Origin Prefix</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"a_prefix\"}>\r\n                        {(rowData) => {\r\n                            if ( editedFiltersKeys.includes(rowData[\"alf_key\"]) ) {\r\n                                return (\r\n                                    <Form model={formModel}\r\n                                          ref={(ref) => createFormGroupRefs(rowData[\"alf_key\"], ref)} formDefaultValue={{a_prefix: rowData[\"a_prefix\"]}}>\r\n                                        <FormControl name=\"a_prefix\"\r\n                                                     className=\"tableFilters_field\"\r\n                                                     errorPlacement=\"topEnd\"\r\n                                                     accepter={Input}\r\n                                                     placeholder=\"Origin Prefix\"\r\n                                                     type=\"text\"/>\r\n                                    </Form>\r\n                                )\r\n                            }\r\n                            return (\r\n                                <span className=\"tableFilters__previewText\">{rowData[\"a_prefix\"]}</span>\r\n                            );\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow minWidth={130} align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">Desctination zone</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"b_worldzone_name\"}>\r\n                        {(rowData) => {\r\n                            if ( editedFiltersKeys.includes(rowData[\"alf_key\"]) ) {\r\n                                return (\r\n                                    <Form model={formModel}\r\n                                          ref={(ref) => createFormGroupRefs(rowData[\"alf_key\"], ref)} formDefaultValue={{b_wz_key: rowData[\"b_wz_key\"]}}>\r\n                                        <FormControl name=\"b_wz_key\"\r\n                                                     className=\"tableFilters_field\"\r\n                                                     errorPlacement=\"topEnd\"\r\n                                                     accepter={SelectPicker}\r\n                                                     data={props.worldzoneList}\r\n                                                     placeholder=\"Desctination zone\"\r\n                                                     valueKey=\"wz_key\"\r\n                                                     labelKey=\"name\"\r\n                                                     type=\"text\"/>\r\n                                    </Form>\r\n                                )\r\n                            }\r\n                            return (\r\n                                <span className=\"tableFilters__previewText\">{rowData[\"b_worldzone_name\"]}</span>\r\n                            );\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow minWidth={130} align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">Destination country</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"b_destination_name\"}>\r\n                        {(rowData) => {\r\n                            if ( editedFiltersKeys.includes(rowData[\"alf_key\"]) ) {\r\n                                return (\r\n                                    <Form model={formModel}\r\n                                          ref={(ref) => createFormGroupRefs(rowData[\"alf_key\"], ref)} formDefaultValue={{b_de_key: rowData[\"b_de_key\"]}}>\r\n                                        <FormControl name=\"b_de_key\"\r\n                                                     className=\"tableFilters_field\"\r\n                                                     errorPlacement=\"topEnd\"\r\n                                                     accepter={SelectPicker}\r\n                                                     data={props.destinationList}\r\n                                                     placeholder=\"Destination country\"\r\n                                                     valueKey=\"de_key\"\r\n                                                     labelKey=\"name\"/>\r\n                                    </Form>\r\n                                )\r\n                            }\r\n                            return (\r\n                                <span className=\"tableFilters__previewText\">{rowData[\"b_destination_name\"]}</span>\r\n                            );\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow minWidth={130} align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">Destination operator</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"b_subdestination_name\"}>\r\n                        {(rowData) => {\r\n                            if ( editedFiltersKeys.includes(rowData[\"alf_key\"]) ) {\r\n                                return (\r\n                                    <Form model={formModel}\r\n                                          ref={(ref) => createFormGroupRefs(rowData[\"alf_key\"], ref)} formDefaultValue={{b_sde_key: rowData[\"b_sde_key\"]}}>\r\n                                        <FormControl name=\"b_sde_key\"\r\n                                                     className=\"tableFilters_field\"\r\n                                                     errorPlacement=\"topEnd\"\r\n                                                     accepter={SelectPicker}\r\n                                                     data={props.subdestinationList}\r\n                                                     placeholder=\"Destination operator\"\r\n                                                     valueKey=\"sde_key\"\r\n                                                     labelKey=\"name\"\r\n                                                     type=\"text\"/>\r\n                                    </Form>\r\n                                )\r\n                            }\r\n                            return (\r\n                                <span className=\"tableFilters__previewText\">{rowData[\"b_subdestination_name\"]}</span>\r\n                            )\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow minWidth={130} align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">Minimal payout</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"rate_min\"}>\r\n                        {(rowData) => {\r\n                            let minRate = rowData[\"rate_min\"];\r\n                            if ( editedFiltersKeys.includes(rowData[\"alf_key\"]) ) {\r\n                                return (\r\n                                    <Form model={formModel}\r\n                                          ref={(ref) => createFormGroupRefs(rowData[\"alf_key\"], ref)} formDefaultValue={{rate_min: rowData[\"rate_min\"]}}>\r\n                                        <FormControl name=\"rate_min\"\r\n                                                     className=\"tableFilters_field\"\r\n                                                     errorPlacement=\"topEnd\"\r\n                                                     accepter={InputNumber}\r\n                                                     placeholder=\"Minimal payout\"\r\n                                                     step={0.1}\r\n                                                     min={0}/>\r\n                                    </Form>\r\n                                )\r\n                            }\r\n                            return (\r\n                                <span className=\"tableFilters__previewText\">{minRate === 0 ? '0.0' : minRate}</span>\r\n                            )\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column width={174}>\r\n                    <HeaderCell></HeaderCell>\r\n                    <Cell>\r\n                        {rowData => (\r\n                            <div className=\"tableFilters_buttons\">\r\n                                {!editedFiltersKeys.includes(rowData[\"alf_key\"])\r\n                                    ? <Button size=\"sm\" color=\"lightblue\" onClick={() => {\r\n                                        let editedFilters = new Set([...editedFiltersKeys, rowData[\"alf_key\"]]);\r\n                                        setEditedFiltersKeys(Array.from(editedFilters));\r\n                                    }}>\r\n                                        <Icon icon=\"edit2\"/>\r\n                                    </Button>\r\n                                    : <>\r\n                                        <Button size=\"sm\" color=\"green\" onClick={() => {\r\n                                            handleSubmit(rowData[\"alf_key\"]);\r\n                                        }}>\r\n                                            <Icon icon=\"check-circle\"/>\r\n                                        </Button>\r\n\r\n                                        <Button size=\"sm\" color=\"red\" onClick={() => {\r\n                                            let editedFilters = new Set([...editedFiltersKeys, rowData[\"alf_key\"]]);\r\n                                            editedFilters.delete(rowData[\"alf_key\"]);\r\n                                            setEditedFiltersKeys(Array.from(editedFilters));\r\n                                        }}>\r\n                                            <Icon icon=\"close-circle\"/>\r\n                                        </Button>\r\n                                    </>\r\n                                }\r\n                                <Button size=\"sm\" color=\"red\" onClick={() => onRemoveItem(rowData)}>\r\n                                    <Icon icon=\"trash2\"/>\r\n                                </Button>\r\n                            </div>\r\n                        )}\r\n                    </Cell>\r\n                </Column>\r\n\r\n            </BaseTable>\r\n        </div>\r\n    )\r\n} );\r\n\r\nexport default AccessListFiltersTable;","import React from 'react';\r\nimport Form from 'rsuite/es/Form';\r\nimport Text from '../../../../../components/Form/Text';\r\nimport FormHOC from '../../../../../hoc/FilltersForm';\r\nimport {Schema} from 'rsuite';\r\nimport {debounce} from 'lodash';\r\n\r\nconst { StringType } = Schema.Types;\r\n\r\nconst filtersModel = Schema.Model({\r\n    number: StringType().maxLength(40, 'The maximum is only 40 characters.'),\r\n});\r\n\r\n\r\nconst AccessListFiltersFilter = ({onChange, defaultFilters}) => {\r\n    const handleChange = (formValues) => {\r\n        onChange(formValues)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                model={filtersModel}\r\n                layout=\"inline\"\r\n                onChange={debounce((value) => {\r\n                    handleChange(value);\r\n                }, 400)}\r\n                formDefaultValue={defaultFilters}\r\n            >\r\n                <Text name=\"str\" placeholder=\"Origin/origin prefix/destination\" style={{display: 'inline-block'}}/>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\nexport default FormHOC (AccessListFiltersFilter, filtersModel,300);","import React from 'react';\r\nimport FormAddFilter from './FormAddFilter/FormAddFilter';\r\nimport AccessListFiltersSettings from './AccessListFiltersSettings/AccessListFiltersSettings';\r\nimport ModalRemoveFilter from \"./ModalRemoveFilter/ModalRemoveFilter\";\r\nimport AccessListFiltersTable from './AccessListFiltersTable/AccessListFiltersTable';\r\nimport AccessListFiltersFilter from \"./AccessListFiltersFilter/AccessListFiltersFilter\";\r\nimport \"./AccessListFilters.css\";\r\nimport {unsetAccessListNotificationSettings} from \"../../../../actions\";\r\n\r\nexport default class extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.currentItemData = {};\r\n        this.state = {\r\n            data: [],\r\n            filter: {},\r\n            isLoading: false,\r\n            editedItemId: null,\r\n            showModalItemRemove: false,\r\n            showModalItemEdit: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getItems(this.props.accountId);\r\n        this.props.getNotificationSettings(this.props.accountId);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.unsetNotificationSettings()\r\n    }\r\n\r\n    shouldComponentUpdate({items}) {\r\n        if (items !== this.props.items) {\r\n            this.setState({data: items});\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getItems = () => {\r\n        this.props.getItems(this.props.accountId);\r\n    };\r\n\r\n    handleEditFilter = async (accountId, alf_key, data) => {\r\n        return await this.props.modifyItem(accountId, alf_key, data);\r\n    };\r\n\r\n    handleRemoveFilter = (rowData) => {\r\n        this.currentItemData = {...rowData};\r\n        this.setState({\r\n            showModalItemRemove: true\r\n        });\r\n    };\r\n\r\n\r\n    onChangeFilter = (filter) => {\r\n        this.setState({\r\n            filter: filter,\r\n            isLoading: false,\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        const {accountId, itemsLoading} = this.props;\r\n        const {worldzoneList, destinationList, subdestinationList} = this.props;\r\n        const {data} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <AccessListFiltersSettings\r\n                    accountId={accountId}\r\n                    handleSubmit={this.props.modifyNotificationSettings}\r\n                    settings={this.props.notificationSettings}/>\r\n\r\n                <AccessListFiltersFilter\r\n                    onChange={this.onChangeFilter}\r\n                    defaultFilters={this.state.filter}\r\n                />\r\n\r\n                <AccessListFiltersTable\r\n                    filter={this.state.filter}\r\n                    accountId={accountId}\r\n                    data={data}\r\n                    loading={itemsLoading || this.state.isLoading}\r\n                    height={'30%'}\r\n                    onRemoveItem={this.handleRemoveFilter}\r\n                    onEditItem={this.handleEditFilter}\r\n                    onItemShowEdit={this.handleFilterShowEdit}\r\n                    update={this.getItems}\r\n                    {...{worldzoneList, destinationList, subdestinationList}}\r\n                />\r\n\r\n                <FormAddFilter\r\n                {...{worldzoneList, destinationList, subdestinationList}}\r\n                addItem={this.props.addItem}\r\n                accountId={this.props.accountId}\r\n                update={this.getItems}/>\r\n\r\n                {this.state.showModalItemRemove &&\r\n                <ModalRemoveFilter\r\n                    account_id={accountId}\r\n                    data={this.currentItemData}\r\n                    handleClose={ () => this.setState(\r\n                        {showModalItemRemove: false}\r\n                    ) }\r\n                    update={this.getItems}/>\r\n                }\r\n            </div>\r\n        );\r\n\r\n    }\r\n}","import React from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    getAccessListFiltersItems,\r\n    createNewAccessListFiltersItem,\r\n    modifyAccessListFiltersItem,\r\n    removeAccessListFiltersItem,\r\n\r\n    getAccessListNotificationSettings,\r\n    unsetAccessListNotificationSettings,\r\n    modifyAccessListNotificationSettings\r\n} from \"../../../../actions/accounts\";\r\nimport AccessListFilters from \"./AccessListFilters\";\r\n\r\n\r\nclass AccessListFiltersContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    getAccessListFiltersItems = (accountId) => {\r\n        this.props.getAccessListFiltersItems(accountId);\r\n    };\r\n\r\n    createNewAccessListFiltersItem = (id, data) => {\r\n        const promise = this.props.createNewAccessListFiltersItem(id, data);\r\n        return promise;\r\n    };\r\n\r\n    modifyAccessListFiltersItem = (accountId, alf_key, data) => {\r\n        let promise = this.props.modifyAccessListFiltersItem(accountId, alf_key, data);\r\n        return promise;\r\n    };\r\n\r\n    removeAccessListFiltersItem = (id) => {\r\n        this.props.removeAccessListFiltersItem(id);\r\n    };\r\n\r\n    getAccessListNotificationSettings = (id) => {\r\n        this.props.getAccessListNotificationSettings(id);\r\n    };\r\n\r\n    modifyAccessListNotificationSettings = async (id, data) => {\r\n        let reposone = await this.props.modifyAccessListNotificationSettings(id, data);\r\n        return reposone;\r\n    };\r\n\r\n    render() {\r\n\r\n        let {items, itemsLoading, itemsPage, itemsPerPage} = this.props;\r\n\r\n        return (\r\n            <>\r\n                <AccessListFilters\r\n                    accountId={this.props.match.params.id}\r\n\r\n                    items={items}\r\n                    itemsLoading={itemsLoading}\r\n                    itemsPage={itemsPage}\r\n                    itemsPerPage={itemsPerPage}\r\n\r\n                    notificationSettings={this.props.accessListNotificationSettings}\r\n\r\n                    worldzoneList={this.props.worldzoneList}\r\n                    destinationList={this.props.destinationList}\r\n                    subdestinationList={this.props.subdestinationList}\r\n\r\n                    getNotificationSettings={this.getAccessListNotificationSettings}\r\n                    unsetNotificationSettings={this.props.unsetAccessListNotificationSettings}\r\n                    modifyNotificationSettings={this.modifyAccessListNotificationSettings}\r\n\r\n                    getItems={this.getAccessListFiltersItems}\r\n                    addItem={this.createNewAccessListFiltersItem}\r\n                    modifyItem={this.modifyAccessListFiltersItem}\r\n                    removeItem={this.removeAccessListFiltersItem}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = ({accounts, references}) => {\r\n    return {\r\n        items: accounts.accessListFiltersList,\r\n        itemsLoading: accounts.accessListFiltersListLoading,\r\n        accessListNotificationSettings: accounts.accessListNotificationSettings,\r\n\r\n        worldzoneList: references.worldzone_list,\r\n        destinationList: references.destination_list,\r\n        subdestinationList: references.subdestination_list,\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        getAccessListFiltersItems,\r\n        removeAccessListFiltersItem,\r\n        createNewAccessListFiltersItem,\r\n        modifyAccessListFiltersItem,\r\n\r\n        getAccessListNotificationSettings,\r\n        unsetAccessListNotificationSettings,\r\n        modifyAccessListNotificationSettings,\r\n    }),\r\n    withRouter\r\n)(AccessListFiltersContainer);","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nexport const RadioCSS = styled.div`\r\n    margin-top: -24px;\r\n    margin-bottom: 3px;\r\n`;\r\n\r\nconst FooterActions_ = styled.div`\r\n    width: 100%;\r\n    position:relative;\r\n`;\r\nconst FooterActions__ = styled.div`\r\n    position:absolute;\r\n    right:0;\r\n    top:-68px;\r\n`;\r\nexport const FooterActions = ({children}) => (<FooterActions_><FooterActions__>{children}</FooterActions__></FooterActions_>)\r\n\r\n\r\nexport const Header = styled.div`\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    font-size: 18px;\r\n    line-height: 21px;\r\n    color: #8256C8;\r\n    padding: 15px 0px;\r\n     div {\r\n        display: inline-block;\r\n        width: 50%;\r\n     }\r\n     div:last-child{\r\n         text-align: right\r\n     }\r\n`;\r\n\r\nconst HeaderTrunkActions_ = styled.div`\r\n    width: 100%;\r\n    position:relative;\r\n`;\r\nconst HeaderTrunkActions__ = styled.div`\r\n    position:absolute;\r\n    right:0;\r\n    top:-52px;\r\n`;\r\nexport const HeaderTrunkActions = ({children}) => (<HeaderTrunkActions_>\r\n    <HeaderTrunkActions__>\r\n        {children}\r\n    </HeaderTrunkActions__>\r\n</HeaderTrunkActions_>)","import React from 'react';\r\nimport AccessListFiltersContainer from './AccessListFilters/AccessListFiltersContainer';\r\nimport {Header} from './styled';\r\n\r\n\r\nexport default  class  extends React.Component{\r\n    render () {\r\n        const { account_id, accessListLoading } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <Header>Access list mailing</Header>\r\n                <AccessListFiltersContainer/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import {API_CREATE_KEY, API_DELETE_KEY, API_MODIFY_KEY, API_PAGE as PREFIX, API_PAGE_LIST} from '../const';\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from './defaults';\r\nimport {Alert} from 'rsuite';\r\n\r\nconst setKeyList = createAction('SET_ITEMS_' + PREFIX);\r\nconst setCreateKey = createAction(API_CREATE_KEY);\r\nconst setModifyKey = createAction(API_MODIFY_KEY);\r\nconst setDeleteKey = createAction(API_DELETE_KEY);\r\n\r\nexport const getKeyList = (id) => (dispatch) => {\r\n    api(API_PAGE_LIST, {target: {account_id: id}}).then((response) => {\r\n        if (response !== undefined) {\r\n            dispatch(setKeyList({\r\n                keyList: response.account_apikey_list || []\r\n            }));\r\n        }\r\n    });\r\n};\r\n\r\nexport const createApiKey = (account_apikey, id) => async (dispatch) => {\r\n    await api(API_CREATE_KEY, {\r\n        account_apikey: {\r\n            active: account_apikey.active,\r\n            access_list: account_apikey.access_list\r\n        },\r\n        target: {account_id: id}\r\n    }).then((response) => {\r\n        if (response !== undefined) {\r\n            const api_key = response.account_apikey.api_key;\r\n            dispatch(setCreateKey({\r\n                apiKey: api_key\r\n            }));\r\n            Alert.success(`${api_key} has been created`);\r\n\r\n            api(API_PAGE_LIST, {target: {account_id: id}}).then((response) => {\r\n                if (response !== undefined) {\r\n                    dispatch(setKeyList({\r\n                        keyList: response.account_apikey_list || []\r\n                    }));\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nexport const modifyApiKey = (account_apikey, id, api_key) => async (dispatch) => {\r\n    await api(API_MODIFY_KEY, {\r\n        target: {api_key, account_id: id},\r\n        account_apikey: {active: account_apikey.active, access_list: account_apikey.access_list}\r\n    }).then((response) => {\r\n        if (response !== undefined) {\r\n            const api_key = response.account_apikey.api_key;\r\n            dispatch(setModifyKey({\r\n                apiKey: api_key\r\n            }));\r\n\r\n            Alert.success(`${api_key} has been modified`);\r\n\r\n            api(API_PAGE_LIST, {target: {account_id: id}}).then((response) => {\r\n                if (response !== undefined) {\r\n                    dispatch(setKeyList({\r\n                        keyList: response.account_apikey_list || []\r\n                    }));\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nexport const deleteApiKey = (api_key, id) => async (dispatch) => {\r\n    await api(API_DELETE_KEY, {target: {api_key}}).then((response) => {\r\n        if (response !== undefined) {\r\n            const api_key = response.account_apikey.api_key;\r\n            dispatch(setDeleteKey({\r\n                apiKey: api_key\r\n            }));\r\n\r\n            Alert.success(`${api_key} has been deleted`);\r\n\r\n            api(API_PAGE_LIST, {target: {account_id: id}}).then((response) => {\r\n                if (response !== undefined) {\r\n                    dispatch(setKeyList({\r\n                        keyList: response.account_apikey_list || []\r\n                    }));\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport FormHOC from 'hoc/FilltersForm';\r\nimport List from 'rsuite/es/List';\r\nimport Button from 'rsuite/es/Button';\r\nimport Icon from 'rsuite/es/Icon';\r\nimport {Alert, Schema, Tooltip} from 'rsuite'\r\nimport Whisper from 'rsuite/es/Whisper';\r\nimport Modal from 'components/Modal';\r\nimport Message from 'rsuite/es/Message';\r\nimport styled from \"styled-components\";\r\nimport Divider from 'rsuite/es/Divider';\r\nimport Checkbox from 'rsuite/es/Checkbox';\r\nimport {arrayToObjectSpecialKey, compareTwoArrays, copyToClipboard} from '../../../utils'\r\nimport Form from 'rsuite/es/Form';\r\nimport FormGroup from 'rsuite/es/FormGroup';\r\nimport FormControl from 'rsuite/es/FormControl';\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\nconst rangeSchemaRanges = Schema.Model({\r\n    ip_range_start: StringType().isRequired('This field is required')\r\n        .addRule((value, data) => {\r\n            if (Object.keys(data).length && data.ip_range_end && data.ip_range_end.length && value.length) {\r\n                const ip_range_start_values = value.split('.');\r\n                const ip_range_end_values = data.ip_range_end.split('.');\r\n                let sumFirstIp = 0;\r\n                let sumSecondIp = 0;\r\n                for (const [idx, val] of ip_range_start_values.entries()) {\r\n                    let firstIpValue = parseInt(val);\r\n                    let secondIpValue = parseInt(ip_range_end_values[idx]);\r\n\r\n                    if (idx === 0) {\r\n                        firstIpValue = firstIpValue * 10000000;\r\n                        secondIpValue = secondIpValue * 10000000;\r\n                    } else if (idx === 1) {\r\n                        firstIpValue = firstIpValue * 10000;\r\n                        secondIpValue = secondIpValue * 10000;\r\n\r\n                    } else if (idx === 2) {\r\n                        firstIpValue = firstIpValue * 10;\r\n                        secondIpValue = secondIpValue * 10;\r\n                    }\r\n\r\n                    sumFirstIp += sumFirstIp + firstIpValue;\r\n                    sumSecondIp += sumSecondIp + secondIpValue;\r\n                }\r\n\r\n                return sumFirstIp <= sumSecondIp;\r\n            }\r\n            return true;\r\n        }, 'Start range is over than end range'),\r\n    ip_range_end: StringType().isRequired('This field is required')\r\n});\r\n\r\nconst rangeSchema = Schema.Model({\r\n    ip_range_start: StringType().isRequired('This field is required')\r\n        .pattern(/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/, 'Please enter correct IP Address'),\r\n    ip_range_end: StringType().isRequired('This field is required')\r\n        .pattern(/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/, 'Please enter correct IP Address')\r\n});\r\n\r\nconst rangeSchemaCreate = Schema.Model({\r\n    ip_range_start: StringType()\r\n        .addRule((value, data) => {\r\n            if (Object.keys(data).length && data.ip_range_end && data.ip_range_end.length && value.length) {\r\n                const ip_range_start_values = value.split('.');\r\n                const ip_range_end_values = data.ip_range_end.split('.');\r\n                let sumFirstIp = 0;\r\n                let sumSecondIp = 0;\r\n                for (const [idx, val] of ip_range_start_values.entries()) {\r\n                    let firstIpValue = parseInt(val);\r\n                    let secondIpValue = parseInt(ip_range_end_values[idx]);\r\n\r\n                    if (idx === 0) {\r\n                        firstIpValue = firstIpValue * 10000000;\r\n                        secondIpValue = secondIpValue * 10000000;\r\n                    } else if (idx === 1) {\r\n                        firstIpValue = firstIpValue * 10000;\r\n                        secondIpValue = secondIpValue * 10000;\r\n\r\n                    } else if (idx === 2) {\r\n                        firstIpValue = firstIpValue * 10;\r\n                        secondIpValue = secondIpValue * 10;\r\n                    }\r\n\r\n                    sumFirstIp += sumFirstIp + firstIpValue;\r\n                    sumSecondIp += sumSecondIp + secondIpValue;\r\n                }\r\n\r\n                return sumFirstIp <= sumSecondIp;\r\n            }\r\n            return true;\r\n        }, 'Start range is over than end range')\r\n        .pattern(/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/, 'Please enter correct IP Address'),\r\n    ip_range_end: StringType()\r\n        .pattern(/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/, 'Please enter correct IP Address')\r\n});\r\n\r\nconst rangeSchemaUnited = Schema.Model({\r\n    ip_range_start: StringType().isRequired('This field is required')\r\n        .addRule((value, data) => {\r\n            if (Object.keys(data).length && data.ip_range_end && data.ip_range_end.length && value.length) {\r\n                const ip_range_start_values = value.split('.');\r\n                const ip_range_end_values = data.ip_range_end.split('.');\r\n                let sumFirstIp = 0;\r\n                let sumSecondIp = 0;\r\n                for (const [idx, val] of ip_range_start_values.entries()) {\r\n                    let firstIpValue = parseInt(val);\r\n                    let secondIpValue = parseInt(ip_range_end_values[idx]);\r\n\r\n                    if (idx === 0) {\r\n                        firstIpValue = firstIpValue * 10000000;\r\n                        secondIpValue = secondIpValue * 10000000;\r\n                    } else if (idx === 1) {\r\n                        firstIpValue = firstIpValue * 10000;\r\n                        secondIpValue = secondIpValue * 10000;\r\n\r\n                    } else if (idx === 2) {\r\n                        firstIpValue = firstIpValue * 10;\r\n                        secondIpValue = secondIpValue * 10;\r\n                    }\r\n\r\n                    sumFirstIp += sumFirstIp + firstIpValue;\r\n                    sumSecondIp += sumSecondIp + secondIpValue;\r\n                }\r\n\r\n                return sumFirstIp <= sumSecondIp;\r\n            }\r\n            return true;\r\n        }, 'Start range is over than end range')\r\n        .pattern(/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/, 'Please enter correct IP Address'),\r\n    ip_range_end: StringType().isRequired('This field is required')\r\n        .pattern(/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/, 'Please enter correct IP Address')\r\n});\r\n\r\nexport default FormHOC(({\r\n    keyList, modifyApiKey, deleteApiKey, account_id, addedNewApiKey, onAddedNewApiKey\r\n}) => {\r\n    const [apiKeyList, onChangeApiKeyList] = useState(keyList);\r\n    const refTextAreaDict = {};\r\n    const [formApiKey, onChangeFormApiKey] = useState({});\r\n    const [activeDeleteModal, onChangeActiveDeleteModal] = useState(false);\r\n    const [apiKeyDeleteModal, onChangeApiKeyDeleteModal] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const newObject = arrayToObjectSpecialKey(keyList, 'api_key');\r\n        onChangeFormApiKey(newObject);\r\n\r\n        if (!compareTwoArrays(keyList, apiKeyList)) {\r\n            onChangeApiKeyList(keyList);\r\n        }\r\n    }, [keyList]);\r\n\r\n    return (\r\n        <>\r\n            <span className=\"api_page_keylist-header\">Key List\r\n                <Whisper placement=\"bottom\" trigger=\"hover\" speaker={<Tooltip>You can copy, modify or delete any api key</Tooltip>}>\r\n                    <Icon className=\"api_page_keylist_header-icon\" icon=\"info\"/>\r\n                </Whisper>\r\n            </span>\r\n            {apiKeyList && apiKeyList.length ? <>\r\n                <StyledApiList\r\n                    bordered\r\n                >\r\n                    {\r\n                        apiKeyList.map(key => {\r\n                            return <ApiListItem\r\n                                item={key}\r\n                                {...{\r\n                                    account_id,\r\n                                    formApiKey,\r\n                                    refTextAreaDict,\r\n                                    modifyApiKey,\r\n                                    addedNewApiKey,\r\n                                    onAddedNewApiKey,\r\n                                    onChangeFormApiKey,\r\n                                    onChangeActiveDeleteModal,\r\n                                    onChangeApiKeyDeleteModal\r\n                                }}\r\n                            />\r\n                        })\r\n                    }\r\n                </StyledApiList>\r\n            </> :\r\n                <Message\r\n                    className=\"api_page_keylist_boxgrid_empty-message\"\r\n                    description=\"You don't have any api key. Create one please\"\r\n                />\r\n            }\r\n            {activeDeleteModal &&\r\n                <Modal\r\n                    footer\r\n                    title=\"Warning\"\r\n                    show={activeDeleteModal}\r\n                    onClose={() => onChangeActiveDeleteModal(false)}\r\n                    onSuccess={() => {\r\n                        deleteApiKey(apiKeyDeleteModal, account_id);\r\n                        onChangeActiveDeleteModal(false);\r\n                    }}\r\n                >\r\n                    This api key will be deleted\r\n                </Modal>\r\n            }\r\n        </>\r\n    )\r\n});\r\n\r\nconst ApiListItem = ({\r\n     item = {},\r\n     account_id,\r\n     formApiKey,\r\n     modifyApiKey,\r\n     addedNewApiKey,\r\n     onAddedNewApiKey,\r\n     refTextAreaDict,\r\n     onChangeFormApiKey,\r\n     onChangeActiveDeleteModal,\r\n     onChangeApiKeyDeleteModal\r\n}) => {\r\n    const initItemData = JSON.parse(JSON.stringify(item));\r\n\r\n    if (item && Object.keys(item).length) {\r\n        return (<List.Item className=\"list-item\">\r\n            <>\r\n                <span className=\"api_key\">{item.api_key}</span>\r\n                <ApiButtonsPanel\r\n                    {...{\r\n                        item,\r\n                        refTextAreaDict,\r\n                        onChangeActiveDeleteModal,\r\n                        onChangeApiKeyDeleteModal\r\n                    }}\r\n                />\r\n                <Divider className=\"api_key_divider\" vertical/>\r\n                <ApiKeyOptions\r\n                    {...{\r\n                        item,\r\n                        initItemData,\r\n                        formApiKey,\r\n                        account_id,\r\n                        modifyApiKey,\r\n                        addedNewApiKey,\r\n                        onAddedNewApiKey,\r\n                        onChangeFormApiKey\r\n                    }}\r\n                />\r\n            </>\r\n        </List.Item>);\r\n    } else {\r\n        return <></>\r\n    }\r\n};\r\n\r\nconst ApiButtonsPanel = ({\r\n    item,\r\n    refTextAreaDict,\r\n    onChangeActiveDeleteModal,\r\n    onChangeApiKeyDeleteModal\r\n}) => {\r\n    refTextAreaDict[item.key] = {};\r\n\r\n    const onCopy = (text) => {\r\n        copyToClipboard(text);\r\n\r\n        Alert.success(`Copied!`);\r\n    };\r\n    return <StyledButtonPanel>\r\n        <Button\r\n            className=\"api_page_keylist_boxgrid_wrapper_panel-button\"\r\n            appearance=\"primary\"\r\n            onClick={() => {\r\n                onCopy(item.api_key)\r\n            }}\r\n        >\r\n            Copy\r\n            <Icon\r\n                inverse\r\n                className=\"api_page_keylist_boxgrid_wrapper_panel_button-icon copy\"\r\n                icon=\"copy-o\"\r\n            />\r\n        </Button>\r\n        <Button\r\n            className=\"api_page_keylist_boxgrid_wrapper_panel-button\"\r\n            appearance=\"primary\"\r\n            onClick={() => {\r\n                onChangeActiveDeleteModal(true);\r\n                onChangeApiKeyDeleteModal(item.api_key)\r\n            }}\r\n        >\r\n            Delete\r\n            <Icon\r\n                reverse\r\n                className=\"api_page_keylist_boxgrid_wrapper_panel_button-icon delete\"\r\n                icon=\"exclamation-triangle\"\r\n            />\r\n        </Button>\r\n    </StyledButtonPanel>\r\n};\r\n\r\nconst ApiKeyOptions = ({\r\n    item, account_id, initItemData, modifyApiKey, addedNewApiKey, onAddedNewApiKey\r\n}) => {\r\n    const [rangeRows, onChangeRangeRows] = useState(item.access_list);\r\n    const [createFormError, onChangeCreateFormError] = useState([]);\r\n    const [rangeChecker, onCheckRange] = useState(item.access_list && item.access_list.length\r\n        ? [...Array(item.access_list)].map((_) =>{ return {ip_range_start: \"\", ip_range_end: \"\"}}) : []);\r\n    const [valueSuccess, onChangeValueSuccess] = useState(false);\r\n    const [helpModal, onShowHelpModal] = useState(false);\r\n    const [someHasError, setSomeHasError] = useState(false);\r\n    const [newRangeValue, onChangeNewRange] = useState({ip_range_start: \"\", ip_range_end: \"\"});\r\n    const [newRangeChecker, onCheckNewRange] = useState({});\r\n    const [newActiveValue, onChangeNewActive] = useState(item.active);\r\n\r\n    useEffect(() => {\r\n        onChangeRangeRows(item.access_list);\r\n    }, [item]);\r\n\r\n    useEffect(() => {\r\n        if (addedNewApiKey) {\r\n            onCheckNewRange({});\r\n            onChangeNewRange({ip_range_start: \"\", ip_range_end: \"\"});\r\n            onAddedNewApiKey(false)\r\n        }\r\n    }, [addedNewApiKey]);\r\n\r\n    useEffect(() => {\r\n        const containError = rangeChecker.length && rangeChecker.some(item => {\r\n            return !!(\r\n                item.ip_range_start && (item.ip_range_start.hasOwnProperty('hasError') && item.ip_range_start.hasError) ||\r\n                item.ip_range_end && (item.ip_range_end.hasOwnProperty('hasError')  && item.ip_range_end.hasError) ||\r\n                (Object.keys(createFormError).length && Object.keys(createFormError).some(key => Object.keys(createFormError[key]).length && (createFormError[key].ip_range_start || createFormError[key].ip_range_end)))\r\n            );\r\n        });\r\n        setSomeHasError(containError);\r\n    }, [rangeChecker, createFormError]);\r\n\r\n    const showCreateButton = !someHasError && (\r\n        (newActiveValue !== (initItemData.hasOwnProperty(\"active\") && initItemData.active)) ||\r\n        !compareTwoArrays(\r\n            rangeRows,\r\n            (initItemData.hasOwnProperty(\"access_list\") && initItemData.access_list)));\r\n\r\n    return (<>\r\n        <Checkbox\r\n            name=\"active\"\r\n            className=\"form_status\"\r\n            onChange={(value, checked) => onChangeNewActive(checked)}\r\n            defaultChecked={initItemData.hasOwnProperty(\"active\") ? initItemData.active : false}\r\n        >\r\n            Active\r\n        </Checkbox>\r\n        <List className=\"api_optional\">\r\n            {rangeRows.map((range, idx) => {\r\n                let hasError = null;\r\n                if (rangeChecker[idx] && Object.keys(rangeChecker[idx]).length) {\r\n                    hasError = rangeChecker[idx].ip_range_end && rangeChecker[idx].ip_range_end.hasError\r\n                        || rangeChecker[idx].ip_range_start && rangeChecker[idx].ip_range_start.hasError;\r\n                }\r\n                return (<List.Item className={`api_optional_list_item ${hasError ? 'has_error' : ''}`}>\r\n                    {<Modal\r\n                        show={helpModal}\r\n                        title=\"Insecure IP range\"\r\n                        onClose={() => {\r\n                            onChangeValueSuccess(true);\r\n                            onShowHelpModal(false)\r\n                        }}\r\n                        footer={true}\r\n                        successText=\"Confirm\"\r\n                        onSuccess={() => {\r\n                            onChangeValueSuccess(true);\r\n                            onShowHelpModal(false)\r\n                        }}\r\n                    >\r\n                        This IP range is insecure. Do you really want to open this?\r\n                    </Modal>}\r\n                    <Form\r\n                        model={rangeSchema}\r\n                        className=\"api_page_create_modal-form\"\r\n                        onCheck={(error) => {\r\n                            const newCreateFormError = {...createFormError};\r\n                            const formHasError = Object.keys(error).length;\r\n                            if (formHasError) {\r\n                                if (!Object.keys(newCreateFormError).includes(idx)) {\r\n                                    const oldError = newCreateFormError[idx] ? newCreateFormError[idx] : {};\r\n                                    newCreateFormError[idx] = Object.assign(oldError, error);\r\n                                }\r\n                            } else {\r\n                                delete newCreateFormError[idx];\r\n                            }\r\n                            onChangeCreateFormError(newCreateFormError)\r\n                        }}\r\n                        onChange={(value) => {\r\n                            if (value.ip_range_start && value.ip_range_end\r\n                                && (value.ip_range_start === \"0.0.0.0\"\r\n                                && value.ip_range_end === \"255.255.255.255\" && !valueSuccess)\r\n                            ) {\r\n                                onShowHelpModal(true)\r\n                                onChangeValueSuccess(true)\r\n                            } else {\r\n                                const newRangeChecker = [...rangeChecker];\r\n\r\n                                newRangeChecker[idx] = rangeSchemaRanges.check(value);\r\n                                onCheckRange(newRangeChecker)\r\n                                onChangeValueSuccess(false)\r\n                            }\r\n\r\n                        }}\r\n                        formValue={{ip_range_start: range.ip_range_start, ip_range_end: range.ip_range_end}}\r\n                        disabled={hasError}\r\n                    >\r\n                        <FormGroup className={\"optional_form_group\"}>\r\n                            <span className=\"index\">{idx + 1}</span>\r\n                            <FormControl\r\n                                name=\"ip_range_start\"\r\n                                placeholder=\"0.0.0.0\"\r\n                                className=\"api_page_item_input range_start\"\r\n                                onChange={(value) => {\r\n                                    range.ip_range_start = value;\r\n                                }}\r\n                                errorMessage={createFormError[idx] && createFormError[idx]['ip_range_start']  ? createFormError[idx]['ip_range_start'] : null}\r\n                            />\r\n                            <span className=\"separator\">to</span>\r\n                            <FormControl\r\n                                name=\"ip_range_end\"\r\n                                placeholder=\"255.255.255.255\"\r\n                                className=\"api_page_item_input range_end\"\r\n                                onChange={(value) => {\r\n                                    range.ip_range_end = value;\r\n                                }}\r\n                                errorMessage={createFormError[idx] && createFormError[idx]['ip_range_end'] ? createFormError[idx]['ip_range_end'] : null}\r\n                            />\r\n                        </FormGroup>\r\n                        {hasError && <Whisper placement=\"top\" trigger=\"click\" speaker={\r\n                            <Tooltip>\r\n                                {\r\n                                    rangeChecker[idx] && rangeChecker[idx].ip_range_start && rangeChecker[idx].ip_range_start.hasError\r\n                                        ? rangeChecker[idx].ip_range_start.errorMessage\r\n                                        : 'Empty range is not available'\r\n                                }\r\n                            </Tooltip>}\r\n                        >\r\n                            <Icon className=\"range_exclamation\" inverse icon=\"exclamation-triangle\"/>\r\n                        </Whisper>}\r\n                    </Form>\r\n                    {rangeRows.length > 1 && <Button\r\n                        disabled={someHasError}\r\n                        onClick={() => {\r\n                            const newList = [...rangeRows];\r\n                            const newCreateFormError = {...createFormError};\r\n                            const newRangeChecker = {...rangeChecker};\r\n                            newList.splice(idx, 1);\r\n                            delete newRangeChecker[idx];\r\n                            delete newCreateFormError[idx];\r\n\r\n                            const createFormErrorList = Object.values(newCreateFormError).map((value, index) => {\r\n                                return {[index]: value}\r\n                            });\r\n                            const rangeCheckerList = Object.values(newRangeChecker).map((value, index) => {\r\n                                return {[index]: value}\r\n                            });\r\n                            const nextCreateFormError = Object.assign({}, ...createFormErrorList);\r\n                            const nextRangeChecker = [...rangeCheckerList];\r\n\r\n                            onChangeCreateFormError(nextCreateFormError);\r\n                            onCheckRange(nextRangeChecker);\r\n                            onChangeRangeRows(newList);\r\n                        }}\r\n                        className=\"range_delete\"\r\n                    >\r\n                        <Icon icon=\"trash\"/>\r\n                    </Button>}\r\n                </List.Item>);\r\n            })}\r\n            {(() => {\r\n                let newRangeHasError = (!newRangeValue.ip_range_start || !newRangeValue.ip_range_end)\r\n                    || Object.keys(newRangeChecker).some(key => newRangeChecker[key].hasError);\r\n\r\n                return (<StyledNewRangeListItem\r\n                    changed={showCreateButton}\r\n                    className=\"api_optional_list_item\"\r\n                >\r\n                    <Form\r\n                        model={rangeSchemaCreate}\r\n                        formValue={newRangeValue}\r\n                        onChange={(formValue) => {\r\n                            if (formValue.ip_range_start && formValue.ip_range_end\r\n                                && (formValue.ip_range_start === \"0.0.0.0\"\r\n                                    && formValue.ip_range_end === \"255.255.255.255\" && !valueSuccess)\r\n                            ) {\r\n                                onShowHelpModal(true);\r\n                                onChangeValueSuccess(true);\r\n                                onChangeNewRange(formValue);\r\n                            } else {\r\n                                const check = rangeSchemaCreate.check(formValue);\r\n                                onCheckNewRange(check);\r\n                                onChangeNewRange(formValue);\r\n                                onChangeValueSuccess(false)\r\n                            }\r\n                        }}\r\n                    >\r\n                        <FormGroup className=\"optional_form_group\">\r\n                            <span className=\"index\">{rangeRows.length + 1}</span>\r\n                            <FormControl\r\n                                name=\"ip_range_start\"\r\n                                placeholder=\"0.0.0.0\"\r\n                                errorMessage={newRangeChecker.hasOwnProperty(\"ip_range_start\")\r\n                                    && newRangeChecker.ip_range_start.hasError ? newRangeChecker.ip_range_start.errorMessage : \"\"}\r\n                                value={newRangeValue.hasOwnProperty(\"ip_range_start\") ? newRangeValue.ip_range_start : \"\"}\r\n                                className=\"api_page_item_input range_start\"\r\n                            />\r\n                            <span className=\"separator\">to</span>\r\n                            <FormControl\r\n                                name=\"ip_range_end\"\r\n                                placeholder=\"255.255.255.255\"\r\n                                errorMessage={newRangeChecker.hasOwnProperty(\"ip_range_end\")\r\n                                    && newRangeChecker.ip_range_end.hasError ? newRangeChecker.ip_range_end.errorMessage : \"\"}\r\n                                value={newRangeValue.hasOwnProperty(\"ip_range_end\") ? newRangeValue.ip_range_end : \"\"}\r\n                                className=\"api_page_item_input range_end\"\r\n                            />\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <Button\r\n                        appearance=\"primary\"\r\n                        className=\"api_page_add_new_button\"\r\n                        onClick={() => {\r\n                            const newList = [...rangeRows];\r\n                            newList.push(newRangeValue);\r\n                            onChangeRangeRows(newList);\r\n                            onChangeNewRange({ip_range_start: \"\", ip_range_end: \"\"})\r\n                        }}\r\n                        disabled={newRangeHasError}\r\n                    >\r\n                        <Icon icon=\"plus\"/>\r\n                    </Button>\r\n                </StyledNewRangeListItem>);\r\n            })()}\r\n            {!someHasError && (\r\n                (newActiveValue !== (initItemData.hasOwnProperty(\"active\") && initItemData.active)) ||\r\n                !compareTwoArrays(rangeRows, (initItemData.hasOwnProperty(\"access_list\") && initItemData.access_list)))\r\n            && <List.Item className=\"api_optional_list_item save_button\">\r\n                <Button\r\n                    appearance=\"primary\"\r\n                    className=\"api_page_add_new_button\"\r\n                    onClick={() => {\r\n                        modifyApiKey({access_list: rangeRows, active: newActiveValue}, account_id, item.api_key)\r\n                    }}\r\n                >\r\n                    Confirm changes\r\n                </Button>\r\n            </List.Item>}\r\n        </List>\r\n        <Icon className={`app_key_status ${newActiveValue ? \"activated\" : \"deactivated\"}`} icon={newActiveValue ? \"play\" : \"pause\"}/>\r\n    </>)\r\n};\r\n\r\nconst StyledApiList = styled(List)`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    .list-item {\r\n        width: 1200px;\r\n    }\r\n    .api_key {\r\n        width: 275px;\r\n        display: inline-block; \r\n    }\r\n    .api_key_divider {\r\n        height: 24px;\r\n    }\r\n   .app_key_status {\r\n        position: absolute;\r\n        top: 5px;\r\n        right: 5px;\r\n   }\r\n    .app_key_status.activated {\r\n        font-size: 10px;\r\n    }\r\n    .app_key_status.deactivated {\r\n        font-size: 9px;\r\n    }\r\n    .rs-list-item-content {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n    }\r\n    .form_status {\r\n        width: 120px;\r\n    }\r\n    .optional_form_group .rs-form-control-wrapper {\r\n        width: auto;\r\n    }\r\n    .rs-list-item.api_optional_list_item {\r\n        padding-top: 0;\r\n        width: 500px;\r\n        box-shadow: none;\r\n    }\r\n    .rs-list.api_optional {\r\n        width: 520px;\r\n        box-shadow: none;\r\n    }\r\n    .rs-list.api_optional:last-child .api_optional_list_item {\r\n        padding-bottom: 0;\r\n    }\r\n    .rs-list.api_optional:last-child .optional_form_group {\r\n        margin-bottom: 0;\r\n    }\r\n    .rs-list.api_optional .api_optional_list_item.add_new_range {\r\n        padding-bottom: 30px;\r\n    }\r\n    .api_optional_list_item .range_exclamation.rs-icon.rs-icon-exclamation-triangle.rs-icon-inverse {\r\n        display: none;\r\n    }\r\n    .api_optional_list_item .index {\r\n        background: white;\r\n        color: gray;\r\n        border: 1px solid #E5E5EA;\r\n        border-right: 0;\r\n        height: 36px;\r\n        width: 34px;\r\n        position: relative;\r\n        display: inline-block;\r\n        float: left;\r\n        padding-top: 6px;\r\n        padding-left: 13px;\r\n        border-top-left-radius: 5px;\r\n        border-bottom-left-radius: 5px;\r\n    }\r\n    .api_optional_list_item .separator {\r\n        background: white;\r\n        color: gray;\r\n        border: 1px solid #E5E5EA;\r\n        border-right: 0;\r\n        border-left: 0;\r\n        height: 36px;\r\n        width: 34px;\r\n        position: relative;\r\n        display: inline-block;\r\n        padding-top: 6px;\r\n        padding-left: 13px;\r\n        top: -1px;\r\n    }\r\n    .api_optional_list_item.save_button {\r\n        padding-bottom: 0 !important;\r\n    }\r\n    .optional_form_group {\r\n        margin-bottom: 0 !important;\r\n    }\r\n    .api_page_add_new_button {\r\n\r\n    }\r\n    .api_page_item_input {\r\n        border-radius: 0;\r\n    }\r\n    .api_page_item_input.range_end {\r\n        border-bottom-right-radius: 6px;\r\n        border-top-right-radius: 6px;\r\n    }\r\n    .api_optional_list_item.has_error {\r\n        .api_page_item_input, span.index, span.separator {\r\n            border-color: #ff7f7f;\r\n        }\r\n    }\r\n    .rs-input.api_page_item_input {\r\n        width: 190px;\r\n    }\r\n`;\r\nconst StyledNewRangeListItem = styled(List.Item)`\r\n    padding-bottom: ${props => \r\n        !props.changed ? \"27px !important\" : \"13px !important\"\r\n    }\r\n`;\r\n\r\nconst StyledButtonPanel = styled.div`\r\n    display: inline-block;\r\n    width: 180px;\r\n    \r\n    .rs-btn {\r\n        margin-left: 5px;\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport styled, {css} from 'styled-components';\r\nimport {FlexGrid, FlexGridItem} from \"./FlexGrid\";\r\nimport {APP_TYPE_CLIENT} from \"../../const\";\r\n\r\nconst StyledPageHeader = styled.div`\r\n    padding-bottom: 15px;\r\n    padding-top: 15px;\r\n    width: 100%;\r\n    \r\n    h1 {\r\n        font-family: inherit;\r\n        font-weight: 400;\r\n        font-size: 18px;\r\n        line-height: 21px;\r\n        color: var(--color-brand1);\r\n    }\r\n    \r\n    ${props => props.theme.appType === APP_TYPE_CLIENT && css`\r\n        padding-top: 10px;\r\n        padding-bottom: 25px;\r\n        \r\n        h1 {\r\n            font-size: 1.3rem;\r\n            font-weight: 600;\r\n            line-height: 1.2em;\r\n        }\r\n    `}\r\n`;\r\n\r\nexport default ({title, children, ...props}) => (\r\n    <StyledPageHeader\r\n        className=\"page-header\"\r\n        {...props}\r\n    >\r\n        <FlexGrid justify=\"space-between\" align=\"middle\">\r\n            {title &&\r\n                <FlexGridItem><h1>{title}</h1></FlexGridItem>\r\n            }\r\n            <FlexGridItem>{children}</FlexGridItem>\r\n        </FlexGrid>\r\n    </StyledPageHeader>\r\n);","import React, {useState, useEffect} from 'react';\r\nimport Modal from 'components/Modal';\r\nimport Checkbox from 'rsuite/es/Checkbox';\r\nimport FlexboxGrid from 'rsuite/es/FlexboxGrid';\r\nimport List from 'rsuite/es/List';\r\nimport Form from 'rsuite/es/Form';\r\nimport FormGroup from 'rsuite/es/FormGroup';\r\nimport FormControl from 'rsuite/es/FormControl';\r\nimport Button from 'rsuite/es/Button';\r\nimport {Schema} from 'rsuite';\r\nimport Icon from 'rsuite/es/Icon';\r\nimport Tooltip from 'rsuite/es/Tooltip';\r\nimport Whisper from 'rsuite/es/Whisper';\r\nimport Message from 'rsuite/es/Message';\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\nconst rangeSchemaRanges = Schema.Model({\r\n    ip_range_start: StringType()\r\n        .addRule((value, data) => {\r\n            if (Object.keys(data).length && data.ip_range_end && data.ip_range_end.length && value.length) {\r\n                const ip_range_start_values = value.split('.');\r\n                const ip_range_end_values = data.ip_range_end.split('.');\r\n                let sumFirstIp = 0;\r\n                let sumSecondIp = 0;\r\n                for (const [idx, val] of ip_range_start_values.entries()) {\r\n                    let firstIpValue = parseInt(val);\r\n                    let secondIpValue = parseInt(ip_range_end_values[idx]);\r\n\r\n                    if (idx === 0) {\r\n                        firstIpValue = firstIpValue * 10000000;\r\n                        secondIpValue = secondIpValue * 10000000;\r\n                    } else if (idx === 1) {\r\n                        firstIpValue = firstIpValue * 10000;\r\n                        secondIpValue = secondIpValue * 10000;\r\n\r\n                    } else if (idx === 2) {\r\n                        firstIpValue = firstIpValue * 10;\r\n                        secondIpValue = secondIpValue * 10;\r\n                    }\r\n\r\n                    sumFirstIp += sumFirstIp + firstIpValue;\r\n                    sumSecondIp += sumSecondIp + secondIpValue;\r\n                }\r\n\r\n                return sumFirstIp <= sumSecondIp;\r\n            }\r\n            return true;\r\n        }, 'Start range is over than end range'),\r\n    ip_range_end: StringType()\r\n});\r\n\r\nconst rangeSchema = Schema.Model({\r\n    ip_range_start: StringType()\r\n        .pattern(/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/, 'Please enter correct IP Address'),\r\n    ip_range_end: StringType()\r\n        .pattern(/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/, 'Please enter correct IP Address')\r\n});\r\n\r\nexport default ({show, onSuccessMethod, title, onClose, account_id, apiKeyData = {active: false, access_list: [{ip_range_start: \"\", ip_range_end: \"\"}], api_key: null} }) => {\r\n    const [rangeRows, onChangeRangeRows] = useState(apiKeyData.access_list);\r\n    const [createModal, onCreateModal] = useState(show);\r\n    const [formActive, onChangeFormActive] = useState(apiKeyData.active);\r\n    const [createFormError, onChangeCreateFormError] = useState({});\r\n    const [rangeChecker, onCheckRange] = useState([...Array(apiKeyData.access_list.length)].map((_) =>{ return {ip_range_start: \"\", ip_range_end: \"\"}}));\r\n    const [valueSuccess, onChangeValueSuccess] = useState(false);\r\n    const [helpModal, onShowHelpModal] = useState(false);\r\n\r\n    const createFormHasError = Object.keys(createFormError).length;\r\n\r\n    console.log('RANGECHECHER', rangeChecker);\r\n    return (\r\n        <Modal\r\n            width={500}\r\n            show={createModal}\r\n            title={title}\r\n            onClose={() => {\r\n                onClose && onClose(false);\r\n                onCreateModal(false);\r\n            }}\r\n            onSuccess={() => {\r\n                onSuccessMethod({active: formActive, access_list: rangeRows}, account_id, apiKeyData.api_key);\r\n                onClose && onClose(false);\r\n                onCreateModal(false);\r\n            }}\r\n            className=\"api_page_create_modal\"\r\n            successText={apiKeyData.api_key ? \"Modify\" : \"Create\"}\r\n            extraDisabled={\r\n                createFormHasError\r\n                || rangeRows.find(range => Object.values(range).some(value => value === null || value === \"\"))\r\n                || Object.values(rangeChecker).some(value => value.ip_range_start && value.ip_range_start.hasError || value.ip_range_end && value.ip_range_end.hasError)}\r\n            footer\r\n        >\r\n            {apiKeyData.api_key && <>\r\n                <span className=\"api_page_create_modal_form-header\">API Key options:</span>\r\n                <Checkbox\r\n                    name=\"active\"\r\n                    className=\"api_page_create_modal_form-active\"\r\n                    onChange={(value, checked) => onChangeFormActive(checked)}\r\n                    defaultChecked={formActive}\r\n                >\r\n                    Active\r\n                </Checkbox>\r\n            </>}\r\n            <span className=\"api_page_create_modal_form-header access_list\">Access List (IP Ranges)</span>\r\n            <FlexboxGrid className=\"api_page_create_modal_form-range\" align=\"center\">\r\n                <Message\r\n                    className=\"api_page_create_modal_form_range-description\"\r\n                    description=\"IP ranges to access list for API key\"\r\n                    showIcon\r\n                />\r\n                <FlexboxGrid.Item className=\"api_page_create_modal_form_range-wrapper\">\r\n                    <List className=\"api_page_create_modal_form_range_wrapper-list\" bordered>\r\n                        {rangeRows.map((range, idx) => {\r\n                            let hasError = null;\r\n\r\n                            if (rangeChecker[idx] && Object.keys(rangeChecker[idx]).length) {\r\n                                hasError = rangeChecker[idx].ip_range_end && rangeChecker[idx].ip_range_end.hasError || rangeChecker[idx].ip_range_start && rangeChecker[idx].ip_range_start.hasError;\r\n                            }\r\n                            return (<List.Item className={`api_page_create_modal_form_range_wrapper_list-item ${hasError ? 'has_error' : ''}`}>\r\n                                {helpModal && <Modal\r\n                                    show={show}\r\n                                    title=\"Allocate numbers\"\r\n                                    onClose={() => {\r\n                                        rangeRows[idx] = {ip_range_start: '', ip_range_end: ''};\r\n                                        onShowHelpModal(false)\r\n                                    }}\r\n                                    footer={true}\r\n                                    successText=\"Confirm\"\r\n                                    onSuccess={() => {\r\n                                        onChangeValueSuccess(true);\r\n                                        onShowHelpModal(false)\r\n                                    }}\r\n                                    >\r\n                                    This IP range is insecure. Do you really want to open this?\r\n                                </Modal>}\r\n                                <Form\r\n                                    model={rangeSchema}\r\n                                    className=\"api_page_create_modal-form\"\r\n                                    onCheck={(error) => {\r\n                                        const newCreateFormError = {...createFormError};\r\n                                        const formHasError = Object.keys(error).length;\r\n                                        if (formHasError) {\r\n                                            if (!Object.keys(newCreateFormError).includes(idx)) {\r\n                                                const oldError = newCreateFormError[idx] ? newCreateFormError[idx] : {};\r\n                                                newCreateFormError[idx] = Object.assign(oldError, error);\r\n                                            }\r\n                                        } else {\r\n                                            delete newCreateFormError[idx];\r\n                                        }\r\n\r\n                                        onChangeCreateFormError(newCreateFormError)\r\n                                    }}\r\n                                    onChange={(value) => {\r\n                                        if (value.ip_range_start && value.ip_range_end\r\n                                            && value.ip_range_start === \"0.0.0.0\"\r\n                                            && value.ip_range_end === \"255.255.255.255\"\r\n                                        ) {\r\n                                            onShowHelpModal(true)\r\n                                        } else {\r\n                                            onChangeValueSuccess(true)\r\n                                        }\r\n                                        if (valueSuccess)  {\r\n                                            const newRangeChecker = {...rangeChecker};\r\n\r\n                                            newRangeChecker[idx] = rangeSchemaRanges.check(value);\r\n\r\n                                            onCheckRange(newRangeChecker)\r\n                                        }\r\n                                    }}\r\n                                    formValue={{ip_range_start: range.ip_range_start, ip_range_end: range.ip_range_end}}\r\n                                >\r\n                                    <FormGroup className=\"api_page_create_modal_form_range_wrapper_list_item-group\">\r\n                                        <span className=\"index\">{idx + 1}</span>\r\n                                        <FormControl\r\n                                            name=\"ip_range_start\"\r\n                                            placeholder=\"0.0.0.0\"\r\n                                            className=\"api_page_create_modal_form_range_wrapper_list_item-input range_start\"\r\n                                            onChange={(value) => {\r\n                                                range.ip_range_start = value;\r\n                                            }}\r\n                                            errorMessage={createFormError[idx] && createFormError[idx]['ip_range_start']  ? createFormError[idx]['ip_range_start'] : null}\r\n                                        />\r\n                                        <span className=\"separator\">to</span>\r\n                                        <FormControl\r\n                                            name=\"ip_range_end\"\r\n                                            placeholder=\"255.255.255.255\"\r\n                                            className=\"api_page_create_modal_form_range_wrapper_list_item-input range_end\"\r\n                                            onChange={(value) => {\r\n                                                range.ip_range_end = value;\r\n                                            }}\r\n                                            errorMessage={createFormError[idx] && createFormError[idx]['ip_range_end'] ? createFormError[idx]['ip_range_end'] : null}\r\n                                        />\r\n                                    </FormGroup>\r\n                                    {idx > 0 &&\r\n                                        <Icon\r\n                                            onClick={() => {\r\n                                                const newList = [...rangeRows];\r\n                                                const newCreateFormError = {...createFormError};\r\n                                                const newRangeChecker = {...rangeChecker};\r\n                                                newList.splice(idx, 1);\r\n                                                delete newRangeChecker[idx];\r\n                                                delete newCreateFormError[idx];\r\n\r\n                                                const createFormErrorList = Object.values(newCreateFormError).map((value, index) => {\r\n                                                    return {[index]: value}// return {[index+1]: value}\r\n                                                });\r\n                                                const rangeCheckerList = Object.values(newRangeChecker).map((value, index) => {\r\n                                                    return {[index]: value}// return {[index+1]: value}\r\n                                                });\r\n                                                const nextCreateFormError = Object.assign({}, ...createFormErrorList);\r\n                                                const nextRangeChecker = Object.assign({}, ...rangeCheckerList);\r\n\r\n                                                onChangeCreateFormError(nextCreateFormError);\r\n                                                onCheckRange(nextRangeChecker);\r\n                                                onChangeRangeRows(newList);\r\n                                            }}\r\n                                            className=\"range_delete\"\r\n                                            inverse={hasError}\r\n                                            icon=\"trash\"\r\n                                        />}\r\n                                    {hasError && <Whisper placement=\"top\" trigger=\"click\" speaker={\r\n                                        <Tooltip>\r\n                                            {\r\n                                                rangeChecker[idx] && rangeChecker[idx].ip_range_start && rangeChecker[idx].ip_range_start.hasError\r\n                                                ? rangeChecker[idx].ip_range_start.errorMessage\r\n                                                : 'Empty range is not available'\r\n                                            }\r\n                                        </Tooltip>}\r\n                                    >\r\n                                        <Icon className=\"range_exclamation\" inverse icon=\"exclamation-triangle\"/>\r\n                                    </Whisper>}\r\n                                </Form>\r\n                            </List.Item>);\r\n                        })}\r\n                        <List.Item clasName=\"api_page_create_modal_form_range_wrapper_list-add\">\r\n                            <Button\r\n                                appearance=\"primary\"\r\n                                className=\"api_page_create_modal_form_range_wrapper_list_add-button\"\r\n                                onClick={() => {\r\n                                    const newList = [...rangeRows];\r\n                                    newList.push({ip_range_start: '', ip_range_end: ''});\r\n\r\n                                    onChangeRangeRows(newList);\r\n                                }}\r\n                                disabled={createFormHasError}\r\n                            >\r\n                                +\r\n                            </Button>\r\n                        </List.Item>\r\n                    </List>\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n        </Modal>\r\n    );\r\n};\r\n","import React, {useState} from 'react'\r\nimport {Divider, Button, FlexboxGrid} from 'rsuite';\r\nimport ApiPageKeys from '../../../pages/Account/ApiPage/ApiPageKeys';\r\nimport PageHeader from '../../../components/base/PageHeader';\r\nimport ApiKeyModal from '../../../pages/Account/ApiPage/ApiKeyModal';\r\nimport '../../../pages/Account/ApiPage/ApiPage.css';\r\n\r\n\r\nexport default class extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            createModal: false,\r\n            rangeRows: [{ip_range_start: '', ip_range_end: ''}],\r\n            createFormError: {},\r\n            formChangeActive: false,\r\n            addedNewApiKey: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // get keys\r\n        const {getKeyList, account_id} = this.props;\r\n\r\n        getKeyList(account_id);\r\n    }\r\n\r\n    // componentWillUpdate(nextProps) {\r\n    //     const {keyList, getKeyList, account_id} = this.props;\r\n    //     if (JSON.stringify(keyList) !== JSON.stringify(nextProps.keyList)) {\r\n    //         getKeyList(account_id)\r\n    //     }\r\n    // }\r\n    onAddedNewApiKey = (value) => {\r\n        this.setState({addedNewApiKey: value});\r\n    }\r\n\r\n    onChangeCreateModal = (value) => {\r\n        this.setState({createModal: value});\r\n    };\r\n\r\n    render() {\r\n        const {keyList, getKeyList, deleteApiKey, modifyApiKey, createApiKey, account_id} = this.props;\r\n        const {createModal, addedNewApiKey} = this.state;\r\n\r\n        return (\r\n            <>\r\n\r\n                <PageHeader\r\n                    title={\"API Keys\"}\r\n                    style={{\r\n                        marginBottom: '-20px',\r\n                        marginLeft: '15px'\r\n                    }}\r\n                />\r\n                <Divider/>\r\n                <FlexboxGrid align=\"top\" className=\"api_page-create\">\r\n                    <FlexboxGrid.Item className=\"api_page_create-wrapper\">\r\n                        <Button\r\n                            appearance=\"primary\"\r\n                            className=\"api_page_create-button\"\r\n                            onClick={() => {\r\n                                this.onChangeCreateModal(true);\r\n                                this.onAddedNewApiKey(true);\r\n                            }}\r\n                        >\r\n                            Create new\r\n                        </Button>\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n                <FlexboxGrid align=\"top\" className=\"api_page-keylist\">\r\n                    <FlexboxGrid.Item className=\"api_page_keylist-wrapper\">\r\n                        <ApiPageKeys\r\n                            keyList={keyList}\r\n                            modifyApiKey={modifyApiKey}\r\n                            deleteApiKey={deleteApiKey}\r\n                            account_id={account_id}\r\n                            addedNewApiKey={addedNewApiKey}\r\n                            onAddedNewApiKey={this.onAddedNewApiKey}\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n\r\n                {createModal &&\r\n                    <ApiKeyModal\r\n                        title=\"Create new\"\r\n                        show={createModal}\r\n                        onClose={this.onChangeCreateModal}\r\n                        onSuccessMethod={createApiKey}\r\n                        account_id={account_id}\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n\r\n    }\r\n\r\n}","import {connect} from 'react-redux';\r\n\r\nimport {getKeyList, createApiKey, modifyApiKey, deleteApiKey} from 'actions/apiPage';\r\n\r\nimport ApiPage from 'pages/Account/ApiPage/ApiPage';\r\nimport React from 'react';\r\nclass ApiPageContainer extends React.Component {\r\n\r\n    render() {\r\n        const {keyList, getKeyList, deleteApiKey, modifyApiKey, createApiKey, account_id} = this.props;\r\n        return (\r\n            <>\r\n                <ApiPage\r\n                    {...{\r\n                        deleteApiKey, modifyApiKey, createApiKey, getKeyList, keyList, account_id\r\n                    }}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapState = ({apiPage}) => ({\r\n    keyList: apiPage.items.sort((a, b) => a.api_key > b.api_key),\r\n    count: apiPage.count\r\n});\r\n\r\nexport default connect(mapState,\r\n    {\r\n        getKeyList,\r\n        createApiKey,\r\n        modifyApiKey,\r\n        deleteApiKey\r\n    })(ApiPageContainer);","import React from \"react\";\r\nimport * as S from \"./styled\";\r\nimport {Icon} from \"rsuite\";\r\n\r\nexport default ({title = null, show = false, callback = null, ...props}) => {\r\n\r\n    const handleClick = (e) => {\r\n        if (callback) \r\n            callback(e);\r\n\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <S.FlexBlock align=\"middle\">\r\n            {title &&\r\n                <S.SectionTitle>{title}</S.SectionTitle>\r\n            }\r\n            <S.ToggleButton onClick={handleClick}>\r\n                {show\r\n                    ? <>\r\n                        <Icon icon=\"angle-up\"/> Hide\r\n                    </>\r\n                    : <>\r\n                        <Icon icon=\"angle-down\" /> Show\r\n                    </>\r\n                }\r\n            </S.ToggleButton>\r\n        </S.FlexBlock>\r\n    )\r\n};","import React, {useState, useEffect} from \"react\";\r\nimport PaymentsSectionHeader from \"../../Payments/PaymentsSectionHeader\";\r\nimport PaymentsRequestTable from \"../../Payments/PaymentsRequestSection/PaymentsRequestTable\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\nimport {FlexGrid, FlexGridItem} from \"../../../components/base/FlexGrid\";\r\nimport {Collapse} from \"react-collapse\";\r\nimport {ButtonPrimary} from \"../../../components/base/BaseButton\";\r\nimport ModalChangePaymentRequestStatus from \"../../Payments/ModalChangePaymentRequestStatus\";\r\n\r\nexport default ({\r\n    paymentRequestItems, \r\n    paymentRequestLoading, \r\n    accountId,\r\n    cancelPaymentRequest,\r\n    approvePaymentRequest,\r\n    getPaymentRequestList,\r\n    openModalRequestPayment,\r\n    openModalPaymentDetail,\r\n    currencyName,\r\n}) => {\r\n    \r\n    const [showTable, setShowTable] = useState(false);\r\n    const [selectedRequest, setSelectedRequest] = useState(null);\r\n    const [showModalCancelPaymentRequest, setShowModalCancelPaymentRequest] = useState(false);\r\n    const [showModalApprovePaymentRequest, setShowModalApprovePaymentRequest] = useState(false);\r\n\r\n    useEffect( () => {\r\n        if (accountId) {\r\n            getPaymentRequestList({target: {account_id_list: [accountId]}});\r\n        }\r\n    }, [accountId] );\r\n\r\n    const handleCancelPaymentRequest = (value) => {\r\n        setSelectedRequest(value);\r\n        setShowModalCancelPaymentRequest(true);\r\n    };\r\n\r\n\r\n    const handleCancelPayment = async () => {\r\n        const data = {\r\n            target: {\r\n                payment_request_id: (selectedRequest || {})['id']\r\n            },\r\n        };\r\n\r\n        await cancelPaymentRequest(data);\r\n\r\n        getPaymentRequestList({\r\n            target: {\r\n                account_id_list: [accountId]\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    const handleApprovePaymentRequest = (value) => {\r\n        setSelectedRequest(value);\r\n        setShowModalApprovePaymentRequest(true);\r\n    };\r\n\r\n    const handleApprovePayment = async () => {\r\n        const data = {\r\n            target: {\r\n                payment_request_id: (selectedRequest || {})['id']\r\n            },\r\n        };\r\n\r\n        await approvePaymentRequest(data);\r\n\r\n        getPaymentRequestList({\r\n            target: {\r\n                account_id_list: [accountId]\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <PaymentsSectionHeader\r\n                title=\"Payment request\"\r\n                show={showTable}\r\n                callback={() => {\r\n                    setShowTable(!showTable);\r\n                }}\r\n            />\r\n\r\n            <Collapse isOpened={showTable}>\r\n                <div>\r\n                    <Spacer />\r\n                    <FlexGrid hSpace=\"-5px\" justify=\"end\">\r\n                        <FlexGridItem hSpace=\"5px\">\r\n                            \r\n                            <ButtonPrimary onClick={openModalPaymentDetail}>\r\n                                Manage payment details\r\n                            </ButtonPrimary>\r\n\r\n                        </FlexGridItem>\r\n                        <FlexGridItem hSpace=\"5px\">\r\n                            \r\n                            <ButtonPrimary onClick={openModalRequestPayment}>\r\n                                Request payment\r\n                            </ButtonPrimary>\r\n\r\n                        </FlexGridItem>\r\n                    </FlexGrid>\r\n\r\n                    <Spacer/>\r\n                    <PaymentsRequestTable\r\n                        height={160}\r\n                        data={paymentRequestItems}\r\n                        loading={paymentRequestLoading}\r\n                        {...{\r\n                            handleCancelPaymentRequest,\r\n                            handleApprovePaymentRequest,\r\n                            currencyName,\r\n                        }}\r\n                    />\r\n                </div>\r\n            </Collapse>\r\n\r\n            <ModalChangePaymentRequestStatus\r\n                title=\"Approve payment request\"\r\n                show={showModalApprovePaymentRequest}\r\n                onClose={() => {\r\n                    setShowModalApprovePaymentRequest(false)\r\n                }}\r\n                onSuccess={handleApprovePayment}\r\n            />\r\n\r\n            <ModalChangePaymentRequestStatus\r\n                title=\"Cancel payment request\"\r\n                show={showModalCancelPaymentRequest}\r\n                onClose={() => {\r\n                    setShowModalCancelPaymentRequest(false)\r\n                }}\r\n                onSuccess={handleCancelPayment}\r\n            />\r\n        </>\r\n    )\r\n};","import React, {useMemo} from \"react\";\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport {Form, Schema} from \"rsuite\";\r\nimport {FlexGrid, FlexGridItem} from \"../../components/base/FlexGrid\";\r\nimport FieldDataRange from \"../../components/Form/FieldDataRange\";\r\n\r\nexport default ({filters, onChangeFilters}) => {\r\n\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    return (\r\n        <Form\r\n            formDefaultValue={filters}\r\n            onChange={(value) => {\r\n                onChangeFilters(value);\r\n            }}\r\n        >\r\n            <FlexGrid align=\"middle\">\r\n                {(resizedWidth > 1005) && \r\n                    <FlexGridItem>Date from</FlexGridItem>\r\n                }\r\n\r\n                <FlexGridItem>\r\n                    <FieldDataRange name=\"start_end_date\"/>\r\n                </FlexGridItem>\r\n            </FlexGrid>\r\n        </Form>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport PaymentsSectionHeader from \"../../Payments/PaymentsSectionHeader\";\r\nimport PaymentsListTable from \"../../Payments/PaymentsListSection/PaymentsListTable\";\r\nimport { Spacer } from \"../../../components/base/Spacer\";\r\nimport {LOCAL_STORAGE_PAYMENTS_LIST_FILTERS} from \"../../../const/localStorageKeys\";\r\nimport {getISOTime} from \"../../../utils/helpers\";\r\nimport { Collapse } from \"react-collapse\";\r\nimport CommonDateFilter from \"../../Payments/CommonDateFilter\";\r\n\r\nexport default ({\r\n    paymentItems, \r\n    paymentItemsLoading,\r\n    currencyName,\r\n    getPaymentList,\r\n    accountId\r\n}) => {\r\n\r\n    const dateStart = new Date();\r\n    dateStart.setDate(1);\r\n    dateStart.setHours(0, 0, 0, 0);\r\n    dateStart.setMonth(dateStart.getMonth() - 1);\r\n    const dateEnd = new Date(new Date().setHours(23, 59, 59, 999));\r\n\r\n    const [showTable, setShowTable] = useState(true);\r\n\r\n    useEffect( () => {\r\n        if (!accountId)\r\n            return;\r\n\r\n        const data = {target: {account_id: accountId}};\r\n        data.filter = {\r\n            start_date: getISOTime(dateStart),\r\n            end_date: getISOTime(dateEnd)\r\n        }\r\n        getPaymentList(data);\r\n    }, [accountId] );\r\n\r\n    const handleChangeFilters = (value) => {\r\n        if (!value)\r\n            return;\r\n\r\n        const start_date = new Date(value.start_end_date[0].setHours(0, 0, 0, 0));\r\n        const end_date = new Date(value.start_end_date[1].setHours(23, 59, 59, 999));\r\n\r\n        const filterData = {\r\n            start_date: getISOTime(start_date),\r\n            end_date: getISOTime(end_date),\r\n            start_end_date: value.start_end_date\r\n        }\r\n\r\n        localStorage.setItem( LOCAL_STORAGE_PAYMENTS_LIST_FILTERS, JSON.stringify(filterData) );\r\n\r\n        getPaymentList({\r\n            target: {\r\n                account_id: accountId\r\n            },\r\n            filter: filterData\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <PaymentsSectionHeader\r\n                title=\"Payment list\"\r\n                show={showTable}\r\n                callback={() => {\r\n                    setShowTable(!showTable);\r\n                }}\r\n            />\r\n\r\n            <Collapse isOpened={showTable}>\r\n                <div>\r\n                    <Spacer/>\r\n\r\n                    <CommonDateFilter\r\n                        filters={{start_end_date: [dateStart, dateEnd]}}\r\n                        onChangeFilters={handleChangeFilters}\r\n                    />\r\n                    \r\n                    <Spacer/>\r\n\r\n                    <PaymentsListTable\r\n                        height={160}\r\n                        data={paymentItems}\r\n                        loading={paymentItemsLoading}\r\n                        {...{currencyName}}\r\n                    />\r\n                </div>\r\n            </Collapse>\r\n        </>\r\n    )\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport PaymentsSectionHeader from \"../../Payments/PaymentsSectionHeader\";\r\nimport PaymentsTrafficReportsTable from \"../../Payments/PaymentsTrafficReportsSection/PaymentsTrafficReportsTable\";\r\nimport { Spacer } from \"../../../components/base/Spacer\";\r\nimport { LOCAL_STORAGE_PAYMENTS_TRAFFIC_REPORTS_FILTERS } from \"../../../const/localStorageKeys\";\r\nimport { getISOTime } from \"../../../utils/helpers\";\r\nimport { Collapse } from \"react-collapse\";\r\nimport CommonDateFilter from \"../../Payments/CommonDateFilter\";\r\n\r\nexport default ({\r\n    paymentTrafficReportsItems, \r\n    paymentTrafficReportsLoading,\r\n    openModalRequestPayment,\r\n    currencyName,\r\n    getTrafficReportsList,\r\n    accountId,\r\n    height = null\r\n}) => {\r\n\r\n\r\n    const dateStart = new Date();\r\n    dateStart.setDate(1);\r\n    dateStart.setHours(0, 0, 0, 0);\r\n    dateStart.setMonth(dateStart.getMonth() - 1);\r\n    const dateEnd = new Date(new Date().setHours(23, 59, 59, 999));\r\n    \r\n    const [showTable, setShowTable] = useState(true);\r\n\r\n    useEffect( () => {\r\n        if (!accountId)\r\n            return;\r\n            \r\n        const data = {target: {account_id: accountId}};\r\n        data.filter = {\r\n            start_date: getISOTime(dateStart),\r\n            end_date: getISOTime(dateEnd)\r\n        }\r\n        getTrafficReportsList(data);\r\n    }, [accountId] );\r\n\r\n    const handleChangeFilters = (value) => {\r\n        if (!value)\r\n            return;\r\n\r\n        const start_date = new Date(value.start_end_date[0].setHours(0, 0, 0, 0));\r\n        const end_date = new Date(value.start_end_date[1].setHours(23, 59, 59, 999));\r\n\r\n        const filterData = {\r\n            start_date: getISOTime(start_date),\r\n            end_date: getISOTime(end_date),\r\n            start_end_date: value.start_end_date\r\n        }\r\n\r\n        localStorage.setItem( LOCAL_STORAGE_PAYMENTS_TRAFFIC_REPORTS_FILTERS, JSON.stringify(filterData) );\r\n\r\n        getTrafficReportsList({\r\n            target: {\r\n                account_id: accountId\r\n            },\r\n            filter: filterData\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <PaymentsSectionHeader\r\n                title=\"Traffic reports\"\r\n                show={showTable}\r\n                callback={() => {\r\n                    setShowTable(!showTable);\r\n                }}\r\n            />\r\n\r\n            <Collapse isOpened={showTable}>\r\n                <div>\r\n                    <Spacer/>\r\n                    <CommonDateFilter\r\n                        filters={{start_end_date: [dateStart, dateEnd]}}\r\n                        onChangeFilters={handleChangeFilters}\r\n                    />\r\n                    \r\n                    <Spacer/>\r\n                    <PaymentsTrafficReportsTable\r\n                        height={160}\r\n                        data={paymentTrafficReportsItems}\r\n                        loading={paymentTrafficReportsLoading}\r\n                        {...{\r\n                            openModalRequestPayment,\r\n                            currencyName\r\n                        }}\r\n                    />\r\n                </div>\r\n            </Collapse>\r\n        </>\r\n    )\r\n};","import React from \"react\";\r\nimport { Form, Alert } from \"rsuite\";\r\nimport { CheckboxControl } from \"components/Form/CheckboxControl\";\r\nimport * as S from \"../styled\"\r\nimport {modifyAccountRequest} from '../../../actions'\r\n\r\nexport default ({\r\n    accountId,\r\n    default_allow_hawala,\r\n    defaultValue = {},\r\n    modifyPaymentSettings\r\n}) => {\r\n    const handleChange = async ({allow_hawala, ...value} = {}) => {\r\n        const params = {\r\n            target: {\r\n                account_id: accountId\r\n            },\r\n            allow_hawala: allow_hawala,\r\n            ...(Object.keys(value).length ? {account_options: value} : {}),\r\n        };\r\n\r\n        const response = await modifyPaymentSettings(params);\r\n        // const responseAccount = await modifyAccountRequest()\r\n\r\n        if (response === undefined) {\r\n            Alert.error('Something went wrong', 15000);\r\n        }\r\n\r\n        Alert.success('Payment settings has successfully changed!', 5000);\r\n    };\r\n\r\n    if (defaultValue.pause_payouts === undefined) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Form \r\n            layout=\"inline\"\r\n            defaultFormValue={defaultValue}\r\n            onChange={handleChange}\r\n        >\r\n            <CheckboxControl\r\n                name=\"pause_payouts\"\r\n                defaultChecked={defaultValue.pause_payouts || false}\r\n            >\r\n                Pause all payments\r\n            </CheckboxControl>\r\n\r\n            <CheckboxControl\r\n                name=\"auto_accept_our_stat\"\r\n                defaultChecked={defaultValue.auto_accept_our_stat || false}\r\n            >\r\n                Autoaccept our stat as invoice\r\n            </CheckboxControl>\r\n\r\n            <CheckboxControl\r\n                name=\"allow_hawala\"\r\n                defaultChecked={default_allow_hawala || false}\r\n            >\r\n                Allow hawala payment request\r\n            </CheckboxControl>\r\n        </Form>\r\n    )\r\n}","import {connect} from \"react-redux\";\r\nimport {\r\n    getPaymentList,\r\n    getPaymentRequestList,\r\n    getTrafficReportsList,\r\n    requestPayment,\r\n    cancelPaymentRequest,\r\n    approvePaymentRequest,\r\n    modifyPaymentSettings,\r\n} from \"../../../actions/payments\";\r\nimport {\r\n    getPaymentDetailsList,\r\n    getPaymentDetailsSingle,\r\n    createPaymentDetails,\r\n    modifyPaymentDetails,\r\n    removePaymentDetails\r\n} from \"../../../actions/paymentDetails\";\r\nimport TabPaymentManagement from \"./TabPaymentManagement\";\r\nimport {getDropdownAccounts} from \"../../../actions/dropdown_accounts\";\r\n\r\nconst mapStateToProps = ({payments, paymentDetails, accounts, dropdown_accounts, references}) => ({\r\n    paymentItems: payments.paymentItems,\r\n    paymentItemsLoading: payments.paymentItemsLoading,\r\n\r\n    paymentRequestItems: payments.paymentRequestItems,\r\n    paymentRequestLoading: payments.paymentRequestLoading,\r\n    \r\n    paymentTrafficReportsItems: payments.paymentTrafficReportsItems,\r\n    paymentTrafficReportsLoading: payments.paymentTrafficReportsLoading,\r\n    \r\n    paymentDetailsItems: paymentDetails.items,\r\n    paymentDetailsLoadinig: paymentDetails.loading,\r\n    \r\n    accountInfo: accounts.accountView,\r\n    accounts: dropdown_accounts.items,\r\n    \r\n    organizationTypeList: references.organization_type_list,\r\n    countryList: references.country_list,\r\n    paymentMethodList: references.payment_method_list,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getPaymentList,\r\n    getPaymentRequestList,\r\n    getTrafficReportsList,\r\n    requestPayment,\r\n    cancelPaymentRequest,\r\n    approvePaymentRequest,\r\n    modifyPaymentSettings,\r\n    \r\n    getPaymentDetailsList,\r\n    getPaymentDetailsSingle,\r\n    createPaymentDetails,\r\n    modifyPaymentDetails,\r\n    removePaymentDetails,\r\n\r\n    getAccounts: getDropdownAccounts\r\n})(TabPaymentManagement);","import React, {useEffect, useState} from \"react\";\r\nimport PaymentsRequestSection from \"./PaymentsRequestSection\";\r\nimport PaymentsListSection from \"./PaymentsListSection\";\r\nimport PaymentsTrafficReportsSection from \"./PaymentsTrafficReportsSection\";\r\n// import ModalAddPaymentDetail from \"../PaymentDetails/ModalAddPaymentDetail\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\nimport ModalRequestPayment from \"../../Payments/ModalRequestPayment\";\r\nimport ModalPaymentDetails from \"../../Payments/ModalPaymentDetails\";\r\nimport ModalAddPaymentDetail from \"../../PaymentDetails/ModalAddPaymentDetail\";\r\nimport FormPaymentSettings from \"../../Payments/FormPaymentSettings\";\r\nimport {Panel} from \"rsuite\";\r\n\r\nexport default ({\r\n    accountId,\r\n    paymentItems,\r\n    paymentItemsLoading,\r\n\r\n    paymentRequestItems,\r\n    paymentRequestLoading,\r\n    \r\n    paymentTrafficReportsItems,\r\n    paymentTrafficReportsLoading,\r\n\r\n    paymentDetailsItems,\r\n\r\n    accountInfo,\r\n    accounts,\r\n\r\n    organizationTypeList,\r\n    countryList,\r\n    paymentMethodList,\r\n\r\n    // API methods\r\n    getAccounts,\r\n    getPaymentRequestList,\r\n    requestPayment,\r\n    cancelPaymentRequest,\r\n    approvePaymentRequest,\r\n    modifyPaymentSettings,\r\n    getPaymentList,\r\n    getTrafficReportsList,\r\n    getPaymentDetailsList,\r\n    createPaymentDetails,\r\n    modifyPaymentDetails,\r\n}) => {\r\n\r\n    const [showModalRequestPayment, setShowModalRequestPayment] = useState(false);\r\n    const [requestPaymentFormValue, setRequestPaymentFormValue] = useState({amount: 0});\r\n    const [showModalAddPaymentDetail, setShowModalAddPaymentDetail] = useState(false);\r\n    const [showModalPaymentDetail, setShowModalPaymentDetail] = useState(false);\r\n    const [dropdownVisibility, setDropdownVisibility] = useState(true);\r\n    const [amountLimitMin, setAmountLimitMin] = useState(0.01);\r\n\r\n    useEffect(() => {\r\n        getAccounts();\r\n    }, []);\r\n\r\n    // set payment detail amount min limit\r\n    useEffect( () => {\r\n        if (!requestPaymentFormValue.payment_detail_id || !paymentMethodList.length || !paymentDetailsItems.length) {\r\n            setAmountLimitMin(0.01);\r\n            return;\r\n        }\r\n        const currentPaymentDetail = paymentDetailsItems.find(item => item.id === requestPaymentFormValue.payment_detail_id);\r\n        if (!currentPaymentDetail) {\r\n            setAmountLimitMin(0.01);\r\n            return;\r\n        }\r\n\r\n        const currentPaymentMethod = paymentMethodList.find(item => item.pm_key === currentPaymentDetail.pm_key);\r\n        const currentPaymentMethodLimit = currentPaymentMethod && currentPaymentMethod.limit\r\n            ? currentPaymentMethod.limit\r\n            : 0.01;\r\n        setAmountLimitMin(currentPaymentMethodLimit);\r\n    }, [requestPaymentFormValue, paymentMethodList, paymentDetailsItems] );\r\n\r\n    // effect: get list on component mount\r\n    useEffect( () => {\r\n        if (!accountId)\r\n            return;\r\n\r\n        const data = {target: {account_id: accountId}};\r\n        getPaymentDetailsList(data);\r\n    }, [accountId] );\r\n\r\n    const getPaymentAmountLimit = () => {\r\n        const totalAmount = accountBalance || 0;\r\n        const itemsAmount = paymentRequestItems.reduce( (sum, currentItem) => (\r\n            ( currentItem.status !== undefined && [0, 2].includes(currentItem.status) ) \r\n                ? sum + currentItem.amount \r\n                : sum\r\n        ), 0 );\r\n        const amountDiff = totalAmount - itemsAmount;\r\n        return amountDiff < 0 ? 0 : amountDiff.toFixed(2);\r\n    };\r\n\r\n    const openModalRequestPayment = () => {\r\n        setShowModalRequestPayment(true);\r\n    };\r\n\r\n    const closeModalRequestPayment = () => {\r\n        setShowModalRequestPayment(false);\r\n    };\r\n\r\n    const openModalPaymentDetail = () => {\r\n        setShowModalPaymentDetail(true);\r\n    }\r\n\r\n    const handleShowModalAddPaymentDetail = () => {\r\n        setShowModalAddPaymentDetail(true);\r\n        setDropdownVisibility(false);\r\n    };\r\n\r\n    const closeModalAddPaymentDetail = (value) => {\r\n        if (value) {\r\n            setRequestPaymentFormValue({...requestPaymentFormValue, payment_detail_id: value.payment_detail.id});\r\n        }\r\n        setShowModalAddPaymentDetail(false);\r\n        setDropdownVisibility(true);\r\n    };\r\n\r\n    const {currency_name: currencyName, BALANCE_INV: accountBalance, account_options, allow_hawala} = accountInfo || {};\r\n\r\n    return (\r\n        <>\r\n            <Spacer />\r\n\r\n            <FormPaymentSettings\r\n                defaultValue={account_options || {}}\r\n                default_allow_hawala={allow_hawala}\r\n                {...{\r\n                    accountId,\r\n                    modifyPaymentSettings\r\n                }}\r\n            />\r\n\r\n            <PaymentsRequestSection\r\n                {...{\r\n                    paymentRequestItems,\r\n                    paymentRequestLoading,\r\n                    cancelPaymentRequest,\r\n                    approvePaymentRequest,\r\n                    getPaymentRequestList,\r\n                    openModalRequestPayment,\r\n                    openModalPaymentDetail,\r\n                    accountId,\r\n                    currencyName\r\n                }}\r\n            />\r\n\r\n\r\n            <Spacer size={30}/>\r\n            <PaymentsListSection\r\n                {...{\r\n                    paymentItems,\r\n                    paymentItemsLoading,\r\n                    currencyName,\r\n                    getPaymentList,\r\n                    accountId,\r\n                }}\r\n            />\r\n\r\n            <Spacer size={30}/>\r\n            <PaymentsTrafficReportsSection\r\n                {...{\r\n                    paymentTrafficReportsItems,\r\n                    paymentTrafficReportsLoading,\r\n                    openModalRequestPayment,\r\n                    currencyName,\r\n                    getTrafficReportsList,\r\n                    accountId,\r\n                }}\r\n            />\r\n\r\n            <Spacer size={30}/>\r\n\r\n            <ModalRequestPayment\r\n                show={showModalRequestPayment}\r\n                onClose={closeModalRequestPayment}\r\n                formValue={requestPaymentFormValue}\r\n                setFormValue={setRequestPaymentFormValue}\r\n                amountLimit={getPaymentAmountLimit()}\r\n                amountLimitMin={amountLimitMin}\r\n                {...{\r\n                    accountId,\r\n                    currencyName,\r\n                    accountBalance,\r\n                    requestPayment,\r\n                    paymentDetailsItems, \r\n                    getPaymentRequestList,\r\n                    dropdownVisibility,\r\n                    handleShowModalAddPaymentDetail,\r\n                    paymentMethodList,\r\n                    accounts\r\n                }}\r\n            />\r\n\r\n            <ModalPaymentDetails\r\n                show={showModalPaymentDetail}\r\n                accountId={accountId}\r\n                onClose={() => setShowModalPaymentDetail(false)}\r\n            />\r\n            \r\n            \r\n            <ModalAddPaymentDetail\r\n                show={showModalAddPaymentDetail}\r\n                onClose={closeModalAddPaymentDetail}\r\n                {...{\r\n                    accountId,\r\n                    organizationTypeList,\r\n                    countryList,\r\n                    paymentMethodList,\r\n                    createPaymentDetails,\r\n                    modifyPaymentDetails,\r\n                    getPaymentDetailsList\r\n                }}\r\n            />\r\n           \r\n\r\n        </>\r\n    )\r\n};","import React, {useRef, useState, useCallback} from \"react\";\r\nimport {Form, FormControl, SelectPicker, Input, Button, Schema} from \"rsuite\";\r\nimport {FlexGrid, FlexGridItem} from \"../../../components/base/FlexGrid\";\r\n\r\nconst {NumberType, StringType} = Schema.Types;\r\n\r\nconst MAX_LENGTH = 1024;\r\n\r\nconst formModel = Schema.Model({\r\n    type: NumberType()\r\n        .isRequired('Required'),\r\n    text: StringType()\r\n        .isRequired('Required')\r\n        .maxLength(MAX_LENGTH, `Max length is ${MAX_LENGTH} characters`),\r\n});\r\n\r\nexport default ({\r\n    commentTypes = [],\r\n    accountId,\r\n    getAccountNoteList,\r\n    createAccountNote,\r\n}) => {\r\n    const formRef = useRef(null);\r\n    const [formLoading, setFormLoading] = useState(false);\r\n\r\n\r\n    const onSubmit = useCallback( () => {\r\n        if ( !formRef.current.check() )\r\n            return;\r\n\r\n        setFormLoading(true);\r\n        const data = formRef.current.getFormValue();\r\n        createAccountNote(accountId, data)\r\n            .then( () => getAccountNoteList(accountId) )\r\n            .finally( () => setFormLoading(false) );\r\n    }, [accountId]);\r\n\r\n\r\n    const renderValue = useCallback( (value, item) => {\r\n        return <div>\r\n            <span style={{width: 18, display: 'inline-block'}}>\r\n                <i style={{color: item.color}} className={`rs-icon rs-icon-${item.icon}`}/>\r\n            </span>\r\n            {' '}{item.label}\r\n        </div>;\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <Form\r\n            ref={formRef}\r\n            model={formModel}\r\n            onSubmit={onSubmit}\r\n        >\r\n            <FlexGrid>\r\n\r\n                <FlexGridItem>\r\n                    <FormControl\r\n                        errorPlacement={\"topStart\"}\r\n                        accepter={SelectPicker}\r\n                        data={commentTypes}\r\n                        name=\"type\"\r\n                        labelKey=\"label\"\r\n                        valueKey=\"id\"\r\n                        placeholder='Select importance of message'\r\n                        cleanable={false}\r\n                        searchable={false}\r\n                        style={{width: 250}}\r\n                        renderMenuItem={renderValue}\r\n                        renderValue={renderValue}\r\n                    />\r\n                </FlexGridItem>\r\n\r\n                <FlexGridItem>\r\n                    <FormControl\r\n                        errorPlacement={\"topStart\"}\r\n                        accepter={Input}\r\n                        componentClass=\"textarea\"\r\n                        placeholder='Message'\r\n                        name=\"text\"\r\n                        rows={6}\r\n                        style={{maxWidth: '100%', width: 500}}\r\n                    />\r\n                </FlexGridItem>\r\n\r\n                <FlexGridItem>\r\n                    <Button\r\n                        appearance=\"primary\"\r\n                        loading={formLoading}\r\n                        type=\"submit\"\r\n                    >\r\n                        Submit note\r\n                    </Button>\r\n                </FlexGridItem>\r\n\r\n            </FlexGrid>\r\n        </Form>\r\n    )\r\n};","import React from 'react';\r\nimport Modal from \"../../../components/Modal\";\r\n\r\nexport default ({\r\n    show,\r\n    data,\r\n    onClose,\r\n    onSubmit,\r\n    disabled,\r\n}) => {\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                show={show}\r\n                footer\r\n                data={data}\r\n                disabled = {disabled}\r\n                onSuccess={onSubmit}\r\n                onClose={onClose}\r\n                successText={\"Deactivate\"}\r\n                title={\"Deactivate note\"}\r\n            >\r\n                <p>Are you sure about that?</p>\r\n            </Modal>\r\n        </>\r\n    )\r\n};","import React, {useCallback, useState} from \"react\";\r\nimport {Icon, IconButton, List, Loader, Placeholder} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport moment from \"moment\";\r\nimport ModalNoteDeactivate from \"./ModalNoteDeactivate\";\r\n\r\nconst { Paragraph } = Placeholder;\r\n\r\nexport default ({\r\n    commentTypes = [],\r\n    notesList,\r\n    accountId,\r\n    isFetched,\r\n    removeAccountNote,\r\n    getAccountNoteList,\r\n}) => {\r\n\r\n\r\n    const [deactivationNoteId, setDeactivationNoteId] = useState(null);\r\n    const [showDeactivationNoteModal, setShowDeactivationNoteModal] = useState(false);\r\n    const [deactivationNoteLoading, setDeactivationNoteLoading] = useState(null);\r\n\r\n\r\n    const handleRemoveNote = useCallback(() => {\r\n        setDeactivationNoteLoading(true);\r\n        removeAccountNote(accountId, deactivationNoteId).then(() => {\r\n            getAccountNoteList(accountId);\r\n            setDeactivationNoteLoading(false);\r\n            setShowDeactivationNoteModal(false);\r\n        });\r\n    }, [accountId, deactivationNoteId]);\r\n\r\n    const showModal = useCallback((id) => {\r\n        setDeactivationNoteId(id);\r\n        setShowDeactivationNoteModal(true);\r\n    }, []);\r\n\r\n    const hideModal = useCallback(() => {\r\n        setShowDeactivationNoteModal(false);\r\n    }, []);\r\n\r\n    if (!isFetched)\r\n        return (\r\n            <div style={{position: \"relative\"}}>\r\n                <Paragraph rows={8}></Paragraph>\r\n                <Loader center content=\"loading\" />\r\n            </div>\r\n        );\r\n\r\n    return (\r\n        <>\r\n            <List hover>\r\n                {notesList.map((noteProps, index) => {\r\n                    const currentType = commentTypes[noteProps.type] || {};\r\n                    return <List.Item key={noteProps.id} index={index}>\r\n                        <Note\r\n                            icon={currentType.icon}\r\n                            color={currentType.color}\r\n                            onRemove={showModal}\r\n                            {...noteProps}\r\n                        />\r\n                    </List.Item>\r\n                })}\r\n            </List>\r\n            <ModalNoteDeactivate\r\n                show={showDeactivationNoteModal}\r\n                onSubmit={handleRemoveNote}\r\n                onClose={hideModal}\r\n                disabled={deactivationNoteLoading}\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\n\r\nconst Note = ({accn_key, active, text, datetime, author, color, icon, onRemove}) => {\r\n    return <NoteBody className={`note${!active ? ' note--disabled' : ''}`}>\r\n        <div className=\"note__part note__type\">\r\n            <Icon\r\n                icon={icon}\r\n                style={{color: color}}\r\n                size=\"lg\"\r\n            />\r\n        </div>\r\n        <div className=\"note__part\">{moment(new Date(datetime)).format(\"MM.DD.YYYY, hh:mm\")}</div>\r\n        <div className=\"note__part\"><b>{author || 'no author'}:</b></div>\r\n        <p className=\"note__part note__part---shrink\">{text}</p>\r\n        {active &&\r\n            <IconButton\r\n                title=\"Deactivate note\"\r\n                icon={<Icon icon=\"close-circle\" size=\"md\"/>}\r\n                className=\"note__close\"\r\n                appearance=\"link\"\r\n                onClick={() => onRemove(accn_key)}\r\n\r\n            />\r\n        }\r\n    </NoteBody>\r\n};\r\n\r\n\r\nconst NoteBody = styled.div`\r\n    display: flex;\r\n    padding: 0 40px 0 5px;\r\n    position: relative;\r\n    \r\n    &.note--disabled {\r\n        opacity: 0.6;\r\n    }\r\n    \r\n    .note__type {\r\n        width: 35px;\r\n    }\r\n    \r\n    && .note__close {\r\n        position: absolute;\r\n        color: #f44336;\r\n        margin-top: -8px;\r\n        right: 0;\r\n        top: 0;\r\n    }\r\n    \r\n    .note__part {\r\n        flex-shrink: 0;\r\n        padding: 0 5px\r\n    }\r\n    \r\n    .note__part---shrink {\r\n        flex-shrink: 1;\r\n    }\r\n`;","import {\r\n    ACCOUNT_NOTE_LOADING,\r\n    ACCOUNT_NOTE_LIST,\r\n} from \"../const\";\r\n\r\nimport {\r\n    ACCOUNT_NOTE_GET_LIST_API,\r\n    ACCOUNT_NOTE_DEACTIVATE_API,\r\n    ACCOUNT_NOTE_CREATE_API,\r\n} from \"../const/apiMethods\";\r\n\r\nimport {createAction} from './defaults';\r\nimport {api} from \"../api/loginRoutes\";\r\n\r\nconst setAccountNoteList = createAction(ACCOUNT_NOTE_LIST);\r\nconst setAccountNoteLoading = createAction(ACCOUNT_NOTE_LOADING);\r\n\r\n\r\n// get list\r\nexport const getAccountNoteList = (accountId) => async (dispatch) => {\r\n    dispatch( setAccountNoteLoading(true) );\r\n\r\n    await api(ACCOUNT_NOTE_GET_LIST_API, {\r\n        target: {account_id: accountId}\r\n    })\r\n        .then((response) => {\r\n            if (!response)\r\n                return;\r\n\r\n            dispatch( setAccountNoteList({\r\n                list: [...response.account_note_list] || [],\r\n                count: response.account_note_count\r\n            }) );\r\n        })\r\n        .finally(() => {\r\n            dispatch( setAccountNoteLoading(false) );\r\n        })\r\n};\r\n\r\nexport const removeAccountNote = (accountId, accountNoteId) => async () => {\r\n    return await api(ACCOUNT_NOTE_DEACTIVATE_API, {\r\n        account_note_key: accountNoteId,\r\n        target: {account_id: accountId}\r\n    });\r\n};\r\n\r\nexport const createAccountNote = (accountId, data) => async () => {\r\n    return await api(ACCOUNT_NOTE_CREATE_API, {\r\n        ...data,\r\n        target: {account_id: accountId}\r\n    });\r\n};\r\n\r\n","import {connect} from 'react-redux';\r\nimport Notes from './Notes';\r\nimport {\r\n    createAccountNote,\r\n    getAccountNoteList,\r\n    removeAccountNote\r\n} from \"../../../actions/account_note\";\r\n\r\nconst mapState = ({account_note}) => ({\r\n    notesList: account_note.list,\r\n    notesLoading: account_note.loading,\r\n    isFetched: account_note.isFetched,\r\n});\r\n\r\nexport default connect(mapState, {\r\n    getAccountNoteList,\r\n    removeAccountNote,\r\n    createAccountNote,\r\n})(Notes);","import React, {useEffect} from \"react\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\nimport NotesForm from \"./NotesForm\";\r\nimport NotesList from \"./NotesList\";\r\nimport {commentTypes} from \"../../../const\";\r\n\r\nexport default ({\r\n    notesList,\r\n    notesLoading,\r\n    isFetched,\r\n    accountId,\r\n    getAccountNoteList,\r\n    removeAccountNote,\r\n    createAccountNote,\r\n}) => {\r\n\r\n    useEffect( () => {\r\n        if (accountId) {\r\n            getAccountNoteList(accountId);\r\n        }\r\n    }, [accountId] );\r\n\r\n    return (\r\n        <>\r\n            <Spacer />\r\n            <NotesForm\r\n                {...{\r\n                    commentTypes,\r\n                    notesList,\r\n                    notesLoading,\r\n                    accountId,\r\n                    getAccountNoteList,\r\n                    createAccountNote,\r\n                }}\r\n            />\r\n            <Spacer size={40}/>\r\n            <NotesList\r\n                {...{\r\n                    commentTypes,\r\n                    notesLoading,\r\n                    notesList,\r\n                    accountId,\r\n                    isFetched,\r\n                    getAccountNoteList,\r\n                    removeAccountNote\r\n                }}\r\n            />\r\n            <Spacer size={40}/>\r\n        </>\r\n    )\r\n};","import React from 'react';\r\nimport {Panel} from 'rsuite';\r\nimport TabGeneral from './General/TabGeneral';\r\nimport TabRates from './Rates/TabRates';\r\nimport TabTrunks from './Trunks';\r\nimport TabSelfAllocation from './TabSelfAllocation/TabSelfAllocation'\r\nimport AccountHeader from './AccountHeader';\r\nimport TabAccessListFilters from './TabAccessListFilters/TabAccessListFilters';\r\nimport ApiPageContainer from 'pages/Account/ApiPage';\r\nimport TabPaymentManagement from \"./TabPaymentManagement\";\r\nimport Notes from \"./Notes\";\r\n\r\nexport default class extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.storagedAcctiveTab = localStorage.getItem(\"ACCOUNT_ACTIVE_TAB\");\r\n        if (this.storagedAcctiveTab) {\r\n            localStorage.removeItem(\"ACCOUNT_ACTIVE_TAB\");\r\n        }\r\n\r\n        this.state = {\r\n            activeTab: this.storagedAcctiveTab || 'trunks',\r\n            resizedWidth: window.innerWidth,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {redirectTab} = this.props;\r\n\r\n        this.tabTrunks = React.createRef();\r\n        if (!redirectTab) {\r\n            const tab = new URLSearchParams(this.props.location.search).get('tab');\r\n            if (tab && ['general', 'trunks', 'rates', 'api', 'self-allocation', 'payment-management'].includes(tab)) this.setState({activeTab: tab});\r\n        } else {\r\n            this.setState({activeTab: redirectTab})\r\n        }\r\n\r\n        this.acc_key = this.props.match.params.id;\r\n        this.props.getAccount(this.acc_key, !!this.props.hasData, true);\r\n        this.getTrunks();\r\n        this.props.getAccountUsers(this.acc_key);\r\n        this.props.getRates(this.acc_key);\r\n\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const {activeTab} = this.state;\r\n\r\n        if (prevState.activeTab !== activeTab && this.tabTrunks.current) {\r\n            this.getTrunks();\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        if (nextState.activeTab !== 'trunks' && this.props.allocatedNumbers !== nextProps.allocatedNumbers) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    handleResize = () => {\r\n        this.setState({resizedWidth: window.innerWidth});\r\n    };\r\n\r\n    onSelect = (activeKey) => {\r\n        this.setState({activeTab: activeKey});\r\n    };\r\n\r\n    getRates = (filter) => this.props.getRates(this.acc_key, filter);\r\n    getNumbers = (trunk_id, group, filter, page, per_page, sort) => () => {\r\n        if (trunk_id) this.props.getAccountAllocatedNumbers(this.acc_key, trunk_id, group, filter, page, per_page, sort);\r\n    };\r\n    getTrunks = () => {\r\n        if (this.tabTrunks.current)\r\n            this.tabTrunks.current.setTrunk(null);\r\n        this.props.getAccountTrunk(this.acc_key,\r\n        );\r\n    };\r\n    getAccess = (filter, page, per_page, sort) => {\r\n        this.props.getAccessListFilter(this.acc_key, filter, page, per_page, sort);\r\n    };\r\n    getApiKeys = () => this.props.getKeyList(this.acc_key);\r\n\r\n    render() {\r\n        const {activeTab, resizedWidth} = this.state;\r\n        const {currency_list, payment_terms_list, account_manager_list, loadingReferences, accessList, accessListLoading} = this.props;\r\n        const {accountUsers, account_user_modify_method, account_user_remove_method, accountLoading, accountUsersLoading} = this.props;\r\n\r\n        const {\r\n            account = {}, getAccount, trunks, trunksLoading, worldzone_list, subdestination_list, destination_list,\r\n            allocatedNumbers, allocatedNumbersLoading, allocatedNumbersTotalCount, allocatedNumbersCount, allocatedNumbersPage,\r\n            allocatedNumbersPerPage, currentTrunkId, setCurrentTrunkId, client_role_list, admin_role_list, client_allocation_limit,\r\n            allocation_limit, setAllocationRestrictions, modifiedLimit, setModifiedLimitId, currentRangeNumber, setCurrentRangeNumber,\r\n            getTrunkNumberCsvById, getAccountManagersList\r\n        } = this.props;\r\n\r\n        const acc_key = this.acc_key;\r\n        const isGeneralTabDependencyLoading = loadingReferences || accountLoading || accountUsersLoading;\r\n\r\n        const {rates, ratesLoading} = this.props;\r\n\r\n        const isMobile = resizedWidth < 1200;\r\n\r\n        return (\r\n\r\n            <Panel style={{marginTop: 10}} classPrefix=\"white-panel\">\r\n                <AccountHeader\r\n                    activeTab={activeTab}\r\n                    onSelect={this.onSelect}\r\n                    account={account}\r\n                    isMobile={isMobile}\r\n                />\r\n                {\r\n                    (() => {\r\n                        switch (activeTab) {\r\n                            case 'general':\r\n                                return <TabGeneral\r\n                                    disabled={isGeneralTabDependencyLoading}\r\n                                    {...{\r\n                                        account,\r\n                                        currency_list,\r\n                                        payment_terms_list,\r\n                                        account_manager_list,\r\n                                        client_role_list,\r\n                                        admin_role_list,\r\n                                        accountUsers,\r\n                                        account_user_modify_method,\r\n                                        account_user_remove_method,\r\n                                        getAccount,\r\n                                        loading: isGeneralTabDependencyLoading,\r\n                                        getAccountManagersList\r\n                                    }}\r\n                                    getAccountUsers={() => this.props.getAccountUsers(this.acc_key)}\r\n                                />;\r\n                            case 'trunks':\r\n                                return <TabTrunks\r\n                                    ref={this.tabTrunks}\r\n                                    worldzone_list={worldzone_list}\r\n                                    subdestination_list={subdestination_list}\r\n                                    destination_list={destination_list}\r\n                                    getNumbers={this.getNumbers}\r\n                                    getTrunks={this.getTrunks}\r\n                                    {...{\r\n                                        activeTab,\r\n                                        trunks,\r\n                                        trunksLoading,\r\n                                        acc_key,\r\n                                        account,\r\n                                        currentRangeNumber,\r\n                                        setCurrentRangeNumber,\r\n                                        currentTrunkId,\r\n                                        setCurrentTrunkId,\r\n                                        allocatedNumbers,\r\n                                        allocatedNumbersLoading,\r\n                                        allocatedNumbersCount,\r\n                                        allocatedNumbersTotalCount,\r\n                                        allocatedNumbersPage,\r\n                                        allocatedNumbersPerPage,\r\n                                        getTrunkNumberCsvById,\r\n                                        isMobile,\r\n                                    }}\r\n                                />;\r\n                            case 'rates':\r\n                                return <TabRates\r\n                                    {...{\r\n                                        rates,\r\n                                        ratesLoading,\r\n                                        worldzone_list,\r\n                                        subdestination_list,\r\n                                        destination_list\r\n                                    }}\r\n                                    getItems={this.getRates}\r\n                                    account_id={this.acc_key}\r\n                                />;\r\n                            case 'access':\r\n                                return <TabAccessListFilters {...{\r\n                                        accessList,\r\n                                        accessListLoading\r\n                                    }}\r\n                                    getItems={this.getAccess}\r\n                                    account_id={this.acc_key}\r\n                                />;\r\n                            case 'api':\r\n                                return <ApiPageContainer\r\n                                    getItems={this.getApiKeys}\r\n                                    account_id={this.acc_key}\r\n                                />;\r\n                            case 'self-allocation':\r\n                                return <TabSelfAllocation\r\n                                    {...{\r\n                                        account,\r\n                                        getAccount,\r\n                                        allocationLimits: allocation_limit,\r\n                                        loading: isGeneralTabDependencyLoading,\r\n                                        setAllocationRestrictions,\r\n                                        defaultAllocationLimits: client_allocation_limit,\r\n                                        setModifiedLimitId,\r\n                                        modifiedLimit\r\n                                    }}\r\n                                />;\r\n                            \r\n                            case 'payment-management':\r\n                                return <TabPaymentManagement\r\n                                    accountId={this.acc_key}\r\n                                />;\r\n\r\n                            case 'notes':\r\n                                return <Notes\r\n                                    accountId={this.acc_key}\r\n                                />;\r\n\r\n                            default:\r\n                                return null;\r\n                        }\r\n                    })()\r\n                }\r\n            </Panel>\r\n        );\r\n    }\r\n};","import {connect} from 'react-redux';\r\nimport {getAccount, getAccountAllocatedNumbers, getAccountTrunk, getAccountUsers, setCurrentTrunkId,\r\n    setAllocationRestrictions, setModifiedLimitId, setCurrentRangeNumber} from '../../actions/accounts';\r\nimport {getTrunkNumberCsvById} from '../../actions/numbers';\r\nimport {getRates} from '../../actions/rates';\r\nimport Account from './Account';\r\nimport {getAccessListFilter} from 'actions';\r\nimport {getKeyList} from 'actions/apiPage';\r\nimport {getAccountManagersList} from \"../../actions/account_managers\";\r\n\r\nconst mapState = ({accounts, references, roles, account_managers, numbers}) => ({\r\n    account: accounts.accountView,\r\n    accountLoading: accounts.loading,\r\n    hasData: !!accounts.items.length,\r\n    trunks: accounts.accountTrunk,\r\n    trunksLoading: accounts.accountTrunkLoading,\r\n    currency_list: references.currency_list,\r\n    payment_terms_list: references.payment_terms_list,\r\n    loadingReferences: references.loading,\r\n    allocatedNumbers: accounts.accountAllocated,\r\n    allocatedNumbersCount: accounts.accountAllocatedCount,\r\n    allocatedNumbersTotalCount: accounts.accountAllocatedNumbersTotalCount,\r\n    allocatedNumbersPage: accounts.allocatedNumbersPage,\r\n    allocatedNumbersPerPage: accounts.allocatedNumbersPerPage,\r\n    allocatedNumbersLoading: accounts.accountAllocatedLoading,\r\n    modifiedLimit: accounts.modifiedLimit,\r\n    worldzone_list: references.worldzone_list,\r\n    subdestination_list: references.subdestination_list,\r\n    destination_list: references.destination_list,\r\n    account_manager_list: account_managers.list,\r\n\r\n    accountUsers: accounts.accountUsers,\r\n    accountUsersLoading: accounts.accountUsersLoading,\r\n\r\n    rates: accounts.rates,\r\n    ratesLoading: accounts.ratesLoading,\r\n    account_user_modify_method: roles.account_user_modify_method,\r\n    account_user_remove_method: roles.account_user_remove_method,\r\n\r\n    accessList: accounts.accessList,\r\n    accessListLoading: accounts.accessListLoading,\r\n    currentTrunkId: accounts.currentTrunkId,\r\n    currentRangeNumber: accounts.currentRangeNumber,\r\n    allocation_limit: accounts.allocation_limit,\r\n    client_allocation_limit: references.client_allocation_limit,\r\n    client_role_list: references.client_role_list,\r\n    admin_role_list: references.admin_role_list,\r\n\r\n    redirectTab: accounts.redirectTab\r\n});\r\n\r\nexport default connect(mapState,\r\n    {\r\n        setAllocationRestrictions,\r\n        setCurrentTrunkId,\r\n        setCurrentRangeNumber,\r\n        getAccount,\r\n        getAccountTrunk,\r\n        getAccessListFilter,\r\n        getAccountAllocatedNumbers,\r\n        getTrunkNumberCsvById,\r\n        setModifiedLimitId,\r\n        getAccountUsers,\r\n        getRates,\r\n        getKeyList,\r\n        getAccountManagersList,\r\n    })(Account);\r\n  \r\n","import React from 'react';\r\nimport {Alert, Loader, Placeholder} from 'rsuite';\r\nimport CreateForm from './CreateForm';\r\nimport PageHeader from '../../components/base/PageHeader';\r\nimport PanelLayout from '../../components/base/PanelLayout';\r\nimport {api} from '../../api/loginRoutes';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {ACCOUNT_CREATE_METHOD} from '../../const/apiMethods';\r\nimport {checkPermissionsFor} from '../../store/storeHelpers';\r\nimport {getAccountManagersList} from \"../../actions/account_managers\";\r\n\r\nconst {Paragraph} = Placeholder;\r\nconst USER_NAME_ALREADY_USED_CODE = 4;\r\n\r\nclass NewAccount extends React.Component {\r\n    formDefaultValue = {\r\n        account_manager_id: null,\r\n        cur_key: null,\r\n        pt_key: null,\r\n        trunk_notificaton: 'all_numbers_trunk'\r\n    };\r\n\r\n    state = {\r\n        disabled: false,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setUpFormDefaultValues(props);\r\n    }\r\n\r\n    setUpFormDefaultValues(props) {\r\n        const {currency_list, payment_terms_list, account_manager_list, registeredAccount} = props;\r\n\r\n        if (payment_terms_list.length)\r\n            this.formDefaultValue.pt_key = payment_terms_list[0].pt_key;\r\n\r\n        if (account_manager_list.length)\r\n            this.formDefaultValue.account_manager_id = account_manager_list[0].id;\r\n\r\n        if (Object.keys(registeredAccount)) {\r\n            if (registeredAccount.cur_key)\r\n                this.formDefaultValue.cur_key = registeredAccount.cur_key;\r\n\r\n            if (registeredAccount.name && registeredAccount.email && registeredAccount.name) {\r\n                const person = registeredAccount.name;\r\n                const email = registeredAccount.email;\r\n                const messenger = registeredAccount.skype;\r\n                this.formDefaultValue.users = [{name: person, email}];\r\n                this.formDefaultValue.contacts = [{person, email, messenger}];\r\n            }\r\n        } else {\r\n            if (currency_list.length)\r\n                this.formDefaultValue.cur_key = currency_list[0].cur_key;\r\n        }\r\n        console.log(this.formDefaultValue);\r\n    }\r\n\r\n    checkData = () => {\r\n        return !!Object.keys(this.formDefaultValue).filter(\r\n            x => this.formDefaultValue[x] === null\r\n        ).length;\r\n    };\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        this.setUpFormDefaultValues(nextProps);\r\n\r\n        return true;\r\n    }\r\n\r\n    onCancel = () => {\r\n        this.props.history.goBack();\r\n    };\r\n\r\n    onSubmit = async (data, account_manager_id, users, contacts = [], reg_key) => {\r\n        this.setState({disabled: true});\r\n\r\n        try {\r\n            const result = await api(ACCOUNT_CREATE_METHOD, {\r\n                ...data,\r\n                target: {account_manager_id}\r\n            }, true);\r\n            this.setState({disabled: false});\r\n\r\n            if (result && result.account) {\r\n\r\n                if (!checkPermissionsFor(\"account_user:create\") || !checkPermissionsFor(\"account_contact:create\")) {\r\n                    this.props.history.replace('/reload');\r\n                    this.props.history.push({\r\n                        pathname: `/accounts/view/${result.account.id}`,\r\n                        search: '?tab=general'\r\n                    });\r\n                } else {\r\n                    await Promise.all([\r\n                        ...users\r\n                            .map(\r\n                                (user) => api('account_user:create', {\r\n                                    ...user,\r\n                                    ...(reg_key ? {reg_key} : {}),\r\n                                    target: {\r\n                                        account_id: result.account.id\r\n                                    }\r\n                                })\r\n                            ),\r\n                        ...contacts\r\n                            .map(\r\n                                (contact) => api('account_contact:create', {\r\n                                    ...contact,\r\n                                    target: {account_id: result.account.id}\r\n                                }, true)\r\n                            )\r\n                        ])\r\n                        .finally(() => {\r\n                            this.props.history.replace('/reload');\r\n                            this.props.history.push({\r\n                                pathname: `/accounts/view/${result.account.id}`,\r\n                                search: '?tab=general'\r\n                            });\r\n                        });\r\n                    }\r\n            } else {\r\n                if (result.error.code === USER_NAME_ALREADY_USED_CODE) {\r\n                    Alert.error('Account name already exists, please change to another');\r\n                }\r\n                this.setState({disabled: false});\r\n            }\r\n        } catch (e) {\r\n            this.setState({disabled: false});\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {disabled} = this.state;\r\n        const {\r\n            currency_list, payment_terms_list, account_manager_list, loadingReferences,\r\n            client_role_list, admin_role_list, getAccountManagersList, registeredAccount\r\n        } = this.props;\r\n\r\n        return (\r\n            <PanelLayout>\r\n                <PageHeader title=\"Create Account\"/>\r\n                {loadingReferences && <Loader backdrop content=\"loading...\" vertical/>}\r\n\r\n                {\r\n                    loadingReferences\r\n                        ?\r\n                        <Paragraph rows={5}/>\r\n                        :\r\n                        <CreateForm\r\n                            onSubmit={this.onSubmit}\r\n                            disabled={loadingReferences || disabled}\r\n                            formDefaultValue={this.formDefaultValue}\r\n                            onCancel={this.onCancel}\r\n                            isSeparatedPage={true}\r\n                            registration_key={registeredAccount.reg_key}\r\n                            {...{\r\n                                currency_list,\r\n                                payment_terms_list,\r\n                                account_manager_list,\r\n                                client_role_list,\r\n                                admin_role_list,\r\n                                getAccountManagersList\r\n                            }}\r\n                        />\r\n                }\r\n            </PanelLayout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(NewAccount);","import { connect } from 'react-redux';\r\nimport {createAccount} from '../actions/accounts';\r\nimport CreateAccount from '../pages/NewAccount';\r\nimport {getAccountManagersList} from \"../actions/account_managers\";\r\n\r\nconst mapState = ( {accounts, references, account_managers} )=> ({\r\n    account_manager_list: account_managers.list,\r\n    currency_list:references.currency_list,\r\n    payment_terms_list: references.payment_terms_list,\r\n    loadingReferences: references.loading,\r\n    client_role_list: references.client_role_list,\r\n    admin_role_list: references.admin_role_list,\r\n    registeredAccount: accounts.registeredAccount\r\n});\r\n\r\nexport default connect( mapState, {\r\n    createAccount,\r\n    getAccountManagersList\r\n})(CreateAccount);\r\n  ","import React, {useState} from 'react';\r\nimport {Form, Schema, SelectPicker} from 'rsuite';\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport ServicePlans from '../../components/Filters/ServicePlans';\r\nimport Text from '../../components/Form/Text';\r\nimport CustomField from \"../../components/Form/CustomField\";\r\nimport {OTP_SERVICE_PLAN_KEY} from '../../const';\r\nimport styled from 'styled-components';\r\n\r\nconst { StringType } = Schema.Types;\r\n\r\nconst filtersModel = Schema.Model({\r\n    str: StringType().maxLength(40, 'Max characters 40'),\r\n    }\r\n);\r\n\r\nexport default FormHOC( ({ onChange, currency_list, defaultFormValue }) => {\r\n    const [changedServicePlan, onChangeServicePlan] = useState(null);\r\n    return (\r\n        <Form\r\n            model={filtersModel}\r\n            onChange={onChange}\r\n            formDefaultValue = {defaultFormValue}\r\n            layout=\"inline\"\r\n            style = {{marginBottom: '-10px'}}\r\n        >\r\n            <StyledField>\r\n                <ServicePlans\r\n                    filtered\r\n                    onChange={(value) => {\r\n                        onChangeServicePlan(value)\r\n                    }}\r\n                />\r\n            </StyledField>\r\n\r\n            <StyledField>\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    style={{\r\n                        maxWidth: '80px',\r\n                        minWidth: '30px'\r\n                    }}\r\n                    data={currency_list}\r\n                    cleanable={false}\r\n                    searchable={false}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"cur_key\"\r\n                    name=\"cur_key\"\r\n                    classPrefix=\"allocated\"\r\n                />\r\n            </StyledField>\r\n\r\n            <StyledField>\r\n                <Text name=\"str\" placeholder={`Filter per origin, CLI${changedServicePlan === OTP_SERVICE_PLAN_KEY ? ', Service' : ''}`}/>\r\n            </StyledField>\r\n        </Form>\r\n    )\r\n},filtersModel, 500)\r\n\r\n\r\nconst StyledField = styled.div`\r\n    display: inline-block;\r\n`;","import React from 'react';\r\nimport TableServerSort from '../../components/Table/TableServerSort';\r\nimport {OTP_SERVICE_PLAN_KEY} from './../../const';\r\n\r\nexport default ({\r\n    accessList = [], \r\n    getItems, \r\n    accessListLoading = false, \r\n    page = 1, \r\n    count = 0, \r\n    per_page,\r\n    paymentTermsList,\r\n    spAuth,\r\n\r\n    ...props\r\n}) => {\r\n\r\n    const columns = [\r\n        {\r\n            label: 'Access origin', \r\n            dataKey: 'a_subdestination_name', \r\n            sortable: true,\r\n            spAuth: false,\r\n            flexGrid: 1,\r\n            minWidth: 220\r\n        },\r\n        {\r\n            label: 'CLI', \r\n            dataKey: 'a_number', \r\n            sortable: true,\r\n            spAuth: false,\r\n            flexGrid: 1,\r\n            minWidth: 220\r\n        },\r\n        {\r\n            label: 'Access destination', \r\n            dataKey: 'b_subdestination_name', \r\n            sortable: true,\r\n            spAuth: false,\r\n            flexGrid: 1,\r\n            minWidth: 220\r\n        },\r\n        {\r\n            label: 'Test number', \r\n            dataKey: 'b_number', \r\n            sortable: true,\r\n            spAuth: false,\r\n            flexGrid: 1,\r\n            minWidth: 220\r\n        },\r\n        {\r\n            label: 'Service', \r\n            value: ({a_service, a_number}) => (\r\n                a_service || a_number \r\n                    ? `${a_service ? a_service : \"\"} ${a_number ? `(${a_number})` : \"\"}`\r\n                    : \"\"\r\n            ), \r\n            sortable: true,\r\n            spAuth: true,\r\n            dataKey: \"a_service\",\r\n            flexGrid: 1,\r\n            minWidth: 140\r\n        },\r\n        {\r\n            label: 'Destination', \r\n            value: ({b_subdestination_name, b_template}) => (\r\n                b_subdestination_name || b_template \r\n                    ? `${b_subdestination_name ? b_subdestination_name : \"\"} ${b_template ? `(${b_template})` : \"\"}`\r\n                    : \"\"\r\n            ), \r\n            sortable: true,\r\n            spAuth: true,\r\n            dataKey: \"b_subdestination_name\",\r\n            flexGrid: 1,\r\n            minWidth: 140\r\n        },\r\n    ].filter(value => value.spAuth === undefined || value.spAuth === spAuth);\r\n\r\n    const paymentColumns = [];\r\n\r\n    for (const term of paymentTermsList) {\r\n        paymentColumns.push(\r\n            {\r\n                id: `payment_${term.name}`,\r\n                label: `Payment ${term.name}`,\r\n                value: (({payment_terms_rate_list}) => {\r\n                    if (payment_terms_rate_list) {\r\n\r\n                        const termsRate = payment_terms_rate_list\r\n                            ? payment_terms_rate_list.find(item => item.pt_key === term.pt_key)\r\n                            : null;\r\n\r\n                        let currency = payment_terms_rate_list\r\n                            ? payment_terms_rate_list.find(value => value.rate !== null)\r\n                            : null;\r\n                        \r\n                        if (currency) {\r\n                            currency = currency.currency_name;\r\n                        }\r\n                        if (termsRate && termsRate.rate && currency) {\r\n                            return `${Number(termsRate.rate).toFixed(4)} ${currency ? currency : ''}`;\r\n                        } else {\r\n                            return '—';\r\n                        }\r\n                    } else {\r\n                        return '—';\r\n                    }\r\n                }),\r\n                width: 140,\r\n                align: 'center'\r\n            });\r\n    }\r\n\r\n    if (paymentColumns) {\r\n        for (const column of paymentColumns) {\r\n            columns.push(column);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <TableServerSort\r\n            data={accessList}\r\n            loading={accessListLoading}\r\n            columns = {columns}\r\n            count = {count}\r\n            per_page = {per_page}\r\n            page = {page}\r\n            getItems = {getItems}\r\n            ispagination\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { getFileResponse } from '../api/loginRoutes';\r\nimport { saveFileBlob } from '../utils/helpers';\r\nimport {ButtonSideIcon} from \"./base/BaseButton\";\r\n\r\n\r\nexport default ({ method, params, title, fileName, ...props}) => {\r\n    const [loading, setLoading] = React.useState(false)\r\n    \r\n    const exportFile = async () => {\r\n        setLoading(true);\r\n        const result = await getFileResponse(method,params)\r\n        if(result)\r\n            saveFileBlob(result,fileName)\r\n        setLoading(false)\r\n\r\n    }\r\n\r\n    return (\r\n        <ButtonSideIcon\r\n            onClick={() => exportFile()} \r\n            loading = {loading} \r\n            icon = \"upload2\"\r\n            {...props}     \r\n        >\r\n            {title}\r\n        </ButtonSideIcon>\r\n    )\r\n};","import {ACCESS_LIST as PREFIX, DEFAULT_PER_PAGE_MEDIUM, DESC_SORT, SET_LOADING_ACCESS_EXCLUSION} from '../const';\r\nimport {ACCESS_EXCLUSION_LIST} from '../const/apiMethods';\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from './defaults';\r\n\r\n// cancellation\r\nimport axios from 'axios';\r\n\r\nlet cancelToken = axios.CancelToken.source();\r\n\r\nconst setAccessList = createAction('SET_ITEMS_' + PREFIX);\r\nconst setLoading = createAction('SET_LOADING_' + PREFIX);\r\nconst setAccessExclusionList = createAction(ACCESS_EXCLUSION_LIST);\r\nconst setAccessExclusionLoading = createAction(SET_LOADING_ACCESS_EXCLUSION);\r\n\r\n\r\nexport const getAccessList = (filter, page = 1, per_page = DEFAULT_PER_PAGE_MEDIUM, sort, spAuth = false) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n\r\n    let sort1, sort1_desc;\r\n\r\n    if (sort.column) {\r\n        sort1 = sort.column;\r\n        sort1_desc = sort.type && sort.type === DESC_SORT;\r\n    }\r\n\r\n    const method = spAuth ? \"access_list_otp__get_list\" : \"access_list__get_list\";\r\n\r\n    if (typeof cancelToken !== typeof undefined) {\r\n        cancelToken.cancel(\"Operation canceled due to new request.\");\r\n    }\r\n\r\n    cancelToken = axios.CancelToken.source();\r\n\r\n    api(method, {filter, page, per_page, sort1, sort1_desc}, false, cancelToken)\r\n        .then((response) => {\r\n            \r\n            if (axios.isCancel(response)) {\r\n                return;\r\n            }\r\n\r\n            if (response === undefined) {\r\n                dispatch(setLoading(false));\r\n                return;\r\n            }\r\n\r\n            const {access_list_count = 0, access_list_list = []} = response;\r\n\r\n            localStorage.setItem(PREFIX + '_per_page', per_page);\r\n\r\n            dispatch(setAccessList({\r\n                count: access_list_count,\r\n                access_list_list,\r\n                page,\r\n                per_page\r\n            }));\r\n\r\n            dispatch(setLoading(false))\r\n        });\r\n};\r\n\r\nexport const getAccessExclusionList = () => (dispatch) => {\r\n    api(ACCESS_EXCLUSION_LIST, {target: {}})\r\n        .then(({access_list_exclusion_list = []}) => {\r\n            dispatch(setAccessExclusionList(access_list_exclusion_list));\r\n        })\r\n        .finally(() => dispatch(setAccessExclusionLoading(false)));\r\n};\r\nexport const onAddAccessExclusionItem = (data) => async (dispatch) => {\r\n    return await api(\r\n        'access_list_exclusion:create',\r\n        {\r\n            target: {},\r\n            ...data,\r\n        }\r\n    );\r\n};\r\nexport const onEditAccessExclusionItem = (alx_key, data) => async (dispatch) => {\r\n    return await api(\r\n        'access_list_exclusion:modify',\r\n        {\r\n            target: {\r\n                alx_key\r\n            },\r\n            ...data,\r\n        }\r\n    );\r\n};\r\nexport const onRemoveAccessExclusionItem = (alx_key) => async (dispatch) => {\r\n    return await api(\r\n        'access_list_exclusion:remove',\r\n        {\r\n            target: {\r\n                alx_key\r\n            }\r\n        }\r\n    );\r\n};","import React from 'react';\r\nimport {FlexboxGrid} from 'rsuite'\r\nimport PageHeader from '../../components/base/PageHeader'\r\nimport AccessListFilters from './AccessListFilters'\r\nimport AccessListTable from './AccessListTable'\r\nimport PanelLayout from '../../components/base/PanelLayout';\r\nimport ExportCsv from '../../components/ExportCsv';\r\nimport {connect} from \"react-redux\";\r\nimport {getAccessList} from \"../../actions/access_list\";\r\nimport {USD_DEFAULT_CURRENCY_KEY} from \"../../const\";\r\n\r\nclass AccessList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.filters = {\r\n            str: '',\r\n            sp_key: props.defaultSPKey,\r\n            cur_key: USD_DEFAULT_CURRENCY_KEY\r\n        };\r\n        this.defaultSort = {column: \"a_subdestination_name\", type: \"asc\"};\r\n        this.defaultSortOTP = {column: \"time\", type: \"desc\"};\r\n        this.state = {\r\n            spAuth: false,\r\n            sort: {...this.defaultSort}\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {getAccessList, per_page, spAuth} = this.props;\r\n\r\n        getAccessList(this.filters, 1, per_page, this.state.sort, spAuth);\r\n    }\r\n\r\n    onChangeFilters = (filtersObj) => {\r\n        const {getAccessList, per_page, service_plan_list} = this.props;\r\n        \r\n        const currentServicePlan = service_plan_list.find(item => item.sp_key === filtersObj.sp_key);\r\n        if (this.filters.sp_key !== filtersObj.sp_key) {\r\n            this.setState({\r\n                spAuth: currentServicePlan.auth,\r\n                sort: currentServicePlan.auth \r\n                    ? {...this.defaultSortOTP} \r\n                    : {...this.defaultSort}\r\n            });\r\n        }\r\n        \r\n        this.filters = filtersObj;\r\n        \r\n        getAccessList(this.filters, 1, per_page, this.state.sort, currentServicePlan.auth);\r\n    };\r\n\r\n    getItems = (page, per_page, sort) => {\r\n        const { getAccessList } = this.props;\r\n        const {spAuth} = this.state;\r\n\r\n        getAccessList(this.filters, page, per_page, sort, spAuth);\r\n    };\r\n\r\n    render () {\r\n        const {accessList, accessListLoading, page, count, per_page, currency_list, paymentTermsList} = this.props;\r\n        const {spAuth} = this.state;\r\n\r\n        const method = spAuth ? \"access_list_otp__get_list\" : \"access_list__get_list\";\r\n\r\n        return (\r\n            <PanelLayout>\r\n                <PageHeader title=\"Access List\">\r\n                    <ExportCsv\r\n                        method={method}\r\n                        params={{filter: this.filters}}\r\n                        title='Download'\r\n                        fileName='accesses_list.csv'\r\n                        style={{position: 'relative', right: 15}}\r\n                    />\r\n                </PageHeader>\r\n                <FlexboxGrid>\r\n                    <FlexboxGrid.Item colspan={24}>\r\n                        <AccessListFilters \r\n                            onChange = {this.onChangeFilters}\r\n                            defaultFormValue = {this.filters}\r\n                            currency_list={currency_list}\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n                \r\n                <AccessListTable\r\n                    {...{\r\n                        accessList,\r\n                        accessListLoading,\r\n                        page, \r\n                        count,\r\n                        per_page,\r\n                        spAuth\r\n                    }}\r\n                    paymentTermsList={paymentTermsList}\r\n                    getItems = {this.getItems}\r\n                    onSort={(column, type) => this.setState({sort: {column, type}})}\r\n                    sortType={this.state.sort.type}\r\n                    sortColumn={this.state.sort.column}\r\n                    filters={this.filters}\r\n                />\r\n                \r\n            </PanelLayout>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapState = ( {access_list, references} )=> ({\r\n    accessList: access_list.items,\r\n    count: access_list.count,\r\n\r\n    accessListLoading: access_list.loading,\r\n    page: access_list.page,\r\n    per_page: access_list.per_page,\r\n    defaultSPKey: references.defaultSPKey,\r\n    currency_list: references.currency_list,\r\n    paymentTermsList: references.payment_terms_list,\r\n    service_plan_list: references.service_plan_list,\r\n});\r\n\r\nexport default connect(mapState, {\r\n    getAccessList\r\n})(AccessList);","import {LIVE_CALLS as PREFIX, LIVE_CALLS_LIST} from '../const/';\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from  './defaults';\r\n\r\nconst setLiveCalls = createAction('SET_ITEMS_'+PREFIX);\r\nconst setLoading = createAction('SET_LOADING_'+PREFIX);\r\nconst setLoadingItem = createAction('SET_LOADING_ITEM_'+PREFIX);\r\nconst removeItem = createAction('REMOVE_ITEM_'+PREFIX);\r\n\r\nexport const getLiveCalls = () => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    api(LIVE_CALLS_LIST,)\r\n        .then( ({ live_call_list = [] }) => dispatch(\r\n            setLiveCalls(\r\n                    (live_call_list || []).map(\r\n                        x => ({\r\n                                ...x,\r\n                                termination_point: `${x.ip_term}:${x.port_term} ${x.tprefix_term}`\r\n                             })\r\n                    )\r\n                )\r\n        ))\r\n        .finally(() => dispatch(setLoading(false)));\r\n};\r\n\r\n\r\nexport const stopCall = (CALL_KEY, onSuccess) => (dispatch) => {\r\n    dispatch(setLoadingItem(true));\r\n    api('live_call:stop',{CALL_KEY})\r\n        .then( (data) => {\r\n            onSuccess();\r\n        })\r\n        .finally(() => dispatch(setLoadingItem(false)));\r\n};","import React from 'react';\r\nimport TableClientSort from '../../components/Table/TableClientSort';\r\nimport {Table as _Table} from \"rsuite\";\r\nimport {BaseButton} from '../../components/base/BaseButton';\r\nimport './LiveCalls.css'\r\nimport styled from \"styled-components\";\r\n\r\nconst { Column, HeaderCell, Cell } = _Table;\r\n\r\nconst columns = [\r\n     // {label: 'Account', dataKey: 'acc_name_orig', minWidth: 120, title:true, sortable: true},\r\n     // {label: 'A-number', dataKey: 'a_number' , minWidth: 120, sortable: true},\r\n     // {label: 'Originated from', dataKey: 'a_subdestination_name', minWidth: 150, title:true, sortable: true},\r\n     // {label: 'Rate orig', dataKey: 'rate_orig', minWidth: 120, align: 'center', sortable: true},\r\n     // {label: 'B-number', dataKey: 'b_number', minWidth: 120, sortable: true},\r\n     // {label: 'Destination', dataKey: 'b_subdestination_name', minWidth: 120, title:true, sortable: true},\r\n     // {label: 'Range', dataKey: 'range', title:true, sortable: true, minWidth: 100},\r\n     // {label: 'Rate term', dataKey: 'rate_term', minWidth: 120, align: 'center', sortable: true},\r\n     // {label: 'Dialer', dataKey: 'acc_name_term', title:true, sortable: true, minWidth: 100},\r\n     // {label: 'Termination point', dataKey: 'termination_point', minWidth: 150, align:'center', title:true, sortable: true},\r\n     // {label: 'Duration', dataKey: 'duration', minWidth: 100, sortable: true},\r\n    {label: 'Account', dataKey: 'acc_name_orig', minWidth: 120, title:true, sortable: true, value: ({acc_name_orig, rate_orig}) => {\r\n            return (\r\n                <div className=\"table-two-staged__cell\">\r\n                    <div className=\"table-two-staged__cell-first\">{acc_name_orig}</div>\r\n                    <div className=\"table-two-staged__cell-second\">Rate: {rate_orig}</div>\r\n                </div>\r\n            )\r\n        }\r\n    },\r\n    {label: 'A-number', dataKey: 'a_number', minWidth: 120, sortable: true, value: ({a_number, a_subdestination_name}) => {\r\n            return (\r\n                <div className=\"table-two-staged__cell\">\r\n                    <div className=\"table-two-staged__cell-first\">{a_number}</div>\r\n                    <div className=\"table-two-staged__cell-second\">{a_subdestination_name}</div>\r\n                </div>\r\n            )\r\n        }\r\n    },\r\n    {label: 'B-number', dataKey: 'b_number', minWidth: 120, sortable: true, value: ({b_number, b_subdestination_name}) => {\r\n            return (\r\n                <div className=\"table-two-staged__cell\">\r\n                    <div className=\"table-two-staged__cell-first\">{b_number}</div>\r\n                    <div className=\"table-two-staged__cell-second\">{b_subdestination_name}</div>\r\n                </div>\r\n            )\r\n        }\r\n    },\r\n    {label: 'Range', dataKey: 'range', title:true, sortable: true, minWidth: 100, value: ({range, rate_term}) => {\r\n            return (\r\n                <div className=\"table-two-staged__cell\">\r\n                    <div className=\"table-two-staged__cell-first\">{range}</div>\r\n                    <div className=\"table-two-staged__cell-second\">Rate: {rate_term}</div>\r\n                </div>\r\n            )\r\n        }\r\n    },\r\n    {label: 'Dialer', dataKey: 'acc_name_term', title:true, sortable: true, minWidth: 100, value: ({acc_name_term, termination_point}) => {\r\n            return (\r\n                <div className=\"table-two-staged__cell\">\r\n                    <div className=\"table-two-staged__cell-first\">{acc_name_term}</div>\r\n                    <div className=\"table-two-staged__cell-second\">{termination_point}</div>\r\n                </div>\r\n            )\r\n        }\r\n    },\r\n    {label: 'Duration', dataKey: 'duration', minWidth: 100, width: 100, align: 'right', sortable: true, value: ({duration}) => {\r\n            return (\r\n                <div className=\"table-two-staged__cell\">\r\n                    <div className=\"table-two-staged__cell-single\">{duration}</div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n];\r\n\r\n\r\nexport default ({onStop, data, loading, onDataUpdated }) =>  {\r\n        return (<TableClientSort\r\n                    data={data}\r\n                    rowHeight={50}\r\n                    height={500}\r\n                    loading={loading}\r\n                    columns = {columns}\r\n                    columnSelectorLSKey=\"LiveCallsTable\"\r\n                    ActionCell = {ActionCell(onStop)}\r\n                    onDataUpdated={onDataUpdated}\r\n                 />\r\n        );\r\n}\r\n\r\nconst ActionCell = (onStop) => (\r\n    <Column align={'center'} width={100}>\r\n        <HeaderCell>Action</HeaderCell>\r\n        <Cell>\r\n            {({call_key}) => <div className=\"table-two-staged__cell\">\r\n                <div className=\"table-two-staged__cell-single\">\r\n                    <StyledCloseButton\r\n                        buttonStyle=\"error\"\r\n                        size=\"esm\"\r\n                        onClick={() =>onStop(call_key)}\r\n                        style={{position:'relative', top:'-3px'}}>\r\n                        Stop\r\n                    </StyledCloseButton>\r\n                </div>\r\n            </div> }\r\n        </Cell>\r\n    </Column>\r\n)\r\n\r\n\r\nconst StyledCloseButton = styled(BaseButton)`\r\n    && {\r\n        padding-top: 4px;\r\n        padding-bottom: 4px;\r\n    }\r\n`;","import React, {useMemo, useRef} from \"react\";\r\nimport {ControlLabel, Form, FormControl, InputNumber, Schema} from \"rsuite\";\r\nimport m from \"../../definedMessages\";\r\nimport {useIntl} from \"react-intl\";\r\nimport {debounce} from \"jsoneditor/src/js/util\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst {NumberType} = Schema.Types;\r\nconst MIN_NUMBER = 0;\r\nconst MAX_NUMBER = 100000;\r\n\r\nexport default (\r\n    {\r\n        formDefaultValue = {},\r\n        onChange\r\n    }\r\n) => {\r\n\r\n    const ref = useRef(null);\r\n    const {formatMessage} = useIntl();\r\n\r\n    const formModel = useMemo(() => {\r\n        return Schema.Model({\r\n            timer: NumberType(formatMessage(m.pleaseEnterValidNumber))\r\n                .min(MIN_NUMBER, formatMessage(m.minNumber, {number: MIN_NUMBER}))\r\n                .max(MAX_NUMBER, formatMessage(m.maxNumber, {number: MAX_NUMBER}))\r\n                .isInteger(\"It can only be an integer\")\r\n        });\r\n\r\n    }, []);\r\n\r\n    const handleChange = () => {\r\n        if (!ref.current.check()) {\r\n            return;\r\n        }\r\n        const formValue = ref.current.getFormValue();\r\n        onChange && onChange(formValue);\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            ref={ref}\r\n            model={formModel}\r\n            formDefaultValue={formDefaultValue}\r\n            onChange={debounce(handleChange, 500)}\r\n        >\r\n            <StyledContent>\r\n                <ControlLabel>{formatMessage(m.autorefreshPeriod)}</ControlLabel>\r\n                <StyledField>\r\n                    <FormControl\r\n                        accepter={InputNumber}\r\n                        name=\"timer\"\r\n                        min={MIN_NUMBER}\r\n                        max={MAX_NUMBER}\r\n                    />\r\n                </StyledField>\r\n            </StyledContent>\r\n        </Form>\r\n    )\r\n};\r\n\r\nconst StyledContent = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    margin-bottom: -10px;\r\n    \r\n    && > * {\r\n        flex-shrink: 0;\r\n        margin-bottom: 10px;\r\n        padding-left: 5px;\r\n        padding-right: 5px;\r\n    }\r\n`;\r\nconst StyledField = styled.div`\r\n    max-width: 80px;\r\n`;\r\n","import React from 'react';\r\nimport {InputGroup, Input, Icon, FlexboxGrid, Button} from \"rsuite\";\r\nimport {ButtonPrimary} from '../../components/base/BaseButton';\r\nimport LiveCallsAutoUpdateForm from \"./LiveCallsAutoUpdateForm\";\r\nimport styled from \"styled-components\";\r\n\r\nconst styles = {\r\n    width: 350,\r\n    marginBottom: 10,\r\n};\r\n\r\nexport default (\r\n    {\r\n        onChange,\r\n        onUpdate,\r\n        loading,\r\n\r\n        autoUpdateFormValue = {},\r\n        onChangeAutoUpdateValue\r\n    })  => (\r\n    <FlexboxGrid justify=\"space-between\">\r\n        <FlexboxGrid.Item colspan={12}>\r\n            <InputGroup style={styles}>\r\n                <Input onChange={onChange}\r\n                    placeholder={'Filter per account/dialer/numbers/destinations'}\r\n                />\r\n            </InputGroup> \r\n        </FlexboxGrid.Item>\r\n        <FlexboxGrid.Item colspan={12} style={{display: 'flex', 'justify-content': 'flex-end'}}>\r\n            <StyledUpdateBlock>\r\n                <LiveCallsAutoUpdateForm\r\n                    formDefaultValue={autoUpdateFormValue}\r\n                    onChange={onChangeAutoUpdateValue}\r\n                />\r\n                <ButtonPrimary onClick={onUpdate} disabled={loading}>\r\n                    Update data\r\n                </ButtonPrimary>\r\n            </StyledUpdateBlock>\r\n        </FlexboxGrid.Item>\r\n    </FlexboxGrid>\r\n)\r\n\r\nconst StyledUpdateBlock = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: flex-start;\r\n    \r\n    .rs-form {\r\n        margin-right: 20px;\r\n    }\r\n`;","import React from 'react';\r\nimport {Button, Loader, ButtonToolbar} from 'rsuite';\r\nimport {BaseModal as Modal} from \"../../components/base/BaseModal\";\r\n\r\nexport default ({onConfirm, onCancel, loading, size, show}) => {\r\n    return (\r\n        <Modal size={size} show={show} onHide={onCancel}>\r\n            <Modal.Header>\r\n                <Modal.Title>Stop call</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n               {loading ? (\r\n                    <div style={{ textAlign: 'center' }}>\r\n                        <Loader size=\"md\" />\r\n                    </div>    \r\n                ) : (\r\n                    <p>Do you really want to stop this call?</p>\r\n                )}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <ButtonToolbar>\r\n                    <Button onClick={onConfirm} disabled={loading} appearance=\"primary\">\r\n                        Yes\r\n                    </Button>\r\n                    <Button onClick={onCancel} disabled={loading} appearance=\"subtle\">\r\n                        No\r\n                    </Button>\r\n                </ButtonToolbar>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}","import React from 'react';\r\nimport { FlexboxGrid } from 'rsuite';\r\nimport PageHeader from '../../components/base/PageHeader'\r\nimport LiveCallsTable from './LiveCallsTable';\r\nimport LiveCallsHeader from \"./LiveCallsHeader\";\r\nimport StopCallModal from './StopCallModal';\r\nimport PanelLayout from '../../components/base/PanelLayout';\r\nimport {LOCAL_STORAGE_LIVE_CALLS_AUTO_UPDATE} from \"../../const/localStorageKeys\";\r\n\r\nconst SearchKeysIncluses = ['acc_name_orig', 'acc_name_term',  'a_subdestination_name', 'b_subdestination_name'];\r\nconst SearchKeysStarts = ['a_number', 'b_number']\r\n    \r\nexport default class extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const savedAutoUpdate = localStorage.getItem(LOCAL_STORAGE_LIVE_CALLS_AUTO_UPDATE);\r\n        const timerValue = savedAutoUpdate && !isNaN(savedAutoUpdate) && parseFloat(savedAutoUpdate) <= 100000\r\n            ? savedAutoUpdate\r\n            : null;\r\n        this.updateDataTimer = null;\r\n\r\n        this.state = {\r\n            show: false,\r\n            data: props.live_calls_list,\r\n            searchLoading: false,\r\n\r\n            autoUpdateFormValue: {\r\n                timer: timerValue || null\r\n            },\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate (nextProps){  \r\n        if(nextProps.live_calls_list !== this.props.live_calls_list){\r\n            this.setState({data: nextProps.live_calls_list});\r\n            if(this.searchValue) {\r\n                this.onChangeFilters(this.searchValue);\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getLiveCalls();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.updateDataTimer) {\r\n            clearTimeout(this.updateDataTimer);\r\n            this.updateDataTimer = null;\r\n        }\r\n    }\r\n\r\n    onChangeFilters = (value) => {\r\n        clearTimeout(this.timerOnInputChange);\r\n        const { searchLoading }=  this.state;\r\n        if(!searchLoading) this.setState({searchLoading:true});\r\n        \r\n        this.timerOnInputChange = setTimeout( (value) => {\r\n            this.searchValue = value;\r\n\r\n            const { live_calls_list }  = this.props;\r\n            const data = live_calls_list.filter( row => {\r\n                for (let k of SearchKeysIncluses){\r\n                    if(row[k].toLowerCase().includes(value))\r\n                        return true;\r\n                }\r\n                for (let k of SearchKeysStarts){\r\n                    if(row[k].toLowerCase().startsWith(value))\r\n                        return true;\r\n                }\r\n                return false;\r\n            })\r\n            \r\n            this.setState({data,searchLoading:false}) \r\n        }, 300, value.toLowerCase())\r\n        \r\n    };\r\n    \r\n    onStop = (id) => {\r\n        this.call_key = id;\r\n        this.setState({show: true})\r\n    }\r\n    onConfirmStopCallModal = () => this.props.stopCall(this.call_key, this.onCancelStopCallModal);\r\n    onCancelStopCallModal = () => this.setState({show: false}, this.onUpdate)\r\n    onUpdate = () => this.props.getLiveCalls();\r\n\r\n    onTableDataUpdate = () => {\r\n        const {autoUpdateFormValue} = this.state;\r\n\r\n        if (!autoUpdateFormValue.timer) {\r\n            if (this.updateDataTimer) {\r\n                clearTimeout(this.updateDataTimer);\r\n                this.updateDataTimer = null;\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (this.updateDataTimer) {\r\n            clearTimeout(this.updateDataTimer);\r\n            this.updateDataTimer = null;\r\n        }\r\n\r\n        this.updateDataTimer = setTimeout(() => {\r\n            this.onUpdate()\r\n        }, autoUpdateFormValue.timer * 1000);\r\n    };\r\n\r\n    onChangeAutoUpdateValue = (value) => {\r\n        const timer = isNaN(value.timer) || !parseFloat(value.timer) ? \"\" : value.timer;\r\n        localStorage.setItem(LOCAL_STORAGE_LIVE_CALLS_AUTO_UPDATE, timer);\r\n        this.setState(() => ({autoUpdateFormValue: {timer}}), this.onTableDataUpdate);\r\n    };\r\n\r\n    render () {\r\n        const {data, searchLoading, show, autoUpdateFormValue} = this.state;\r\n        const {loading, loadingItem} = this.props;\r\n        return (\r\n            <PanelLayout >\r\n                    <PageHeader title=\"Live calls\"/>\r\n                    <FlexboxGrid >\r\n                        <FlexboxGrid.Item colspan={24}>\r\n                            <LiveCallsHeader\r\n                                autoUpdateFormValue={autoUpdateFormValue}\r\n                                onChangeAutoUpdateValue={this.onChangeAutoUpdateValue}\r\n                                onUpdate={this.onUpdate}\r\n                                onChange={this.onChangeFilters}\r\n                                loading={loading}\r\n                            />\r\n                        </FlexboxGrid.Item>\r\n                    </FlexboxGrid>\r\n                        <LiveCallsTable\r\n                            onStop={this.onStop}\r\n                            data={data}\r\n                            loading={loading || searchLoading}\r\n                            onDataUpdated={this.onTableDataUpdate}\r\n                        />\r\n                    <StopCallModal size={'xs'}\r\n                                   show={show}\r\n                                   loading={loadingItem}\r\n                                   onCancel={this.onCancelStopCallModal}\r\n                                   onConfirm={this.onConfirmStopCallModal}\r\n                    />\r\n            </PanelLayout>\r\n        )\r\n    }\r\n}","import { connect } from 'react-redux';\r\nimport { getLiveCalls, stopCall } from '../../actions/live_calls';\r\nimport LiveCalls from './LiveCalls';\r\n\r\nconst mapState = ( {live_calls} )=> ({\r\n    loading: live_calls.loading,\r\n    live_calls_list: live_calls.live_calls_list,\r\n    loadingItem: live_calls.loadingItem\r\n});\r\n\r\nexport default connect( mapState, {getLiveCalls, stopCall})(LiveCalls);\r\n","import React from 'react';\r\nimport { Form, FormGroup,SelectPicker, Input, InputGroup, Icon, Schema} from 'rsuite';\r\nimport CustomField from '../../components/Form/CustomField';\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport Checkbox from '../../hoc/Checkbox';\r\nimport ServicePlans from \"../../components/Filters/ServicePlans\";\r\nimport {connect} from \"react-redux\";\r\nimport {USD_DEFAULT_CURRENCY_KEY} from \"../../const\";\r\nconst { StringType } = Schema.Types;\r\n\r\nconst numbersFiltersModel = Schema.Model({\r\n    str: StringType().maxLength(40, 'The maximum is only 40 characters.'),\r\n});\r\n\r\n\r\nconst PriceFilters =   ({onChange, currency_list, worldzone_list, subdestination_list, destination_list, defaultSPKey, price_list}) =>  {\r\n    return (\r\n            <>\r\n                <Form layout=\"inline\" \r\n                    onChange={onChange}\r\n                    formDefaultValue={{\r\n                        cur_key: USD_DEFAULT_CURRENCY_KEY,\r\n                        p_key: price_list.length ? price_list[0].p_key : defaultSPKey\r\n                    }}\r\n                    model={numbersFiltersModel}\r\n                    >\r\n                    <CustomField\r\n                        accepter={SelectPicker}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"p_key\"\r\n                        name=\"p_key\"\r\n                        data={price_list}\r\n                        placeholder=\"Prices\"\r\n                        searchable={false}\r\n                        cleanable={false}\r\n                        classPrefix=\"allocated\"\r\n                    />\r\n                    <CustomField\r\n                        accepter={SelectPicker}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"wz_key\"\r\n                        data={worldzone_list}\r\n                        placeholder=\"Worldzone\"\r\n                        name=\"wz_key\"\r\n                        classPrefix=\"allocated\"\r\n                    />\r\n                     <CustomField\r\n                        accepter={SelectPicker}\r\n                        data={destination_list}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"de_key\"\r\n                        placeholder=\"Destination\"\r\n                        name=\"de_key\"\r\n                        classPrefix=\"allocated\"\r\n                    /> \r\n                    <CustomField\r\n                        accepter={SelectPicker}\r\n                        data={subdestination_list}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"sde_key\"\r\n                        placeholder=\"Subdestination\"\r\n                        name=\"sde_key\"\r\n                        classPrefix=\"allocated\"\r\n                    />  \r\n                    <CustomField\r\n                        accepter={SelectPicker}\r\n                        data={currency_list}\r\n                        cleanable={false}\r\n                        searchable={false}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"cur_key\"\r\n                        name=\"cur_key\"\r\n                        classPrefix=\"allocated\"\r\n                    />\r\n                </Form>\r\n            </>\r\n        )\r\n};\r\n\r\nconst mapStateToProps = ({references}) => ({\r\n    defaultSPKey: references.defaultSPKey\r\n});\r\n\r\nexport default connect(mapStateToProps)(FormHOC(PriceFilters, numbersFiltersModel,300));","import React from \"react\";\r\nimport {Form, Schema, SelectPicker} from \"rsuite\";\r\nimport SDE from '../../../components/Filters/SDE';\r\nimport CustomField from \"../../../components/Form/CustomField\";\r\nimport NumberField from '../../../components/Form/NumberField';\r\nimport styled from \"styled-components\";\r\n\r\nconst {NumberType} = Schema.Types;\r\n\r\nconst numbers = ['1000', '10000', '100000', '1000000'].map(x => ({label: x, value: +x}));\r\n\r\nconst formModel = Schema.Model({\r\n    sde_key: NumberType().isRequired('Required'),\r\n    ranges: NumberType()\r\n        .isRequired('Required')\r\n        .isInteger('Only whole numbers')\r\n        .max(100, \"The maximum of this field is 100\"),\r\n});\r\n\r\nexport default React.forwardRef(({sde_key}, ref) => {\r\n    return (\r\n        <Form\r\n            layout=\"inline\"\r\n            ref={ref}\r\n            formDefaultValue={{\r\n                numbers: 1000,\r\n                ranges: 1,\r\n                sde_key\r\n            }}\r\n            model={formModel}\r\n            method=\"price_range__generate_by_sde\"\r\n        >\r\n            <SdeWrapper>\r\n                <SDE\r\n                    name=\"sde_key\"\r\n                    validationKey=\"num_required\"\r\n                    classPrefix={undefined}\r\n                />\r\n            </SdeWrapper>\r\n\r\n            <NumberField\r\n                label=\"Number of ranges\"\r\n                name=\"ranges\"\r\n                placeholder=\"0\"\r\n                useBr\r\n                min={1}\r\n                max={Infinity}\r\n                step={1}\r\n            />\r\n\r\n            <CustomField\r\n                accepter={SelectPicker}\r\n                data={numbers}\r\n                label=\"Number per range\"\r\n                name=\"numbers\"\r\n                cleanable={false}\r\n                searchable={false}\r\n            />\r\n\r\n        </Form>\r\n    );\r\n});\r\n\r\nconst SdeWrapper = styled.div`\r\n    &&&& {\r\n        display: inline-block;\r\n        \r\n        .rs-form-control-wrapper {\r\n            margin-left: 0;\r\n        }\r\n    }\r\n`;","import React from \"react\";\r\nimport {Form, Input, Schema} from \"rsuite\";\r\nimport CustomField from \"../../../components/Form/CustomField\";\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\nconst formModel = Schema.Model({\r\n    template_list: StringType()\r\n        .addRule((value) => {\r\n            const valueList = value.trim()\r\n                .replace( /\\r?\\n/g, ' ')\r\n                .split(' ')\r\n                .filter( s => s !== \"\")\r\n            for (const row of valueList) {\r\n                if (row.length > 15 || row.length < 7)\r\n                    return false\r\n            }\r\n            return true\r\n        }, 'Each row should be greater than 7 and less than 15')\r\n        .addRule((value) => {\r\n            const valueList = value.trim()\r\n                .replace( /\\r?\\n/g, ' ')\r\n                .split(' ').filter( s => s !== \"\")\r\n            return !((valueList).length > 100)\r\n        }, 'The number of entered telephone numbers exceeds 100 rows')\r\n        .pattern(/^(?: *[0-9]{6,14} *(?:[X]{3,6}\\r|[X]{3,6}\\n|[X]{3,6}$))+$/, 'Please enter a valid numbers')\r\n        .isRequired('This field is required'),\r\n});\r\n\r\nexport default React.forwardRef( (props, ref) => {\r\n    return (\r\n        <Form\r\n            layout=\"inline\"\r\n            ref={ref}\r\n            model={formModel}\r\n            method=\"price_range__generate_by_templates\"\r\n        >\r\n\r\n            <CustomField\r\n                accepter={Input}\r\n                name=\"template_list\"\r\n                componentClass=\"textarea\"\r\n                wrap=\"off\"\r\n                rows={3}\r\n                style={{width: 400}}\r\n                placeholder=\"Template list(one per row)\"\r\n            />\r\n\r\n        </Form>\r\n    );\r\n});","import React from \"react\";\r\nimport {Form, Input, Schema, SelectPicker} from \"rsuite\";\r\nimport CustomField from \"../../../components/Form/CustomField\";\r\n\r\nconst test_number_options = [\r\n    {id: \"none\", label: \"Do not create test number\"},\r\n    {id: \"first\", label: \"Use first number as a test number\"},\r\n    {id: \"random\", label: \"Use random number as a test number\"},\r\n];\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\nconst formModel = Schema.Model({\r\n    test_number_option: StringType().isRequired('This field is required'),\r\n    number_list: StringType()\r\n        .addRule((value) => {\r\n            const valueList = value.trim()\r\n                .replace( /\\r?\\n/g, ' ')\r\n                .split(' ')\r\n                .filter( s => s !== \"\");\r\n            for (const row of valueList) {\r\n                if (row.length > 15 || row.length < 7) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }, 'Each row should be greater than 7 and less than 15')\r\n        .addRule((value) => {\r\n            const valueList = value.trim()\r\n                .replace( /\\r?\\n/g, ' ')\r\n                .split(' ')\r\n                .filter( s => s !== \"\");\r\n            return !((valueList).length > 100)\r\n        }, 'The number of entered telephone numbers exceeds 100 rows')\r\n        .pattern(/^(?: *\\d+ *(?:\\n|$))+$/, 'Please enter a valid numbers')\r\n        .isRequired('This field is required'),\r\n});\r\n\r\nexport default React.forwardRef( (props, ref) => {\r\n    return (\r\n        <Form\r\n            layout=\"inline\"\r\n            ref={ref}\r\n            model={formModel}\r\n            method=\"price_range__generate_by_number_list\"\r\n        >\r\n\r\n            <CustomField\r\n                accepter={Input}\r\n                name=\"number_list\"\r\n                validationKey=\"in_numbers_list_range\"\r\n                componentClass=\"textarea\"\r\n                wrap=\"off\"\r\n                rows={3}\r\n                style={{width: 400}}\r\n                placeholder=\"Number list(one per row)\"\r\n            />\r\n\r\n            <CustomField\r\n                block\r\n                data={test_number_options}\r\n                accepter={SelectPicker}\r\n                labelKey=\"label\"\r\n                valueKey=\"id\"\r\n                placeholder=\"Test number option\"\r\n                name=\"test_number_option\"\r\n                searchable={false}\r\n                cleanable={false}\r\n            />\r\n        </Form>\r\n    );\r\n});","import React from \"react\";\r\nimport {List, Panel} from \"rsuite\";\r\nimport styled from 'styled-components';\r\n\r\n\r\nexport default ({count, numbers = []}) => {\r\n    return (\r\n        <div style={{paddingBottom: '20px'}}>\r\n            <StyledPanel\r\n                header={`${count} numbers were rejected`}\r\n                collapsible\r\n                bordered\r\n            >\r\n                <StyledList size='sm' hover>\r\n                    {numbers.map( (item, index) => (\r\n                        <List.Item key={index} index={index}>\r\n                            {item.number} number is busy\r\n                        </List.Item>\r\n                    ))}\r\n                </StyledList>\r\n            </StyledPanel>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nconst StyledList = styled(List)`\r\n    width: 100%;\r\n`;\r\n\r\nconst StyledPanel = styled(Panel)`\r\n    .rs-panel-body {\r\n        box-shadow: none;\r\n    }\r\n    \r\n    .rs-panel-heading {\r\n        font-size: 14px;\r\n        line-height: 1.5em;\r\n        padding-bottom: 10px;\r\n        padding-top: 10px;\r\n        \r\n        &:before {\r\n            top: 10px !important;\r\n        }   \r\n    }\r\n`;","import React from \"react\";\r\nimport { EOL } from 'const';\r\nimport {Alert, Dropdown, List as RsuiteList} from \"rsuite\";\r\nimport {useWindowWidth} from \"../../../hooks\";\r\nimport styled from \"styled-components\";\r\nimport ListNotCreatedRanges from \"./ListNotCreatedRanges\";\r\nimport * as S from \"../../../components/Modal/ModalAllocationResult/styled\";\r\nimport {copyToClipboard, saveFileBlob} from \"../../../utils\";\r\nimport {BaseModal} from \"../../../components/base/BaseModal\";\r\n\r\nexport default ({\r\n    show,\r\n    onClose,\r\n    width = 820,\r\n    data = [],\r\n    newNumbersCount,\r\n    rejectedNumbers = [],\r\n}) => {\r\n\r\n    const windowWidth = useWindowWidth();\r\n\r\n    const onDownloadList = () => {\r\n        if (!data || !data.length)\r\n            return;\r\n\r\n        const listHeader = \"Name;Test numbers\";\r\n\r\n        const listData = data.map(item => {\r\n            const testNumbers = item.test_trunk_number_list && item.test_trunk_number_list.length\r\n                ? `${item.test_trunk_number_list.join(', ')}`\r\n                : \"\";\r\n            return [item.name, testNumbers].join(\";\");\r\n        });\r\n\r\n        saveFileBlob([listHeader, ...listData].join('\\n'), 'new_ranges.csv');\r\n    };\r\n\r\n    const onCopyList = () => {\r\n        const listData = data.map(item => {\r\n            const testNumbers = item.test_trunk_number_list && item.test_trunk_number_list.length\r\n                ? `(${item.test_trunk_number_list.join(', ')})`\r\n                : \"\";\r\n            return [item.name, testNumbers].join(\" \");\r\n        });\r\n        copyToClipboard( listData.join(EOL) );\r\n        Alert.success(`Copied!`);\r\n    };\r\n\r\n    const numberCsvListItems = data\r\n        .map( (item, index) => {\r\n                return (\r\n                    <RsuiteList.Item key={index}>\r\n                        <span>{item.name}</span>\r\n                        {item.test_trunk_number_list && item.test_trunk_number_list.length\r\n                            ? ` (${item.test_trunk_number_list.join(', ')})`\r\n                            : \"\"\r\n                        }\r\n                    </RsuiteList.Item>\r\n                )\r\n            }\r\n        );\r\n\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            onHide={onClose}\r\n            // width={windowWidth < 820 ? windowWidth : 820}\r\n            style={{width: windowWidth < width ? windowWidth : width}}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>Add new ranges</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body className=\"modal-body\">\r\n                {rejectedNumbers && !!rejectedNumbers.length &&\r\n                    <ListNotCreatedRanges\r\n                        count={rejectedNumbers.length}\r\n                        numbers={rejectedNumbers}\r\n                    />\r\n                }\r\n\r\n                <div className=\"allocation_result_warning-message\" style={{textAlign: 'center'}}>\r\n                    <b>{newNumbersCount || 0}</b> number(s) were added in ranges\r\n                </div>\r\n\r\n                <List\r\n                    size='sm'\r\n                    style={{height: data.length * 36, maxHeight: 288}}\r\n                >\r\n                    {numberCsvListItems}\r\n                </List>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer className=\"modal-footer\">\r\n                {data && data.length\r\n                    ? <>\r\n\r\n                        <S.ButtonToolbar width={windowWidth < 576 ? \"100%\" : \"30%\"}>\r\n                            <S.Dropdown\r\n                                title={\"Copy List\"}\r\n                                placement={windowWidth < width ? 'topStart' : 'bottomStart'}\r\n                            >\r\n                                <Dropdown.Item onClick={onCopyList}>Copy list</Dropdown.Item>\r\n                            </S.Dropdown>\r\n                        </S.ButtonToolbar>\r\n\r\n                        <S.ButtonToolbar width={windowWidth < 576 ? \"100%\" : \"30%\"}>\r\n\r\n                            <S.Dropdown\r\n                                title={\"Download List\"}\r\n                                placement={windowWidth < width ? 'topStart' : 'bottomStart'}\r\n                            >\r\n                                <Dropdown.Item onClick={onDownloadList}>\r\n                                    Download new ranges list\r\n                                </Dropdown.Item>\r\n\r\n                            </S.Dropdown>\r\n\r\n                        </S.ButtonToolbar>\r\n\r\n                        <S.ButtonToolbar width={windowWidth < 576 ? \"100%\" : \"30%\"}>\r\n\r\n                            <S.CancelButton\r\n                                width=\"100%\"\r\n                                onClick={onClose}\r\n                            >\r\n                                Close\r\n                            </S.CancelButton>\r\n\r\n                        </S.ButtonToolbar>\r\n                    </>\r\n                    : null\r\n                }\r\n\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n};\r\n\r\n\r\nexport const List = styled(RsuiteList)`\r\n    margin-top: 10px;\r\n    box-shadow: none !important;\r\n    \r\n    @media (max-width: 767px) {\r\n        display: none !important;\r\n    }\r\n`;\r\n\r\nexport const Modal = styled(BaseModal)`\r\n    && {\r\n        .rs-modal-body {\r\n            overflow: auto !important;\r\n        }\r\n    }\r\n`;","import React, {useState, useRef} from 'react';\r\nimport {Alert, Radio, RadioGroup} from 'rsuite';\r\nimport Modal from '../../../components/Modal';\r\nimport FormRandom from \"./FormRandom\";\r\nimport FormTemplateList from \"./FormTemplateList\";\r\nimport FormNumbersList from \"./FormNumbersList\";\r\nimport {\r\n    PRICE_RANGE_GENERATE_BY_SDE_API,\r\n    PRICE_RANGE_GENERATE_BY_TEMPLATE_API,\r\n    PRICE_RANGE_GENERATE_BY_NUMBER_LIST_API\r\n} from \"../../../const/apiMethods\";\r\nimport {api} from \"../../../api/loginRoutes\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\nimport ModalNewRangeResult from \"./ModalNewRangeResult\";\r\nimport {responseErrorToString} from \"../../../utils\";\r\nimport {ButtonPrimary} from \"../../../components/base/BaseButton\";\r\n\r\nconst formMethods = [\r\n    {id: PRICE_RANGE_GENERATE_BY_TEMPLATE_API, label: \"Per Template\"},\r\n    {id: PRICE_RANGE_GENERATE_BY_SDE_API, label: \"Random\"},\r\n    {id: PRICE_RANGE_GENERATE_BY_NUMBER_LIST_API, label: \"Numbers\"},\r\n];\r\n\r\n\r\nexport default ({sde_key, handleSubmit}) => {\r\n    const [newNumbersCount, setNewNumbersCount] = useState(null);\r\n    const [show, setShow] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [formMethod, setFormMethod] = useState(PRICE_RANGE_GENERATE_BY_TEMPLATE_API);\r\n    const formRef = useRef(null);\r\n    const [resultDataRejected, setResultDataRejected] = useState([]);\r\n    const [resultData, setResultData] = useState([]);\r\n    const [showResultModal, setShowResultModal] = useState(false);\r\n\r\n\r\n    React.useEffect(() => {\r\n        setFormMethod(!!sde_key ? PRICE_RANGE_GENERATE_BY_SDE_API : PRICE_RANGE_GENERATE_BY_TEMPLATE_API);\r\n    }, [sde_key]);\r\n\r\n\r\n    const onSubmit = () => {\r\n        if ( !formRef.current.check() )\r\n            return;\r\n\r\n        setLoading(true);\r\n\r\n        const value = {...formRef.current.getFormValue()};\r\n\r\n        if (value.template_list) {\r\n            value.template_list = value.template_list\r\n                .replace(/\\r?\\n/g, ' ').split(' ').filter(s => s !== '');\r\n        }\r\n        if (value.number_list) {\r\n            value.number_list = value.number_list\r\n                .replace(/\\r?\\n/g, ' ').split(' ').filter(s => s !== '');\r\n        }\r\n        if (value.ranges) {\r\n            value.ranges = +value.ranges;\r\n        }\r\n\r\n        api(formMethod, value)\r\n            .then(response => {\r\n                setLoading(false);\r\n\r\n                if (!response)\r\n                    return;\r\n\r\n                if (response.reason_code) {\r\n                    Alert.error(responseErrorToString(response));\r\n                    return;\r\n                }\r\n\r\n                if (formMethod === PRICE_RANGE_GENERATE_BY_NUMBER_LIST_API) {\r\n                    setShowResultModal(true);\r\n                    setNewNumbersCount(response.new_numbers_count);\r\n                    setResultDataRejected(response.rejected_numbers);\r\n                    setResultData(response.price_range_list);\r\n                    setShow(false);\r\n                    return;\r\n                }\r\n\r\n                Alert.success(`Generated ${response.ranges || 0} ranges`);\r\n                setShow(false);\r\n\r\n                if (handleSubmit) {\r\n                    handleSubmit(response);\r\n                }\r\n            })\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ButtonPrimary\r\n                onClick={() => setShow(true)}\r\n            >\r\n                + Add ranges\r\n            </ButtonPrimary>\r\n\r\n            <Modal\r\n                show={show}\r\n                successText=\"Create\"\r\n                width={600}\r\n                footer={true}\r\n                disabled={loading}\r\n                title=\"Add new ranges\"\r\n                onSuccess={onSubmit}\r\n                onClose={() => {\r\n                    setShow(false);\r\n                }}\r\n            >\r\n                <RadioGroup value={formMethod} onChange={setFormMethod} inline>\r\n                    {formMethods.map(item => (\r\n                        <Radio value={item.id}>{item.label}</Radio>\r\n                    ))}\r\n                </RadioGroup>\r\n                <Spacer size={24}/>\r\n\r\n                {formMethod === PRICE_RANGE_GENERATE_BY_SDE_API &&\r\n                    <FormRandom sde_key={sde_key} ref={formRef} />\r\n                }\r\n                {formMethod === PRICE_RANGE_GENERATE_BY_TEMPLATE_API &&\r\n                    <FormTemplateList ref={formRef} />\r\n                }\r\n                {formMethod === PRICE_RANGE_GENERATE_BY_NUMBER_LIST_API &&\r\n                    <FormNumbersList ref={formRef} />\r\n                }\r\n            </Modal>\r\n\r\n            <ModalNewRangeResult\r\n                newNumbersCount={newNumbersCount}\r\n                show={showResultModal}\r\n                data={resultData}\r\n                rejectedNumbers={resultDataRejected}\r\n                onClose={() => setShowResultModal(false)}\r\n            />\r\n\r\n        </>\r\n    );\r\n};","import React from 'react';\r\nimport { Form, FormGroup,SelectPicker, Input, InputGroup, Icon, Schema} from 'rsuite';\r\nimport CustomField from '../../../components/Form/CustomField';\r\nimport FormHOC from '../../../hoc/FilltersForm';\r\nimport InputSearch from '../../../components/Form/InputSearch';\r\nconst { StringType } = Schema.Types;\r\n\r\nconst filtersModel = Schema.Model({\r\n    str: StringType().maxLength(40, 'The maximum is only 40 characters.'),\r\n});\r\n\r\nconst RangeFilters =   ( {onChange, onUpdateRef} ) =>  {\r\n\r\n    return (\r\n            <>\r\n                <Form layout=\"inline\"\r\n                    onChange={onChange}\r\n                    ref= { ref => onUpdateRef(ref)}\r\n                    // formDefaultValue={\r\n                    model={filtersModel}\r\n                    >\r\n                    <CustomField\r\n                        name=\"str\"\r\n                        accepter={InputSearch}\r\n                        errorPlacement=\"topRight\"\r\n                        placeholder=\"Range name/Numbers search\"\r\n                        style={{width:220}}\r\n                    />\r\n                </Form>\r\n            </>\r\n        )\r\n}\r\n\r\nexport default FormHOC (RangeFilters, filtersModel,300);","import React from 'react';\r\nimport {Icon, IconButton, Table as _Table} from 'rsuite';\r\nimport AddNewRange from './AddNewRange';\r\nimport Table from '../../../components/Table';\r\nimport RangesFilters from './RangesFilters';\r\nimport styled from 'styled-components';\r\nimport {withRouter} from 'react-router';\r\nimport queryString from 'query-string';\r\nimport {ButtonRow} from \"../../../components/base/BaseButton\";\r\n\r\nconst Header = styled.div`\r\n    margin-bottom: -20px;\r\n    > div {\r\n        display: inline-block;\r\n        width: 50%\r\n    }\r\n    >div:last-child{\r\n        text-align: right\r\n    }\r\n`;\r\n\r\nconst {Column, HeaderCell, Cell} = _Table;\r\nconst ActionCell = (onClickList) => (\r\n    <Column flexGrow={1}>\r\n        <HeaderCell>Options</HeaderCell>\r\n        <Cell>\r\n            {({sde_key}) => (\r\n                <div style={{position: 'relative', 'top': '-2px'}}>\r\n                    <ButtonRow\r\n                        as={IconButton}\r\n                        icon={<Icon icon=\"list\"/>}\r\n                        onClick={() => onClickList(sde_key)}\r\n                    />\r\n                </div>\r\n            )}\r\n        </Cell>\r\n    </Column>\r\n);\r\n\r\nconst columns = [\r\n    {label: 'Range name', dataKey: 'name'},\r\n    {label: 'Range prefix', dataKey: 'prefix'},\r\n    {label: 'Numbers', dataKey: 'all_numbers'},\r\n    {label: 'Allocated', dataKey: 'allocated_numbers'},\r\n    {label: 'Test numbers', dataKey: 'test_number'},\r\n];\r\n\r\nclass Ranges extends React.Component {\r\n    filters = {};\r\n    filterform = null;\r\n\r\n    onUpdateRef = (ref) => this.filterform = ref;\r\n\r\n\r\n    onChangeFilters = (filters) => {\r\n        this.filters = filters;\r\n\r\n        this.props.getRanges(this.filters, 1);\r\n        this.props.onChangeFilters(filters);\r\n    };\r\n\r\n    onClickList = () => {\r\n        const {sde_key, history, filters} = this.props;\r\n        const params = {...filters, sde_key};\r\n        const query = queryString.stringify(params);\r\n\r\n        history.push(`/ranges-numbers?${query}`);\r\n    };\r\n\r\n    render() {\r\n\r\n        const {items, loading, count, page, sde_key} = this.props;\r\n\r\n        return (\r\n            <>\r\n                <Header>\r\n                    <div>\r\n                        <RangesFilters\r\n                            onChange={this.onChangeFilters}\r\n                            onUpdateRef={this.onUpdateRef}/>\r\n                    </div>\r\n                    <div>\r\n                        <AddNewRange\r\n                            sde_key={sde_key}\r\n                            disabled={!!sde_key}\r\n                            update={() => this.props.getRanges(this.filters, page)}\r\n                        />\r\n                    </div>\r\n                </Header>\r\n                <Table\r\n                    data={items}\r\n                    height=\"50%\"\r\n                    width=\"100%\"\r\n                    loading={loading}\r\n                    columns={columns}\r\n                    count={count}\r\n                    page={page}\r\n                    getItems={(page) => this.props.getRanges(this.filters, page)}\r\n                    ispagination\r\n                    hidePerPage\r\n                    ActionCell={ActionCell(this.onClickList)}\r\n                />\r\n            </>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default withRouter(Ranges);","import React from 'react';\r\nimport {\r\n    API_Modal,\r\n    MyForm,\r\n    NumbersSelect,\r\n    SDE_Component,\r\n    NumberField,\r\n    CheckboxControl,\r\n    ErrorMessage\r\n} from '../../components/';\r\nimport {Table, Alert, SelectPicker} from 'rsuite';\r\nimport {api} from '../../api/loginRoutes'\r\nimport styled from 'styled-components';\r\nimport RateField from \"../../components/Form/RateField\";\r\nimport {connect} from \"react-redux\";\r\nimport CustomField from '../../components/Form/CustomField';\r\nimport {ButtonPrimary} from \"../../components/base/BaseButton\";\r\nimport BaseTable from \"../../components/base/BaseTable\";\r\n\r\n\r\nconst AddNewSubdestination = ({p_key, currency_list, update, price_list, defaultSPKey, paymentTermsList}) => {\r\n    const [show, setShow] = React.useState(false);\r\n    const [disabledRanges, setDisabled] = React.useState(true);\r\n    const [rates, setRates] = React.useState([]);\r\n    const [touched, setTouched] = React.useState(false);\r\n    const [sdeList, setSdeList] = React.useState([]);\r\n    const [sde_key, setSdeKey] = React.useState(null);\r\n\r\n    const [isEntered, setIsEntered] = React.useState(false);\r\n\r\n\r\n    React.useEffect(() => {\r\n        if(show) {\r\n            setTouched(false);\r\n            setRates([]);\r\n            setSdeKey(null);\r\n            setSdeList([]);\r\n            api('newsubdestination_list_for_price', {p_key})\r\n                .then( ({ subdestination_list: data }) => setSdeList(data || []))\r\n        }\r\n    }, [show]);\r\n\r\n    const onChangeRate = (cur_key, pt_key, rate) => {\r\n        if(!touched) setTouched(true);\r\n\r\n        setRates(\r\n            rates => {\r\n                const _rates = rates.filter(\r\n                    rateObj => rateObj.cur_key !== cur_key || rateObj.pt_key !== pt_key\r\n                );\r\n\r\n                if (rate)\r\n                    return [..._rates, {cur_key, pt_key, rate}];\r\n\r\n                return _rates\r\n            }\r\n        )\r\n    };\r\n\r\n\r\n    const field1 =<NumberField\r\n        disabled = {disabledRanges}\r\n        min={1}\r\n        step={1}\r\n        label = \"Ranges\"\r\n        name = \"ranges\"\r\n    />;\r\n    const field2 = <NumbersSelect\r\n        disabled = {disabledRanges}\r\n        label = \"Numbers\"\r\n        name = \"numbers\"\r\n    />;\r\n\r\n    const noGenerateRange = disabledRanges || !sde_key;\r\n\r\n    const unsendFields = [];\r\n    for (const currency of currency_list) {\r\n        for (const term of paymentTermsList) {\r\n            unsendFields.push(`${currency.cur_key}-${term.pt_key}`);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ButtonPrimary\r\n                onClick={() => setShow(true)}\r\n            >\r\n                + Add subdestination\r\n            </ButtonPrimary>\r\n\r\n            {show &&\r\n                <API_Modal\r\n                    title = \"Add new Subdestination\"\r\n                    onClose  = {() =>{\r\n                        setDisabled(true);\r\n                        setShow(false);\r\n                        setIsEntered(false);\r\n                    }}\r\n                    successText = \"Create\"\r\n                    update = {update}\r\n                    checkFirstAll\r\n                    checkBefore = {() => {\r\n                        if(!touched) setTouched(true);\r\n\r\n                        return !!rates.length;\r\n                    }}\r\n                    onEntered={() => setIsEntered(true)}\r\n                >\r\n                    <MyForm\r\n                        method=\"service_plan_price:new_subdestination\"\r\n                        formDefaultValue = {{p_key}}\r\n                        addData = {{\r\n                            rates: rates\r\n                        }}\r\n                        noCheck\r\n                        deepCloned={false}\r\n                        //remove rates fields from request\r\n                        unsendFields={unsendFields}\r\n                    >\r\n\r\n                        <CustomField\r\n                            accepter={SelectPicker}\r\n                            labelKey=\"name\"\r\n                            valueKey=\"p_key\"\r\n                            name=\"p_key\"\r\n                            data={price_list}\r\n                            placeholder=\"Prices\"\r\n                            searchable={false}\r\n                            cleanable={false}\r\n                            classPrefix=\"allocated\"\r\n                        />\r\n                        <SDE_Component\r\n                            subdestination_list = {sdeList}\r\n                            labelKey = \"subdestination_name\"\r\n                            name = \"sde_key\"\r\n                            validationKey = \"num_required\"\r\n                            onChange = {(v) => setSdeKey(v)}\r\n                        />\r\n                        {touched && !rates.length &&\r\n                            <ErrorMessage>\r\n                                Must be filled at least one Currency.\r\n                            </ErrorMessage>}\r\n                        <TablePayments\r\n                            data={currency_list}\r\n                            onChange={onChangeRate}\r\n                            paymentTermsList={paymentTermsList}\r\n                            loading={!isEntered}\r\n                        />\r\n                    </MyForm>\r\n                    <MyForm\r\n                        formDefaultValue = {{sp_key: defaultSPKey, numbers: 1000}}\r\n                        method=\"price_range__generate_by_sde\"\r\n                        checkResultKey = 'ranges'\r\n                        update = { ({ranges}) => {\r\n                            Alert.success(`Generated ${ranges || 0} ranges`)\r\n                        }}\r\n                        addData={{\r\n                            sde_key\r\n                        }}\r\n                        noSend = {noGenerateRange}\r\n                        deepCloned={false}\r\n                    >\r\n                        <CheckboxControl\r\n                            onChange = {(value) => setDisabled(!value)}\r\n                            useBr>\r\n                            Make Ranges\r\n                        </CheckboxControl>\r\n\r\n                        {disabledRanges  ?  <Fieldset>{field1} {field2}</Fieldset> : <></>}\r\n                        {!disabledRanges ?  field1 : <></>}\r\n                        {!disabledRanges ?  field2 : <></>}\r\n                    </MyForm>\r\n                </API_Modal>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({references}) => ({\r\n    price_list: references.price_list,\r\n    defaultSPKey: references.defaultSPKey\r\n});\r\n\r\nexport default connect(mapStateToProps)(AddNewSubdestination);\r\n\r\nconst { Column, HeaderCell, Cell } = Table;\r\n\r\nconst TablePayments =  ({data, disabled, onChange, paymentTermsList = []}) => (\r\n    <BaseTable\r\n        height={140}\r\n        data={data}\r\n        rowHeight={50}\r\n    >\r\n        <Column width={100}>\r\n            <HeaderCell>Currency</HeaderCell>\r\n            <Cell dataKey=\"name\"/>\r\n        </Column>\r\n\r\n        {paymentTermsList.map(term => (\r\n            <Column flexGrow={1}>\r\n                <HeaderCell>{term.name.replace(\"_\", \"-\")}</HeaderCell>\r\n                <Cell>\r\n                    { (row, i) => (\r\n                        <RateField\r\n                            width={paymentTermsList.length > 2 ? 110 : 135}\r\n                            disabled = {disabled}\r\n                            onChange = { v => onChange(row.cur_key, term.pt_key, +v)}\r\n                            name={`${row.cur_key}-${term.pt_key}`}\r\n                        />\r\n                    ) }\r\n\r\n                </Cell>\r\n            </Column>\r\n        ))}\r\n        <Column key=\"table_scrollfix\" width={0} fixed>\r\n            <HeaderCell></HeaderCell>\r\n            <Cell></Cell>\r\n        </Column>\r\n    </BaseTable>\r\n);\r\n\r\nconst Fieldset = styled.fieldset`\r\n    border: none;\r\n    margin: 0;\r\n    padding: 0;\r\n     > div {\r\n         margin-right: 10px;\r\n         vertical-align: middle;\r\n     }\r\n`;","import React from 'react';\r\nimport {getFileResponse} from '../../api/loginRoutes';\r\nimport {getBlobContent, saveFileBlob, savePdfByTemplate} from '../../utils/helpers';\r\nimport {USD_DEFAULT_CURRENCY_KEY} from \"../../const\";\r\nimport Dropdown from 'rsuite/es/Dropdown';\r\nimport styled, {css} from 'styled-components';\r\nimport {ButtonToolbar, Loader} from 'rsuite';\r\nimport Icon from 'rsuite/es/Icon';\r\n\r\n\r\nexport default ({\r\n    cur_key = USD_DEFAULT_CURRENCY_KEY,\r\n    str = '',\r\n    sp_key,\r\n    otpType,\r\n    ...props\r\n}) => {\r\n\r\n    const [loading, setLoading] = React.useState(false);\r\n\r\n    const exportFile = async () => {\r\n        setLoading(true);\r\n\r\n        const method = otpType === null\r\n            ? 'ratecard_standart:get_default_price'\r\n            : 'ratecard_otp:get_default_price';\r\n\r\n        const result = await getFileResponse(method, {\r\n            filter:{ str, cur_key, sp_key },\r\n        });\r\n\r\n        if(result)\r\n            saveFileBlob(result,'prices.csv');\r\n        setLoading(false)\r\n\r\n    };\r\n\r\n    const onDownloadPricesPdf = async () => {\r\n        const {account, getTemplate} = props;\r\n\r\n        const method = otpType === null\r\n            ? 'ratecard_standart:get_default_price'\r\n            : 'ratecard_otp:get_default_price';\r\n\r\n        setLoading(true);\r\n        getTemplate(account.id, 0, 'allocated_numbers').then(({template = {}}) => {\r\n            getFileResponse(method, {filter: {str, cur_key, sp_key},}, true)\r\n                .then((response) => {\r\n                    const csvText = getBlobContent(response);\r\n                    csvText.then((csvContent) => {\r\n                        const csvStringsArray = csvContent ? csvContent.split('\\n') : [];\r\n                        const csvDataArrayData = csvStringsArray.filter(value => !!value);\r\n                        const csvHeaders = csvDataArrayData.length && csvDataArrayData[0].split(';');\r\n                        const csvBody = csvDataArrayData.length && csvDataArrayData.slice(1, csvDataArrayData.length).map(line => line.split(';'));\r\n\r\n                        savePdfByTemplate(\r\n                            csvBody,\r\n                            [csvHeaders],\r\n                            'prices',\r\n                            template,\r\n                            {},\r\n                            account\r\n                        );\r\n                        setLoading(false)\r\n                    });\r\n                })\r\n        })\r\n    };\r\n    return (\r\n        <StyledButtonToolbar>\r\n            <StyledDropdown\r\n                size=\"sm\"\r\n                title={<>{loading ? <StyledLoader/> : <><Icon icon=\"upload2\"/>Export price</>}</>}\r\n                appearance=\"default\"\r\n                disabled={loading}\r\n                placement=\"bottomEnd\"\r\n            >\r\n                <Dropdown.Item\r\n                    onClick={() => exportFile()}>\r\n                    Export price list\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                    onClick={() => onDownloadPricesPdf()}>\r\n                    Export price list as pdf\r\n                </Dropdown.Item>\r\n            </StyledDropdown>\r\n        </StyledButtonToolbar>\r\n    )\r\n};\r\nconst StyledButtonToolbar = styled(ButtonToolbar)`\r\n    display: inline-block; \r\n    ${props =>\r\n    props.width && css`\r\n        width: ${props.width};\r\n    `}\r\n`;\r\n\r\nconst StyledDropdown = styled(Dropdown)`\r\n    height: 30px;\r\n    & .rs-btn {\r\n        padding-left: 10px !important;\r\n    }\r\n    & .rs-loader-spin {\r\n        margin-top: 0 !important;\r\n    }\r\n    & > a {\r\n        padding-top: 5px !important;\r\n        top: 0;\r\n        height: 30px;\r\n        width: 100%;\r\n    }\r\n    & .rs-dropdown-toggle-caret {\r\n        top: 5px;\r\n        margin-top: 0 !important;\r\n    }\r\n    &.rs-dropdown-disabled > a.rs-dropdown-toggle.rs-btn {\r\n        background-color: #d6d6db !important;\r\n    }\r\n`;\r\n\r\nconst StyledLoader = styled(Loader)`\r\n  & span.rs-loader-spin {\r\n    margin-top: 3px;\r\n    margin-right: 5px;\r\n  }\r\n`;","import React from 'react';\r\nimport Modal from '../../components/Modal';\r\n\r\nimport {Form, Schema, SelectPicker} from 'rsuite';\r\nimport CustomField from '../../components/Form/CustomField';\r\nimport {api} from '../../api/loginRoutes';\r\nimport FormHoc from '../../hoc/FilltersForm';\r\nimport InputSearch from '../../components/Form/InputSearch';\r\nimport ExportPrice from './ExportPrice';\r\nimport styled from 'styled-components';\r\nimport {DEFAULT_PER_PAGE_MEDIUM, USD_DEFAULT_CURRENCY_KEY} from '../../const';\r\nimport MyTable from 'components/Table';\r\nimport {ButtonSideIcon} from \"../../components/base/BaseButton\";\r\n\r\nconst {StringType} = Schema.Types;\r\nconst per_page = DEFAULT_PER_PAGE_MEDIUM;\r\n\r\n\r\nconst ShowPrice = ({\r\n    currency_list,\r\n    sp_key,\r\n    paymentTermsList,\r\n    account,\r\n    template,\r\n    getTemplate,\r\n    otpType\r\n}) => {\r\n\r\n    const [show, setShow] = React.useState(false);\r\n    const [items, setItems] = React.useState([]);\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [count, setCount] = React.useState(0);\r\n    const [page, setPage] = React.useState(1);\r\n    const [filter, setFilter] = React.useState({\r\n        cur_key: USD_DEFAULT_CURRENCY_KEY, str: ''\r\n    });\r\n\r\n\r\n    React.useEffect(() => {\r\n        if (!show)\r\n            return;\r\n        setFilter({cur_key: USD_DEFAULT_CURRENCY_KEY, str: ''});\r\n        getData({cur_key: USD_DEFAULT_CURRENCY_KEY, str: ''}, 1);\r\n    }, [show]);\r\n\r\n\r\n    const onChangeFilters = (_filters) => {\r\n        setFilter({str: _filters._str || '', cur_key: _filters.cur_key});\r\n        getData({str: _filters._str || '', cur_key: _filters.cur_key}, 1);\r\n    };\r\n\r\n\r\n    const getData = (filter, page) => {\r\n        setLoading(true);\r\n\r\n        const method = otpType === null\r\n            ? 'ratecard_standart:get_default_price'\r\n            : 'ratecard_otp:get_default_price';\r\n        api(method, {\r\n            filter: {cur_key: USD_DEFAULT_CURRENCY_KEY, str: '', ...filter, sp_key}, page, per_page,\r\n            // add: {test_trunk_number_list:{}, service_plan_price:{} }\r\n        })\r\n            .then(({ratecard_standart_list, ratecard_otp_list, ratecard_standart_count, ratecard_otp_count}) => {\r\n                setCount(ratecard_standart_count || ratecard_otp_count || 0);\r\n                setPage(page);\r\n                setItems(\r\n                    (ratecard_standart_list || ratecard_otp_list || []).map(\r\n                        item => {\r\n                            // set payment terms\r\n                            for (const term of paymentTermsList) {\r\n                                item[`payments_${term.name}`] = '';\r\n                                if (item.payment_terms_rate_list && item.payment_terms_rate_list.length) {\r\n                                    item[`payments_${term.name}`] = (item.payment_terms_rate_list\r\n                                        .find(el => el.pt_key === term.pt_key) || {})\r\n                                        .rate || '';\r\n                                }\r\n                            }\r\n\r\n                            // set test number\r\n                            item.test_number = '';\r\n                            if (item.test_trunk_number_list && item.test_trunk_number_list.length) {\r\n                                item.test_number = item.test_trunk_number_list[0];\r\n                                item.test_trunk_number_list[1] && (item.test_number += ' ...');\r\n                            }\r\n                            return item;\r\n                        }\r\n                    )\r\n                );\r\n                setLoading(false);\r\n            })\r\n            .catch(error => setLoading(false));\r\n    };\r\n\r\n\r\n    const columns = otpType === null\r\n        ? [\r\n            {label: 'Prefix', dataKey: 'prefix'},\r\n            {label: 'Range name', dataKey: 'range_name'},\r\n        ]\r\n        : [\r\n            {\r\n                label: 'Subdestination',\r\n                dataKey: 'subdestination_name',\r\n                value: ({subdestination_name, template}) => (\r\n                    subdestination_name && template\r\n                        ? `${subdestination_name} (${template})`\r\n                        : \"\"\r\n                ),\r\n            }\r\n        ];\r\n\r\n    if (paymentTermsList) {\r\n        for (const term of paymentTermsList) {\r\n            columns.push({label: `Payout ${term.name.replace(\"_\", \"-\")}`, dataKey: `payments_${term.name}`});\r\n        }\r\n    }\r\n\r\n    if (otpType === null) {\r\n        columns.push({label: 'Test number', dataKey: 'test_number'});\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <ButtonSideIcon onClick={() => setShow(true)} icon=\"eye\">Show price</ButtonSideIcon>\r\n            <Modal\r\n                show={show}\r\n                title=\"Price\"\r\n                onClose={() => setShow(false)}\r\n                width=\"90%\"\r\n            >\r\n                <Header>\r\n                    <div>\r\n                        <Filters\r\n                            {...{\r\n                                currency_list\r\n                            }}\r\n                            onChange={onChangeFilters}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <ExportPrice\r\n                            str={filter.str}\r\n                            cur_key={filter.cur_key}\r\n                            sp_key={sp_key}\r\n                            account={account}\r\n                            template={template}\r\n                            getTemplate={getTemplate}\r\n                            otpType={otpType}\r\n                        />\r\n                    </div>\r\n                </Header>\r\n\r\n                <MyTable\r\n                    data={items}\r\n                    height=\"50%\"\r\n                    extraHeight={470}\r\n                    loading={loading}\r\n                    columns={columns}\r\n                    count={count}\r\n                    page={page}\r\n                    per_page={per_page}\r\n                    getItems={(page) => getData(filter, page)}\r\n                    ispagination\r\n                    hidePerPage\r\n                />\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ShowPrice;\r\n\r\n\r\nconst filtersModel = Schema.Model({\r\n    _str: StringType().maxLength(40, 'The maximum is only 40 characters.'),\r\n});\r\n\r\nconst Filters = FormHoc(({onChange, currency_list}) => {\r\n\r\n    return (\r\n        <Form layout=\"inline\"\r\n              onChange={onChange}\r\n              formDefaultValue={{cur_key: USD_DEFAULT_CURRENCY_KEY}}\r\n              model={filtersModel}\r\n        >\r\n            <div style={{display: 'inline-block', width: 200}}>\r\n                <CustomField\r\n                    name=\"_str\"\r\n                    accepter={InputSearch}\r\n                    errorPlacement=\"topRight\"\r\n                    placeholder=\"Prefix/Range name\"\r\n                    // style={{width:220}}\r\n                />\r\n            </div>\r\n            <CustomField\r\n                accepter={SelectPicker}\r\n                data={currency_list}\r\n                cleanable={false}\r\n                searchable={false}\r\n                labelKey=\"name\"\r\n                valueKey=\"cur_key\"\r\n                name=\"cur_key\"\r\n                classPrefix=\"allocated\"\r\n            />\r\n        </Form>\r\n    );\r\n}, filtersModel, 300);\r\n\r\nconst Header = styled.div`\r\n    margin-bottom: -20px;\r\n    > div {\r\n        display: inline-block;\r\n        width: 50%\r\n    }\r\n    >div:last-child{\r\n        text-align: right\r\n    }\r\n`;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {API_Modal, ApiRequest, Info, MyForm} from '../../components';\r\nimport {Alert, Checkbox, Table} from 'rsuite';\r\nimport {api} from '../../api/loginRoutes';\r\nimport RateField from '../../components/Form/RateField';\r\nimport {SP_CHANGE_RATE_METHOD} from 'const/apiMethods';\r\nimport MyTable from 'components/Table';\r\nimport {NumberField} from './../../components/Form/NumberField';\r\nimport Form from 'rsuite/es/Form';\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\nconst labelWidth = 130;\r\nconst inputNumberWidth = 100;\r\nconst heightResize = 190;\r\nconst rowHeight = 30;\r\nconst rowHeaderHeight = 40;\r\n\r\nconst styleF = {\r\n    display: 'inline-block',\r\n    width: 300,\r\n    borderRight: '3px solid #C4C4C4',\r\n    verticalAlign: 'middle',\r\n    marginTop: 50\r\n};\r\nconst styleT = {\r\n    display: 'inline-block',\r\n    width: 410,\r\n    marginLeft: 20,\r\n    verticalAlign: 'top'\r\n};\r\n\r\n\r\nconst EditPrice = ({\r\n    setShow,\r\n    p_key,\r\n    sde_key,\r\n    cur_key,\r\n    update,\r\n    ratesValue = [],\r\n}) => {\r\n\r\n    const [accounts, setAccounts] = useState({data: [], loading: true});\r\n    const [ptValue, setPtValue] = useState( ratesValue.map(item => ({\r\n        ...item,\r\n        checked: item.value || item.value == 0 ? true : false\r\n    })) );\r\n\r\n\r\n    useEffect(() => {\r\n        setAccounts({\r\n            ...accounts,\r\n            loading: true,\r\n        });\r\n\r\n        api('service_plan_price:account_with_special_price', {p_key, sde_key, cur_key})\r\n            .then(({account_with_special_price}) => {\r\n                const accountWithExtraKey = account_with_special_price ? account_with_special_price.map(acc => {\r\n                    return {...acc, select_object: {account_id: acc.account_id, sp_key: acc.sp_key}}\r\n                }) : null;\r\n                console.log('account_with_special_price', accountWithExtraKey);\r\n                setAccounts(() => ({\r\n                    data: accountWithExtraKey || [],\r\n                    loading: false\r\n                }))\r\n            });\r\n    }, []);\r\n\r\n\r\n    const onChangeRate = (account_id, rate, sp_key) => {\r\n        setAccounts({\r\n            ...accounts,\r\n            data: accounts.data.map(\r\n                row => row.account_id === account_id && row.sp_key === sp_key ? {...row, checked: true, rate} : row\r\n            )\r\n        });\r\n    };\r\n\r\n\r\n    const onChangeChecked = (selected) => {\r\n        setAccounts({\r\n            ...accounts,\r\n            data: accounts.data.map(\r\n                row => selected.list.some(current_selected => row.select_object.sp_key === current_selected.sp_key\r\n                    && row.select_object.account_id === current_selected.account_id)\r\n                    ? {...row, checked: true} : {...row, checked: false}\r\n            )\r\n        });\r\n    };\r\n\r\n\r\n    const getUpdatedPtValue = (rate, newData) => {\r\n        return ptValue.map(ptValueItem => {\r\n            if (ptValueItem.pt_key !== rate.pt_key)\r\n                return ptValueItem;\r\n\r\n            return {...ptValueItem, ...newData};\r\n        });\r\n    };\r\n\r\n\r\n    const numberControlProps = {\r\n        labelWidth,\r\n        width: inputNumberWidth,\r\n        mr: 5\r\n    };\r\n\r\n    const calculatedHeight = accounts.data.length < 5 && accounts.data.length > 0\r\n        ? rowHeight * accounts.data.length + rowHeaderHeight\r\n        : heightResize;\r\n\r\n    const checkboxProps = {inline: true};\r\n\r\n    const columns = [\r\n        {label: 'Dialer', dataKey: 'acc_name', minWidth: 160},\r\n        {\r\n            label: 'Service Plan',\r\n            value: ({service_plan_name}) => service_plan_name,\r\n            width: 95\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <API_Modal\r\n            title=\"Change rate for subdestination\"\r\n            onClose={() => setShow(false)}\r\n            successText=\"Change\"\r\n            width={800}\r\n            update={() => {\r\n                Alert.success('Changed');\r\n                update();\r\n            }}\r\n        >\r\n            <MyForm\r\n                noCheck\r\n                formDefaultValue={{p_key, sde_key, cur_key}}\r\n                method={SP_CHANGE_RATE_METHOD}\r\n                style={{...styleF, height: 'auto'}}\r\n                addData={{\r\n                    new_rates: (ptValue\r\n                        .filter( rate => rate.checked )\r\n                        .map( rate => ({\r\n                            pt_key: rate.pt_key,\r\n                            rate: +rate.value\r\n                        })\r\n                    ))\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        // marginTop: (calculatedHeight - 70) / 2,\r\n                        marginRight: 0,\r\n                        marginBottom: 0,\r\n                        // height: 70\r\n                    }}\r\n                >\r\n\r\n                    {ptValue.map(rate => (\r\n                        <div key={rate.pt_key}>\r\n                            <RateField\r\n                                {...numberControlProps}\r\n                                style={{padding: 0, margin: 0}}\r\n                                label={`New rate for ${rate.name.replace(\"_\", \"/\")}`}\r\n                                value={rate.value}\r\n                                onChange={(v) => setPtValue( getUpdatedPtValue(rate, {\r\n                                    value: v,\r\n                                    checked: !!v\r\n                                }))}\r\n                            />\r\n                            <Checkbox\r\n                                {...checkboxProps}\r\n                                style={{padding: 0, margin: 0, marginTop: 0}}\r\n                                checked={rate.checked}\r\n                                onChange={(v, checked) => setPtValue( getUpdatedPtValue(rate, {\r\n                                    checked: checked\r\n                                }))}\r\n\r\n                            />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </MyForm>\r\n\r\n            <ApiRequest\r\n                method='account_price__set_account_list'\r\n                data={{\r\n                    sde_key,\r\n                    cur_key,\r\n                    rates: accounts.data\r\n                        .filter(x => x.checked)\r\n                        .map(x => ({account_id: x.account_id, sp_key: +x.sp_key, rate: +x.rate}))\r\n                }}\r\n                noCheck\r\n                style={styleT}\r\n            >\r\n                <Info>These dialers have speial rates for this subdestination. Do you want to update them?</Info>\r\n                <MyTable\r\n                    heightResize={calculatedHeight}\r\n                    data={accounts.data}\r\n                    loading={accounts.loading}\r\n                    columns={columns}\r\n                    row_key=\"select_object\"\r\n                    setSelected={onChangeChecked}\r\n                    isselected\r\n                    stateChecked\r\n                    ActionCell={ActionCell(onChangeRate)}\r\n                />\r\n            </ApiRequest>\r\n        </API_Modal>\r\n    );\r\n};\r\n\r\nexport default EditPrice;\r\n\r\n\r\nconst ActionCell = (onChange) => (\r\n    <Column width={100}>\r\n        <HeaderCell>Rate</HeaderCell>\r\n        <Cell>\r\n            {rowData => (\r\n                <Form>\r\n                    <NumberField\r\n                        key={rowData.account_id}\r\n                        max={10}\r\n                        min={0.00001}\r\n                        size=\"sm\"\r\n                        width=\"100%\"\r\n                        placeholder=\"0\"\r\n                        name=\"rate\"\r\n                        style={{position: 'relative', top: '-5px', width: 80}}\r\n                        calculated={true}\r\n                        value={rowData.rate}\r\n                        onChange={value => onChange(rowData.account_id, value, rowData.sp_key)}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Cell>\r\n    </Column>\r\n);\r\n","import {DEFAULT_PER_PAGE_SMALL, PRICE_RANGES, SET_RANGES} from '../const/';\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from  './defaults';\r\nimport {DESC_SORT} from \"const\";\r\n\r\nconst setLoading = createAction('SET_LOADING_'+PRICE_RANGES);\r\nexport const setRanges = createAction(SET_RANGES);\r\n\r\nexport const getRanges = (filter, page = 1, per_page = DEFAULT_PER_PAGE_SMALL, sort = {}) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n\r\n    // delete filter.sp_key;\r\n\r\n    let sort1, sort1_desc;\r\n\r\n    if (sort.column) {\r\n        sort1 = [sort.column];\r\n        sort1_desc = sort.type && sort.type === DESC_SORT;\r\n    }\r\n\r\n    return api(PRICE_RANGES, {filter, page, per_page,\r\n        add: {trunk_numbers: {}},\r\n        sort1, sort1_desc\r\n    }).then( ({price_range_list, price_range_count}) => {\r\n        localStorage.setItem(PRICE_RANGES+'_per_page', per_page)\r\n        dispatch(setRanges({\r\n            items: (price_range_list || []).map(\r\n                item => {\r\n                    item.allocated  = item.trunk_numbers;\r\n                    item.test_number  = '';\r\n                    // item.numbers = (item.allocated_numbers || '0') + '/' + (item.all_numbers || '0')\r\n                    if(item.test_trunk_number_list && item.test_trunk_number_list.length){\r\n                        item.test_number = item.test_trunk_number_list[0];\r\n                        item.test_trunk_number_list[1] &&  (item.test_number +=  ' ...')\r\n                    }\r\n                    return item;\r\n                }\r\n            ),\r\n            count: price_range_count || 0,\r\n            page,\r\n            per_page\r\n        }));\r\n    })\r\n        .finally(() => dispatch(setLoading(false)));\r\n};\r\n","import {DEFAULT_PER_PAGE_SMALL, PRICES, SET_SERVICE_PLAN_PRICE} from '../const/';\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from  './defaults';\r\nimport {setRanges} from './ranges';\r\n\r\nconst setLoading = createAction('SET_LOADING_'+PRICES);\r\nconst setServicePlanPriceList = createAction(SET_SERVICE_PLAN_PRICE);\r\n\r\nexport const getPrices = (filter, page) => (dispatch) => {\r\n    dispatch(setRanges([]))\r\n    dispatch(setLoading(true));\r\n    api(PRICES, {filter, page, per_page: DEFAULT_PER_PAGE_SMALL, \"sort1\": [\"subdestination_name\"], \"output_type\": 2})\r\n        .then( ({service_plan_price_list = [], service_plan_price_count = 0 }) => {\r\n            dispatch(setServicePlanPriceList({\r\n                items: service_plan_price_list,\r\n                count: service_plan_price_count,\r\n                page\r\n            }));\r\n        })\r\n        .finally(() => dispatch(setLoading(false)));\r\n};","import React from 'react';\r\nimport {Table as _Table} from 'rsuite';\r\nimport PanelLayout from '../../components/base/PanelLayout';\r\nimport PageHeader from '../../components/base/PageHeader';\r\nimport PriceFilters from './PriceFilters';\r\nimport Ranges from './Ranges';\r\nimport AddNewSubdestination from './AddNewSubdestination';\r\nimport styled from 'styled-components';\r\nimport ShowPrice from './ShowPrice';\r\nimport ExportPrice from './ExportPrice';\r\nimport EditPrice from './EditPrice';\r\nimport Table from '../../components/Table';\r\nimport {connect} from 'react-redux';\r\nimport {getPrices} from '../../actions/prices';\r\nimport {getRanges} from '../../actions/ranges';\r\nimport {USD_DEFAULT_CURRENCY_KEY} from '../../const';\r\nimport {checkPermissionsFor} from 'store/storeHelpers';\r\nimport {SP_CHANGE_RATE_METHOD, SP_PRICE_NEW_SUBDESTINATION_METHOD} from 'const/apiMethods';\r\nimport {getTemplate} from 'actions/numbers';\r\nimport {ButtonRowEdit, ButtonWrapper} from \"../../components/base/BaseButton\";\r\nimport {Spacer} from \"../../components/base/Spacer\";\r\n\r\n\r\nclass Prices extends React.Component {\r\n    state = {\r\n        sde_key: null,\r\n        edit: false,\r\n        ptActiveTermRates: [],\r\n        otpType: null,\r\n        columns: [\r\n            {label: 'Subdestination', dataKey: 'subdestination_name'},\r\n        ]\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.rangesFilters = {};\r\n\r\n        this.filters = {\r\n            cur_key: USD_DEFAULT_CURRENCY_KEY,\r\n            p_key: props.defaultSPKey,\r\n            sp_key: props.defaultSPKey\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getPrices(this.filters, 1);\r\n        // При открытии Prices из страниц не выбирался первый элемент списка прайсов. Add ranges random требует sde_key\r\n        this.selectFirstPrice();\r\n\r\n        if (this.props.paymentTermsList.length) {\r\n            this.addTermColumns();\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate({service_plan_price_list: list},) {\r\n        const {service_plan_price_list} = this.props;\r\n\r\n        if (!service_plan_price_list.length\r\n            &&\r\n            service_plan_price_list !== list\r\n            &&\r\n            list[0]\r\n            &&\r\n            list[0].sde_key\r\n        ) {\r\n            this.setState({sde_key: list[0].sde_key}, () => {\r\n                this.getRanges(this.filters);\r\n            });\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        if (this.props.paymentTermsList !== prevProps.paymentTermsList) {\r\n            this.addTermColumns();\r\n        }\r\n\r\n        // if (prevProps.service_plan_price_list !== this.props.service_plan_price_list) {\r\n        //     this.selectFirstPrice();\r\n        // }\r\n    }\r\n\r\n    addTermColumns = () => {\r\n        const {paymentTermsList} = this.props;\r\n        const newColumns = [];\r\n        for (const term of paymentTermsList) {\r\n            newColumns.push({label: term.name.replace(\"_\", \"-\"), dataKey: `payment_terms_rate:${term.name}`});\r\n        }\r\n        this.setState({columns: [...this.state.columns, ...newColumns]});\r\n    }\r\n\r\n    onClickPrice = (sde_key) => {\r\n        this.setState({sde_key}, () => {\r\n            this.getRanges(this.rangesFilters, 1);\r\n        });\r\n    };\r\n\r\n    onChangeFilters = (filters) => {\r\n        const {servicePlanList} = this.props;\r\n\r\n        const currentServicePlan = servicePlanList.find(item => item.sp_key === filters.p_key);\r\n        this.setState({otpType: currentServicePlan.otp_type});\r\n\r\n        this.filters = filters;\r\n        this.props.getPrices(filters, 1);\r\n        this.selectFirstPrice();\r\n    };\r\n\r\n    getRanges = (filters, page = 1) => {\r\n        const {sde_key} = this.state;\r\n        const _filters = {...filters};\r\n\r\n        delete _filters['cur_key'];\r\n\r\n        this.props.getRanges({..._filters, sde_key}, page);\r\n    };\r\n\r\n    onEditPrice = (ptRates) => {\r\n        this.setState({\r\n            edit: true,\r\n            ptActiveTermRates: ptRates\r\n        });\r\n    };\r\n\r\n    selectFirstPrice = () => {\r\n        const {service_plan_price_list} = this.props;\r\n\r\n        if (service_plan_price_list.length\r\n            &&\r\n            service_plan_price_list[0]\r\n            &&\r\n            service_plan_price_list[0].sde_key\r\n        ) {\r\n            const first_sde_key = service_plan_price_list[0].sde_key;\r\n            this.setState({sde_key: first_sde_key}, () => {\r\n                this.getRanges(this.rangesFilters);\r\n            });\r\n        }\r\n    };\r\n\r\n    handleChangeRangesFilters = (filters) => {\r\n        this.rangesFilters  = filters;\r\n    };\r\n\r\n    render() {\r\n\r\n        const {\r\n            service_plan_price_list, loading, count, page, account, getTemplate,\r\n            currency_list, worldzone_list, subdestination_list, destination_list, price_list,\r\n            ranges, rangesLoading, rangesPage, rangesCount, paymentTermsList, servicePlanList\r\n        } = this.props;\r\n\r\n        window.sde_list = service_plan_price_list;\r\n\r\n        const {sde_key, edit, ptActiveTermRates, columns, otpType} = this.state;\r\n\r\n        return (\r\n            <PanelLayout>\r\n\r\n                {edit &&\r\n                    <EditPrice\r\n                        sde_key={sde_key}\r\n                        cur_key={this.filters.cur_key}\r\n                        p_key={this.filters.p_key}\r\n                        sp_key={this.filters.p_key}\r\n                        ratesValue={ptActiveTermRates}\r\n                        servicePlanList={servicePlanList}\r\n                        paymentTermsList={paymentTermsList}\r\n                        update={() => this.props.getPrices(this.filters, page)}\r\n                        setShow={() => this.setState({edit: false})}\r\n                    />\r\n                }\r\n\r\n                <Spacer size={18}/>\r\n\r\n                <PageHeader title={\"Prices\"}>\r\n                    <ButtonWrapper>\r\n                        <ShowPrice\r\n                            currency_list={currency_list}\r\n                            paymentTermsList={paymentTermsList}\r\n                            sp_key={this.filters.p_key}\r\n                            getTemplate={getTemplate}\r\n                            account={account}\r\n                            otpType={otpType}\r\n                        />\r\n                        <ExportPrice\r\n                            sp_key={this.filters.p_key}\r\n                            account={account}\r\n                            getTemplate={getTemplate}\r\n                            otpType={otpType}\r\n                        />\r\n                    </ButtonWrapper>\r\n                </PageHeader>\r\n\r\n                <Spacer size={13}/>\r\n\r\n                <Top>\r\n                    <div>\r\n                        <PriceFilters\r\n                            onChange={this.onChangeFilters}\r\n                            {...{\r\n                                currency_list,\r\n                                worldzone_list,\r\n                                subdestination_list,\r\n                                destination_list,\r\n                                price_list\r\n                            }}/>\r\n                    </div>\r\n                    <div>\r\n                        {checkPermissionsFor(SP_PRICE_NEW_SUBDESTINATION_METHOD) &&\r\n                            <AddNewSubdestination\r\n                                sp_key={this.filters.sp_key}\r\n                                p_key={this.filters.p_key}\r\n                                update={() => this.props.getPrices(this.filters, page)}\r\n                                currency_list={currency_list}\r\n                                paymentTermsList={paymentTermsList}\r\n                            />\r\n                        }\r\n                    </div>\r\n\r\n                </Top>\r\n                <Table\r\n                    data={service_plan_price_list}\r\n                    height=\"50%\"\r\n                    width=\"100%\"\r\n                    loading={loading}\r\n                    columns={columns}\r\n                    count={count}\r\n                    per_page={10}\r\n                    page={page}\r\n                    getItems={(page) => this.props.getPrices(this.filters, page)}\r\n                    active_id={sde_key}\r\n                    row_key='sde_key'\r\n                    onRowClick={this.onClickPrice}\r\n                    hidePerPage\r\n                    ispagination\r\n                    ActionCell={checkPermissionsFor(SP_CHANGE_RATE_METHOD) ?\r\n                        ActionCell(this.onEditPrice, paymentTermsList)\r\n                        : null\r\n                    }\r\n                />\r\n                <Ranges\r\n                    onChangeFilters={this.handleChangeRangesFilters}\r\n                    getRanges={this.getRanges}\r\n                    items={!service_plan_price_list.length  && sde_key && ranges && ranges.length ? [] : ranges}\r\n                    loading={rangesLoading}\r\n                    count={rangesCount}\r\n                    page={rangesPage}\r\n                    sde_key={sde_key}\r\n                    filters={this.filters}\r\n                    subdestination_list={subdestination_list}\r\n                    rangesFilters={this.rangesFilters}\r\n                />\r\n            </PanelLayout>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\nconst {Column, HeaderCell, Cell} = _Table;\r\n\r\n\r\nconst ActionCell = (onEdit, termsList) => (\r\n    <Column flexGrow={1}>\r\n        <HeaderCell>Options</HeaderCell>\r\n        <Cell>\r\n            {rowData => (\r\n                <div style={{position: 'relative', 'top': '-2px'}}>\r\n                    <ButtonRowEdit\r\n                        onClick={() => {\r\n                            const ptRates = termsList.map( rate => ({\r\n                                ...rate,\r\n                                value: rowData[`payment_terms_rate:${rate.name}`]\r\n                            }));\r\n                            onEdit(ptRates);\r\n                        }}\r\n                    />\r\n                </div>\r\n            )}\r\n        </Cell>\r\n    </Column>\r\n);\r\n\r\nconst mapState = ({references, prices, numbers, accounts, ranges}) => ({\r\n    service_plan_price_list: prices.service_plan_price_list,\r\n    loading: prices.loading,\r\n\r\n    currency_list: references.currency_list,\r\n    worldzone_list: references.worldzone_list,\r\n    subdestination_list: references.subdestination_list,\r\n    destination_list: references.destination_list,\r\n    defaultSPKey: references.defaultSPKey,\r\n    servicePlanList: references.service_plan_list,\r\n    paymentTermsList: references.payment_terms_list,\r\n    price_list: references.price_list,\r\n    template: numbers.template,\r\n    account: accounts.accountView,\r\n\r\n    page: prices.page,\r\n    count: prices.count,\r\n    ranges: ranges.ranges,\r\n    rangesLoading: ranges.loading,\r\n    rangesPage: ranges.page,\r\n    rangesCount: ranges.count,\r\n\r\n});\r\n\r\nexport default connect(mapState, {\r\n    getPrices,\r\n    getRanges,\r\n    getTemplate,\r\n})(Prices);\r\n\r\n\r\nconst Top = styled.div`\r\n    margin-bottom: -20px;\r\n    > div:first-child {\r\n        display: inline-block;\r\n        width: 80%\r\n    }\r\n    >div:last-child{\r\n        display: inline-block;\r\n        width: 20%;\r\n        text-align: right\r\n    }\r\n`;","import React from 'react';\r\nimport { Form, FormGroup,SelectPicker, Input, InputGroup, Icon, Schema} from 'rsuite';\r\nimport CustomField from '../../components/Form/CustomField';\r\nimport InputSearch from \"../../components/Form/InputSearch\";\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport Checkbox from '../../hoc/Checkbox';\r\nimport ServicePlans from \"../../components/Filters/ServicePlans\";\r\nimport references from \"../../reducers/references\";\r\nimport {connect} from \"react-redux\";\r\nconst { StringType } = Schema.Types;\r\n\r\nconst filtersModel = Schema.Model({\r\n    str: StringType().maxLength(40, 'The maximum is only 40 characters.'),\r\n});\r\n\r\nconst RangesFilters = ({onChange, worldzone_list, subdestination_list, destination_list, defaultValues={}, defaultSPKey}) =>  {\r\n    const [sde_key, setSde] = React.useState(null);\r\n\r\n    React.useEffect(() => {\r\n        if (defaultValues.sde_key)\r\n            setSde(defaultValues.sde_key)\r\n    }, [defaultValues]);\r\n\r\n    return (\r\n            <>\r\n                <Form layout=\"inline\" \r\n                    style={{marginBottom: '-25px'}}\r\n                    onChange={onChange}\r\n                    formDefaultValue={defaultValues}\r\n                    model={filtersModel}\r\n                    >\r\n                    <CustomField\r\n                        name=\"str\"\r\n                        accepter={InputSearch}\r\n                        errorPlacement=\"topRight\"\r\n                        placeholder=\"Range name/Numbers search\"\r\n                        style={{width:220}}\r\n                    />\r\n                    <CustomField\r\n                        accepter={SelectPicker}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"wz_key\"\r\n                        data={worldzone_list}\r\n                        placeholder=\"Worldzone\"\r\n                        name=\"wz_key\"\r\n                    />\r\n                     <CustomField\r\n                        accepter={SelectPicker}\r\n                        data={destination_list}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"de_key\"\r\n                        placeholder=\"Destination\"\r\n                        name=\"de_key\"\r\n                    /> \r\n                    <CustomField\r\n                        accepter={SelectPicker}\r\n                        data={subdestination_list}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"sde_key\"\r\n                        onChange = { (sde_key) => setSde(sde_key) }\r\n                        value = {sde_key}\r\n                        placeholder=\"Subdestination\"\r\n                        name=\"sde_key\"\r\n                        classPrefix=\"allocated\"\r\n                    />\r\n                    <Checkbox name=\"only_with_unallocated_numbers\" defaultChecked>Show only available ranges</Checkbox>\r\n                    <Checkbox name=\"only_without_test_numbers\">Show private ranges</Checkbox>\r\n                </Form>\r\n            </>\r\n        )\r\n};\r\n\r\nconst mapStateToProps = ({references}) => ({\r\n    defaultSPKey: references.defaultSPKey\r\n});\r\n\r\nexport default connect(mapStateToProps)(FormHOC(RangesFilters, filtersModel,300));\r\n","import React from 'react';\r\nimport {Form, Schema} from 'rsuite';\r\nimport CustomField from '../../../components/Form/CustomField';\r\nimport InputSearch from '../../../components/Form/InputSearch';\r\nimport FormHOC from '../../../hoc/FilltersForm';\r\nimport Checkbox from '../../../hoc/Checkbox';\r\nimport styled from 'styled-components';\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\nconst filtersModel = Schema.Model({\r\n    str: StringType().maxLength(40, 'The maximum is only 40 characters.'),\r\n});\r\n\r\nconst Filters = ({onChange, value}) => {\r\n    return (\r\n        <>\r\n            <Form layout=\"inline\"\r\n                  style={{marginBottom: '-25px'}}\r\n                  onChange={onChange}\r\n                  formDefaultValue={{\r\n                      ...value,\r\n                      show_unallocated_numbers: true,\r\n                      show_allocated_numbers: true,\r\n                      show_test_numbers: true,\r\n                      show_block_allocation_numbers: true,\r\n                      show_only_block_allocation_numbers: false\r\n                  }}\r\n                  model={filtersModel}\r\n            >\r\n                <span style={{position: 'relative', top: 8, margin: 0}}>Show numbers:</span>\r\n                <Box><Checkbox name=\"show_unallocated_numbers\" checked={value.show_unallocated_numbers} defaultChecked={true}>Unallocated</Checkbox></Box>\r\n                <Box><Checkbox name=\"show_allocated_numbers\" checked={value.show_allocated_numbers}  defaultChecked={true}>Allocated</Checkbox></Box>\r\n                <Box><Checkbox name=\"show_test_numbers\" checked={value.show_test_numbers}  defaultChecked={true}>Test</Checkbox></Box>\r\n                <Box><Checkbox name=\"show_block_allocation_numbers\"  checked={value.show_block_allocation_numbers} defaultChecked={true}>Blocked</Checkbox></Box>\r\n                <Box><Checkbox name=\"show_only_block_allocation_numbers\" checked={value.show_only_block_allocation_numbers}  defaultChecked={false}>Only blocked</Checkbox></Box>\r\n                <br/>\r\n                <CustomField\r\n                    name=\"str\"\r\n                    accepter={InputSearch}\r\n                    errorPlacement=\"topRight\"\r\n                    placeholder=\"Number search\"\r\n                    style={{width: 220}}\r\n                />\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormHOC(Filters, filtersModel, 300);\r\nconst Box = styled.div`\r\n    display: inline-block\r\n    // div{\r\n    //     display: inline-block\r\n    // }\r\n`;","import React, {useState} from 'react';\r\nimport Modal from '../../../components/Modal';\r\nimport {api} from '../../../api/loginRoutes';\r\nimport {Alert, Checkbox, DatePicker} from 'rsuite';\r\nimport {toUTCDateTime} from 'utils';\r\nimport {ButtonClose as Revoke} from \"../../../components/base/BaseButton\";\r\n\r\nexport default ({getList, disabled, update, pr_key, filters}) => {\r\n    const [show, setShow] = React.useState(false);\r\n    const [_disabled, setDisabled] = React.useState(false);\r\n    const [date, setDate] = useState(null);\r\n    const [withDate, setWithDate] = useState(false);\r\n\r\n\r\n    const onSubmit = async () => {\r\n        setDisabled(true);\r\n\r\n        const selected = getList();\r\n        const numbersKeysList = selected.list;\r\n        const selectedAll = selected.all;\r\n\r\n        const params = {end_date: date};\r\n        if (selectedAll) {\r\n            params.pr_key = pr_key;\r\n            params.filter = filters;\r\n        } else {\r\n            params.prn_key_list = numbersKeysList;\r\n        }\r\n\r\n        const result = await api('price_range_number:revoke_list', params);\r\n\r\n        if (result && result.price_range_numbers) {\r\n            Alert.success(`Generated ${result.price_range_numbers} numbers`);\r\n            setShow(false);\r\n            update();\r\n        } else {\r\n            Alert.warning(\r\n                `${numbersKeysList.length > 1 ? 'These numbers' : 'This number'} can't be revoked`\r\n            );\r\n            setShow(false);\r\n            update();\r\n        }\r\n\r\n        setWithDate(false);\r\n        setDate(null)\r\n        setDisabled(false);\r\n    };\r\n\r\n    const selectedCount = () => {\r\n        const data = getList();\r\n\r\n        console.log(\"data\", data);\r\n\r\n        if (data.all)\r\n            return data.countAll;\r\n        return data.list.length;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Revoke disabled={disabled} onClick={() => setShow(true)}>Revoke</Revoke>\r\n            {show && <Modal\r\n                show={show}\r\n                title=\"Revoke numbers\"\r\n                onClose={() => setShow(false)}\r\n                footer={true}\r\n                successText=\"Yes\"\r\n                disabled={_disabled}\r\n                onSuccess={onSubmit}\r\n            >\r\n                Selected {selectedCount()} numbers from this range will be revoked.\r\n                Do you really want to do it?\r\n                <div className=\"text-center mt-4\">\r\n                    <Checkbox inline className=\"mr-2\" onChange={(v, checked) => {\r\n                        setWithDate(checked);\r\n\r\n                        if (!checked) {\r\n                            setDate(null);\r\n                        }\r\n                    }}>From date</Checkbox>\r\n                    <DatePicker \r\n                        placeholder=\"Enter Date\" \r\n                        disabled={!withDate} \r\n                        onChange={(date) => {\r\n                            date && setDate(toUTCDateTime(date));\r\n                        }}\r\n                        ranges={[\r\n                            {\r\n                                label: 'Today',\r\n                                value: new Date()\r\n                            },\r\n                            {\r\n                                label: 'Tomorrow',\r\n                                value: new Date( new Date().setDate(new Date().getDate() + 1) )\r\n                            }\r\n                        ]}\r\n                    />\r\n                </div>\r\n            </Modal>\r\n            }\r\n        </>\r\n\r\n    );\r\n}","import React, { useState, useEffect, useMemo } from 'react';\r\nimport {api} from '../../../../api/loginRoutes';\r\nimport {Form, Schema} from 'rsuite';\r\nimport styled from 'styled-components';\r\nimport {FormControl, Icon} from 'rsuite/es';\r\nimport {MIN_RATE_VALUE} from 'const';\r\nimport Message from 'rsuite/es/Message';\r\nimport axios from 'axios';\r\n\r\nconst {NumberType} = Schema.Types;\r\n\r\n\r\nconst formModel = Schema.Model({\r\n    custom_rate: NumberType()\r\n        .min(MIN_RATE_VALUE, `The minimum of this field is ${MIN_RATE_VALUE}`)\r\n        .max(10, 'The maximum of this field is 10')\r\n});\r\n\r\nlet cancelToken = axios.CancelToken.source();\r\n\r\nexport default ({\r\n    trunksList,\r\n    trunkId,\r\n    sdeKey,\r\n    updateFormRef,\r\n\r\n    formValue,\r\n    setFormValue\r\n}) => {\r\n\r\n    let formRef = null;\r\n    const [showRate, setShowRate] = useState(false);\r\n\r\n    useEffect( () => {\r\n        getAutoPrice(trunkId);\r\n    }, [trunkId]);\r\n\r\n\r\n    const getAutoPrice = (trunkId) => {\r\n        setShowRate(false);\r\n        formRef.cleanErrors();\r\n        setFormValue({});\r\n\r\n        if (typeof cancelToken !== typeof undefined) {\r\n            cancelToken.cancel(\"Operation canceled due to new request.\");\r\n        }\r\n\r\n        cancelToken = axios.CancelToken.source();\r\n\r\n        if (!sdeKey || !trunkId || !trunksList || !trunksList.length)\r\n            return;\r\n\r\n        const trunkAccountId = trunkId\r\n            ? trunksList.find(item => item.tr_uuid === trunkId).acc_uuid\r\n            : null;\r\n        const trunk = trunksList.find(trunk => trunk.tr_uuid === trunkId);\r\n\r\n        api('account_price__get_fullprice_subdestination', {\r\n            sp_key: trunk.sp_key,\r\n            target: {account_id: trunkAccountId},\r\n            sde_key: sdeKey\r\n        }, null, cancelToken)\r\n            .then(response => {\r\n                if (!response)\r\n                    return;\r\n\r\n                // console.log(\"axios.isCancel(response)\", axios.isCancel(response));\r\n                if (axios.isCancel(response)) {\r\n                    return;\r\n                }\r\n\r\n                const fullprice = response.fullprice_for_account\r\n                    ? response.fullprice_for_account.rate\r\n                    : 0;\r\n\r\n                if (!fullprice)\r\n                    setShowRate(true);\r\n\r\n                setFormValue({\r\n                    ...formValue,\r\n                    custom_rate: fullprice\r\n                });\r\n            })\r\n            .catch(() => {\r\n                return <Message type=\"error\" description=\"Error\"/>\r\n            });\r\n    };\r\n\r\n\r\n    return (\r\n\r\n        <Form\r\n            layout=\"inline\"\r\n            model={formModel}\r\n            ref={(ref) => {\r\n                updateFormRef(ref);\r\n                formRef = ref;\r\n            }}\r\n            formValue={formValue}\r\n            onChange={setFormValue}\r\n        >\r\n\r\n            {!showRate\r\n\r\n                ? <StyledRateShowLabel\r\n                        onClick={() => setShowRate(true)}\r\n                    >\r\n                        <Icon icon=\"book\" inverse />\r\n                        <a>Put custom rate</a>\r\n                    </StyledRateShowLabel>\r\n\r\n                : <>\r\n                    <StyledRateLabel>Rate</StyledRateLabel>\r\n\r\n                    <StyledRateField>\r\n                        <FormControl\r\n                            name=\"custom_rate\"\r\n                            placeholder=\"0.0001\"\r\n                            errorPlacement=\"bottomStart\"\r\n                        />\r\n                    </StyledRateField>\r\n\r\n                    {formValue.custom_rate \r\n                        ? <StyledIconClose>\r\n                            <Icon\r\n                                icon=\"close\"\r\n                                inverse\r\n                                onClick={() => {\r\n                                    getAutoPrice(trunkId);\r\n                                }}\r\n                            />\r\n                        </StyledIconClose>\r\n                        : null\r\n                    }\r\n                </>\r\n            }\r\n\r\n        </Form>\r\n    );\r\n};\r\n\r\n\r\nconst StyledRateShowLabel = styled.div`\r\n    cursor: pointer; \r\n    margin: 8px 20px 0 0; \r\n    display: inline-block;\r\n    \r\n    .rs-icon {\r\n        margin-right: 5px; \r\n    }\r\n    \r\n    a,\r\n    .rs-icon {\r\n        color: #5e2f9d !important;\r\n    }\r\n`;\r\n\r\n\r\nconst StyledRateLabel = styled.div`\r\n    display: inline-block;\r\n    // margin-left: 15px;\r\n    margin-top: 8px;\r\n`;\r\n\r\nconst StyledRateField = styled.div`\r\n    display: inline-block; \r\n    margin-right: 10px;\r\n    \r\n    .rs-input {\r\n        width: 140px !important;\r\n    }\r\n`;\r\n\r\nconst StyledIconClose = styled.div`\r\n    display: inline-block;\r\n    margin-top: 8px; \r\n    margin-right: 10px;\r\n    \r\n    .rs-icon {\r\n        color: #5e2f9d; \r\n        cursor: pointer;\r\n        margin-right: 5px; \r\n    }\r\n`;","import React, { useEffect, useState } from 'react';\r\nimport Modal from '../../../../components/Modal/Modal';\r\nimport {api, getFileResponse} from '../../../../api/loginRoutes';\r\nimport AllocationResult from '../../../../components/Modal/ModalAllocationResult';\r\nimport AccountsGetForm from 'components/Filters/AccountsGetForm';\r\nimport AllocateForm from \"./AllocateForm\";\r\nimport styled from 'styled-components';\r\nimport DialerTrunk from 'components/Filters/DialerTrunk';\r\nimport ModalResponseHandler from \"components/Modal/ModalResponseHandler\";\r\nimport {getBlobContent} from \"../../../../utils\";\r\nimport {ButtonPrimary} from \"../../../../components/base/BaseButton\";\r\n\r\nexport default ({\r\n    disabled, \r\n    account_id, \r\n    sde_key, \r\n    pr_key, \r\n    update, \r\n    getList\r\n}) => {\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [_disabled, setDisabled] = useState(false);\r\n    const [dialers, setDialers] = useState([]);\r\n    const [formValue, setFormValue] = useState({});\r\n\r\n    const [showResult, setShowResult] = useState(false);\r\n    const [trunkId, setTrunkId] = useState(null);\r\n\r\n    const [summaryState, setSummaryState] = useState(null);\r\n    const [transactionId, setTransactionId] = useState(null);\r\n    const [csvContent, setCsvContent] = useState(null);\r\n    const [totalNumbersForced, setTotalNumbersForced] = useState(null);\r\n\r\n    const [filteredAccounts, setFilteredAccounts] = useState(null);\r\n    const [filteredAccountsLoading, setFilteredAccountsLoading] = useState(false);\r\n\r\n    const [responseHandlerModalShow, setResponseHandlerModalShow] = useState(false);\r\n    const [responseHandlerModalParams, setResponseHandlerModalParams] = useState({});\r\n\r\n    const showResponseHandlerModal = (params = {}) => {\r\n        setResponseHandlerModalShow(true);\r\n        setResponseHandlerModalParams(params);\r\n    };\r\n    \r\n\r\n    let formRef = null;\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    // useEffect(() => {\r\n    //     if (!_disabled && !rate) {\r\n    //         setDisabled(true);\r\n    //     } else {\r\n    //         if (rate) {\r\n    //             setDisabled(false);\r\n    //         }\r\n    //     }\r\n    // }, [rate]);\r\n\r\n\r\n    useEffect(() => {\r\n        api('trunk_list_for_accounts').then(({trunk_list}) => {\r\n            setDialers((trunk_list || []).map(x => ({\r\n                ...x,\r\n                trunk_id: x.tr_uuid,\r\n                _name: `${x.acc_name}\\\\${x.tr_name}\\\\${x.sp_name}`\r\n            })));\r\n        });\r\n    }, []);\r\n\r\n\r\n    const onSubmit = async () => {\r\n\r\n        if ( !formRef.check() )\r\n            return;\r\n\r\n        setDisabled(true);\r\n\r\n        const selected = getList();\r\n        const numbersKeysList = selected.list;\r\n        const selectedAll = selected.all;\r\n\r\n        const params = {\r\n            target: {trunk_id: trunkId},\r\n            rate: +formValue.custom_rate\r\n        };\r\n\r\n        if (selectedAll) {\r\n            params.pr_key = pr_key;\r\n        } else {\r\n            params.prn_key_list = numbersKeysList;\r\n        }\r\n\r\n        const result = await api('allocation:price_range_number_list', params);\r\n\r\n        if (result) {\r\n\r\n            const activeTrunk = dialers.find(item => item.trunk_id === trunkId);\r\n\r\n            if (result.reason_code && (!result.trunk_number_transaction || !result.trunk_number_transaction.numbers) ) {\r\n                showResponseHandlerModal({\r\n                    ...params,\r\n                    method: 'allocation:price_range_number_list',\r\n                    reasonCode: result.reason_code,\r\n                    reasonHash: result.hash,\r\n                    trunk: activeTrunk || {}\r\n                });\r\n                setDisabled(false);\r\n                return;\r\n            }\r\n\r\n            const {trunk_number_transaction} = result;\r\n            const summaryInfo = {...trunk_number_transaction};\r\n            const transactionId = summaryInfo.id;\r\n\r\n            getFileResponse(\"trunk_number:get_list\", {target: {trunk_number_transaction_id: transactionId}}, true)\r\n                .then((response) => {\r\n                    const csvText = getBlobContent(response);\r\n                    csvText.then((text) => {\r\n                        setCsvContent(text);\r\n                    })\r\n                });\r\n\r\n            setSummaryState(summaryInfo);\r\n            setTransactionId(transactionId);\r\n\r\n            setTotalNumbersForced(summaryInfo.numbers);\r\n            setShowResult(true);\r\n\r\n            update();\r\n            setShow(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ButtonPrimary\r\n                disabled={disabled} \r\n                onClick={() => setShow(true)}\r\n            >\r\n                Allocate\r\n            </ButtonPrimary>\r\n\r\n            {show &&\r\n                <Modal\r\n                    show={show}\r\n                    title=\"Allocate numbers\"\r\n                    onClose={() => setShow(false)}\r\n                    footer={true}\r\n                    successText=\"Confirm\"\r\n                    extraDisabled={_disabled || !formValue.custom_rate || !trunkId}\r\n                    onSuccess={() => {\r\n                        onSubmit();\r\n                        setDisabled(false)\r\n                    }}\r\n                >\r\n\r\n                    Choice dialer and trunk. Pay your attention - if they are allocated to any dialer they will be revoked\r\n                    from them too.\r\n\r\n                    <AccountsGetFormWrapper>\r\n                        <AccountsGetForm\r\n                            setLoading={setFilteredAccountsLoading}\r\n                            setFilteredAccounts={setFilteredAccounts}\r\n                        />\r\n                    </AccountsGetFormWrapper>\r\n\r\n                    <DialerTrunk\r\n                        trunkId={trunkId}\r\n                        disabledTrunk={disabled}\r\n                        accounts={filteredAccounts}\r\n                        dialerTrunkList={dialers}\r\n\r\n                        onClear={() => setTrunkId(null)}\r\n                        onChange={(trunk) => setTrunkId(trunk.trunk_id)}\r\n                    />\r\n\r\n                    <AllocateForm\r\n                        trunkId={trunkId}\r\n                        trunksList={dialers}\r\n                        updateFormRef={ref => formRef = ref}\r\n                        accountId={account_id}\r\n                        sdeKey={sde_key}\r\n                        disabled={disabled || filteredAccountsLoading}\r\n                        accounts={filteredAccounts}\r\n                        formValue={formValue}\r\n                        setFormValue={setFormValue}\r\n                    />\r\n\r\n                </Modal>\r\n            }\r\n\r\n            <ModalResponseHandler\r\n                show={responseHandlerModalShow}\r\n                onClose={() => setResponseHandlerModalShow(false)}\r\n                onSuccess={() => {}}\r\n                changeRandom={() => {}}\r\n                params={responseHandlerModalParams}\r\n            />\r\n            \r\n            <AllocationResult\r\n                show={showResult}\r\n                accountId={account_id}\r\n                summaryState={summaryState}\r\n                totalNumbersForced={totalNumbersForced}\r\n                allocatedByPrefix={false}\r\n                trunkId={trunkId}\r\n                showFullList={true}\r\n                hideBufferButtons={false}\r\n                csvContent={csvContent}\r\n                transactionId={transactionId}\r\n                onClose={() => {\r\n                    setShowResult(false);\r\n\r\n                    if (totalNumbersForced)\r\n                        setTotalNumbersForced(null);\r\n\r\n                    if (csvContent)\r\n                        setCsvContent(null);\r\n\r\n                }}\r\n                // showFullList={true}\r\n            />\r\n        </>\r\n\r\n    );\r\n}\r\n\r\n\r\nconst AccountsGetFormWrapper = styled.div`\r\n    margin-bottom: 10px;\r\n    margin-top: 10px;\r\n`;","import React from 'react';\r\nimport Modal from '../../../components/Modal';\r\nimport { api } from '../../../api/loginRoutes';\r\nimport { Alert } from 'rsuite';\r\nimport {ButtonPrimary} from \"../../../components/base/BaseButton\";\r\n\r\nexport default function SetOrUnsetTest({getList, disabled, update, isSetTest}) {\r\n    const [show, setShow ] = React.useState(false);\r\n    const [_disabled, setDisabled ] = React.useState(false);\r\n\r\n    const method = isSetTest ? 'price_range_number:set_test_number_list' : 'price_range_number:unset_test_number_list';\r\n\r\n    const onSubmit = async () => {\r\n        const numbersList = getList().list;\r\n\r\n        setDisabled(true);\r\n\r\n        const result = await api(method, {prn_key_list: numbersList});\r\n\r\n        if (result.price_range_numbers === numbersList.length) {\r\n            Alert.success(isSetTest\r\n                ? `Setted ${result.price_range_numbers} numbers`\r\n                : `Unsetted ${result.price_range_numbers} numbers`\r\n            );\r\n        } else {\r\n            if (result.price_range_numbers) {\r\n                Alert.warning(\r\n                    isSetTest\r\n                        ? `Setted ${result.price_range_numbers} numbers, but some weren't setted because allocated numbers can't setted as test`\r\n                        : `Unsetted ${result.price_range_numbers} numbers, but some weren't unsetted because not test numbers can't unsetted`\r\n                );\r\n            } else {\r\n                Alert.error(\r\n                    isSetTest\r\n                        ? `Allocated numbers can't be setted as test`\r\n                        : `Not tested numbers can't be unset`\r\n                );\r\n            }\r\n        }\r\n\r\n        setShow(false);\r\n        update();\r\n\r\n        setDisabled(false)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ButtonPrimary disabled={disabled} onClick={() => setShow(true)}>\r\n                {isSetTest ? 'Set test' : 'Unset test'}\r\n            </ButtonPrimary>\r\n\r\n            {show &&\r\n                <Modal\r\n                    show={show}\r\n                    title={isSetTest\r\n                        ? 'Set test numbers'\r\n                        : 'Unset test numbers'\r\n                    }\r\n                    onClose={() => setShow(false)}\r\n                    footer={true}\r\n                    successText=\"Confirm\"\r\n                    disabled={_disabled}\r\n                    onSuccess={onSubmit}\r\n                >\r\n                    {isSetTest\r\n                        ? `Selected numbers will be set as test. \r\n                           Pay your attention - if they are allocated to any dialer they will be revoked from them too.`\r\n                        : `Selected numbers will be unset as test?`\r\n                    }\r\n                </Modal>\r\n            }\r\n        </>\r\n        \r\n    );\r\n}","import React from 'react';\r\nimport Modal from '../../../components/Modal';\r\nimport {api} from '../../../api/loginRoutes';\r\nimport {Alert} from 'rsuite';\r\nimport Icon from 'rsuite/es/Icon';\r\nimport {ButtonClose as Revoke} from \"../../../components/base/BaseButton\";\r\n\r\n\r\nexport default ({getList, disabled, update}) => {\r\n    const [show, setShow] = React.useState(false);\r\n    const [_disabled, setDisabled] = React.useState(false);\r\n\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n\r\n    const onSubmit = async () => {\r\n        setDisabled(true);\r\n        const numbersKeysList = getList().list;\r\n\r\n        const result = await api('price_range_number:set_block_allocation_list', {\r\n            prn_key_list: numbersKeysList\r\n        });\r\n\r\n        if (result && result.price_range_numbers) {\r\n            Alert.success(`${result.price_range_numbers} number were blocked`);\r\n            setShow(false);\r\n            update();\r\n        }\r\n        setDisabled(false);\r\n\r\n    };\r\n    return (\r\n        <>\r\n            <Revoke\r\n                disabled={disabled}\r\n                onClick={() => setShow(true)}\r\n            >\r\n                <Icon icon=\"lock\"/> Block\r\n            </Revoke>\r\n                {show && <Modal\r\n                    show={show}\r\n                    title=\"Allocate numbers\"\r\n                    onClose={() => setShow(false)}\r\n                    footer={true}\r\n                    successText=\"Confirm\"\r\n                    disabled={_disabled}\r\n                    onSuccess={onSubmit}\r\n                >\r\n                    Selected numbers will be set as blocked. It means you can't allocate these numbers to any dialer or set test\r\n                </Modal>\r\n            }\r\n        </>\r\n\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Modal from '../../../components/Modal';\r\nimport {api} from '../../../api/loginRoutes';\r\nimport {Alert} from 'rsuite';\r\nimport Icon from 'rsuite/es/Icon';\r\nimport {ButtonPrimary} from \"../../../components/base/BaseButton\";\r\n\r\n\r\nexport default ({getList, disabled, update}) => {\r\n    const [show, setShow] = React.useState(false);\r\n    const [_disabled, setDisabled] = React.useState(false);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n\r\n    const onSubmit = async () => {\r\n        setDisabled(true);\r\n        const numbersKeysList = getList().list;\r\n\r\n        const result = await api('price_range_number:unset_block_allocation_list', {\r\n            prn_key_list: numbersKeysList\r\n        });\r\n\r\n        if (result && result.price_range_numbers) {\r\n            Alert.success(`${result.price_range_numbers} number were unblocked`);\r\n            setShow(false);\r\n            update();\r\n        }\r\n        setDisabled(false);\r\n\r\n    };\r\n    return (\r\n        <>\r\n            <ButtonPrimary\r\n                disabled={disabled}\r\n                onClick={() => setShow(true)}\r\n            >\r\n                <Icon icon=\"unlock-alt\"/> Unblock\r\n            </ButtonPrimary>\r\n\r\n            {show && <Modal\r\n                show={show}\r\n                title=\"Allocate numbers\"\r\n                onClose={() => setShow(false)}\r\n                footer={true}\r\n                successText=\"Confirm\"\r\n                disabled={_disabled}\r\n                onSuccess={onSubmit}\r\n            >\r\n                Selected numbers will be set as free. You can allocate them or set test in future\r\n            </Modal>\r\n            }\r\n        </>\r\n\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Filters from './NumbersFilters';\r\nimport TableServerSort from '../../../components/Table/TableServerSort';\r\nimport Revoke from './Revoke';\r\nimport Allocate from './Allocate';\r\nimport SetOrUnsetTest from './SetOrUnsetTest';\r\nimport Block from 'pages/RangesAndNumbers/Numbers/Block';\r\nimport Unblock from 'pages/RangesAndNumbers/Numbers/Unblock';\r\nimport FlexboxGrid from 'rsuite/es/FlexboxGrid';\r\nimport {getRangeByNumber} from 'utils';\r\nimport {Link} from 'react-router-dom';\r\nimport './Numbers.css';\r\n\r\n\r\nexport default class Numbers extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selected: {all: false, list: []},\r\n            sort: {},\r\n            columns: [\r\n                {\r\n                    label: 'Number',\r\n                    dataKey: 'number',\r\n                    value: (({number, numbers_count}) => getRangeByNumber(number, numbers_count)),\r\n                    sortable: true,\r\n                    width: 260\r\n                },\r\n                {\r\n                    label: 'Allocated to and trunk',\r\n                    dataKey: 'trunk_name',\r\n                    value: (({account_name, account_manager_name, trunk_name, number, account_id, trunk_id}) => {\r\n                        return account_name ?\r\n                            <>\r\n                                <Link className=\"ranges_numbers_table_link\" to={`/accounts/view/${account_id}`} onClick={() => {\r\n                                    this.props.setCurrentTrunkId(trunk_id);\r\n                                    this.props.setCurrentRangeNumber(number)\r\n                                }}>\r\n                                    {account_name} / {account_manager_name || 'no manager'}&nbsp;\r\n                                </Link>\r\n                                {trunk_name.slice(account_name.length,-1)}\r\n                            </>\r\n                            : trunk_name\r\n                    }),\r\n                    sortable: true\r\n                },\r\n            ]\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /** @type MyTable */\r\n    tableRef = null;\r\n\r\n    getFilters = () => {\r\n        return this.props.filters\r\n    };\r\n    getSelectedList = () => ({\r\n        ...this.state.selected,\r\n        countAll: this.props.allocatedNumbersCount\r\n    });\r\n\r\n    getNumbers = (page, per_page, sort) => {\r\n        const {filters} = this.props;\r\n        this.props.getNumbers(filters, page, per_page, sort);\r\n    };\r\n    // componentDidMount() {\r\n    //     this.props.getNumbers(this.props.filters, 1, this.props.numbersPerPage, this.state.sort);\r\n    // }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.numbers !== this.props.numbers) {\r\n\r\n            const isRange = this.props.numbers.some(item => item.numbers_count > 1);\r\n\r\n            this.setState({\r\n                columns: [\r\n                    {\r\n                        label: 'Number',\r\n                        dataKey: 'number',\r\n                        value: (({number, numbers_count}) => getRangeByNumber(number, numbers_count)),\r\n                        sortable: true,\r\n                        width: isRange ? 260 : 130\r\n                    },\r\n                    {\r\n                        label: 'Allocated to and trunk',\r\n                        dataKey: 'trunk_name',\r\n                        value: (({account_name, account_manager_name, trunk_name, number, account_id, trunk_id}) => {\r\n                            return account_name ?\r\n                                <>\r\n                                    <Link className=\"ranges_numbers_table_link\" to={`/accounts/view/${account_id}`} onClick={() => {\r\n                                        this.props.setCurrentTrunkId(trunk_id);\r\n                                        this.props.setCurrentRangeNumber(number)\r\n                                    }}>\r\n                                        {account_name} / {account_manager_name || 'no manager'}&nbsp;\r\n                                    </Link>\r\n                                    {trunk_name.slice(account_name.length,-1)}\r\n                                </>\r\n                                : trunk_name\r\n                        }),\r\n                        sortable: true\r\n                    },\r\n                ]\r\n            })\r\n        }\r\n\r\n        if (!this.props.numbers.length && prevProps.numbers !== this.props.numbers) {\r\n            this.clearSelected();\r\n        }\r\n    }\r\n\r\n    onChangeFilters = (filters) => {\r\n        this.props.onChangeNumberFilters(filters);\r\n        this.props.getNumbers(this.props.filters, 1, this.props.numbersPerPage, this.state.sort);\r\n        this.clearSelected();\r\n    };\r\n\r\n\r\n    clearSelected() {\r\n        this.setState({selected: {all: false, list: []}});\r\n        this.tableRef.clear();\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            numbers, numbersLoading, numbersPage, numbersCount, numbersPerPage,\r\n            account_id, sde_key, pr_key, filters\r\n        } = this.props;\r\n        const {\r\n            selected,\r\n            columns\r\n        } = this.state;\r\n\r\n\r\n        const includedNumber = selected.list.length && numbers.filter(number => selected.list.includes(number.prn_key));\r\n        const disabledBlockedNumbersButtonSign = includedNumber && includedNumber.some(number => number.trunk_name === 'blocked');\r\n        const hasNoZeroPrefixNumbers = includedNumber && includedNumber.some(number => number.numbers_count !== 1);\r\n\r\n        return (\r\n            <div>\r\n                <FlexboxGrid justify=\"space-around\" style={{marginBottom: 25, textAlign: 'right'}}>\r\n                    <FlexboxGrid.Item>\r\n                        <Revoke\r\n                            disabled={!selected.list.length}\r\n                            pr_key={pr_key}\r\n                            filters={filters}\r\n                            getList={this.getSelectedList}\r\n                            update={() => {\r\n                                this.props.updateRanges();\r\n                                this.tableRef.clear();\r\n                            }}\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                    <FlexboxGrid.Item>\r\n                        <Allocate\r\n                            disabled={!selected.list.length || disabledBlockedNumbersButtonSign || hasNoZeroPrefixNumbers}\r\n                            getList={this.getSelectedList}\r\n                            pr_key={pr_key}\r\n                            update={() => {\r\n                                this.props.updateRanges();\r\n                                this.tableRef.clear();\r\n                            }}\r\n                            account_id={account_id}\r\n                            sde_key={sde_key}\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                    <FlexboxGrid.Item>\r\n                        <SetOrUnsetTest\r\n                            disabled={!selected.list.length || disabledBlockedNumbersButtonSign || hasNoZeroPrefixNumbers || selected.all}\r\n                            getList={this.getSelectedList}\r\n                            update={() => {\r\n                                this.props.updateRanges();\r\n                                this.tableRef.clear();\r\n                            }}\r\n                            isSetTest={true}\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                    <FlexboxGrid.Item>\r\n                        <SetOrUnsetTest\r\n                            disabled={!selected.list.length || disabledBlockedNumbersButtonSign || selected.all}\r\n                            getList={this.getSelectedList}\r\n                            update={() => {\r\n                                this.props.updateRanges();\r\n                                this.tableRef.clear();\r\n                            }}\r\n                            isSetTest={false}\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                    <FlexboxGrid.Item>\r\n                        <Block\r\n                            disabled={!selected.list.length || disabledBlockedNumbersButtonSign || selected.all}\r\n                            getList={this.getSelectedList}\r\n                            update={() => {\r\n                                this.props.updateRanges();\r\n                                this.tableRef.clear();\r\n                            }}\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                    <FlexboxGrid.Item>\r\n                        <Unblock\r\n                            disabled={!selected.list.length || selected.list.length && !disabledBlockedNumbersButtonSign || selected.all}\r\n                            getList={this.getSelectedList}\r\n                            update={() => {\r\n                                this.props.updateRanges();\r\n                                this.tableRef.clear();\r\n                            }}\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n                <div style={{marginLeft: 20}}>\r\n                    <Filters\r\n                        value={this.props.filters}\r\n                        onChange={this.onChangeFilters}\r\n                    />\r\n                    <TableServerSort\r\n                        ref={ref => this.tableRef = ref}\r\n                        data={numbers}\r\n                        loading={numbersLoading}\r\n                        columns={columns}\r\n                        count={numbersCount}\r\n                        per_page={numbersPerPage}\r\n                        page={numbersPage}\r\n                        getItems={this.getNumbers}\r\n                        row_key=\"prn_key\"\r\n                        isSelectedAll={true}\r\n                        setSelected={selected => {\r\n                            this.setState({selected});\r\n                        }}\r\n                        ispagination\r\n                        isselected\r\n                        onSort={(column, type) => this.setState({sort: {column, type}})}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport {Loader as RSuiteLoader} from 'rsuite';\r\nimport css from './Loader.module.css'\r\n\r\nconst Loader = (props) => {\r\n    if (!props.show) {\r\n        return null;\r\n    }\r\n\r\n    const component = (\r\n        <div className={css.loaderWrapper}>\r\n            <RSuiteLoader size=\"md\"\r\n                          center\r\n                          backdrop\r\n            />\r\n        </div>\r\n    );\r\n\r\n    if (props.isLocal) {\r\n        return component;\r\n    }\r\n\r\n    return ReactDOM.createPortal(\r\n        component,\r\n        document.getElementById('modal-root')\r\n    );\r\n};\r\n\r\nLoader.propTypes = {\r\n    show: PropTypes.bool,\r\n    isLocal: PropTypes.bool,\r\n};\r\n\r\nexport default Loader;","import React from 'react';\r\nimport {Button, List} from \"rsuite\";\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport {Spacer} from \"../../components/base/Spacer\";\r\nimport {BaseModal as Modal} from \"../../components/base/BaseModal\";\r\n\r\nexport default ({\r\n    show,\r\n    data = {},\r\n    onClose,\r\n}) => {\r\n\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            onHide={onClose}\r\n            backdrop=\"static\"\r\n            width={resizedWidth > 600 ? 600 : resizedWidth}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>Delete Range Result</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body style={{maxHeight: '100%'}}>\r\n                <p style={{textAlign: 'center'}}>Removed <b>{data.ranges}</b> ranges</p>\r\n                {data.price_range_list_with_not_owned_numbers && data.price_range_list_with_not_owned_numbers.length\r\n                    ? <>\r\n                        <Spacer size={40}/>\r\n                        Some of chosen ranges contain numbers allocated to not owned accounts and cannot be deleted:\r\n                        <Spacer/>\r\n                        <List size=\"sm\">\r\n                            {data.price_range_list_with_not_owned_numbers\r\n                                .map(({pr_key, name}) => {\r\n                                    return <List.Item key={pr_key}>{name}</List.Item>\r\n                                })}\r\n                        </List>\r\n                    </>\r\n                    : null\r\n                }\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={onClose} appearance=\"primary\">\r\n                    Ok\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n};","import React, {useEffect, useCallback, useMemo} from 'react';\r\nimport ModalSendApi from '../../components/Modal/ModalSendApi';\r\nimport ApiRequest  from '../../components/ApiRequest';\r\nimport {Tag, Tree} from 'rsuite';\r\nimport {api} from \"api/loginRoutes\";\r\nimport Loader from \"components/Loader/Loader\";\r\nimport ModalResult from \"./ModalResult\";\r\nimport {PRICE_RANGE_DELETE_API, PRICE_RANGE_DELETE_NOT_ALLOCATED_API} from \"../../const/apiMethods\";\r\nimport {ButtonClose as Delete} from \"../../components/base/BaseButton\";\r\n\r\nexport default ({\r\n    getList,\r\n    disabled,\r\n    permissionMethods,\r\n    update\r\n}) => {\r\n\r\n    const [show, setShow] = React.useState(false);\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [rangesToDelete, setRangesToDelete] = React.useState([]);\r\n\r\n    const [showModalFaultResult, setShowModalFaultResult] = React.useState(false);\r\n    const [modalFaultResultData, setModalFaultResultData] = React.useState({});\r\n\r\n    const apiMethod = useMemo(() => (\r\n        permissionMethods.length && permissionMethods.includes(PRICE_RANGE_DELETE_API)\r\n            ? PRICE_RANGE_DELETE_API\r\n            : PRICE_RANGE_DELETE_NOT_ALLOCATED_API\r\n    ), [permissionMethods]);\r\n\r\n    useEffect(() => {\r\n        if (show) {\r\n            const keys = getList().list\r\n                .map((range) => range.pr_key);\r\n\r\n            setLoading(true);\r\n\r\n            api('price_range__get_list_with_account_trunk_numbers_list', {pr_key_list: keys})\r\n                .then(({price_range_list}) => {\r\n\r\n                    const tree = price_range_list.map((range) => {\r\n\r\n                        const trunks = range.dialer_allocated_numbers_list.map((dialer) => ({\r\n                            value: dialer.trunk_name,\r\n                            label: <div>\r\n                                <div className=\"float-left\">\r\n                                    Dialer: {dialer.account_name}\r\n                                </div>\r\n                                <div className=\"float-right\">\r\n                                    <Tag color=\"green\">{dialer.numbers} numbers</Tag>\r\n                                </div>\r\n                            </div>\r\n                        }));\r\n\r\n                        return {\r\n                            children: trunks.length ? trunks : null,\r\n                            value: range.id,\r\n                            label: <div\r\n                                data-range-id={range.id}\r\n                                onClick={() => {\r\n                                    changeExpandTree(range.id);\r\n                                }}\r\n                            >\r\n                                <div className=\"float-left\">Range: {range.name}</div>\r\n                                <div className=\"float-right\">\r\n                                    <Tag color=\"orange\">{range.dialer_allocated_numbers_list.length} dialers</Tag>\r\n                                    <Tag color=\"green\">{range.all_numbers} numbers</Tag>\r\n                                </div>\r\n                            </div>,\r\n                        }\r\n\r\n                    });\r\n\r\n                    setRangesToDelete(tree);\r\n                }).finally(() => {\r\n                    setLoading(false);\r\n                });\r\n        }\r\n    }, [show]);\r\n\r\n    const changeExpandTree = (rangeId) => {\r\n        const node =  document.getElementsByClassName('rs-tree-node-children');\r\n        if (node && node.length) {\r\n            for (const treeNode of node) {\r\n                const icon = treeNode.getElementsByClassName('rs-tree-node-expand-icon');\r\n                const iconNode = icon && icon.length && icon[0];\r\n                const nodeByRangeId = treeNode.querySelector(`[data-range-id='${rangeId}']`);\r\n                if (treeNode && nodeByRangeId) {\r\n                    if (treeNode.classList.contains('rs-tree-open')) {\r\n                        treeNode.classList.remove('rs-tree-open');\r\n                        iconNode.classList.remove('rs-tree-node-expanded');\r\n                    } else {\r\n                        treeNode.classList.add('rs-tree-open');\r\n                        iconNode.classList.add('rs-tree-node-expanded');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const onFetchResult = useCallback( (result) => {\r\n        setShow(false);\r\n        setModalFaultResultData(result);\r\n        setShowModalFaultResult(true);\r\n    }, [] );\r\n\r\n    return (\r\n        <>\r\n            <Delete\r\n                disabled={disabled}\r\n                onClick={() => setShow(true)}\r\n            >\r\n                - Delete ranges\r\n            </Delete>\r\n\r\n            {show &&\r\n\r\n                <ModalSendApi\r\n                    title=\"Delete Range\"\r\n                    successText=\"Confirm\"\r\n                    onClose={() => setShow(false)}\r\n                    update={update}\r\n                >\r\n\r\n                    <ApiRequest\r\n                        method={apiMethod}\r\n                        checkResultKey = 'ranges'\r\n                        onFaultResult={(result) => {\r\n                            onFetchResult(result);\r\n                            update();\r\n                        }}\r\n                        update={onFetchResult}\r\n                        data={{pr_key_list: getList().list.map(x => x.pr_key)}}\r\n                        // style={{maxHeight: '200px'}}\r\n                    >\r\n                        <Loader show={loading} isLocal/>\r\n                        <h6 className=\"text-center\"> Selected range allocated to following dialers</h6>\r\n                        <Tree data={rangesToDelete} />\r\n                        <h6 className=\"text-center\">All numbers will be revoked.</h6>\r\n                    </ApiRequest>\r\n\r\n                </ModalSendApi>\r\n            }\r\n\r\n            <ModalResult\r\n                show={showModalFaultResult}\r\n                data={modalFaultResultData}\r\n                onClose={() => setShowModalFaultResult(false)}\r\n            />\r\n\r\n        </>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport {FlexboxGrid} from 'rsuite';\r\nimport PanelLayout from '../../components/base/PanelLayout';\r\nimport TableServerSort from './../../components/Table/TableServerSort';\r\nimport Filters from './RangesFilters';\r\nimport Numbers from './Numbers';\r\nimport AddNewRange from '../Prices/Ranges/AddNewRange';\r\nimport DeleteRanges from './DeleteRanges';\r\nimport Loader from '../../components/Loader/Loader';\r\nimport {connect} from 'react-redux';\r\nimport {setCurrentTrunkId} from '../../actions/accounts';\r\nimport {getRanges} from '../../actions/ranges';\r\nimport {getNumbers} from '../../actions/numbers';\r\nimport queryString from 'query-string';\r\nimport {ASC_SORT} from 'const';\r\nimport {setCurrentRangeNumber} from 'actions';\r\n\r\nclass Ranges extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const urlParams = queryString.parse(props.history.location.search);\r\n\r\n        this.filters = {\r\n            sde_key: +urlParams.sde_key,\r\n            de_key: +urlParams.de_key,\r\n            wz_key: +urlParams.wz_key,\r\n            only_with_unallocated_numbers: true\r\n        };\r\n    }\r\n\r\n    /** @type Numbers **/\r\n    refNumbers = null;\r\n    /** @type TableServerSort **/\r\n    refRangesTable = null;\r\n\r\n    state = {\r\n        pr_key: null,\r\n        selected: {all: false, list: []},\r\n        sort: {column: 'name', type: ASC_SORT},\r\n\r\n        number_filters: {\r\n            show_allocated_numbers: true,\r\n            show_unallocated_numbers: true,\r\n            show_test_numbers: true,\r\n            show_block_allocation_numbers: true,\r\n            show_only_block_allocation_numbers: false\r\n        }\r\n    };\r\n\r\n    getSelectedList = () => ({...this.state.selected, countAll: this.props.rangesCount});\r\n\r\n    async componentDidMount() {\r\n        const {sort} = this.state;\r\n        const {rangesPerPage} = this.props;\r\n        await this.props.getRanges(this.filters, 1, rangesPerPage, sort);\r\n        // The code below was the reason of the unnecessary API fetch (price_range_number:get_list)\r\n        // If something went wrong - uncomment it and check FLUX one more time\r\n        // (c) Applesinkin\r\n\r\n        /*\r\n        const {ranges} = this.props;\r\n        if (ranges && ranges.length) {\r\n            this.setState({pr_key: ranges[0].pr_key}, () => {\r\n                this.getNumbers(this.refNumbers.getFilters(), 1, this.props.numbersPerPage);\r\n            });\r\n        }\r\n        */\r\n\r\n    }\r\n\r\n    shouldComponentUpdate({ranges: _ranges, numbersPerPage}) {\r\n        const {number_filters, pr_key} = this.state;\r\n        const {ranges, getNumbers} = this.props;\r\n\r\n\r\n        if (ranges !== _ranges && _ranges.length) {\r\n            if (!pr_key) {\r\n                this.setState({pr_key: _ranges[0].pr_key});\r\n                getNumbers(_ranges[0].pr_key, number_filters, 1, numbersPerPage);\r\n            } else {\r\n                getNumbers(pr_key, number_filters, 1, numbersPerPage);\r\n            }\r\n        }\r\n        if (ranges !== _ranges && !_ranges.length) {\r\n            this.setState({pr_key: null});\r\n\r\n            getNumbers(null, number_filters, 1, numbersPerPage);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    componentWillMount() {\r\n        const {pr_key} = this.state;\r\n        const {ranges} = this.props;\r\n        if (ranges && ranges.length && !pr_key) this.setState({pr_key: ranges[0].pr_key});\r\n    }\r\n\r\n    clearNumberFilters = () => {\r\n        this.setState({\r\n            number_filters: {\r\n                show_allocated_numbers: true,\r\n                show_unallocated_numbers: true,\r\n                show_test_numbers: true,\r\n                show_block_allocation_numbers: true,\r\n                show_only_block_allocation_numbers: false\r\n            }\r\n        });\r\n    };\r\n    onChangeNumberFilters = (value) => {\r\n        this.setState({number_filters: value});\r\n    };\r\n\r\n    clearSelected() {\r\n        this.refRangesTable.clear();\r\n        this.refNumbers.clearSelected();\r\n    }\r\n\r\n    onClickRange = (pr_key) => {\r\n        const {number_filters} = this.state;\r\n\r\n        this.setState({pr_key}, () => {\r\n            this.getNumbers(number_filters, 1, this.props.numbersPerPage);\r\n            this.refNumbers.clearSelected();\r\n        });\r\n    };\r\n\r\n    onChangeFilters = (filters) => {\r\n        this.filters = filters;\r\n        this.props.getRanges(this.filters, 1, this.props.rangesPerPage, this.state.sort);\r\n        this.clearSelected();\r\n    };\r\n\r\n    getNumbers = (filters, page, per_page, sort) => {\r\n        if (this.props.rangesLoading) return;\r\n\r\n        const {pr_key} = this.state;\r\n\r\n        this.props.getNumbers(pr_key, filters, page, per_page, sort);\r\n    };\r\n\r\n    getRanges = (page, per_page, sort) => {\r\n        this.props.getRanges(this.filters, page, per_page, sort);\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            worldzone_list, subdestination_list, destination_list,\r\n            ranges, rangesLoading, rangesPage, rangesCount, rangesPerPage,\r\n            numbersLoading, numbersPage, numbersCount, numbersPerPage, permissions,\r\n            account_id, setCurrentTrunkId, allocatedNumbersCount, setCurrentRangeNumber\r\n        } = this.props;\r\n        const {selected, number_filters} = this.state;\r\n\r\n\r\n        //Clear numbers when no one range filtered\r\n        let numbers = ranges && ranges.length ? this.props.numbers : [];\r\n        const pickedRange = ranges && ranges.length ? ranges.find(range => range.pr_key === this.state.pr_key) : {};\r\n        const sdeKey = pickedRange ? pickedRange.sde_key : null;\r\n\r\n        return (\r\n            <PanelLayout>\r\n                <FlexboxGrid>\r\n                    <FlexboxGrid.Item colspan={12} style={{paddingRight: 20, borderRight: ' 3px solid #C4C4C4'}}>\r\n                        <div style={{marginBottom: 25}}>\r\n                            <div style={{display: 'inline-block', marginRight: 15}}>\r\n                                <AddNewRange\r\n                                    {...{\r\n                                        subdestination_list\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <DeleteRanges\r\n                                permissionMethods={permissions}\r\n                                disabled={!selected.list.length}\r\n                                getList={this.getSelectedList}\r\n                                update={() => {\r\n                                    this.setState({pr_key: null});\r\n                                    this.props.getRanges(this.filters, 1, rangesPerPage, this.state.sort);\r\n                                    this.clearNumberFilters();\r\n                                    this.clearSelected();\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <Filters\r\n                            onChange={this.onChangeFilters}\r\n                            defaultValues={this.filters}\r\n                            {...{\r\n                                worldzone_list,\r\n                                subdestination_list,\r\n                                destination_list,\r\n                            }}/>\r\n\r\n                        <TableServerSort\r\n                            ref={ref => this.refRangesTable = ref}\r\n                            data={ranges}\r\n                            onRowClick={this.onClickRange}\r\n                            loading={rangesLoading}\r\n                            columns={columns}\r\n                            count={rangesCount}\r\n                            per_page={rangesPerPage}\r\n                            page={rangesPage}\r\n                            getItems={this.getRanges}\r\n                            active_id={this.state.pr_key}\r\n                            row_key=\"pr_key\"\r\n                            setSelected={selected => this.setState({selected})}\r\n                            ispagination\r\n                            isselected\r\n                            isSetObject\r\n                            style={{width: '100%'}}\r\n                            onSort={(column, type) => this.setState({sort: {column, type}})}\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                    <FlexboxGrid.Item colspan={12}>\r\n                        <Loader show={rangesLoading} isLocal/>\r\n                        <Numbers\r\n                            ref={ref => this.refNumbers = ref}\r\n                            getNumbers={this.getNumbers}\r\n                            allocatedNumbersCount={allocatedNumbersCount}\r\n                            updateRanges={()=>this.props.getRanges(this.filters, 1, this.props.rangesPerPage, this.state.sort)}\r\n                            filters={number_filters}\r\n                            onChangeNumberFilters={this.onChangeNumberFilters}\r\n                            {...{\r\n                                numbers,\r\n                                numbersLoading,\r\n                                numbersPage,\r\n                                numbersCount,\r\n                                numbersPerPage,\r\n                                account_id,\r\n                                setCurrentTrunkId,\r\n                                setCurrentRangeNumber,\r\n                                pr_key: this.state.pr_key,\r\n                                sde_key: sdeKey\r\n                            }}\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n            </PanelLayout>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nconst columns = [\r\n    {label: 'Range', dataKey: 'name', title: true, sortable: true, width: 300},\r\n    {label: 'Test numbers', dataKey: 'test_number', width: 300},\r\n    {\r\n        label: 'Numbers',\r\n        dataKey: 'all_numbers',\r\n        formatData: (value, key, row) => (!row.blocked && row.allocated_numbers || '0') + '/' + (row.all_numbers || '0'),\r\n        sortable: true\r\n    }\r\n];\r\n\r\nconst mapState = ({actions, references, ranges, numbers, auth}) => ({\r\n    worldzone_list: references.worldzone_list,\r\n    subdestination_list: references.subdestination_list,\r\n    destination_list: references.destination_list,\r\n    defaultSPKey: references.defaultSPKey,\r\n\r\n    ranges: ranges.ranges,\r\n    rangesLoading: ranges.loading,\r\n    rangesPage: ranges.page,\r\n    rangesCount: ranges.count,\r\n    rangesPerPage: ranges.per_page,\r\n\r\n    numbers: numbers.numbers,\r\n    numbersLoading: numbers.loading,\r\n    numbersPage: numbers.page,\r\n    numbersCount: numbers.count,\r\n    allocatedNumbersCount: numbers.allocatedNumbersCount,\r\n    numbersPerPage: numbers.per_page,\r\n    account_id: auth.authInfo.session.account.id,\r\n    permissions: auth.permissions\r\n});\r\n\r\nexport default connect(mapState, {\r\n    getRanges,\r\n    getNumbers,\r\n    setCurrentTrunkId,\r\n    setCurrentRangeNumber\r\n})(Ranges);","import {api} from '../api/loginRoutes'\r\nimport {createAction} from './defaults'\r\nimport {\r\n    CDR_GET_LIST_SUCCESS,\r\n    CDR_SET_LOADING,\r\n} from \"./actionTypes\";\r\nimport {CDR_LIST_METHOD} from \"../const/apiMethods\";\r\nimport {CDR_PER_PAGE} from \"../const/localStorageKeys\";\r\nimport {DEFAULT_PER_PAGE_BIG} from \"../const\";\r\nimport {DESC_SORT} from \"const\";\r\nimport {toEndDayUTCTime, toStartDayUTCTime} from \"utils\";\r\n\r\nconst setLoading = createAction(CDR_SET_LOADING);\r\nconst setCDRList = createAction(CDR_GET_LIST_SUCCESS);\r\n\r\nexport const getCDRList = (filter = {}, page = 1, per_page = DEFAULT_PER_PAGE_BIG, sort = {}) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n\r\n    const sort1 = sort.column;\r\n    const sort1_desc = sort.type && sort.type === DESC_SORT;\r\n\r\n    if (filter.range && filter.range.length) {\r\n        filter['start_date'] = toStartDayUTCTime(filter.range[0]);\r\n        filter['end_date'] = toEndDayUTCTime(filter.range[1]);\r\n\r\n        delete filter.range;\r\n    }\r\n\r\n    api(CDR_LIST_METHOD, {filter, page, per_page, sort1, sort1_desc})\r\n        .then(({cdr_full_count = 0, cdr_full_list = []}) => {\r\n            localStorage.setItem(CDR_PER_PAGE, per_page);\r\n\r\n            dispatch(setCDRList({\r\n                list: cdr_full_list,\r\n                count: cdr_full_count,\r\n                perPage: per_page,\r\n                page: page\r\n            }));\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setLoading(false));\r\n            console.log('GET_CDR_LIST_METHOD_FAILED', error);\r\n        })\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport Table from '../../components/Table/TableServerSort';\r\nimport {connect} from \"react-redux\";\r\nimport {getCDRList} from \"../../actions/cdr\";\r\nimport {ASC_SORT, DESC_SORT} from 'const';\r\n\r\n\r\n\r\nconst CDRTable = (props) => {\r\n    const [sort, setSort] = useState({column: 'datetime', type: DESC_SORT});\r\n    const {cdrList, loading, count, perPage, page, filters, permissions_add} = props;\r\n    const noMoneyMatch = !permissions_add || (permissions_add && !permissions_add['no_money']);\r\n    const columns = [\r\n        {label: 'Date Time', dataKey: 'datetime', formatData: 'datetime', flexGrow: 1, minWidth: 170, title: true, sortable: true},\r\n        {label: 'Originator', dataKey: 'originator_name', minWidth: 200, sortable: true},\r\n        {label: 'Tprefix', fullLabel: 'Originator Tprefix', dataKey: 'tprefix_originator', width: 90, hideDefault: true, sortable: true},\r\n        ...(noMoneyMatch ? [{label: 'Rate', fullLabel: 'Originator Rate', dataKey: 'rate_originator', width: 75, sortable: true, align: 'right'}] : []),\r\n        ...(noMoneyMatch ? [{label: 'Cost', fullLabel: 'Originator Cost', dataKey: 'cost_originator', width: 75, sortable: true, align: 'right'}] : []),\r\n        ...(noMoneyMatch ? [{\r\n            label: 'Margin',\r\n            fullLabel: 'Originator Margin',\r\n            dataKey: 'margin',\r\n            value: (({margin}) => margin !== null && margin !== undefined && !isNaN(margin) ? margin.toFixed(5) : ''),\r\n            width: 80,\r\n            sortable: true,\r\n            align: 'right'\r\n        }] : []),\r\n        {label: 'A-Number', dataKey: 'a_number', width: 120, sortable: true},\r\n        {label: 'Origin', dataKey: 'a_subdestination_name', minWidth: 200, title: true, sortable: true},\r\n        {label: 'B-Number', dataKey: 'b_number', width: 120, sortable: true},\r\n        {label: 'Destination', dataKey: 'b_subdestination_name', minWidth: 250, title: true, sortable: true},\r\n        {label: 'Range', dataKey: 'range', minWidth: 300, title: true, sortable: true},\r\n        {\r\n            label: 'Dialer', \r\n            dataKey: 'dialer_name', \r\n            value: ({dialer_name, account_manager_name}) => `${dialer_name} / ${account_manager_name || 'no manager'}`,\r\n            minWidth: 250, \r\n            sortable: true\r\n        },\r\n        {label: 'TPrefix', fullLabel: 'Dialer TPrefix', dataKey: 'tprefix_dialer', width: 90, hideDefault: true, sortable: true},\r\n        ...(noMoneyMatch ? [{label: 'Rate',fullLabel: 'Dialer Rate', dataKey: 'rate_dialer', width: 75, sortable: true, align: 'right'}] : []),\r\n        ...(noMoneyMatch ? [{label: 'Cost',fullLabel: 'Dialer Cost', dataKey: 'cost_dialer', width: 75, sortable: true, align: 'right'}] : []),\r\n        {label: 'Term. Point',\r\n            dataKey: 'term_point',\r\n            minWidth: 200,\r\n            hideDefault: true,\r\n            sortable: true\r\n        },\r\n        {label: 'Duration', dataKey: 'duration', width: 100, sortable: true},\r\n        {label: 'SIP Cause', dataKey: 'sip_cause', width: 100, sortable: true, align: 'right'},\r\n    ];\r\n\r\n    let getCDRItems = (page, perPage, sort) => {\r\n        props.getCDRList(filters, page, perPage, sort);\r\n    };\r\n\r\n    useEffect(() => {\r\n        props.getCDRList(filters, 1, perPage, sort);\r\n    }, [filters]);\r\n\r\n    return (\r\n        <Table\r\n            data = {cdrList}\r\n            loading = {loading}\r\n            columns = {columns}\r\n            count = {count}\r\n            per_page = {perPage}\r\n            page = {page}\r\n            getItems = {getCDRItems}\r\n            ispagination\r\n            columnSelectorLSKey=\"CDRTable\"\r\n            defaultSortColumn=\"datetime\"\r\n            defaultSortType={DESC_SORT}\r\n            onSort={(column, type) => setSort({column, type})}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({cdr, auth}) => ({\r\n    loading: cdr.loading,\r\n    cdrList: cdr.list,\r\n    count: cdr.count,\r\n    perPage: cdr.perPage,\r\n    page: cdr.page,\r\n    permissions_add: Object.keys(auth.permissions_add).includes('cdr_full:group_get_list_admin') ? auth.permissions_add['cdr_full:group_get_list_admin'] : null\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getCDRList\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CDRTable);\r\n","import React, {useEffect, useState} from 'react';\r\nimport {DateRangePicker, Form, FormGroup, SelectPicker} from \"rsuite\";\r\nimport CustomField from \"../../components/Form/CustomField\";\r\nimport {connect} from \"react-redux\";\r\nimport {getReferencesForReports} from \"../../actions/references\";\r\nimport Text from \"../../components/Form/Text\";\r\nimport FormHOC from \"../../hoc/FilltersForm\";\r\nimport {removeNilValues} from \"../../utils\";\r\nimport {ButtonPrimary} from \"../../components/base/BaseButton\";\r\n\r\n\r\nconst CDRFilters = ({onApplyFilters, defaultFilters, loading, ...props}) => {\r\n    const [filters, setFilters] = useState(defaultFilters);\r\n\r\n    const handleChange = (formValues) => {setFilters(formValues)};\r\n\r\n    const handleApply = () => {onApplyFilters(removeNilValues(filters));};\r\n\r\n\r\n    useEffect(() => {\r\n        props.getReferencesForReports();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Form layout=\"inline\"\r\n                  onChange={handleChange}\r\n                  formDefaultValue={defaultFilters}\r\n            >\r\n                <CustomField\r\n                    accepter={DateRangePicker}\r\n                    cleanable={false}\r\n                    placeholder=\"Select Date Range\"\r\n                    name=\"range\"\r\n                    width={300}\r\n                />\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"acc_key\"\r\n                    data={props.originatorList}\r\n                    placeholder=\"Originator\"\r\n                    name=\"originator_key\"\r\n                    width={200}\r\n                />\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    data={props.dialerList}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"id\"\r\n                    placeholder=\"Dialer\"\r\n                    name=\"dialer_id\"\r\n                    width={200}\r\n                />\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    data={props.supplierList}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"id\"\r\n                    placeholder=\"Supplier\"\r\n                    name=\"supplier_key\"\r\n                    width={200}\r\n                    disabled={true}\r\n                />\r\n                <br />\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    width={300}\r\n                    data={props.subdestinationList}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"sde_key\"\r\n                    placeholder=\"Origin\"\r\n                    name=\"a_sde_key\"\r\n                />\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    width={300}\r\n                    data={props.subdestinationList}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"sde_key\"\r\n                    placeholder=\"Destination\"\r\n                    name=\"b_sde_key\"\r\n                />\r\n                <Text name=\"a_number\" placeholder=\"A-Number\" width={150}/>\r\n                <Text name=\"b_number\" placeholder=\"B-Number\" width={150}/>\r\n                <FormGroup>\r\n                    <ButtonPrimary\r\n                        style={{padding: '8px 34px', marginLeft: 12}}\r\n                        onClick={handleApply}\r\n                        disabled={loading}\r\n                    >\r\n                        Apply Filters\r\n                    </ButtonPrimary>\r\n                </FormGroup>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({references, cdr}) => ({\r\n    loading: cdr.loading,\r\n    originatorList: references.client_list,\r\n    dialerList: references.dialer_list,\r\n    supplierList: references.supplier_list,\r\n    subdestinationList: references.subdestination_list,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getReferencesForReports\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormHOC(CDRFilters));","import React, {useState} from 'react';\r\nimport PageHeader from \"../../components/base/PageHeader\";\r\nimport {FlexboxGrid} from \"rsuite\";\r\nimport ExportCsv from \"../../components/ExportCsv\";\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\nimport CDRTable from \"./CDRTable\";\r\nimport CDRFilters from \"pages/CDR/CDRFilters\";\r\n\r\n\r\nconst CDRPage = () => {\r\n    const today = new Date();\r\n    const [filters, setFilters] = useState({range:[today, today]});\r\n\r\n    return (\r\n        <PanelLayout>\r\n            <PageHeader title=\"CDR\">\r\n                <ExportCsv\r\n                    method='cdr_full:get_list_admin'\r\n                    params={{filter: filters}}\r\n                    title='Export CSV'\r\n                    fileName='cdr.csv'\r\n                    style={{position: 'relative', right: 15}}\r\n                />\r\n            </PageHeader>\r\n            <FlexboxGrid>\r\n                <FlexboxGrid.Item colspan={24}>\r\n                    <CDRFilters onApplyFilters={(filters) => {setFilters(filters)}} defaultFilters={filters}/>\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n            <CDRTable filters={filters} />\r\n        </PanelLayout>\r\n    );\r\n};\r\n\r\nexport default CDRPage;","import {api} from '../api/loginRoutes'\r\nimport {createAction} from './defaults'\r\nimport {\r\n    TRAFFIC_REPORTS_GET_LIST_SUCCESS, TRAFFIC_REPORTS_SET_LOADING,\r\n} from \"./actionTypes\";\r\nimport {TRAFFIC_REPORTS_METHOD} from \"../const/apiMethods\";\r\nimport {toEndDayUTCTime, toStartDayUTCTime} from \"utils\";\r\n\r\nconst setLoading = createAction(TRAFFIC_REPORTS_SET_LOADING);\r\nconst setTrafficReportsList = createAction(TRAFFIC_REPORTS_GET_LIST_SUCCESS);\r\n\r\nexport const getTrafficReports = (filter = {}, page = 1, per_page = 1000) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n\r\n    if (filter.range && filter.range.length) {\r\n        filter['start_date'] = toStartDayUTCTime(filter.range[0]);\r\n        filter['end_date'] = toEndDayUTCTime(filter.range[1]);\r\n\r\n        delete filter.range;\r\n    }\r\n\r\n    api(TRAFFIC_REPORTS_METHOD, {filter, page, per_page})\r\n        .then(({group_count = 0, group_list = []}) => {\r\n            dispatch(setTrafficReportsList({\r\n                list: group_list,\r\n                count: group_count,\r\n                perPage: per_page,\r\n                page: page\r\n            }));\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setLoading(false));\r\n            console.log('TRAFFIC_REPORTS_METHOD_FAILED', error);\r\n        })\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport Table from \"components/Table/TableClientSort\";\r\nimport {ASC_SORT} from \"const\";\r\nimport {connect} from \"react-redux\";\r\nimport {getTrafficReports} from \"actions/traffic_reports\";\r\nimport _ from 'lodash';\r\n\r\nconst columns = [\r\n    {label: 'Period', dataKey: 'group_period', minWidth: 160, sortable: true},\r\n    {label: 'Range', dataKey: 'range_name', minWidth: 200, title: true, sortable: true},\r\n    {label: 'Originator', dataKey: 'originator_name', minWidth: 150, sortable: true},\r\n    {\r\n        label: 'Dialer', \r\n        dataKey: 'dialer_name', \r\n        value: ({dialer_name, account_manager_name}) => `${dialer_name} / ${account_manager_name || 'no manager'}`, \r\n        minWidth: 120, \r\n        sortable: true\r\n    },\r\n    {label: 'Supplier', dataKey: 'supplier_name', minWidth: 120, sortable: true},\r\n    {label: 'Zone (origin)', dataKey: 'a_wz_name', minWidth: 130, title: true, sortable: true},\r\n    {label: 'Zone (dest)', dataKey: 'b_wz_name', minWidth: 130, title: true, sortable: true},\r\n    {label: 'Dest (origin)', dataKey: 'a_de_name', minWidth: 130, title: true, sortable: true},\r\n    {label: 'Dest (dest)', dataKey: 'b_de_name', minWidth: 130, title: true, sortable: true},\r\n    {label: 'Area (origin)', dataKey: 'a_sde_name', minWidth: 130, title: true, sortable: true},\r\n    {label: 'Area (dest)', dataKey: 'b_sde_name', minWidth: 130, title: true, sortable: true},\r\n    {label: 'A-Number', dataKey: 'a_number', minWidth: 120, sortable: true},\r\n    {label: 'B-Number', dataKey: 'b_number', minWidth: 120, sortable: true},\r\n    {label: 'Margin', dataKey: 'sum_margin', minWidth: 80, sortable: true, align: 'right'},\r\n    {label: 'Duration', dataKey: 'sum_duration', minWidth: 75, sortable: true, align: 'right'},\r\n    {label: 'Cost', dataKey: 'sum_cost_dialer', minWidth: 75, sortable: true, align: 'right'},\r\n    {label: 'Calls', dataKey: 'count_cost_dialer', minWidth: 75, sortable: true, align: 'right'},\r\n];\r\n\r\nconst TrafficReportsTable = (props) => {\r\n    const [tableColumns, setTableColumns] = useState(columns);\r\n    const {getTrafficReports, reportsData, loading, count, perPage, page, filters} = props;\r\n\r\n    const getReportsItems = (page, perPage, sort) => {\r\n        getTrafficReports(filters, page, perPage, sort);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getReportsItems(1, perPage);\r\n    }, [filters]);\r\n\r\n    useEffect(() => {\r\n        if (reportsData && reportsData.length) {\r\n            //SELECT Columns To SHOW\r\n            setTableColumns(_.filter(columns, (column) => {\r\n                return reportsData.find(item => !_.isNil(item[column.dataKey]))\r\n                // return !_.isNil(reportsData[0][column.dataKey]);\r\n            }));\r\n        }\r\n    }, [reportsData]);\r\n\r\n    return (\r\n        <Table\r\n            data = {reportsData}\r\n            loading = {loading}\r\n            columns = {tableColumns}\r\n            count = {count}\r\n            per_page = {perPage}\r\n            page = {page}\r\n            getItems = {getReportsItems}\r\n            ispagination\r\n            sortColumn={tableColumns[0].dataKey}\r\n            sortType={ASC_SORT}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({traffic_reports}) => ({\r\n    loading: traffic_reports.loading,\r\n    reportsData: traffic_reports.list,\r\n    count: traffic_reports.count,\r\n    perPage: traffic_reports.perPage,\r\n    page: traffic_reports.page\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getTrafficReports\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TrafficReportsTable);","import React from 'react';\r\nimport css from './CheckboxBadge.module.css';\r\nimport {Checkbox, Icon} from 'rsuite';\r\n\r\nconst CheckboxBadge = ({children, wrapperClassName, ...props}) => {\r\n\r\n    return (\r\n        <div className={[css.CheckboxBadgeWrapper, wrapperClassName].join(' ')}>\r\n            <Checkbox {...props}>\r\n                <div className={css.CheckboxBadge}>\r\n                    <Icon icon={'check'} className={'mr-1'}/>\r\n                    <Icon icon={'plus'} className={'mr-1'}/>\r\n                    {children}\r\n                </div>\r\n            </Checkbox>\r\n        </div>\r\n    );\r\n\r\n    // return (\r\n    //     <div\r\n    //         className={[scss.CheckboxBadge, checked ? scss.checked : '', props.wrapperClassName].join(' ')}\r\n    //         onClick={(e) => {\r\n    //             props.onChange(props.value, !checked, e);\r\n    //         }}\r\n    //     >\r\n    //         <Icon icon={checked ? 'check' : 'plus'} className={'mr-1'}/>\r\n    //         {children}\r\n    //         <Checkbox {...props} checked={checked}/>\r\n    //     </div>\r\n    // );\r\n};\r\n\r\nCheckboxBadge.displayName = 'Checkbox';\r\n\r\nexport default CheckboxBadge;","import React, {useMemo, useEffect, useState} from 'react';\r\nimport {\r\n    CheckboxGroup,\r\n    DateRangePicker,\r\n    Form,\r\n    FormGroup,\r\n    SelectPicker,\r\n    FormControl,\r\n    ControlLabel,\r\n    Input\r\n} from \"rsuite\";\r\nimport CustomField from \"../../components/Form/CustomField\";\r\nimport {connect} from \"react-redux\";\r\nimport {getReferencesForReports} from \"../../actions/references\";\r\nimport FormHOC from \"../../hoc/FilltersForm\";\r\nimport {removeNilValues} from \"../../utils\";\r\nimport _ from 'lodash';\r\nimport CheckboxBadge from \"../../components/Form/CheckboxBadge/CheckboxBadge\";\r\nimport {ButtonPrimary} from \"../../components/base/BaseButton\";\r\n\r\nconst {allowedRange} = DateRangePicker;\r\n\r\n\r\nconst TrafficReportsFilters = ({onApplyFilters, defaultFilters, loading, globalSettings = {}, ...props}) => {\r\n    const [filters, setFilters] = useState(defaultFilters);\r\n    const [grouping, setGrouping] = useState(defaultFilters.group_checkbox);\r\n\r\n    const allowedRanges = useMemo(() => {\r\n        const startDate = new Date();\r\n        const endDate = new Date();\r\n        const intervalMonth = globalSettings.cdr_full__interval_month || 0;\r\n        const dateRange =  [\r\n            new Date( startDate.setMonth(startDate.getMonth() - intervalMonth) + (1000 * 3600 * 24) ),\r\n            new Date( endDate.setMonth(endDate.getMonth() + 12) )\r\n        ];\r\n        return [\r\n            `${dateRange[0].getFullYear()}-${dateRange[0].getMonth() + 1}-${dateRange[0].getDate()}`,\r\n            `${dateRange[1].getFullYear()}-${dateRange[1].getMonth() + 1}-${dateRange[1].getDate()}`,\r\n        ]\r\n    }, [globalSettings]);\r\n\r\n\r\n    const handleChange = (formValues) => {\r\n        let groupCheckboxes = formValues.group_checkbox;\r\n        const radioCheckboxes = ['dt_day', 'dt_month', 'dt_year'];\r\n        const changedCheckbox = _.difference(groupCheckboxes, grouping)[0];\r\n        const valuesWithoutRadio = groupCheckboxes.filter((el) => !radioCheckboxes.includes(el));\r\n\r\n        if (changedCheckbox && radioCheckboxes.includes(changedCheckbox)) {\r\n            groupCheckboxes = [...valuesWithoutRadio, changedCheckbox];\r\n        }\r\n\r\n        setGrouping(groupCheckboxes);\r\n        setFilters({...formValues, group_checkbox: groupCheckboxes});\r\n    };\r\n\r\n    const handleApply = () => {\r\n        onApplyFilters( removeNilValues(filters) );\r\n    };\r\n\r\n    useEffect(() => {\r\n        props.getReferencesForReports();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                layout=\"inline\"\r\n                onChange={handleChange}\r\n                formDefaultValue={defaultFilters}\r\n                formValue={filters}\r\n            >\r\n                <ControlLabel className={'d-block mb-2'}>Filters</ControlLabel>\r\n                <CustomField\r\n                    accepter={DateRangePicker}\r\n                    cleanable={false}\r\n                    placeholder=\"Select Date Range\"\r\n                    disabledDate={allowedRange(...allowedRanges)}\r\n                    name=\"range\"\r\n                    width={250}\r\n                />\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"acc_key\"\r\n                    data={props.originatorList}\r\n                    placeholder=\"Originator\"\r\n                    name=\"originator_key\"\r\n                    width={200}\r\n                />\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    data={props.dialerList}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"id\"\r\n                    placeholder=\"Dialer\"\r\n                    name=\"dialer_id\"\r\n                    width={200}\r\n                />\r\n                {/*<CustomField*/}\r\n                {/*    accepter={SelectPicker}*/}\r\n                {/*    data={props.supplierList}*/}\r\n                {/*    labelKey=\"name\"*/}\r\n                {/*    valueKey=\"acc_key\"*/}\r\n                {/*    placeholder=\"Supplier\"*/}\r\n                {/*    name=\"supplier_key\"*/}\r\n                {/*    width={200}*/}\r\n                {/*    disabled={true}*/}\r\n                {/*/>*/}\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    width={200}\r\n                    data={props.subdestinationList}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"sde_key\"\r\n                    placeholder=\"Area Origin\"\r\n                    name=\"a_sde_key\"\r\n                />\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    width={200}\r\n                    data={props.subdestinationList}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"sde_key\"\r\n                    placeholder=\"Area Dest\"\r\n                    name=\"b_sde_key\"\r\n                />\r\n                <CustomField\r\n                    accepter={Input}\r\n                    width={150}\r\n                    placeholder=\"A-Number\"\r\n                    name=\"a_number\"\r\n                />\r\n                <FormGroup>\r\n                    <ButtonPrimary\r\n                        style={{\r\n                            padding: '8px 34px',\r\n                            marginLeft: 12\r\n                        }}\r\n                        onClick={handleApply}\r\n                        disabled={loading}\r\n                    >\r\n                        Show\r\n                    </ButtonPrimary>\r\n                </FormGroup>\r\n                <br/>\r\n                <FormGroup>\r\n                    <ControlLabel className={'d-block'}>Group by</ControlLabel>\r\n                    <FormControl\r\n                        name=\"group_checkbox\"\r\n                        accepter={CheckboxGroup}\r\n                        inline\r\n                        value={grouping}\r\n                    >\r\n                        <CheckboxBadge value=\"a_number\">A-Number</CheckboxBadge>\r\n                        <CheckboxBadge value=\"b_number\">B-Number</CheckboxBadge>\r\n                        <CheckboxBadge value=\"range_name\">Range</CheckboxBadge>\r\n                        <CheckboxBadge value=\"originator_key\">Originator</CheckboxBadge>\r\n                        <CheckboxBadge value=\"dialer_key\">Dialer</CheckboxBadge>\r\n                        <CheckboxBadge value=\"supplier_key\" wrapperClassName={'mr-4'}>Supplier</CheckboxBadge>\r\n                        <CheckboxBadge value=\"dt_day\">Day</CheckboxBadge>\r\n                        <CheckboxBadge value=\"dt_month\">Month</CheckboxBadge>\r\n                        <CheckboxBadge value=\"dt_year\">Year</CheckboxBadge>\r\n                        <br/>\r\n                        <CheckboxBadge value=\"a_wz_key\">Zone (origin)</CheckboxBadge>\r\n                        <CheckboxBadge value=\"b_wz_key\">Zone (dest)</CheckboxBadge>\r\n                        <CheckboxBadge value=\"a_de_key\">Dest (origin)</CheckboxBadge>\r\n                        <CheckboxBadge value=\"b_de_key\">Dest (dest)</CheckboxBadge>\r\n                        <CheckboxBadge value=\"a_sde_key\">Area (origin)</CheckboxBadge>\r\n                        <CheckboxBadge value=\"b_sde_key\" >Area (dest)</CheckboxBadge>\r\n                        <CheckboxBadge value=\"margin\" >Margin</CheckboxBadge>\r\n                    </FormControl>\r\n                </FormGroup>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({references, traffic_reports}) => ({\r\n    loading: traffic_reports.loading,\r\n    originatorList: references.client_list,\r\n    dialerList: references.dialer_list,\r\n    supplierList: references.supplier_list,\r\n    subdestinationList: references.subdestination_list,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getReferencesForReports\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormHOC(TrafficReportsFilters));","import React, {useState} from 'react';\r\nimport PageHeader from \"../../components/base/PageHeader\";\r\nimport {FlexboxGrid} from \"rsuite\";\r\nimport ExportCsv from \"../../components/ExportCsv\";\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\nimport TrafficReportsTable from \"pages/TrafficReports/TrafficReportsTable\";\r\nimport {TRAFFIC_REPORTS_METHOD} from \"const/apiMethods\";\r\nimport TrafficReportsFilters from \"pages/TrafficReports/TrafficReportsFilters\";\r\nimport { LOCAL_STORAGE_TRAFFIC_STAT_FILTERS } from 'const/localStorageKeys';\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst TrafficReportsPage = ({globalSettings}) => {\r\n    const today = new Date(Date.now());\r\n\r\n    let savedFilters = null;\r\n    const storagedFilters = localStorage.getItem(LOCAL_STORAGE_TRAFFIC_STAT_FILTERS);\r\n    if (storagedFilters && storagedFilters !== '') {\r\n        savedFilters = {\r\n            ...JSON.parse(storagedFilters),\r\n            range: [\r\n                new Date(JSON.parse(storagedFilters).start_end_date[0]),\r\n                new Date(JSON.parse(storagedFilters).start_end_date[1]),\r\n            ]\r\n        };\r\n\r\n        localStorage.removeItem(LOCAL_STORAGE_TRAFFIC_STAT_FILTERS);\r\n    }\r\n\r\n    const [filters, setFilters] = useState(\r\n        savedFilters\r\n            ? savedFilters\r\n            : {range:[today, today], group_checkbox: ['originator_key']}\r\n    );\r\n\r\n    return (\r\n        <PanelLayout>\r\n            <PageHeader title=\"Traffic Reports\">\r\n                <ExportCsv\r\n                    method={TRAFFIC_REPORTS_METHOD}\r\n                    params={{filter: filters}}\r\n                    title='Export CSV'\r\n                    fileName='traffic_report.csv'\r\n                    style={{position: 'relative', right: 15}}\r\n                />\r\n            </PageHeader>\r\n            <FlexboxGrid >\r\n                <FlexboxGrid.Item colspan={24}>\r\n                    <TrafficReportsFilters\r\n                        onApplyFilters={(filters) => {setFilters(filters)}}\r\n                        defaultFilters={filters}\r\n                        {...{\r\n                            globalSettings\r\n                        }}\r\n                    />\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n            <TrafficReportsTable filters={filters} />\r\n        </PanelLayout>\r\n    );\r\n};\r\n\r\nconst mapState = ( {references} )=> ({\r\n    globalSettings: references.global_setting,\r\n});\r\n\r\nexport default connect( mapState)(TrafficReportsPage);","import {AUTH_NUMBERS as PREFIX} from '../const'\r\nimport {\r\n    AUTH_NUMBERS_ADD,\r\n    AUTH_NUMBERS_ADD_UPLOAD,\r\n    AUTH_NUMBERS_DELETE,\r\n    AUTH_NUMBERS_EDIT,\r\n    AUTH_NUMBERS_GET_LIST\r\n} from '../const/apiMethods';\r\n\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from  './defaults';\r\n\r\nconst setAuthNumbers = createAction('SET_ITEMS_'+PREFIX);\r\nconst setLoading = createAction('SET_LOADING_'+PREFIX);\r\nconst setLoadingItem = createAction('SET_LOADING_ITEM_'+PREFIX);\r\nconst removeItem = createAction('REMOVE_ITEM_'+PREFIX);\r\n\r\nexport const getAuthNumbers = (filters) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    api(AUTH_NUMBERS_GET_LIST, {filter: filters}).then( ({ auth_number_list = [] }) => {\r\n        dispatch(setAuthNumbers(auth_number_list || []));\r\n    })\r\n};\r\n\r\nexport const editAuthNumber = (numberId, formData) => (dispatch) => {\r\n    dispatch(setLoadingItem(true));\r\n    api(AUTH_NUMBERS_EDIT, {an_key: numberId, number: formData.number, description: formData.description, sp_key: formData.sp_key}).then( () => {\r\n        setLoadingItem(false);\r\n    })\r\n};\r\n\r\nexport const deleteAuthNumber = (id) => (dispatch) => {\r\n    dispatch(setLoadingItem(true));\r\n    api(AUTH_NUMBERS_DELETE, {an_key: id}).then( () => {\r\n        setLoadingItem(false);\r\n    })\r\n};\r\n\r\nexport const addAuthNumber = (data, onSuccess) => async (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    try {\r\n        const response = await api(AUTH_NUMBERS_ADD, {number: data.number, description: data.description, sp_key: data.sp_key}, true);\r\n\r\n        if (response && response.auth_number)  {\r\n            onSuccess();\r\n            setLoading(false);\r\n        }\r\n\r\n        return response;\r\n    } catch {\r\n        dispatch(setLoading(false));\r\n    }\r\n\r\n};\r\n\r\nexport const addUploadAuthNumbers = (jsonData, onSuccess) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    api(AUTH_NUMBERS_ADD_UPLOAD, {data: jsonData}).then( () => {\r\n        onSuccess();\r\n        setLoading(false);\r\n    })\r\n};\r\n\r\nexport const setAnyLoading = (payload) => (dispatch) => {\r\n    dispatch(setLoading(payload))\r\n};","import React from 'react';\r\nimport Form from 'rsuite/es/Form';\r\nimport Text from '../../components/Form/Text';\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport {Schema} from 'rsuite';\r\nimport {debounce} from 'lodash';\r\nimport styled, {css} from 'styled-components';\r\n\r\nconst { StringType } = Schema.Types;\r\n\r\nconst filtersModel = Schema.Model({\r\n    number: StringType().maxLength(40, 'The maximum is only 40 characters.'),\r\n});\r\n\r\n\r\nconst AuthNumbersFilter = ({onChange, defaultFilters, textFieldStyles}) => {\r\n    const handleChange = (formValues) => {\r\n        onChange(formValues)\r\n    };\r\n    const {textFieldWidth, textFieldMarginBottom} = textFieldStyles;\r\n    return (\r\n        <>\r\n            <Form\r\n                model={filtersModel}\r\n                layout=\"inline\"\r\n                onChange={debounce((value) => {\r\n                    handleChange(value);\r\n                }, 400)}\r\n                formDefaultValue={defaultFilters}\r\n            >\r\n                <Text name=\"number\" placeholder=\"Number/Service name\" styleFormGroupExternal={{'margin-bottom': 0}} width={240}/>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\nexport default FormHOC (AuthNumbersFilter, filtersModel,300);","import React, {Component, createRef} from 'react';\r\nimport {Schema, Table, Alert, Button, Form, Icon, FlexboxGrid, FormControl, SelectPicker, Input} from 'rsuite';\r\nimport Text from 'components/Form/Text';\r\nimport BaseTable from \"../../components/base/BaseTable\";\r\n\r\nconst {StringType, NumberType} = Schema.Types;\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\nexport default class extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const {data} = this.props;\r\n\r\n        this.columns = [\r\n            {label: 'Number', dataKey: 'number', width: 400, type: 'text', flexGrow: 3},\r\n            {label: 'Description', dataKey: 'description', width: 1150, type: 'text', flexGrow: 6},\r\n            {label: 'Service plan', dataKey: 'sp_key', flexGrow: 1, type: 'select'}\r\n        ];\r\n\r\n        this.columnOptions = [\r\n            {\r\n                id: 'number',\r\n                flexGrow: 3,\r\n                width: 180\r\n            },\r\n            {\r\n                id: 'description',\r\n                flexGrow: 6,\r\n                width: 440\r\n            }\r\n        ];\r\n        this.formsNumbersRef = {};\r\n        this.formEditRef = {number: createRef(), description: createRef()};\r\n        this.refTextArea = createRef();\r\n\r\n        this.formModel = Schema.Model({\r\n            number: StringType()\r\n                .pattern(/^[1-9][\\d]*$/, 'The number must not begin with 0 and must contain only digits')\r\n                .isRequired('This is required field')\r\n                .minLength(6, 'The minimum of this field is 6 characters')\r\n                .maxLength(15, 'The maximum  of this field is 15 characters'),\r\n            description: StringType().isRequired('This is required field').maxLength(255, 'The maximum of this field is 255 characters'),\r\n            sp_key: NumberType().isRequired('This is required field')\r\n        });\r\n\r\n        this.copy = null;\r\n        this.defaultHeightTable = 500;\r\n\r\n        this.state = {\r\n            numberState: data || [],\r\n            editState: null,\r\n            formState: data || [],\r\n            inputError: {},\r\n            dataSetted: this.props.dataSetted,\r\n            inputMessage: {},\r\n            filledTextArea: '',\r\n            autoHeightTable: this.defaultHeightTable,\r\n            resizedWidth: window.innerWidth,\r\n            editFormValue: {number: '', description: '', sp_key: null},\r\n            editSpKeyValue: null\r\n        };\r\n    }\r\n\r\n    handleResize = () => {\r\n        this.setState({resizedWidth: window.innerWidth});\r\n    };\r\n\r\n    componentWillMount() {\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    componentDidUpdate = (prevProps) => {\r\n        const {data, getAuthNumbers} = this.props;\r\n\r\n        if (JSON.stringify(prevProps.data) !== JSON.stringify(data)) {\r\n\r\n            this.setState({numberState: data, formState: data});\r\n\r\n            // The code below will check - does it compare fetched data || set from scratch (param: dataSetted)\r\n            if (this.state.dataSetted === false) {\r\n                this.setState({dataSetted: true})\r\n            } else {\r\n                getAuthNumbers();\r\n            }\r\n\r\n            data && data.length && this.setState({autoHeightTable : this.getAuthHeightTable(data)})\r\n        }\r\n    };\r\n\r\n    updateFormRef = (refStorage, ref, id, dataKey) => {\r\n        refStorage[id] = {...refStorage[id], [dataKey]: ref};\r\n    };\r\n\r\n    updateTableValues = (formValues, id) => {\r\n        const {numberState} = this.state;\r\n\r\n        this.setState({\r\n            numberState: [\r\n                ...numberState.map(\r\n                    number => number.an_key === id ? {...number, ...formValues} : number\r\n                )\r\n            ]\r\n        });\r\n    };\r\n\r\n    updateFormValues = (formValues, id) => {\r\n        const {formState} = this.state;\r\n\r\n        this.setState({\r\n            formState: [\r\n                ...formState.map(\r\n                    number => number.an_key === id ? {...number, ...formValues} : number\r\n                )\r\n            ]\r\n        });\r\n    };\r\n\r\n    getNumbers = () => {\r\n        const {getAuthNumbers} = this.props;\r\n\r\n        getAuthNumbers();\r\n    };\r\n\r\n    renderColumn = ({label, dataKey, value = null, width = 300, type = 'text', ...props}) => {\r\n        const {service_plan_list} = this.props;\r\n        const {inputError, inputMessage, formState, filledTextArea} = this.state;\r\n        const servicePlanListOTP = service_plan_list.filter(servicePlan => !!servicePlan.auth);\r\n        return (\r\n            <Column width={width} {...props}>\r\n                <HeaderCell>{label}</HeaderCell>\r\n                <Cell dataKey={dataKey} rowIndex={dataKey}>\r\n                    {\r\n                        (rowData) => {\r\n                            return <Form\r\n                                onMouseOver={() => {\r\n                                    this.copy = {[rowData.an_key]: dataKey};\r\n\r\n                                    if (this.formsNumbersRef[rowData.an_key] && this.formsNumbersRef[rowData.an_key][dataKey]) {\r\n                                        this.setState({filledTextArea: this.formsNumbersRef[rowData.an_key][dataKey].value});\r\n                                    }\r\n                                }}\r\n                                onMouseOut={() => {\r\n                                    this.copy =  null;\r\n                                }}\r\n                                classPrefix={'auth-number-form'}\r\n                                model={this.formModel}\r\n                                onError={error => {\r\n                                    this.setState({\r\n                                        inputError: {\r\n                                            ...inputError,\r\n                                            [rowData.an_key]: {...inputError[rowData.an_key], [dataKey]: error[dataKey]}\r\n                                        }\r\n                                    });\r\n                                }}\r\n                                key={rowData.an_key}\r\n                                onChange={(formValues, event) => {\r\n                                    const formCheck = this.formModel.check(formValues);\r\n                                    const checker = Object.keys(formCheck).map(i => formCheck[i].hasError).some(value => value === false);\r\n\r\n                                    this.setState({\r\n                                        inputMessage: {\r\n                                            ...inputMessage,\r\n                                            [rowData.an_key]: {...inputMessage[rowData.an_key], [dataKey]: !checker}\r\n                                        }\r\n                                    });\r\n                                    this.setState({\r\n                                        formState: [\r\n                                            ...formState.map(\r\n                                                number => number.an_key === rowData.an_key ? {\r\n                                                    ...number, ...formValues,\r\n                                                    ...(event && event.target ? {event: {...number.event, [event.target.name]: event.target}} : {})\r\n                                                } : number\r\n                                            )\r\n                                        ]\r\n                                    });\r\n                                }}\r\n                                value={{[dataKey]: rowData[dataKey]}}\r\n                                formDefaultValue={{[dataKey]: rowData[dataKey]}}\r\n                            >\r\n                                {type === 'text' && <Text\r\n                                    inputRef={ref => this.updateFormRef(this.formsNumbersRef, ref, rowData.an_key, dataKey)}\r\n                                    className=\"auth-number-input\"\r\n                                    readOnly={rowData.an_key ? !rowData.edit : false}\r\n                                    name={dataKey}\r\n                                    placeholder={label}\r\n                                    message={inputError && inputError[rowData.an_key] && inputMessage[rowData.an_key] && inputMessage[rowData.an_key][dataKey] &&\r\n                                    <span className=\"rs-table-auth-numbers-input-error\">\r\n                                        {inputError[rowData.an_key][dataKey]}\r\n                                    </span>\r\n                                    }\r\n                                />}\r\n                                {type === 'select' && <FormControl\r\n                                    readOnly={rowData.an_key ? !rowData.edit : false}\r\n                                    searchable={false}\r\n                                    cleanable={false}\r\n                                    errorPlacement=\"topEnd\"\r\n                                    className=\"tableFilters_field\"\r\n                                    name=\"sp_key\"\r\n                                    accepter={SelectPicker}\r\n                                    data={servicePlanListOTP}\r\n                                    placeholder=\"Service plan\"\r\n                                    valueKey=\"sp_key\"\r\n                                    labelKey=\"name\"\r\n                                    type=\"text\"\r\n                                    message={inputError && inputError[rowData.an_key] && inputMessage[rowData.an_key] && inputMessage[rowData.an_key][dataKey] &&\r\n                                    <span className=\"rs-table-auth-numbers-input-error\">\r\n                                        {inputError[rowData.an_key][dataKey]}\r\n                                    </span>\r\n                                    }\r\n                                />}\r\n                                {\r\n                                    !rowData.edit &&\r\n                                    this.copy &&\r\n                                    this.copy[rowData.an_key] &&\r\n                                    this.copy[rowData.an_key] === dataKey &&\r\n                                    type !== 'select' &&\r\n                                <>\r\n                                    <Button\r\n                                        className=\"rs-table-auth-numbers-copy-button\"\r\n                                        onClick={() => {\r\n                                            if (this.formsNumbersRef[rowData.an_key]) {\r\n                                                this.refTextArea.current.select();\r\n                                                document.execCommand('copy');\r\n                                                const messages = {\r\n                                                    [rowData.number]: `Number \"${rowData.number}\" was copied!`,\r\n                                                    [rowData.description]: `Description \"${rowData.description}\" was copied!`\r\n                                                };\r\n                                                Alert.success(messages[this.refTextArea.current.value]);\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        <Icon inverse icon=\"copy-o\"/>\r\n                                    </Button>\r\n                                    <textarea\r\n                                        ref={this.refTextArea}\r\n                                        value={filledTextArea}\r\n                                        className=\"rs-table-auth-numbers-textarea-hidden\"\r\n                                    />\r\n                                </>}\r\n                            </Form>;\r\n                        }\r\n                    }\r\n                </Cell>\r\n            </Column>\r\n        );\r\n    };\r\n\r\n    getAuthHeightTable = (data) => {\r\n        const length = (data.length);\r\n        const height = data && length ? length * 46 + 40 : 40;\r\n\r\n        return length <= 10 ? height : this.defaultHeightTable\r\n    };\r\n\r\n\r\n    render() {\r\n        const {\r\n            inputError, numberState, formState, inputMessage, editState, autoHeightTable, resizedWidth, editFormValue,\r\n            editSpKeyValue\r\n        } = this.state;\r\n        const {loading, onAddAuthNumber, onEditAuthNumber, onPickDeleteNumber, permission, service_plan_list} = this.props;\r\n\r\n        // const renderedColumns = this.columns.map(this.renderColumn);\r\n        for (const column in this.columns) {\r\n            const elem = this.columns[column];\r\n            const columnOption = this.columnOptions.find(item => item.id === elem.dataKey);\r\n            if (resizedWidth >= 800) {\r\n                if (columnOption && !elem.flexGrow) {\r\n                    elem.flexGrow = columnOption.flexGrow;\r\n                    delete elem.width;\r\n                }\r\n            } else {\r\n                if (columnOption) {\r\n                    elem.width = columnOption.width;\r\n                    delete elem.flexGrow;\r\n                }\r\n            }\r\n        }\r\n        const renderedColumns = this.columns.map(this.renderColumn);\r\n        const servicePlanListOTP = service_plan_list.filter(servicePlan => !!servicePlan.auth);\r\n        const formControlNames = [{name: \"number\", flexGrow: 3}, {name: \"description\", flexGrow: 6}, {name: \"sp_key\", flexGrow: 1}];\r\n        const formControlItems = [\r\n            <Text\r\n                inputRef={ref => this.formEditRef['number'] = ref}\r\n                className=\"auth-number-add-input\"\r\n                name=\"number\"\r\n                placeholder={\"Number\"}\r\n                message={\r\n                    inputError[\"new\"] && inputMessage[\"new\"] && inputMessage[\"new\"][\"number\"] &&\r\n                    <span className=\"rs-table-auth-numbers-input-error\">{inputError[\"new\"][\"number\"]}</span>\r\n                }\r\n            />,\r\n            <Text\r\n                inputRef={ref => this.formEditRef['description'] = ref}\r\n                className=\"auth-number-add-input\"\r\n                name=\"description\"\r\n                placeholder={\"Description\"}\r\n                message={\r\n                    inputError && inputError[\"new\"] && inputMessage[\"new\"] && inputMessage[\"new\"][\"description\"] &&\r\n                    <span className=\"rs-table-auth-numbers-input-error\">{inputError[\"new\"][\"description\"]}</span>\r\n                }\r\n            />,\r\n            <FormControl\r\n                searchable={false}\r\n                cleanable={false}\r\n                errorPlacement=\"topEnd\"\r\n                className=\"tableFilters_field\"\r\n                name=\"sp_key\"\r\n                accepter={SelectPicker}\r\n                data={servicePlanListOTP}\r\n                placeholder=\"Service Plan\"\r\n                valueKey=\"sp_key\"\r\n                labelKey=\"name\"\r\n                onChange={(value) => {this.setState({editSpKeyValue: value})}}\r\n                value={editSpKeyValue}\r\n                type=\"text\"\r\n                message={\r\n                    inputError && inputError[\"new\"] && inputMessage[\"new\"] && inputMessage[\"new\"][\"sp_key\"] &&\r\n                    <span className=\"rs-table-auth-numbers-input-error\">{inputError[\"new\"][\"sp_key\"]}</span>\r\n                }\r\n            />,\r\n        ];\r\n\r\n        const addColumns = formControlNames.map( key => {\r\n            return {dataKey: key.name, label: ''}\r\n        } );\r\n\r\n        const tableColumnsElements = {};\r\n        for (let i = 0; i < formControlNames.length; i++) {\r\n            tableColumnsElements[formControlNames[i].name] = formControlItems[i];\r\n        }\r\n\r\n        const columnsElements = formControlNames.map( (item) => {\r\n            return (\r\n                <Column flexGrow={item.flexGrow}>\r\n                    <HeaderCell></HeaderCell>\r\n                    <Cell dataKey={item.name}/>\r\n                </Column>\r\n            )\r\n        } );\r\n        return (<>\r\n            <BaseTable\r\n                shouldUpdateScroll={false}\r\n                virtualized\r\n                height={autoHeightTable}\r\n                data={numberState}\r\n                loading={loading || !this.state.dataSetted}\r\n                columns={this.columns}\r\n            >\r\n                {renderedColumns}\r\n                <Column width={120}>\r\n                    <HeaderCell>Action</HeaderCell>\r\n                    <Cell>\r\n                        {\r\n                            rowData =>\r\n                                {return permission ? <div style={{marginTop: '2px'}}>\r\n                                    {! rowData.edit &&\r\n                                    <Button    // Edit number\r\n                                        color=\"green\"\r\n                                        onClick={() => {\r\n                                            this.setState({editState: rowData});\r\n                                            this.updateTableValues({edit: true}, rowData.an_key);\r\n                                        }}\r\n                                        className=\"rs-table-auth-numbers-buttons rs-table-auth-numbers-green-button\"\r\n                                    >\r\n                                        <Icon icon=\"edit2\"/>\r\n                                    </Button>\r\n                                    || <>\r\n                                        <Button    // Confirm editing\r\n                                            color=\"green\"\r\n                                            onClick={() => {\r\n                                                const dataField = formState.find(number => number.an_key === rowData.an_key);\r\n                                                this.updateTableValues({\r\n                                                    ...dataField,\r\n                                                    edit: false\r\n                                                }, rowData.an_key);\r\n\r\n                                                onEditAuthNumber(rowData.an_key, dataField);\r\n                                            }}\r\n                                            className=\"rs-table-auth-numbers-buttons rs-table-auth-numbers-green-button\"\r\n                                            disabled={\r\n                                                formState && formState.length && Object.keys(this.formModel.check(formState.find(number => number.an_key === rowData.an_key)))\r\n                                                    .map(i => this.formModel.check(formState.find(number => number.an_key === rowData.an_key))[i].hasError)\r\n                                                    .some(value => value === true)\r\n                                                    ? 'disabled' : ''\r\n                                            }\r\n                                        >\r\n                                            <Icon icon=\"check-circle\"/>\r\n                                        </Button>\r\n                                        <Button    // Cancel editing\r\n                                            color=\"red\"\r\n                                            onClick={() => {\r\n                                                this.getNumbers();\r\n                                                this.setState({\r\n                                                    editState: null,\r\n                                                    inputMessage: {\r\n                                                        ...inputMessage,\r\n                                                        [rowData.an_key]: {...inputMessage[rowData.an_key], number: false, description: false}\r\n                                                    }\r\n                                                });\r\n                                                this.updateTableValues({\r\n                                                    ...rowData,\r\n                                                    edit: false\r\n                                                }, rowData.an_key);\r\n\r\n                                                const formValue = formState.find(state => state.an_key === rowData.an_key);\r\n\r\n                                                if (rowData.an_key === (editState && editState.an_key) && formValue.event) {\r\n                                                    for (let name in formValue.event) {\r\n                                                        if (formValue.event.hasOwnProperty(name)) {\r\n                                                            formValue.event[name].value = editState[name];\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            }}\r\n                                            className=\"rs-table-auth-numbers-buttons rs-table-auth-numbers-red-button\"\r\n                                        >\r\n                                            <Icon icon=\"close-circle\"/>\r\n                                        </Button>\r\n                                    </>\r\n                                    }\r\n                                    <Button    // Delete number\r\n                                        color=\"red\"\r\n                                        onClick={() => {\r\n                                            onPickDeleteNumber(true, rowData.an_key, () => {\r\n                                                this.setState({\r\n                                                    numberState:\r\n                                                        [\r\n                                                            ...numberState.filter(number => number.an_key !== rowData.an_key)\r\n                                                        ]\r\n                                                })\r\n                                            });\r\n                                        }}\r\n                                        className=\"rs-table-auth-numbers-single-button rs-table-auth-numbers-red-button\"\r\n                                    >\r\n                                        <Icon icon=\"trash2\"/>\r\n                                    </Button>\r\n                                </div> : <></>}\r\n                        }\r\n\r\n                    </Cell>\r\n                </Column>\r\n            </BaseTable>\r\n            {permission ? <Form\r\n                layout=\"inline\"\r\n                model={this.formModel}\r\n                classPrefix=\"auth-add-number-form\"\r\n                onChange={(formValues) => {\r\n                    const formCheck = this.formModel.check(formValues);\r\n\r\n                    this.setState({\r\n                        inputMessage: {\r\n                            ...inputMessage,\r\n                            \"new\": {...inputMessage[\"new\"], \"number\": formCheck[\"number\"].hasError, \"description\": formCheck[\"description\"].hasError, \"sp_key\": formCheck[\"sp_key\"].hasError}\r\n                        },\r\n                        inputError: {\r\n                            ...inputError,\r\n                            \"new\": {...inputError[\"new\"], \"number\": formCheck[\"number\"].errorMessage, \"description\": formCheck[\"description\"].errorMessage, \"sp_key\": formCheck[\"sp_key\"].errorMessage}\r\n                        },\r\n                        editFormValue: {\r\n                            ...formValues\r\n                        }\r\n                    });\r\n                }}\r\n                value={editFormValue}\r\n                formDefaultValue={this.emptyField}\r\n            >\r\n                <BaseTable\r\n                    data={[tableColumnsElements]}\r\n                    columns={addColumns}\r\n                    headerHeight={0}\r\n                    autoHeight\r\n                    rowHeight={46}\r\n                    className=\"tableFilters tableFilters__form\"\r\n                >\r\n                    {columnsElements}\r\n                    <Column>\r\n                        <HeaderCell></HeaderCell>\r\n                        <Cell>\r\n                            <Button    // Add number\r\n                                style={{width: '100%', marginTop: resizedWidth > 853 ? '0px' : '20px', height: 36}}\r\n                                color=\"green\"\r\n                                onClick={() => {\r\n                                    const numberValue = editFormValue;\r\n                                    const duplicateNumber = numberState.find(value => value.number === numberValue.number);\r\n                                    const duplicateDescription = numberState.find(value => value.description === numberValue.description);\r\n\r\n                                    this.setState({\r\n                                        editState: null,\r\n                                        editFormValue: {number: '', description: '', sp_key: null},\r\n                                        editSpKeyValue: null\r\n                                    });\r\n                                    if (!duplicateNumber || duplicateNumber && !duplicateDescription) {\r\n                                        this.formEditRef['number'].value = '';\r\n                                        this.formEditRef['description'].value = '';\r\n\r\n                                        if (numberValue.number !== \"\" && numberValue.description !== \"\" && numberValue.sp_key !== \"\") onAddAuthNumber(numberValue);\r\n                                        this.getNumbers()\r\n                                    }\r\n                                }}\r\n                                className=\"rs-table-auth-numbers-single-button rs-table-auth-numbers-green-button\"\r\n                                disabled={\r\n                                    !(inputMessage[\"new\"] && (!inputMessage[\"new\"][\"description\"] && !inputMessage[\"new\"][\"number\"] && !inputMessage[\"new\"][\"sp_key\"])) || !this.formEditRef['number'].value || !this.formEditRef['description'].value ? 'disabled' : ''\r\n                                }\r\n                            >\r\n                                <Icon icon=\"plus\"/>\r\n                            </Button>\r\n                        </Cell>\r\n                    </Column>\r\n                </BaseTable>\r\n            </Form> : <></>}\r\n        </>);\r\n    };\r\n}","import React, {Component} from 'react';\r\nimport PanelLayout from '../../components/base/PanelLayout';\r\nimport {FlexboxGrid, Alert, Uploader, Icon} from 'rsuite';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    addAuthNumber,\r\n    addUploadAuthNumbers,\r\n    deleteAuthNumber,\r\n    editAuthNumber,\r\n    getAuthNumbers,\r\n    setAnyLoading\r\n} from '../../actions/auth_numbers';\r\nimport AuthNumbersFilter from './AuthNumbersFilter';\r\nimport PageHeader from '../../components/base/PageHeader';\r\nimport AuthNumbersTable from './AuthNumbersTable';\r\nimport ModalEdit from '../../components/Modal/ModalEdit';\r\nimport {ButtonPrimary} from \"../../components/base/BaseButton\";\r\nimport styled, {css} from 'styled-components';\r\nimport {AUTH_NUMBERS_ADD} from '../../const/apiMethods';\r\nimport {saveFileBlob} from '../../utils';\r\nimport {getCsvResponse} from '../../api/loginRoutes';\r\nimport './AuthNumbers.css';\r\n\r\nconst uploaderIcons =\r\n    {\r\n        'inited': 'arrow-up2',\r\n        'uploading': 'spinner',\r\n        'error': 'warning',\r\n        'finished': 'check-circle',\r\n    };\r\n\r\nclass AuthNumbers extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.defaultFilters = {number: ''};\r\n\r\n        this.state = {\r\n            numbers: [],\r\n            filters: {number: ''},\r\n            inner_loading: false,\r\n            csv: [],\r\n            showDeleteModal: {show: false, key: null},\r\n            onDeletePostFunction: null\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {getAuthNumbers} = this.props;\r\n        getAuthNumbers();\r\n    }\r\n\r\n    onChangeFilters = (filters) => {\r\n        let filterData;\r\n\r\n        if (Object.keys(filters).length === 0) {\r\n            filterData = this.defaultFilters;\r\n        } else {\r\n            filterData = filters;\r\n        }\r\n\r\n        this.setState({\r\n            inner_loading: true,\r\n            filters: filterData,\r\n        });\r\n\r\n    };\r\n\r\n    onAddAuthNumber = async (dataNumber) => {\r\n        const {addAuthNumber, getAuthNumbers} = this.props;\r\n        const response = await addAuthNumber(dataNumber, getAuthNumbers);\r\n        if (response && response.auth_number) {\r\n            Alert.success(`Number ${dataNumber.number} was added`);\r\n        }\r\n        if (response && response.error && response.error.data.number === \"dublicate\") {\r\n            Alert.error(`Number ${dataNumber.number} is already exists!`)\r\n        }\r\n    };\r\n\r\n    onEditAuthNumber = (id, number, description) => {\r\n        const {editAuthNumber} = this.props;\r\n\r\n        editAuthNumber(id, number, description);\r\n    };\r\n\r\n    onDeleteAuthNumber = (id) => {\r\n        const {deleteAuthNumber} = this.props;\r\n\r\n        deleteAuthNumber(id);\r\n    };\r\n\r\n    handleChangeCSV = (value) => {\r\n        const file = value.slice(-1).pop();\r\n\r\n\r\n        this.setState({\r\n            csvList: [file],\r\n            csvFile: file\r\n        });\r\n    };\r\n\r\n    getFilteredData = (data) => {\r\n        const {filters} = this.state;\r\n\r\n        const filterName = filters && filters.number || '';\r\n        const dataValue = data.filter(value => value && (value.number && value.number.includes(filterName) || value.description && value.description.toLowerCase().includes(filterName.toLowerCase())));\r\n\r\n        return dataValue ? dataValue : [];\r\n    };\r\n\r\n    onPickDeleteNumber = (show, key, postFunction) => {\r\n        this.setState({\r\n            showDeleteModal: {show, key},\r\n            onDeletePostFunction: postFunction\r\n        });\r\n    };\r\n    downloadAuthNumbers = () => {\r\n        getCsvResponse('auth_number:get_list').then((response) => {\r\n            saveFileBlob(response, 'Auth Numbers.csv')\r\n        })\r\n    };\r\n    alertFirstErrorFromUpload = (status) => {\r\n        const errorBody = status.response.error.data;\r\n        const errorKeys = Object.keys(errorBody);\r\n        const errorMessageList = errorKeys.length ? errorKeys.map(key => errorBody[key]) : [];\r\n        const errorMessage = errorMessageList.length ? errorMessageList[0] : 'Uploading error';\r\n        if (status.response) {\r\n            Alert.error(errorMessage);\r\n        } else {\r\n            Alert.error('File too large')\r\n        }\r\n    }\r\n    render() {\r\n        const {auth_number_list, setAnyLoading, getAuthNumbers, loading, loadingItem, permissions, service_plan_list} = this.props;\r\n        const {csvFile, filters, showDeleteModal, onDeletePostFunction} = this.state;\r\n\r\n        const onAddAuthNumber = this.onAddAuthNumber;\r\n        const onEditAuthNumber = this.onEditAuthNumber;\r\n        const onDeleteAuthNumber = this.onDeleteAuthNumber;\r\n        const onPickDeleteNumber = this.onPickDeleteNumber;\r\n        const downloadAuthNumbers = this.downloadAuthNumbers;\r\n\r\n        setAnyLoading(false);\r\n\r\n        const initialData = this.getFilteredData(auth_number_list);\r\n        const permission = permissions && permissions.includes(AUTH_NUMBERS_ADD);\r\n\r\n        return (\r\n            <PanelLayout>\r\n                <PageHeader title=\"List of auth numbers\">\r\n                </PageHeader>\r\n                <StyledFlexboxGrid>\r\n                    <StyledFlexboxGridItem width=\"74%\">\r\n                        <AuthNumbersFilter\r\n                            onChange={this.onChangeFilters}\r\n                            setLoading={setAnyLoading}\r\n                            defaultFilters={this.defaultFilters}\r\n                            textFieldStyles={{'textFieldMarginBottom': 0}}\r\n                        />\r\n                    </StyledFlexboxGridItem>\r\n                    <StyledFlexboxGridItem width=\"13%\" textAlign=\"right\">\r\n                        {auth_number_list.length > 0 && <ButtonPrimary onClick={downloadAuthNumbers}>\r\n                            Download\r\n                        </ButtonPrimary>}\r\n                    </StyledFlexboxGridItem>\r\n                    <StyledFlexboxGridItem width=\"13%\" textAlign=\"right\">\r\n                        {permission ? <StyledUploader\r\n                            onError={(status) => {\r\n                                this.alertFirstErrorFromUpload(status)\r\n                            }}\r\n                            accept={'text/csv'}\r\n                            autoUpload={true}\r\n                            multiple={true}\r\n                            ref={ref => {\r\n                                this.uploader = ref;\r\n                            }}\r\n                            // headers={{'Content-Type': 'text/csv'}}\r\n                            data={csvFile}\r\n                            onChange={this.handleChangeCSV}\r\n                            action={`${process.env.REACT_APP_API_URL}?method=auth_number:upload&session_key=${localStorage.getItem('api_key')}`}\r\n                            onSuccess={(response) => {\r\n                                if (response !== undefined) {\r\n                                    getAuthNumbers();\r\n                                    Alert.success(`Success! ${response.result.inserted_rows / 2} rows were uploaded!`)\r\n                                }\r\n                            }}\r\n                        >\r\n                            <ButtonPrimary>\r\n                                {\r\n                                    csvFile && <Icon\r\n\r\n                                        icon={uploaderIcons[csvFile.status]}\r\n                                        pulse={csvFile.status === 'uploading'}\r\n                                        style={{\r\n                                            marginRight: '5px'\r\n                                        }}/>\r\n                                    || <Icon\r\n                                        icon=\"file\"\r\n                                        style={{\r\n                                            marginRight: '5px'\r\n                                        }}\r\n                                    />\r\n                                }\r\n                                <span>Upload from file</span>\r\n                            </ButtonPrimary>\r\n                        </StyledUploader> : <></>}\r\n                    </StyledFlexboxGridItem>\r\n                </StyledFlexboxGrid>\r\n                <AuthNumbersTable\r\n                    data={initialData}\r\n                    dataSetted={this.props.auth_number_list_setted}\r\n                    {...{\r\n                        filters,\r\n                        loading,\r\n                        loadingItem,\r\n                        onAddAuthNumber,\r\n                        onEditAuthNumber,\r\n                        onDeleteAuthNumber,\r\n                        onPickDeleteNumber,\r\n                        getAuthNumbers,\r\n                        service_plan_list,\r\n                        permission\r\n                    }}\r\n                />\r\n                {showDeleteModal && showDeleteModal.key && <ModalEdit show={showDeleteModal.show}\r\n                            onClose={() => this.setState({showDeleteModal: false, key: null})}\r\n                            onSuccess={() => {\r\n                                this.onDeleteAuthNumber(showDeleteModal.key);\r\n                                onDeletePostFunction && onDeletePostFunction();\r\n                            }}\r\n                            title={`Delete auth number`}\r\n                            width={400}\r\n                >\r\n                    Are you sure about that?\r\n                </ModalEdit>\r\n                }\r\n            </PanelLayout>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapState = ({auth_numbers, references, auth}) => ({\r\n    loading: auth_numbers.loading,\r\n    auth_number_list: auth_numbers.auth_number_list,\r\n    auth_number_list_setted: auth_numbers.auth_number_list_setted,\r\n    service_plan_list: references.service_plan_list,\r\n    loadingItem: auth_numbers.loadingItem,\r\n    permissions: auth.permissions\r\n});\r\n\r\nexport default connect(mapState, {\r\n    getAuthNumbers,\r\n    editAuthNumber,\r\n    deleteAuthNumber,\r\n    addAuthNumber,\r\n    addUploadAuthNumbers,\r\n    setAnyLoading\r\n})(AuthNumbers);\r\n\r\nconst StyledFlexboxGrid = styled(FlexboxGrid)`\r\n  width: 100%;\r\n  ${props => props.width && css`\r\n      width: ${props.width};\r\n  `}\r\n`;\r\nconst StyledFlexboxGridItem = styled(FlexboxGrid.Item)`\r\n  width: 100%;\r\n  text-align: ${props => props.textAlign || 'left'};\r\n  ${props => props.width && css`\r\n      width: ${props.width};\r\n  `}\r\n`;\r\nconst StyledUploader = styled(Uploader)`\r\n  button.rs-btn {\r\n    background: #20BA88;\r\n    border: none;\r\n    color: #fff;\r\n    box-shadow: 0 4px 4px rgba(0,0,0,0.16);\r\n    padding: 12px 34px;\r\n    border-radius: 5px;\r\n  }\r\n  button.rs-btn i.rs-icon {\r\n    color: #fff;\r\n  }\r\n \r\n  button.rs-btn:hover i.rs-icon {\r\n    color: #c1c1c1;\r\n  }\r\n`;","import React from 'react';\r\nimport {Loader} from 'rsuite';\r\nimport PanelLayout from '../base/PanelLayout';\r\n\r\nconst styleLoader = {\r\n    transform: 'translate(0, 35%)'\r\n}\r\n\r\nexport default  class  extends React.Component{\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                <PanelLayout style = {{position: 'relative'}}>\r\n                    <Loader size=\"md\" center content=\"Loading\" style={styleLoader} />\r\n                </PanelLayout>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport {Button, Form, FormControl, Icon, Input, Schema, SelectPicker, Table} from 'rsuite';\r\nimport styled from \"styled-components\";\r\nimport BaseTable from \"../../components/base/BaseTable\";\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\nconst {NumberType, StringType} = Schema.Types;\r\n\r\nconst formModel = Schema.Model({\r\n    a_wz_key: NumberType(),\r\n    a_de_key: NumberType(),\r\n    a_sde_key: NumberType(),\r\n    a_prefix: StringType()\r\n        .pattern(/^[0-9][\\d]*$/, 'The number must contain only digits')\r\n        .minLength(6, \"Min length is 6 characters\")\r\n        .maxLength(15, \"Max length is 15 characters\"),\r\n    b_wz_key: NumberType(),\r\n    b_de_key: NumberType(),\r\n    b_sde_key: NumberType(),\r\n    bil_acc_orig: NumberType(),\r\n    bil_acc_term: NumberType(),\r\n});\r\n\r\nexport default ({data = [], filter = {}, onRemoveItem, onEditItem, loading, isLoading, update, ...props}) => {\r\n    const [tableData, setTableData] = useState([]);\r\n    const [currentEditedFieldKeyList, setCurrentEditedFieldKeyList] = React.useState(null);\r\n    const [editedFieldKeyList, setEditedFieldKeyList] = useState([]);\r\n    const [localLoading, setLocalLoading] = useState(isLoading);\r\n    const [inited, setInited] = useState(false);\r\n\r\n    const [disabledEditedFields, setDisabledEditedFields] = useState([]);\r\n\r\n    let formGroupsRefs = new Map();\r\n\r\n    const searchedData = [\r\n        \"a_worldzone_name\", \"a_destination_name\", \"a_subdestination_name\", \r\n        \"a_prefix\", \"b_worldzone_name\", \"b_destination_name\", \r\n        \"b_subdestination_name\", \"bil_acc_orig_name\", \"bil_acc_term_name\"\r\n    ];\r\n\r\n    useEffect( () => {\r\n\r\n        const tableDataList = data.filter((item) => {\r\n            // return item if filter is empty\r\n            if (!filter || filter && !filter.str)\r\n                return true;\r\n\r\n            const match = filter.str.toLowerCase();\r\n\r\n            const filterMatching = searchedData.map((keyName) => {\r\n                if (item[keyName]) {\r\n                    const matchedString = item[keyName].toString().toLowerCase();\r\n                    console.log('FILTER::matching', matchedString, match, matchedString.includes(match));\r\n                    if (matchedString.includes(match)) {\r\n                        return true\r\n                    }\r\n                }\r\n            });\r\n\r\n            return filterMatching.some(dataMatch => !!dataMatch);\r\n        });\r\n\r\n        setTableData(tableDataList);\r\n        setInited(true);\r\n        if (currentEditedFieldKeyList) {\r\n            let editedFilters = new Set([...editedFieldKeyList, currentEditedFieldKeyList]);\r\n            editedFilters.delete(currentEditedFieldKeyList);\r\n            setEditedFieldKeyList(Array.from(editedFilters));\r\n            setCurrentEditedFieldKeyList(null);\r\n            setDisabledEditedFields([]);\r\n        }\r\n    }, [data, filter]);\r\n\r\n\r\n    useEffect( () => {\r\n        if (!inited)\r\n            return;\r\n        setTableData([...tableData]);\r\n        if (tableData.length) {\r\n            setTimeout(() => {\r\n                setTableData([...tableData]);\r\n            });\r\n        }\r\n    }, [editedFieldKeyList, inited]);\r\n\r\n    const createFormGroupRefs = (key, ref) => {\r\n        if ( !formGroupsRefs.has(key) ) {\r\n            formGroupsRefs.set(key, new Set([ref]))\r\n        } else {\r\n            formGroupsRefs.get(key).add(ref);\r\n        }\r\n    };\r\n\r\n    const handleSubmit = (key) => {\r\n        const formFields = formGroupsRefs.get(key);\r\n\r\n        let data = {};\r\n        formFields.forEach(field => {\r\n            if (!field)\r\n                return;\r\n\r\n            const formData = field.getFormValue();\r\n            data = Object.assign(data, formData);\r\n        });\r\n\r\n        data.a_prefix = data.a_prefix || null;\r\n\r\n        const promise = onEditItem(key, data).then(() => {\r\n            update()\r\n        });\r\n\r\n        let editedFilters = new Set([...editedFieldKeyList, key]);\r\n        editedFilters.delete(key);\r\n        setEditedFieldKeyList(Array.from(editedFilters));\r\n\r\n        promise.then(() => {\r\n            setCurrentEditedFieldKeyList(null)\r\n        })\r\n    };\r\n\r\n    const setDisabledItemForm = (id) => {\r\n        if ( id && !disabledEditedFields.includes(id)) {\r\n            setDisabledEditedFields([...disabledEditedFields, id]);\r\n        }\r\n    }\r\n\r\n    const setEnabledItemForm = (id) => {\r\n        if ( id && disabledEditedFields.includes(id)) {\r\n            setDisabledEditedFields(disabledEditedFields.filter(item => item !== id))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <StyledTable\r\n            className=\"tableFilters\"\r\n            data={tableData}\r\n            loading={loading || localLoading}\r\n            headerHeight={47}\r\n            wordWrap\r\n            autoHeight\r\n        >\r\n\r\n            <Column flexGrow minWidth={130}>\r\n                <HeaderCell>\r\n                    <span className=\"tableFilters__headerText\">Originator / Origin</span>\r\n                </HeaderCell>\r\n                <Cell dataKey={\"bil_acc_orig_name\"}>\r\n                    {(rowData) => {\r\n                        const previewParts = {\r\n                            originator: [\r\n                                rowData[\"bil_acc_orig_name\"]\r\n                            ].filter(item => item),\r\n                            origin: [\r\n                                rowData[\"a_worldzone_name\"],\r\n                                rowData[\"a_destination_name\"],\r\n                                rowData[\"a_subdestination_name\"],\r\n                                rowData[\"a_prefix\"]\r\n                            ].filter(item => item),\r\n                        };\r\n                        if ( editedFieldKeyList.includes(rowData[\"alx_key\"]) ) {\r\n                            return (\r\n                                <StyledForm\r\n                                    model={formModel}\r\n                                    ref={(ref) => createFormGroupRefs(rowData[\"alx_key\"], ref)}\r\n                                    onChange={(val) => {\r\n                                        const isEnabled = Object.keys(val).find(item => {\r\n                                            return !!val[item];\r\n                                        });\r\n                                        if (!isEnabled) {\r\n                                            setDisabledItemForm(rowData[\"alx_key\"]);\r\n                                        } else {\r\n                                            setEnabledItemForm(rowData[\"alx_key\"]);\r\n                                        }\r\n                                    }}\r\n                                    formDefaultValue={{\r\n                                        bil_acc_orig: rowData[\"bil_acc_orig\"],\r\n                                        a_prefix: rowData[\"a_prefix\"],\r\n                                        a_wz_key: rowData[\"a_wz_key\"],\r\n                                        a_de_key: rowData[\"a_de_key\"],\r\n                                        a_sde_key: rowData[\"a_sde_key\"],\r\n                                    }}\r\n                                >\r\n                                    <StyledField\r\n                                        name=\"bil_acc_orig\"\r\n                                        accepter={SelectPicker}\r\n                                        data={props.clientList}\r\n                                        placeholder=\"Originator name\"\r\n                                        valueKey=\"acc_key\"\r\n                                        labelKey=\"name\"\r\n                                    />\r\n                                    <StyledField\r\n                                        name=\"a_prefix\"\r\n                                        accepter={Input}\r\n                                        placeholder=\"Origin Prefix\"\r\n                                    />\r\n                                    <StyledField\r\n                                        name=\"a_wz_key\"\r\n                                        accepter={SelectPicker}\r\n                                        data={props.worldzoneList}\r\n                                        placeholder=\"Origin zone\"\r\n                                        valueKey=\"wz_key\"\r\n                                        labelKey=\"name\"\r\n                                    />\r\n                                    <StyledField\r\n                                        name=\"a_de_key\"\r\n                                        accepter={SelectPicker}\r\n                                        data={props.destinationList}\r\n                                        placeholder=\"Origin country\"\r\n                                        valueKey=\"de_key\"\r\n                                        labelKey=\"name\"\r\n                                    />\r\n                                    <StyledField\r\n                                        name=\"a_sde_key\"\r\n                                        accepter={SelectPicker}\r\n                                        data={props.subdestinationList}\r\n                                        placeholder=\"Origin operator\"\r\n                                        valueKey=\"sde_key\"\r\n                                        labelKey=\"name\"\r\n                                    />\r\n                                </StyledForm>\r\n                            )\r\n                        }\r\n                        return (\r\n                            <>\r\n                                <span className=\"tableFilters__previewText\">\r\n                                    <b>Originator</b>: {previewParts.originator.length ? previewParts.originator.join(' / ') : 'Any'}, &nbsp;\r\n                                    <b>Origin</b>: {previewParts.origin.length ? previewParts.origin.join(' / ') : 'Any'}\r\n                                </span>\r\n                            </>\r\n                        )\r\n                    }}\r\n                </Cell>\r\n            </Column>\r\n\r\n            <Column flexGrow minWidth={130}>\r\n                <HeaderCell>\r\n                    <span className=\"tableFilters__headerText\">Destination / Terminator</span>\r\n                </HeaderCell>\r\n                <Cell dataKey={\"bil_acc_orig_name\"}>\r\n                    {(rowData) => {\r\n                        const previewParts = {\r\n                            destination: [\r\n                                rowData[\"b_worldzone_name\"],\r\n                                rowData[\"b_destination_name\"],\r\n                                rowData[\"b_subdestination_name\"]\r\n                            ].filter(item => item),\r\n                            terminator: [\r\n                                rowData[\"bil_acc_term_name\"]\r\n                            ].filter(item => item),\r\n                        };\r\n                        if ( editedFieldKeyList.includes(rowData[\"alx_key\"]) ) {\r\n                            return (\r\n                                <StyledForm\r\n                                    model={formModel}\r\n                                    ref={(ref) => createFormGroupRefs(rowData[\"alx_key\"], ref)}\r\n                                    onChange={(val) => {\r\n                                        const isEnabled = Object.keys(val).find(item => {\r\n                                            return !!val[item];\r\n                                        });\r\n                                        if (!isEnabled) {\r\n                                            setDisabledItemForm(rowData[\"alx_key\"]);\r\n                                        } else {\r\n                                            setEnabledItemForm(rowData[\"alx_key\"]);\r\n                                        }\r\n                                    }}\r\n                                    formDefaultValue={{\r\n                                        b_wz_key: rowData[\"b_wz_key\"],\r\n                                        b_de_key: rowData[\"b_de_key\"],\r\n                                        b_sde_key: rowData[\"b_sde_key\"],\r\n                                        bil_acc_term: rowData[\"bil_acc_term\"]\r\n                                    }}\r\n                                >\r\n                                    <StyledField\r\n                                        name=\"b_wz_key\"\r\n                                        accepter={SelectPicker}\r\n                                        data={props.worldzoneList}\r\n                                        placeholder=\"Desctination zone\"\r\n                                        valueKey=\"wz_key\"\r\n                                        labelKey=\"name\"\r\n                                    />\r\n                                    <StyledField\r\n                                        name=\"b_de_key\"\r\n                                        accepter={SelectPicker}\r\n                                        data={props.destinationList}\r\n                                        placeholder=\"Destination country\"\r\n                                        valueKey=\"de_key\"\r\n                                        labelKey=\"name\"\r\n                                    />\r\n                                    <StyledField\r\n                                        name=\"b_sde_key\"\r\n                                        accepter={SelectPicker}\r\n                                        data={props.subdestinationList}\r\n                                        placeholder=\"Destination operator\"\r\n                                        valueKey=\"sde_key\"\r\n                                        labelKey=\"name\"\r\n                                    />\r\n                                    <StyledField\r\n                                        name=\"bil_acc_term\"\r\n                                        accepter={SelectPicker}\r\n                                        data={props.clientList}\r\n                                        placeholder=\"Terminator name\"\r\n                                        valueKey=\"acc_key\"\r\n                                        labelKey=\"name\"\r\n                                    />\r\n                                </StyledForm>\r\n                            )\r\n                        }\r\n                        return (\r\n                            <>\r\n                                <span className=\"tableFilters__previewText\">\r\n                                    <b>Destination</b>: {previewParts.destination.length ? previewParts.destination.join(' / ') : 'Any'}, &nbsp;\r\n                                    <b>Terminator</b>: {previewParts.terminator.length ? previewParts.terminator.join(' / ') : 'Any'}\r\n                                </span>\r\n                            </>\r\n                        )\r\n                    }}\r\n                </Cell>\r\n            </Column>\r\n\r\n            <Column width={174}>\r\n                <HeaderCell></HeaderCell>\r\n                <Cell>\r\n                    {rowData => (\r\n                        <div className=\"tableFilters_buttons\">\r\n                            {!editedFieldKeyList.includes(rowData[\"alx_key\"])\r\n                                ? <Button \r\n                                    size=\"sm\" \r\n                                    color=\"lightblue\" \r\n                                    onClick={() => {\r\n                                        if ([\r\n                                            rowData[\"bil_acc_orig\"],\r\n                                            rowData[\"a_prefix\"],\r\n                                            rowData[\"a_wz_key\"],\r\n                                            rowData[\"a_de_key\"],\r\n                                            rowData[\"a_sde_key\"],\r\n                                            rowData[\"b_wz_key\"],\r\n                                            rowData[\"b_de_key\"],\r\n                                            rowData[\"b_sde_key\"],\r\n                                            rowData[\"bil_acc_term\"]\r\n                                        ].every(item => !item)) {\r\n                                            setDisabledItemForm(rowData[\"alx_key\"]);\r\n                                        }\r\n\r\n                                        let editedFilters = new Set([...editedFieldKeyList, rowData[\"alx_key\"]]);\r\n                                        setEditedFieldKeyList(Array.from(editedFilters));\r\n                                    }}\r\n                                >\r\n                                    <Icon icon=\"edit2\"/>\r\n                                </Button>\r\n                                : <>\r\n                                    <Button \r\n                                        size=\"sm\" \r\n                                        color=\"green\" \r\n                                        disabled={disabledEditedFields.includes(rowData[\"alx_key\"])}\r\n                                        onClick={() => {\r\n                                            handleSubmit(rowData[\"alx_key\"]);\r\n                                        }}\r\n                                    >\r\n                                        <Icon icon=\"check-circle\"/>\r\n                                    </Button>\r\n\r\n                                    <Button \r\n                                        size=\"sm\" \r\n                                        color=\"red\" \r\n                                        onClick={() => {\r\n                                            let editedFilters = new Set([...editedFieldKeyList, rowData[\"alx_key\"]]);\r\n                                            editedFilters.delete(rowData[\"alx_key\"]);\r\n                                            setEditedFieldKeyList(Array.from(editedFilters));\r\n                                            setEnabledItemForm(rowData[\"alx_key\"]);\r\n                                        }}\r\n                                    >\r\n                                        <Icon icon=\"close-circle\"/>\r\n                                    </Button>\r\n                                </>\r\n                            }\r\n                            <Button\r\n                                size=\"sm\"\r\n                                color=\"red\"\r\n                                onClick={() => {\r\n                                    onRemoveItem(rowData[\"alx_key\"]);\r\n                                    setEnabledItemForm(rowData[\"alx_key\"]);\r\n                                }}\r\n                            >\r\n                                <Icon icon=\"trash2\"/>\r\n                            </Button>\r\n                        </div>\r\n                    )}\r\n                </Cell>\r\n            </Column>\r\n\r\n        </StyledTable>\r\n    )\r\n}\r\n\r\nconst StyledForm = styled(Form)`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    \r\n    .rs-form-control-wrapper {\r\n        flex-shrink: 0;\r\n        min-width: 175px;\r\n        padding-bottom: 5px;\r\n        padding-right: 5px;\r\n        width: 33%;\r\n    }\r\n`;\r\n\r\nconst StyledField = styled(FormControl).attrs(props =>({\r\n    className: \"tableFilters_field\",\r\n    errorPlacement: \"topEnd\",\r\n    type: \"text\",\r\n}))`\r\n`;\r\n\r\nconst StyledTable = styled(BaseTable)`\r\n    && {\r\n    \r\n        .tableFilters__previewText {\r\n            display: block;\r\n            line-height: 20px;\r\n            margin-top: 7px;\r\n            word-break: normal;\r\n        }\r\n        \r\n        .tableFilters_buttons {\r\n            height: 20px;\r\n            margin-top: 7px;\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport Form from 'rsuite/es/Form';\r\nimport FormHOC from 'hoc/FilltersForm';\r\nimport {Schema} from 'rsuite';\r\nimport {debounce} from 'lodash';\r\nimport Text from '../../components/Form/Text';\r\nimport styled from \"styled-components\";\r\n\r\nconst { StringType } = Schema.Types;\r\n\r\nconst filtersModel = Schema.Model({\r\n    str: StringType().maxLength(256, 'The maximum is only 256 characters.'),\r\n});\r\n\r\n\r\nconst AccessListExceptionFilter = ({onChange, defaultFilters}) => {\r\n    const handleChange = (formValues) => {\r\n        onChange(formValues)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                className=\"access_list_exception_filter\"\r\n                model={filtersModel}\r\n                layout=\"inline\"\r\n                onChange={debounce((value) => {\r\n                    handleChange(value);\r\n                }, 400)}\r\n                formDefaultValue={defaultFilters}\r\n            >\r\n                <StyledTextField\r\n                    name=\"str\"\r\n                    placeholder=\"Origin/origin prefix/destination\"\r\n                />\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\nexport default FormHOC (AccessListExceptionFilter, filtersModel, 300);\r\n\r\n\r\nconst StyledTextField = styled(Text)`\r\n    &&& {\r\n        width: 100%;\r\n        min-width: 300px;\r\n    }\r\n`;","import React, {useState} from \"react\";\r\nimport {Table} from 'rsuite';\r\nimport {Form, Schema, SelectPicker, FormControl, Input, InputNumber, Button} from \"rsuite\";\r\nimport NumberField from \"components/Form/NumberField\";\r\nimport Icon from \"rsuite/es/Icon\";\r\nimport Whisper from 'rsuite/es/Whisper';\r\nimport Tooltip from 'rsuite/es/Tooltip';\r\nimport styled from \"styled-components\";\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\nexport default ({defaultFilter, addItem, update, ...props}) => {\r\n    const form = React.createRef();\r\n\r\n    const formControlNames = [\"a_wz_key\", \"a_de_key\", \"a_sde_key\", \"a_prefix\", \"b_wz_key\", \"b_de_key\", \"b_sde_key\", \"bil_acc_orig\", \"bil_acc_term\"];\r\n\r\n    const [fields, setFields] = useState({});\r\n    const [hasRequiredException, setRequiredException] = useState(false);\r\n\r\n    const {StringType, NumberType} = Schema.Types;\r\n    const formModel = Schema.Model({\r\n        a_sde_key: NumberType(),\r\n        a_prefix: StringType()\r\n            .pattern(/^[0-9][\\d]*$/, 'The number must contain only digits')\r\n            .minLength(6, 'The minimum is 6 characters.')\r\n            .maxLength(15, \"The minimum is 15 characters\"),\r\n        b_sde_key: NumberType(),\r\n        bil_acc_orig: NumberType(),\r\n        bil_acc_term: NumberType()\r\n    });\r\n\r\n    const formControlItems = [\r\n        <FormControl placement=\"autoVerticalStart\" errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"bil_acc_orig\" accepter={SelectPicker} data={props.clientList} placeholder=\"Originator\" valueKey=\"acc_key\" labelKey=\"name\" type=\"text\" />,\r\n        <FormControl errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"a_prefix\" accepter={Input} placeholder=\"Origin Prefix\" type=\"text\" />,\r\n        <FormControl placement=\"autoVerticalStart\" errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"a_wz_key\" accepter={SelectPicker} data={props.worldzoneList} placeholder=\"Origin zone\" valueKey=\"wz_key\" labelKey=\"name\" type=\"text\" />,\r\n        <FormControl placement=\"autoVerticalStart\" errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"a_de_key\" accepter={SelectPicker} data={props.destinationList} placeholder=\"Origin country\" valueKey=\"de_key\" labelKey=\"name\" type=\"text\" />,\r\n        <FormControl placement=\"autoVerticalStart\" errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"a_sde_key\" accepter={SelectPicker} data={props.subdestinationList} placeholder=\"Origin operator\" valueKey=\"sde_key\" labelKey=\"name\" type=\"text\" />,\r\n        <FormControl placement=\"autoVerticalStart\" errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"b_wz_key\" accepter={SelectPicker} data={props.worldzoneList} placeholder=\"Desctination zone\" valueKey=\"wz_key\" labelKey=\"name\" type=\"text\" />,\r\n        <FormControl placement=\"autoVerticalStart\" errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"b_de_key\" accepter={SelectPicker} data={props.destinationList} placeholder=\"Destination country\" valueKey=\"de_key\" labelKey=\"name\" />,\r\n        <FormControl placement=\"autoVerticalStart\" errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"b_sde_key\" accepter={SelectPicker} data={props.subdestinationList} placeholder=\"Destination operator\" valueKey=\"sde_key\" labelKey=\"name\" type=\"text\" />,\r\n        <FormControl placement=\"autoVerticalStart\" errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"bil_acc_term\" accepter={SelectPicker} data={props.clientList} placeholder=\"Terminator\" valueKey=\"acc_key\" labelKey=\"name\" type=\"text\" />,\r\n    ];\r\n\r\n    const handleChange = (formValues) => {\r\n        setFields(formValues);\r\n\r\n        checkAtLeastOneException(formValues);\r\n    };\r\n    const checkAtLeastOneException = (values) => {\r\n        setRequiredException(!!formControlNames.map(key => values[key]).filter(value => value).length);\r\n    };\r\n    const handleSubmit = async (_, event) => {\r\n        event.preventDefault();\r\n\r\n        let validStatus = form.current.check();\r\n\r\n        if (!validStatus)\r\n            return;\r\n\r\n        let formValues = form.current.getFormValue();\r\n        let data = {\r\n            ...formValues,\r\n            a_prefix: formValues.a_prefix \r\n                ? formValues.a_prefix \r\n                : null\r\n        };\r\n\r\n        addItem(data).then(() => {\r\n            update();\r\n        });\r\n\r\n    };\r\n\r\n\r\n\r\n    const columns = formControlNames.map( key => {\r\n        return {dataKey: key, label: ''}\r\n    } );\r\n\r\n    const tableColumnsElements = {};\r\n    for (let i = 0; i < formControlNames.length; i++) {\r\n        tableColumnsElements[formControlNames[i]] = formControlItems[i];\r\n    }\r\n\r\n    const columnsElements = formControlNames.map( (item) => {\r\n        return (\r\n            <Column flexGrow>\r\n                <HeaderCell></HeaderCell>\r\n                <Cell dataKey={item}/>\r\n            </Column>\r\n        )\r\n    } );\r\n\r\n    return(\r\n        <>\r\n            <StyledForm\r\n                onSubmit={handleSubmit}\r\n                ref={form}\r\n                model={formModel}\r\n                onChange={handleChange}\r\n                formDefaultValue={fields}\r\n                style={{margin: '0px', width: '100%'}}\r\n                className={\"tableFilters tableFilters__form\"}\r\n            >\r\n\r\n                <StyledFieldsWrapper>\r\n                    {formControlItems}\r\n                </StyledFieldsWrapper>\r\n\r\n                <StyledSubmitWrapper>\r\n                    <Button\r\n                        disabled={!hasRequiredException}\r\n                        className=\"tableFilters_submit\"\r\n                        color=\"green\"\r\n                        type=\"submit\"\r\n                    >\r\n                        <Icon icon=\"plus\"/>\r\n                    </Button>\r\n                    {!hasRequiredException &&\r\n                        <Whisper\r\n                            trigger=\"hover\"\r\n                            placement=\"topEnd\"\r\n                            speaker={\r\n                                <Tooltip>\r\n                                    At least one exception field must be not empty\r\n                                </Tooltip>\r\n                            }\r\n                        >\r\n                            <Icon className=\"access_list_exception_add__waring\" icon=\"remind\"/>\r\n                        </Whisper>\r\n                    }\r\n                </StyledSubmitWrapper>\r\n\r\n            </StyledForm>\r\n        </>\r\n    )\r\n};\r\n\r\n\r\nconst StyledFieldsWrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    flex-grow: 1;\r\n    padding-top: 5px;\r\n`;\r\n\r\nconst StyledSubmitWrapper = styled.div`\r\n    padding: 5px 10px 5px 20px;\r\n    width: 185px;\r\n    flex-shrink: 0;\r\n    \r\n    .access_list_exception_add__waring {\r\n        padding-left: 20px\r\n    }\r\n`;\r\n\r\nconst StyledForm = styled(Form)`\r\n    display: flex;\r\n    padding-bottom: 30px;\r\n    \r\n    .rs-form-control-wrapper {\r\n        flex-shrink: 0;\r\n        min-width: 175px;\r\n        padding-bottom: 5px;\r\n        padding-right: 5px;\r\n        width: 20%;\r\n    }\r\n`;","import React, {useState} from 'react';\r\nimport Modal from \"../../components/Modal\";\r\nimport {api} from '../../api/loginRoutes';\r\n\r\nconst ModalAccessListFilterRemove = (props) => {\r\n\r\n    let {account_id, show = false, data, handleClose, handleSuccess} = props;\r\n\r\n    const [disabled, setDisabled] = React.useState(false);\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                show={show}\r\n                footer\r\n                data={data}\r\n                disabled = {disabled}\r\n                onSuccess={handleSuccess}\r\n                onClose={handleClose}\r\n                successText = \"Remove\"\r\n                title={\"Remove access list exception\"}\r\n            >\r\n                <p>Are you sure about that?</p>\r\n            </Modal>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ModalAccessListFilterRemove;","import React from 'react';\r\nimport PageHeader from '../../components/base/PageHeader';\r\nimport PanelLayout from '../../components/base/PanelLayout';\r\nimport AccessListExceptionTable from './AccessListExceptionTable';\r\nimport AccessListExceptionFilter from './AccessListExceptionFilter';\r\nimport AccessListExceptionAdd from './AccessListExceptionAdd';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getAccessExclusionList, \r\n    onAddAccessExclusionItem, \r\n    onEditAccessExclusionItem, \r\n    onRemoveAccessExclusionItem\r\n} from 'actions/access_list';\r\nimport {getReferencesForReports} from 'actions/references';\r\nimport ModalExceptionRemove from \"./ModalExceptionRemove\";\r\nimport './AccessListException.css';\r\n\r\nclass AccessListException extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            filter: null,\r\n            isLoading: false,\r\n            showModalRemove: false,\r\n            modalRemoveData: null,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {getAccessExclusionList, getReferencesForReports} = this.props;\r\n        getAccessExclusionList();\r\n        getReferencesForReports();\r\n    }\r\n\r\n    onChangeFilter = (filter) => {\r\n        this.setState({\r\n            filter: filter,\r\n            isLoading: false,\r\n        });\r\n    };\r\n\r\n    handleShowModalRemove = (data) => {\r\n        this.setState({\r\n            showModalRemove: true,\r\n            modalRemoveData: data\r\n        });\r\n    }\r\n\r\n    removeExceptionList = () => {\r\n        const {modalRemoveData} = this.state;\r\n        const {onRemoveAccessExclusionItem, getAccessExclusionList} = this.props;\r\n        onRemoveAccessExclusionItem(modalRemoveData)\r\n            .then(() => {\r\n                getAccessExclusionList();\r\n                this.setState({showModalRemove: false});\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const {filter, isLoading, showModalRemove} = this.state;\r\n        const {\r\n            access_list_exclusion, onRemoveAccessExclusionItem, onEditAccessExclusionItem, worldzoneList, clientList,\r\n            destinationList, subdestinationList, loading, onAddAccessExclusionItem, getAccessExclusionList\r\n        } = this.props;\r\n\r\n        return (\r\n            <PanelLayout>\r\n                <PageHeader title=\"Exceptions for access lists\"/>\r\n\r\n                <AccessListExceptionFilter\r\n                    onChange={this.onChangeFilter}\r\n                />\r\n                <AccessListExceptionTable\r\n                    data={access_list_exclusion}\r\n                    onRemoveItem={this.handleShowModalRemove}\r\n                    onEditItem={onEditAccessExclusionItem}\r\n                    update={getAccessExclusionList}\r\n                    {...{\r\n                        filter,\r\n                        loading,\r\n                        isLoading,\r\n                        clientList,\r\n                        worldzoneList,\r\n                        destinationList,\r\n                        subdestinationList,\r\n                    }}\r\n                />\r\n                <AccessListExceptionAdd\r\n                    addItem={onAddAccessExclusionItem}\r\n                    update={getAccessExclusionList}\r\n                    {...{\r\n                        clientList,\r\n                        worldzoneList,\r\n                        destinationList,\r\n                        subdestinationList,\r\n                    }}\r\n                />\r\n                <ModalExceptionRemove\r\n                    show={showModalRemove}\r\n                    handleClose={() => this.setState({showModalRemove: false})}\r\n                    handleSuccess={this.removeExceptionList}\r\n                />\r\n            </PanelLayout>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapState = ({access_list, references}) => ({\r\n    access_list_exclusion: access_list.access_list_exclusion,\r\n    worldzoneList: references.worldzone_list,\r\n    destinationList: references.destination_list,\r\n    subdestinationList: references.subdestination_list,\r\n    clientList: references.client_list,\r\n});\r\n\r\nexport default connect(mapState,\r\n    {\r\n        getAccessExclusionList,\r\n        onAddAccessExclusionItem,\r\n        onEditAccessExclusionItem,\r\n        onRemoveAccessExclusionItem,\r\n        getReferencesForReports\r\n    })(AccessListException);","import React, {useEffect, useState} from 'react';\r\nimport {SelectPicker, ControlLabel, Form} from \"rsuite\";\r\nimport CustomField from \"../../components/Form/CustomField\";\r\nimport {connect} from \"react-redux\";\r\nimport {getReferencesForReports} from \"actions/references\";\r\nimport FormHOC from \"hoc/FilltersForm\";\r\nimport {removeNilValues} from \"utils\";\r\nimport styled from 'styled-components';\r\n\r\nconst SIMTrafficRangesFilters = ({onSubmit, defaultFilters, loading, ...props}) => {\r\n    const [filters, setFilters] = useState(defaultFilters);\r\n\r\n    const handleChange = (formValues) => {\r\n        setFilters({...formValues});\r\n        onSubmit(removeNilValues(formValues));\r\n    };\r\n\r\n    useEffect(() => {\r\n        props.getReferencesForReports();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <StyledForm\r\n                layout=\"inline\"\r\n                onChange={handleChange}\r\n                formDefaultValue={defaultFilters}\r\n                formValue={filters}\r\n            >\r\n                <ControlLabel className={'d-block mb-2'}>Filters</ControlLabel>\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    width={200}\r\n                    data={props.worldzoneList}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"wz_key\"\r\n                    placeholder=\"Zone\"\r\n                    name=\"wz_key\"\r\n                />\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    width={200}\r\n                    data={props.destinationList}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"de_key\"\r\n                    placeholder=\"Destination\"\r\n                    name=\"de_key\"\r\n                />\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    width={200}\r\n                    data={props.subdestinationList}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"sde_key\"\r\n                    placeholder=\"Subdestination\"\r\n                    name=\"sde_key\"\r\n                />\r\n            </StyledForm>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({references, sim_traffic_ranges}) => ({\r\n    loading: sim_traffic_ranges.loading,\r\n    subdestinationList: references.subdestination_list,\r\n    destinationList: references.destination_list,\r\n    worldzoneList: references.worldzone_list\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getReferencesForReports\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormHOC(SIMTrafficRangesFilters));\r\n\r\n\r\nconst StyledForm = styled(Form)`\r\n  & .rs-form-control-wrapper {\r\n    margin-left: 0 !important;\r\n  }\r\n`;","import styled, {css} from 'styled-components';\r\nimport {Button} from 'rsuite';\r\n\r\nexport const StyledTableActions = styled.div`\r\n    margin-top: -3px;\r\n\r\n    .rtl & {\r\n        direction: rtl;\r\n    }\r\n\r\n    ${props =>\r\n    props.alignEnd && css`\r\n            text-align: right;\r\n        \r\n            .rtl & {\r\n                text-align: left;\r\n            }\r\n        `\r\n}\r\n`;\r\n\r\nexport const StyledTableButton = styled(Button).attrs(props => ({\r\n    appearance: \"primary\",\r\n    size: \"sm\"\r\n}))`\r\n    && {\r\n        line-height: 25px;\r\n        height: 25px;\r\n        margin-right: 10px;\r\n        padding: 0 7px;\r\n\r\n        &:last-child {\r\n            margin-right: 0;\r\n        }\r\n\r\n        .rtl & {\r\n            margin-right: 0;\r\n            margin-left: 10px;\r\n\r\n            &:last-child {\r\n                margin-left: 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    ${props => props.color && props.color === 'green' && css`\r\n        &&& {\r\n            background-color: #20BA88 !important;\r\n        }\r\n    `}\r\n\r\n    ${props => props.color && props.color === 'red' && css`\r\n        &&& {\r\n            background-color: #F8432F !important;\r\n        }\r\n    `}\r\n`;","import {\r\n    SIM_TRAFFIC_RANGES_SET_LIST,\r\n    SIM_TRAFFIC_RANGES_SET_LOADING\r\n} from './actionTypes';\r\n\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from './defaults';\r\nimport {\r\n    SIM_TRAFFIC_RANGES_GET_LIST, SIM_TRAFFIC_RANGES_REMOVE, SIM_TRAFFIC_RANGES_GET_POSSIBLE_LIST,\r\n    SIM_TRAFFIC_RANGES_ADD_NEW\r\n} from '../const/apiMethods';\r\nimport {Alert} from 'rsuite/es';\r\n\r\nexport const setLoading = createAction(SIM_TRAFFIC_RANGES_SET_LOADING);\r\nconst setPriceRangesPriorityList = createAction(SIM_TRAFFIC_RANGES_SET_LIST);\r\nconst setPossiblePricePriorityList = createAction(SIM_TRAFFIC_RANGES_GET_POSSIBLE_LIST);\r\n\r\nexport const getPriceRangesPriorityList = (filter, page=1, per_page=10000) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n\r\n    api(SIM_TRAFFIC_RANGES_GET_LIST, {filter, page, per_page})\r\n        .then((response) => {\r\n            dispatch(setPriceRangesPriorityList({...response, page, per_page}));\r\n        })\r\n        .finally(() => dispatch(setLoading(false)));\r\n};\r\n\r\nexport const getPossiblePriceRangePriorityList = (sde_key) => (dispatch) => {\r\n    api(SIM_TRAFFIC_RANGES_GET_POSSIBLE_LIST, {sde_key})\r\n        .then((response) => {\r\n            if (response) {\r\n               dispatch(setPossiblePricePriorityList(response.code_list))\r\n            }\r\n        })\r\n};\r\n\r\nexport const addNewPriceRangePriority = (sde_key, prefix) => async (dispatch) => {\r\n    dispatch(setLoading(true));\r\n\r\n    return await api(SIM_TRAFFIC_RANGES_ADD_NEW, {sde_key, prefix});\r\n};\r\n\r\nexport const deletePriceRangePriority = (prefix) => async (dispatch) => {\r\n    dispatch(setLoading(true));\r\n\r\n    const response = await api(SIM_TRAFFIC_RANGES_REMOVE, {prefix})\r\n    if (!response) {\r\n        setLoading(false);\r\n        return;\r\n    }\r\n\r\n    Alert.success(`${response.prefix} prefix has been deleted!`);\r\n    return response;\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport * as S from \"./styled.js\";\r\n\r\nimport {Table} from 'rsuite';\r\nimport {\r\n    deletePriceRangePriority,\r\n    getPossiblePriceRangePriorityList\r\n} from 'actions/sim_traffic_ranges';\r\nimport Button from 'rsuite/es/Button';\r\nimport Modal from '../../components/Modal';\r\nimport ButtonToolbar from 'rsuite/es/ButtonToolbar';\r\nimport {MyTable} from 'components/Table';\r\nimport {connect} from 'react-redux';\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\nconst columns = [\r\n    {label: 'Zone', dataKey: 'sde_wz_name', minWidth: 260, title: true},\r\n    {label: 'Destination', dataKey: 'sde_de_name', minWidth: 260, title: true},\r\n    {label: 'Subdestination', dataKey: 'sde_name', minWidth: 340, title: true},\r\n    {label: 'Numbers', dataKey: 'numbers', width: 120, align: 'right'},\r\n    {label: 'Used', dataKey: 'used_numbers', width: 120, align: 'right'},\r\n    {label: 'Free', dataKey: 'free_numbers', width: 120, align: 'right'},\r\n];\r\n\r\nconst SIMTrafficRangesTable = ({getList, dataList, loading, count, perPage, page, filters, setSubdestinationAddNewModal,\r\n                                   deletePriceRangePriority, getPriceRangesPriorityList, ...props}) => {\r\n    const [prefixToDelete, setPrefixToDelete] = useState(null);\r\n\r\n    const getListItems = () => {\r\n        getList(filters);\r\n    };\r\n\r\n    const handleDelete = (prefix) => {\r\n        deletePriceRangePriority(prefix)\r\n            .then(response => {\r\n                if (response) {\r\n                    getList(filters, 1, perPage);\r\n                }\r\n            });\r\n    };\r\n    const handleAddNew = (sde) => {\r\n        setSubdestinationAddNewModal(sde);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getListItems();\r\n    }, [filters]);\r\n\r\n    return (\r\n        <>\r\n            <StyledTable\r\n                virtualized\r\n                data={dataList}\r\n                loading={loading}\r\n                columns={columns}\r\n                getItems={getListItems}\r\n                rowClassName={(rowData) => rowData && rowData.sde_key ? 'subdestination' : ''}\r\n                ActionCell={ActionCell(handleAddNew, setPrefixToDelete)}\r\n                extraHeight={600}\r\n            />\r\n            <Modal\r\n                show={prefixToDelete}\r\n                onClose={() => setPrefixToDelete(null)}\r\n                width={400}\r\n                title=\"Delete prefix\"\r\n                onSuccess={() => {\r\n                    handleDelete(prefixToDelete);\r\n                    setPrefixToDelete(false)\r\n                }}\r\n                successText=\"Delete\"\r\n                successButtonColor=\"red\"\r\n                footer\r\n            >\r\n                <div style={{display: 'flex', justifyContent: \"center\"}}>Are you sure?</div>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\nconst mapStateToProps = ({sim_traffic_ranges}) => ({\r\n    perPage: sim_traffic_ranges.perPage,\r\n    page: sim_traffic_ranges.page,\r\n    count: sim_traffic_ranges.count\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    deletePriceRangePriority\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SIMTrafficRangesTable);\r\n\r\nconst ActionCell = (handleAddNew, setPrefixToDelete) =>  <Column width={120}>\r\n    <HeaderCell>Action</HeaderCell>\r\n    <Cell>\r\n        {rowData => {\r\n            return <S.StyledTableActions>\r\n                {rowData.sde_key\r\n                    ? <S.StyledTableButton\r\n                        color=\"green\"\r\n                        onClick={() => handleAddNew(rowData)}\r\n                        >\r\n                        Add new range\r\n                    </S.StyledTableButton>\r\n                    : <S.StyledTableButton\r\n                        color=\"red\"\r\n                        onClick={() => setPrefixToDelete(rowData.prefix)}\r\n                    >\r\n                        Delete\r\n                    </S.StyledTableButton>}\r\n            </S.StyledTableActions>\r\n        }}\r\n    </Cell>\r\n</Column>\r\n;\r\n\r\nconst StyledTable = styled(MyTable)`\r\n  & .rs-table-row.subdestination .rs-table-cell{\r\n     background: #e5e9f2;\r\n  }\r\n`;","import Modal from '../../components/Modal';\r\nimport React, {memo, useEffect, useState} from 'react';\r\nimport {Alert, Form, FormControl, Schema} from 'rsuite/es';\r\nimport {FormGroup, SelectPicker} from 'rsuite';\r\nimport styled from 'styled-components';\r\nimport {shuffleArray} from 'utils';\r\nimport {\r\n    addNewPriceRangePriority,\r\n    getPossiblePriceRangePriorityList,\r\n    setLoading,\r\n} from 'actions/sim_traffic_ranges';\r\nimport {connect} from 'react-redux';\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\nconst SIMTrafficRangesAddNewModal = memo(({show, setLoading, subdestination, getList, filters, perPage, codeList, onClose, addNewPriceRangePriority, getPossiblePriceRangePriorityList}) => {\r\n    let formRef;\r\n    const formModal = Schema.Model({\r\n        prefix: StringType('This field should only contain numbers')\r\n            .pattern(/^\\d+$/, 'This field should only contain numbers')\r\n            .minLength(1, 'This is the minimum for this field')\r\n            .maxLength(15, 'This is the maximum for this field')\r\n            .isRequired('This field is required')\r\n    });\r\n\r\n    const [codeListState, onChangeCodeListState] = useState(null);\r\n    const [hasError, onHasError] = useState({error: false, message: null});\r\n\r\n    useEffect(() => {\r\n        if (show && show.sde_key) {\r\n            getPossiblePriceRangePriorityList(show.sde_key);\r\n        }\r\n    }, [show]);\r\n\r\n    useEffect(() => {\r\n        const generatedCodeList = randomCodeList(codeList);\r\n        onChangeCodeListState(generatedCodeList);\r\n    }, [codeList]);\r\n\r\n    const onSubmit = (data) => {\r\n        addNewPriceRangePriority(subdestination.sde_key, data.prefix).then((response) => {\r\n            if (response && response.prefix) {\r\n                Alert.success(`${response.prefix} prefix has been created!`);\r\n                getList(filters, 1, perPage);\r\n            } else {\r\n                setLoading(false);\r\n            }\r\n        })\r\n    };\r\n\r\n    const randomCodeList = (list) => {\r\n        return shuffleArray(list).splice(0, 10).join(', ');\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            onClose={() => {\r\n                onClose();\r\n            }}\r\n            footer\r\n            successText=\"Add\"\r\n            onSuccess={() => {\r\n                formRef.check();\r\n                const formData = formRef.getFormValue();\r\n                const check = formModal.check(formData);\r\n                const error = Object.keys(check).map(key => check[key])[0];\r\n                const errorBody = {error: error.hasError, message: error.errorMessage};\r\n                onHasError(errorBody);\r\n\r\n                console.log('isChecked', error, errorBody);\r\n                if (!errorBody.error) {\r\n                    onSubmit(formData);\r\n                    onClose();\r\n                }\r\n            }}\r\n        >\r\n            For <b>{subdestination && subdestination.sde_name}</b> subdestination prefix can start with one of the following prefixes:\r\n            <br/>\r\n            {codeListState}\r\n            <StyledForm\r\n                ref={ref => formRef = ref}\r\n                modal={formModal}\r\n            >\r\n                <FormGroup>\r\n                    Type prefix:\r\n                     <FormControl\r\n                        name=\"prefix\"\r\n                        errorMessage={hasError.error ? hasError.message : null}\r\n                    />\r\n                </FormGroup>\r\n            </StyledForm>\r\n        </Modal>\r\n    );\r\n});\r\n\r\nconst mapStateToProps = ({sim_traffic_ranges}) => ({\r\n    codeList: sim_traffic_ranges.codeList,\r\n    perPage: sim_traffic_ranges.perPage,\r\n    page: sim_traffic_ranges.page,\r\n    loading: sim_traffic_ranges.loading\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    addNewPriceRangePriority,\r\n    getPossiblePriceRangePriorityList,\r\n    setLoading\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SIMTrafficRangesAddNewModal);\r\n\r\nconst StyledForm = styled(Form)`\r\n  margin-top: 20px;\r\n  & .rs-btn {\r\n    margin-right: 10px;\r\n  }\r\n  & .rs-form-control-wrapper {\r\n    width: auto;\r\n    margin-left: 10px\r\n  }\r\n  & .rs-form-control-wrapper .rs-input {\r\n    width: 200px;\r\n  }\r\n  \r\n`;","import React, {useEffect, useState} from 'react';\r\n\r\nimport PageHeader from '../../components/base/PageHeader';\r\nimport {FlexboxGrid} from 'rsuite';\r\nimport {connect} from 'react-redux';\r\nimport PanelLayout from '../../components/base/PanelLayout';\r\nimport {LOCAL_STORAGE_SIM_TRAFFIC_RANGES_FILTERS} from 'const/localStorageKeys';\r\nimport SIMTrafficRangesFilters from 'pages/SIMTrafficRanges/SIMTrafficRangesFilters';\r\nimport SIMTrafficRangesTable from 'pages/SIMTrafficRanges/SIMTrafficRangesTable';\r\nimport {addNewPriceRangePriority, getPriceRangesPriorityList} from 'actions/sim_traffic_ranges';\r\nimport SIMTrafficRangesAddNewModal from 'pages/SIMTrafficRanges/SIMTrafficRangesAddNewModal';\r\n\r\n\r\nconst SIMTrafficRangesPage = ({loading, priceRangesPriorityList, getPriceRangesPriorityList,\r\n                                  addNewPriceRangePriority, perPage, page}) => {\r\n    const [filters, setFilters] = useState({});\r\n\r\n    const [subdestinationAddNewModal, setSubdestinationAddNewModal] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getPriceRangesPriorityList(filters)\r\n    }, []);\r\n\r\n    const onChangeFilters = (filters) => {\r\n        getPriceRangesPriorityList(filters, 1, perPage);\r\n        setFilters(filters);\r\n    };\r\n\r\n    const prefixTransformation = (data) => {\r\n\r\n        return data.reduce((result, nextValue) => {\r\n            result.push(nextValue);\r\n            if (nextValue.prefix_list.length) {\r\n                nextValue.prefix_list.forEach((value) => {\r\n                    result.push({sde_name: value.prefix, numbers: value.numbers, ...value});\r\n                });\r\n            }\r\n            return result\r\n        }, []);\r\n    };\r\n    const transformedList = prefixTransformation(priceRangesPriorityList);\r\n\r\n    return (\r\n        <PanelLayout>\r\n            <PageHeader title=\"SIM Traffic Ranges\"/>\r\n            <FlexboxGrid>\r\n                <FlexboxGrid.Item colspan={24}>\r\n                    <SIMTrafficRangesFilters onSubmit={onChangeFilters} defaultFilters={filters}/>\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n            <SIMTrafficRangesTable\r\n                setSubdestinationAddNewModal={setSubdestinationAddNewModal}\r\n                getList={getPriceRangesPriorityList}\r\n                dataList={transformedList}\r\n                filters={filters}\r\n                loading={loading}\r\n            />\r\n            <SIMTrafficRangesAddNewModal\r\n                show={subdestinationAddNewModal}\r\n                getList={getPriceRangesPriorityList}\r\n                subdestination={subdestinationAddNewModal}\r\n                addNewPriceRangePriority={addNewPriceRangePriority}\r\n                onClose={() => setSubdestinationAddNewModal(null)}\r\n                perPage={perPage}\r\n                page={page}\r\n                filters={filters}\r\n                loading={loading}\r\n            />\r\n        </PanelLayout>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({sim_traffic_ranges}) => ({\r\n    priceRangesPriorityList: sim_traffic_ranges.list,\r\n    perPage: sim_traffic_ranges.perPage,\r\n    page: sim_traffic_ranges.page,\r\n    loading: sim_traffic_ranges.loading\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getPriceRangesPriorityList,\r\n    addNewPriceRangePriority\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SIMTrafficRangesPage);\r\n\r\n","import {api} from '../api/loginRoutes';\r\nimport {createAction} from './defaults';\r\nimport {BLOCKED_DESTINATIONS_SET_LIST, BLOCKED_DESTINATIONS_SET_LOADING} from './actionTypes';\r\nimport {\r\n    BLOCKED_DESTINATIONS_GET_LIST_API, BLOCKED_DESTINATIONS_CREATE_API, BLOCKED_DESTINATIONS_MODIFY_API,\r\n    BLOCKED_DESTINATIONS_REMOVE_API, BLOCKED_DESTINATIONS_MODIFY_LIST_API} from '../const/apiMethods';\r\n\r\nconst setLoading = createAction(BLOCKED_DESTINATIONS_SET_LOADING);\r\nconst setBlockedDestinationsList = createAction(BLOCKED_DESTINATIONS_SET_LIST);\r\n\r\nexport const getBlockedDestinationsList = (filter) => async (dispatch) => {\r\n    dispatch(setLoading(true));\r\n\r\n    return await api(BLOCKED_DESTINATIONS_GET_LIST_API, {filter})\r\n        .then((response) => {\r\n            dispatch(setBlockedDestinationsList({...response}));\r\n        })\r\n        .finally(() => dispatch(setLoading(false)));\r\n};\r\n\r\nexport const onAddBlockDestinationsItem = (data) => async (dispatch) => {\r\n    return await api(BLOCKED_DESTINATIONS_CREATE_API, {...data})\r\n};\r\n\r\nexport const onEditBlockDestinationsItem = (ab_key, data) => async (dispatch) => {\r\n    return await api(BLOCKED_DESTINATIONS_MODIFY_API, {target: {ab_key}, ...data})\r\n};\r\nexport const onEditBlockDestinationsItemList = (ab_key_list, data) => async (dispatch) => {\r\n    return await api(BLOCKED_DESTINATIONS_MODIFY_LIST_API, {ab_key_list, ...data})\r\n};\r\nexport const onRemoveBlockDestinationsItem = (ab_key) => async (dispatch) => {\r\n    return await api(BLOCKED_DESTINATIONS_REMOVE_API, {target: {ab_key}})\r\n};","import React, {useEffect, useState} from 'react';\r\nimport {SelectPicker, ControlLabel, Form} from \"rsuite\";\r\nimport CustomField from \"../../components/Form/CustomField\";\r\nimport {connect} from \"react-redux\";\r\nimport {getReferencesForReports} from \"actions/references\";\r\nimport FormHOC from \"hoc/FilltersForm\";\r\nimport {removeNilValues} from \"utils\";\r\nimport styled from 'styled-components';\r\n\r\nconst BlockedDestinationsFilters = ({onSubmit, defaultFilters, loading, ...props}) => {\r\n    const [filters, setFilters] = useState(defaultFilters);\r\n\r\n    const handleChange = (formValues) => {\r\n        setFilters({...formValues});\r\n        onSubmit(removeNilValues(formValues));\r\n    };\r\n\r\n    useEffect(() => {\r\n        props.getReferencesForReports();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <StyledForm\r\n                layout=\"inline\"\r\n                onChange={handleChange}\r\n                formDefaultValue={defaultFilters}\r\n                formValue={filters}\r\n            >\r\n                <ControlLabel className={'d-block mb-2'}>Filters</ControlLabel>\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    width={200}\r\n                    data={props.worldzoneList}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"wz_key\"\r\n                    placeholder=\"Zone\"\r\n                    name=\"wz_key\"\r\n                />\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    width={200}\r\n                    data={props.destinationList}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"de_key\"\r\n                    placeholder=\"Destination\"\r\n                    name=\"de_key\"\r\n                />\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    width={200}\r\n                    data={props.subdestinationList}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"sde_key\"\r\n                    placeholder=\"Subdestination\"\r\n                    name=\"sde_key\"\r\n                />\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    width={200}\r\n                    data={props.servicePlanList}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"sp_key\"\r\n                    placeholder=\"Service Plan\"\r\n                    name=\"sp_key\"\r\n                />\r\n                <CustomField\r\n                    accepter={SelectPicker}\r\n                    width={200}\r\n                    data={props.accountList}\r\n                    labelKey=\"name\"\r\n                    valueKey=\"id\"\r\n                    placeholder=\"Account\"\r\n                    name=\"account_id\"\r\n                />\r\n            </StyledForm>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({references, blocked_destinations}) => ({\r\n    loading: blocked_destinations.loading,\r\n    subdestinationList: references.subdestination_list,\r\n    destinationList: references.destination_list,\r\n    worldzoneList: references.worldzone_list,\r\n    servicePlanList: references.service_plan_list,\r\n    accountList: references.dialer_list\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getReferencesForReports\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormHOC(BlockedDestinationsFilters));\r\n\r\n\r\nconst StyledForm = styled(Form)`\r\n  & .rs-form-control-wrapper {\r\n    margin-left: 0 !important;\r\n  }\r\n  & .rs-form-group {\r\n    margin-bottom: 10px;\r\n  }\r\n`;","import styled from 'styled-components';\r\nimport {Table} from 'rsuite';\r\n\r\nconst {Cell} = Table;\r\n\r\nexport const CustomCell = styled(Cell)`\r\n  .duplicates_badge {\r\n    position: absolute;\r\n    top: 14px;\r\n    left: 5px;\r\n  }\r\n`;","import React, {useState} from 'react';\r\nimport {Button, Form, FormControl, Icon, Input, Schema, SelectPicker, Table} from 'rsuite';\r\nimport CheckPicker from 'rsuite/es/CheckPicker';\r\nimport Badge from 'rsuite/es/Badge';\r\nimport * as S from './styled';\r\nimport Checkbox from 'rsuite/es/Checkbox';\r\nimport Modal from '../../components/Modal';\r\nimport {compareTwoArrays, fieldSorter} from '../../utils'\r\nimport BaseTable from \"../../components/base/BaseTable\";\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\nconst {NumberType, StringType} = Schema.Types;\r\n\r\nconst formModel = Schema.Model({\r\n    wz_key: NumberType(),\r\n    de_key: NumberType(),\r\n    sde_key: NumberType(),\r\n    account_id: StringType()\r\n});\r\n\r\nconst actionSelectData = [\r\n    {option: false, label: 'Allowed'},\r\n    {option: true, label: 'Blocked'},\r\n];\r\n\r\nexport default ({data = [], filter = {}, onRemoveItem, onEditItem, onEditItemList, onAddItem, loading, isLoading, update, ...props}) => {\r\n    const [tableData, setTableData] = useState([]);\r\n    const [currentEditedFieldKeyList, setCurrentEditedFieldKeyList] = React.useState(null);\r\n    const [editedFieldKeyList, setEditedFieldKeyList] = useState([]);\r\n    const [deleteKeyList, onDeleteKeys] = useState([]);\r\n    const [localLoading, setLocalLoading] = useState(isLoading);\r\n    const [checkedKeys, onChangeCheckedKeys] = useState([]);\r\n    const [changedData, onChangedData] = useState(false);\r\n\r\n    let formGroupsRefs = new Map();\r\n\r\n    const searchedData = [\"sde_wz_name\", \"sde_de_name\", \"sde_name\", \"sp_name\", \"acc_name\", \"action\"];\r\n\r\n    React.useEffect(() => {\r\n        const tableDataList = data.filter((item) => {\r\n            // return item if filter is empty\r\n            if (!filter || filter && !filter.str)\r\n                return true;\r\n\r\n            const match = filter.str.toLowerCase();\r\n\r\n            const filterMatching = searchedData.map((keyName) => {\r\n                if (item[keyName]) {\r\n                    const matchedString = item[keyName].toString().toLowerCase();\r\n\r\n                    if (matchedString.includes(match)) {\r\n                        return true\r\n                    }\r\n                }\r\n            });\r\n\r\n            return filterMatching.some(dataMatch => !!dataMatch);\r\n        });\r\n        tableDataList.sort(fieldSorter(['wz_key', 'de_key', 'sde_key', 'acc_name', 'sp_key']))\r\n        const groupedData = Object.values(tableDataList.reduce((a, curr) => {\r\n            const {acc_id, sde_key, de_key, wz_key} = curr;\r\n            const key = `${acc_id}_${sde_key}_${de_key}_${wz_key}`;\r\n            (a[key] = a[key] || []).push(curr);\r\n            return a;\r\n        }, {}));\r\n\r\n        const combinedNumber = groupedData.map((value) => {\r\n            const duplicateList = value.map(duplicate => {\r\n                return {sp_key: duplicate.sp_key, sp_name: duplicate.sp_name, ab_key: duplicate.ab_key}\r\n            });\r\n\r\n            return {...value[0], sp_duplicates: duplicateList}\r\n        });\r\n        setTableData(combinedNumber);\r\n        onChangeCheckedKeys(combinedNumber.filter(item => item.action).map(item => item.ab_key));\r\n        if (currentEditedFieldKeyList) {\r\n            let editedFilters = new Set([...editedFieldKeyList, currentEditedFieldKeyList]);\r\n            editedFilters.delete(currentEditedFieldKeyList);\r\n            setEditedFieldKeyList(Array.from(editedFilters));\r\n            setCurrentEditedFieldKeyList(null);\r\n        }\r\n        if (changedData && compareTwoArrays(data.map(row => row.ab_key), tableDataList.map(row => row.ab_key))) {\r\n            update()\r\n            onChangedData(false);\r\n        }\r\n    }, [data, filter]);\r\n\r\n    const createFormGroupRefs = (key, ref) => {\r\n        if (!formGroupsRefs.has(key)) {\r\n            formGroupsRefs.set(key, new Set([ref]))\r\n        } else {\r\n            formGroupsRefs.get(key).add(ref);\r\n        }\r\n    };\r\n\r\n    const clearEditField = (key) => {\r\n        let editedFilters = new Set([...editedFieldKeyList, key]);\r\n        editedFilters.delete(key);\r\n        setEditedFieldKeyList(Array.from(editedFilters));\r\n        setCurrentEditedFieldKeyList(null);\r\n    };\r\n\r\n    const handleCheck = (value, checked) => {\r\n        const nextCheckedKeys = checked\r\n            ? [...checkedKeys, value]\r\n            : checkedKeys.filter(item => item !== value);\r\n        onChangeCheckedKeys(nextCheckedKeys)\r\n    };\r\n\r\n    const handleSubmit = async (key) => {\r\n        const formFields = formGroupsRefs.get(key);\r\n        let dataObject = {action: checkedKeys.some(item => item === key)};\r\n        formFields.forEach((field) => {\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const formData = field.getFormValue();\r\n\r\n            Object.keys(formData).forEach(key => {\r\n                if (key !== 'action') dataObject[key] = formData[key];\r\n            });\r\n        });\r\n        const tableRow = tableData.find(value => value.ab_key === key);\r\n        const duplicateKeys = tableRow.sp_duplicates.map(duplicate => duplicate.ab_key);\r\n        const filteredData = data.filter(item => duplicateKeys.includes(item.ab_key));\r\n\r\n        const absentRows = filteredData.filter(item => !dataObject.sp_key.includes(item.sp_key));\r\n        const existRows = filteredData.filter(item => dataObject.sp_key.includes(item.sp_key));\r\n        const existRowKeys = existRows.map(item => item.sp_key);\r\n\r\n        if (!dataObject.sp_key.length) {\r\n            const allRowsToDelete = filteredData.map(item => item.ab_key);\r\n\r\n            allRowsToDelete.forEach(key => {\r\n                onRemoveItem(key).then(() => {\r\n                    onChangedData(true)\r\n                })\r\n            })\r\n        } else {\r\n            // compare two objects\r\n            const existRowsComparable = existRows.map(row => {\r\n                return {\r\n                    account_id: row.acc_id,\r\n                    action: row.action,\r\n                    wz_key: row.wz_key,\r\n                    de_key: row.de_key,\r\n                    sde_key: row.sde_key,\r\n                    sp_key: null\r\n                }\r\n            });\r\n            const dataObjectComparable = Object.assign({}, dataObject, {sp_key: null});\r\n            let comparedRows;\r\n\r\n            existRowsComparable.forEach(row => {\r\n                comparedRows = !Object.is(row, dataObjectComparable)\r\n            })\r\n\r\n            return await onEditItemList(duplicateKeys, dataObjectComparable).then(() => {\r\n                dataObject.sp_key.forEach(sp_key => {\r\n                    let dataToEdit = {};\r\n                    if (filteredData.length) {\r\n                        dataToEdit = dataObject\r\n                    }\r\n\r\n                    if (!existRowKeys.includes(sp_key) && dataObject.sp_key.length > existRows.length) {\r\n                        onChangedData(true);\r\n                        onAddItem({...dataToEdit, sp_key})\r\n                    }\r\n                })\r\n\r\n                if (absentRows.length) {\r\n                    absentRows.forEach(item => {\r\n                        onChangedData(true);\r\n                        onRemoveItem(item.ab_key)\r\n                    })\r\n                }\r\n            })\r\n        }\r\n\r\n        return await key\r\n    }\r\n    return (\r\n        <>\r\n            <BaseTable\r\n                virtualized\r\n                className=\"tableFilters\"\r\n                data={tableData}\r\n                loading={loading || localLoading}\r\n                headerHeight={47}\r\n                rowHeight={46}\r\n                autoHeight\r\n            >\r\n                <Column flexGrow minWidth={130} align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">Zone</span>\r\n                    </HeaderCell>\r\n                    <S.CustomCell dataKey={\"sde_wz_name\"}>\r\n                        {(rowData) => {\r\n                            if (editedFieldKeyList.includes(rowData[\"ab_key\"])) {\r\n                                return (\r\n                                    <Form\r\n                                        model={formModel}\r\n                                        ref={(ref) => createFormGroupRefs(rowData[\"ab_key\"], ref)}\r\n                                        formDefaultValue={{wz_key: rowData[\"wz_key\"]}}\r\n                                    >\r\n                                        <FormControl\r\n                                            name=\"wz_key\"\r\n                                            className=\"tableFilters_field\"\r\n                                            errorPlacement=\"topEnd\"\r\n                                            accepter={SelectPicker}\r\n                                            data={props.worldzoneList}\r\n                                            placeholder=\"Zone\"\r\n                                            valueKey=\"wz_key\"\r\n                                            labelKey=\"name\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form>\r\n                                )\r\n                            }\r\n                            return (\r\n                                <>\r\n                                    {rowData[\"sp_duplicates\"].length > 1 &&\r\n                                    <Badge className=\"duplicates_badge\" content={rowData[\"sp_duplicates\"].length}/>}\r\n                                    <span className=\"tableFilters__previewText\">{rowData[\"sde_wz_name\"]}</span>\r\n                                </>\r\n                            )\r\n                        }}\r\n                    </S.CustomCell>\r\n                </Column>\r\n                <Column flexGrow minWidth={130} align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">Destination</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"sde_de_name\"}>\r\n                        {(rowData) => {\r\n                            if (editedFieldKeyList.includes(rowData[\"ab_key\"])) {\r\n                                return (\r\n                                    <Form\r\n                                        model={formModel}\r\n                                        ref={(ref) => createFormGroupRefs(rowData[\"ab_key\"], ref)}\r\n                                        formDefaultValue={{de_key: rowData[\"de_key\"]}}\r\n                                    >\r\n                                        <FormControl\r\n                                            name=\"de_key\"\r\n                                            className=\"tableFilters_field\"\r\n                                            errorPlacement=\"topEnd\"\r\n                                            accepter={SelectPicker}\r\n                                            data={props.destinationList}\r\n                                            placeholder=\"Destination\"\r\n                                            valueKey=\"de_key\"\r\n                                            labelKey=\"name\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form>\r\n                                )\r\n                            }\r\n                            return (\r\n                                <span className=\"tableFilters__previewText\">{rowData[\"sde_de_name\"]}</span>\r\n                            );\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow={2} minWidth={130} className=\"access_list_exclusion__column\" align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"access_list_exclusion__header_text\">Subdestination</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"sde_name\"}>\r\n                        {(rowData) => {\r\n                            if (editedFieldKeyList.includes(rowData[\"ab_key\"])) {\r\n                                return (\r\n                                    <Form\r\n                                        model={formModel}\r\n                                        ref={(ref) => createFormGroupRefs(rowData[\"ab_key\"], ref)}\r\n                                        formDefaultValue={{sde_key: rowData[\"sde_key\"]}}\r\n                                    >\r\n                                        <FormControl\r\n                                            name=\"sde_key\"\r\n                                            className=\"tableFilters_field\"\r\n                                            errorPlacement=\"topEnd\"\r\n                                            accepter={SelectPicker}\r\n                                            data={props.subdestinationList}\r\n                                            placeholder=\"Subdestination\"\r\n                                            valueKey=\"sde_key\"\r\n                                            labelKey=\"name\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form>\r\n                                )\r\n                            }\r\n                            return (\r\n                                <span className=\"tableFilters__previewText\">{rowData[\"sde_name\"]}</span>\r\n                            );\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow={2} minWidth={150} className=\"access_list_exclusion__column\" align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"access_list_exclusion__header_text\">Service plan</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"sp_name\"}>\r\n                        {(rowData) => {\r\n                            if (editedFieldKeyList.includes(rowData[\"ab_key\"])) {\r\n                                return (\r\n                                    <Form\r\n                                        model={formModel}\r\n                                        ref={(ref) => createFormGroupRefs(rowData[\"ab_key\"], ref)}\r\n                                        formDefaultValue={{sp_key: rowData[\"sp_duplicates\"].map(sp => sp.sp_key)}}\r\n                                    >\r\n                                        <FormControl\r\n                                            name=\"sp_key\"\r\n                                            className=\"tableFilters_field\"\r\n                                            errorPlacement=\"topEnd\"\r\n                                            accepter={CheckPicker}\r\n                                            data={props.servicePlanList}\r\n                                            placeholder=\"Service plan\"\r\n                                            cleanable={false}\r\n                                            valueKey=\"sp_key\"\r\n                                            labelKey=\"name\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form>\r\n                                )\r\n                            }\r\n\r\n                            return (\r\n                                <span className=\"tableFilters__previewText\">\r\n                                    {rowData[\"sp_duplicates\"].length ? rowData[\"sp_duplicates\"].map(sp => sp.sp_name).join(', ') : rowData[\"sp_name\"]}\r\n                                </span>\r\n                            );\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow minWidth={130} className=\"access_list_exclusion__column\" align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"access_list_exclusion__header_text\">Dialer account</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"acc_name\"}>\r\n                        {(rowData) => {\r\n                            if (editedFieldKeyList.includes(rowData[\"ab_key\"])) {\r\n                                return (\r\n                                    <Form\r\n                                        model={formModel}\r\n                                        ref={(ref) => createFormGroupRefs(rowData[\"ab_key\"], ref)}\r\n                                        formDefaultValue={{account_id: rowData[\"acc_id\"]}}\r\n                                    >\r\n                                        <FormControl\r\n                                            name=\"account_id\"\r\n                                            className=\"tableFilters_field\"\r\n                                            errorPlacement=\"topEnd\"\r\n                                            accepter={SelectPicker}\r\n                                            data={props.accountList}\r\n                                            placeholder=\"Account\"\r\n                                            valueKey=\"id\"\r\n                                            labelKey=\"name\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form>\r\n                                )\r\n                            }\r\n                            return (\r\n                                <span className=\"tableFilters__previewText\">{rowData[\"acc_name\"] || 'Any'}</span>\r\n                            );\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n                <Column width={200} className=\"access_list_exclusion__column\" align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"access_list_exclusion__header_text\">Block/Allow</span>\r\n                    </HeaderCell>\r\n                    <CheckCell\r\n                        dataKey=\"ab_key\"\r\n                        checkedKeys={checkedKeys}\r\n                        onChange={handleCheck}\r\n                        {...{\r\n                            editedFieldKeyList,\r\n                            createFormGroupRefs\r\n                        }}/>\r\n                </Column>\r\n                <Column width={174}>\r\n                    <HeaderCell></HeaderCell>\r\n                    <Cell>\r\n                        {rowData => (\r\n                            <div className=\"tableFilters_buttons\">\r\n                                {!editedFieldKeyList.includes(rowData[\"ab_key\"])\r\n                                    ? <Button size=\"sm\" color=\"lightblue\" onClick={() => {\r\n                                        let editedFilters = new Set([...editedFieldKeyList, rowData[\"ab_key\"]]);\r\n                                        setEditedFieldKeyList(Array.from(editedFilters));\r\n                                    }}>\r\n                                        <Icon icon=\"edit2\"/>\r\n                                    </Button>\r\n                                    : <>\r\n                                        <Button size=\"sm\" color=\"green\" onClick={() => {\r\n                                            handleSubmit(rowData[\"ab_key\"]).then(() => {\r\n                                                clearEditField(rowData[\"ab_key\"]);\r\n                                                update()\r\n                                            }) // --- SUBMIT\r\n                                        }}>\r\n                                            <Icon icon=\"check-circle\"/>\r\n                                        </Button>\r\n\r\n                                        <Button size=\"sm\" color=\"red\" onClick={() => {\r\n                                            let editedFilters = new Set([...editedFieldKeyList, rowData[\"ab_key\"]]);\r\n                                            editedFilters.delete(rowData[\"ab_key\"]);\r\n                                            setEditedFieldKeyList(Array.from(editedFilters));\r\n                                        }}>\r\n                                            <Icon icon=\"close-circle\"/>\r\n                                        </Button>\r\n                                    </>\r\n                                }\r\n                                <Button\r\n                                    size=\"sm\"\r\n                                    color=\"red\"\r\n                                    onClick={() => {\r\n                                        onDeleteKeys(rowData.sp_duplicates.map(duplicate => duplicate.ab_key))\r\n                                    }}\r\n                                >\r\n                                    <Icon icon=\"trash2\"/>\r\n                                </Button>\r\n                            </div>\r\n                        )}\r\n                    </Cell>\r\n                </Column>\r\n\r\n            </BaseTable>\r\n            <Modal\r\n                show={deleteKeyList.length}\r\n                title=\"Confirm deleting\"\r\n                onSuccess={() => {\r\n                    deleteKeyList.forEach(key => {\r\n                        onRemoveItem(key).then(() => {\r\n                            update()\r\n                        })\r\n                    });\r\n                    onDeleteKeys([])\r\n                }}\r\n                onClose={() => onDeleteKeys([])}\r\n                successText={'Yes'}\r\n                footer\r\n            >\r\n                <div style={{display: 'flex', justifyContent: \"center\"}}>Are you sure you want to delete this blocked destination?</div>\r\n            </Modal>\r\n        </>\r\n    )\r\n};\r\n\r\nexport const CheckCell = ({\r\n    rowData,\r\n    checkedKeys,\r\n    dataKey,\r\n    editedFieldKeyList,\r\n    onChange,\r\n    createFormGroupRefs,\r\n    ...props\r\n}) => {\r\n\r\n    const currentLabel = rowData['action'];\r\n\r\n    return (\r\n        <Cell\r\n            {...props}\r\n            style={{padding: 0}}\r\n        >\r\n            <div>\r\n                {\r\n                    editedFieldKeyList.includes(rowData[\"ab_key\"])\r\n                    ? <Form\r\n                        model={formModel}\r\n                        ref={(ref) => createFormGroupRefs(rowData[\"ab_key\"], ref)}\r\n                        formDefaultValue={{action: rowData[\"action\"]}}\r\n                    >\r\n                        <FormControl\r\n                            name=\"action\"\r\n                            accepter={SelectPicker}\r\n                            data={actionSelectData}\r\n                            onChange={(val) => onChange(rowData[dataKey], val)}\r\n                            valueKey=\"option\"\r\n                            labelKey=\"label\"\r\n                            className=\"tableFilters_field\"\r\n                            errorPlacement=\"topEnd\"\r\n                            cleanable={false}\r\n                            searchable={false}\r\n                        />\r\n                    </Form>\r\n                    : <span className=\"tableFilters__previewText\">{actionSelectData[+currentLabel].label}</span>\r\n                }\r\n            </div>\r\n        </Cell>\r\n    );\r\n};","import React, {useState, useRef, createRef} from 'react';\r\nimport {Table} from 'rsuite';\r\nimport {Form, Schema, SelectPicker, FormControl, Button} from \"rsuite\";\r\nimport Icon from \"rsuite/es/Icon\";\r\nimport BaseTable from \"../../components/base/BaseTable\";\r\n\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\nexport default ({defaultFilter, addItem, update, ...props}) => {\r\n    const form = useRef(null);\r\n\r\n    const formControlNames = [\"wz_key\", \"de_key\", \"sde_key\", \"sp_key\", \"account_id\"];\r\n\r\n    const [fields, setFields] = useState({});\r\n    const [hasRequiredException, setRequiredException] = useState(false);\r\n\r\n    const {StringType, NumberType} = Schema.Types;\r\n    const formModel = Schema.Model({\r\n        wz_key: NumberType(),\r\n        de_key: NumberType(),\r\n        sde_key: NumberType(),\r\n        account_id: StringType()\r\n    });\r\n\r\n    const formControlItems = [\r\n        <FormControl placement=\"autoVerticalStart\" errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"wz_key\" accepter={SelectPicker} data={props.worldzoneList} placeholder=\"Zone\" valueKey=\"wz_key\" labelKey=\"name\" type=\"text\" />,\r\n        <FormControl placement=\"autoVerticalStart\" errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"de_key\" accepter={SelectPicker} data={props.destinationList} placeholder=\"Destination\" valueKey=\"de_key\" labelKey=\"name\" type=\"text\" />,\r\n        <FormControl placement=\"autoVerticalStart\" errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"sde_key\" accepter={SelectPicker} data={props.subdestinationList} placeholder=\"Subdestination\" valueKey=\"sde_key\" labelKey=\"name\" type=\"text\" />,\r\n        <FormControl placement=\"autoVerticalStart\" errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"sp_key\" accepter={SelectPicker} data={props.servicePlanList} placeholder=\"Service plan\" valueKey=\"sp_key\" labelKey=\"name\" type=\"text\" />,\r\n        <FormControl placement=\"autoVerticalStart\" errorPlacement=\"topEnd\" className=\"tableFilters_field\" name=\"account_id\" accepter={SelectPicker} data={props.accountList} placeholder=\"Account\" valueKey=\"id\" labelKey=\"name\" type=\"text\" />,\r\n    ];\r\n\r\n    const handleChange = (formValues) => {\r\n        setFields(formValues);\r\n\r\n        checkAtLeastOneException(formValues);\r\n    };\r\n    const checkAtLeastOneException = (values) => {\r\n        setRequiredException(!!formControlNames.map(key => values[key]).filter(value => value).length);\r\n    };\r\n    const handleSubmit = (_, event) => {\r\n        event.preventDefault();\r\n\r\n        let validStatus = form.current.check();\r\n\r\n        if (!validStatus)\r\n            return;\r\n\r\n        let formValues = form.current.getFormValue();\r\n        let data = {...formValues, action: true};\r\n\r\n        addItem(data).then(() => {\r\n            update();\r\n        });\r\n\r\n    };\r\n\r\n    const columns = formControlNames.map( key => {\r\n        return {dataKey: key, label: ''}\r\n    } );\r\n\r\n    const tableColumnsElements = {};\r\n    for (let i = 0; i < formControlNames.length; i++) {\r\n        tableColumnsElements[formControlNames[i]] = formControlItems[i];\r\n    }\r\n\r\n    const columnsElements = formControlNames.map( (item) => {\r\n        return (\r\n            <Column flexGrow>\r\n                <HeaderCell></HeaderCell>\r\n                <Cell dataKey={item}/>\r\n            </Column>\r\n        )\r\n    } );\r\n\r\n    return(\r\n        <>\r\n            <Form\r\n                onSubmit={handleSubmit}\r\n                ref={form}\r\n                model={formModel}\r\n                onChange={handleChange}\r\n                // formDefaultValue={fields}\r\n                formValue={fields}\r\n                style={{margin: '0px', width: '100%'}}\r\n            >\r\n\r\n                <BaseTable\r\n                    data={[tableColumnsElements]}\r\n                    loading={false}\r\n                    columns={columns}\r\n                    headerHeight={0}\r\n                    autoHeight\r\n                    rowHeight={46}\r\n                    className=\"tableFilters tableFilters__form\"\r\n                >\r\n                    {columnsElements}\r\n                    <Column width={hasRequiredException ? 164 : 64}>\r\n                        <HeaderCell></HeaderCell>\r\n                        <Cell>\r\n                            {() => (\r\n                                <Button disabled={!hasRequiredException} className=\"tableFilters_submit\" color=\"green\" type=\"submit\">\r\n                                    <Icon icon=\"plus\"/>\r\n                                </Button>\r\n                            )}\r\n                        </Cell>\r\n                    </Column>\r\n                </BaseTable>\r\n\r\n            </Form>\r\n        </>\r\n    )\r\n};","import React from 'react';\r\nimport PanelLayout from '../../components/base/PanelLayout';\r\nimport PageHeader from '../../components/base/PageHeader';\r\nimport {FlexboxGrid} from 'rsuite';\r\nimport {\r\n    getBlockedDestinationsList,\r\n    onAddBlockDestinationsItem,\r\n    onEditBlockDestinationsItem,\r\n    onRemoveBlockDestinationsItem,\r\n    onEditBlockDestinationsItemList\r\n} from 'actions/blocked_destinations';\r\nimport {connect} from 'react-redux';\r\nimport BlockedDestinationsFilters from 'pages/BlockedDestinations/BlockedDestinationsFilters';\r\nimport BlockedDestinationsTable from 'pages/BlockedDestinations/BlockedDestinationsTable';\r\nimport BlockedDestinationsAdd from 'pages/BlockedDestinations/BlockedDestinationsAdd';\r\n\r\nclass BlockedDestinationsPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            filter: {},\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        const {filter} = this.state;\r\n        const {getBlockedDestinationsList} = this.props;\r\n        getBlockedDestinationsList(filter)\r\n    }\r\n\r\n    onChangeFilters = (filter) => {\r\n        const {getBlockedDestinationsList} = this.props;\r\n        getBlockedDestinationsList(filter);\r\n        this.setState({filter: filter});\r\n    };\r\n\r\n    render () {\r\n        const {filter} = this.state;\r\n        const {loading, blockedDestinationsList, getBlockedDestinationsList, worldzoneList, destinationList,\r\n            subdestinationList, servicePlanList, accountList, onAddBlockDestinationsItem, onEditBlockDestinationsItem,\r\n            onRemoveBlockDestinationsItem, onEditBlockDestinationsItemList\r\n        } = this.props;\r\n\r\n        return (\r\n            <PanelLayout>\r\n                <PageHeader title=\"Blocked Destinations\"/>\r\n                <FlexboxGrid>\r\n                    <FlexboxGrid.Item colspan={24}>\r\n                        <BlockedDestinationsFilters onSubmit={this.onChangeFilters} defaultFilters={filter}/>\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n                <BlockedDestinationsTable\r\n                    data={blockedDestinationsList}\r\n                    update={() => getBlockedDestinationsList(filter)}\r\n                    onEditItem={onEditBlockDestinationsItem}\r\n                    onEditItemList={onEditBlockDestinationsItemList}\r\n                    onRemoveItem={onRemoveBlockDestinationsItem}\r\n                    onAddItem={onAddBlockDestinationsItem}\r\n                    {...{\r\n                        filter,\r\n                        loading,\r\n                        accountList,\r\n                        servicePlanList,\r\n                        worldzoneList,\r\n                        destinationList,\r\n                        subdestinationList,\r\n                    }}\r\n                />\r\n                <BlockedDestinationsAdd\r\n                    addItem={onAddBlockDestinationsItem}\r\n                    update={() => getBlockedDestinationsList(filter)}\r\n                    {...{\r\n                        accountList,\r\n                        servicePlanList,\r\n                        worldzoneList,\r\n                        destinationList,\r\n                        subdestinationList,\r\n                    }}\r\n                />\r\n            </PanelLayout>\r\n        )\r\n    };\r\n}\r\n\r\nconst mapStateToProps = ({blocked_destinations, references}) => ({\r\n    blockedDestinationsList: blocked_destinations.list,\r\n    worldzoneList: references.worldzone_list,\r\n    destinationList: references.destination_list,\r\n    subdestinationList: references.subdestination_list,\r\n    servicePlanList: references.service_plan_list,\r\n    accountList: references.dialer_list,\r\n    loading: blocked_destinations.loading\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getBlockedDestinationsList,\r\n    onAddBlockDestinationsItem,\r\n    onEditBlockDestinationsItem,\r\n    onRemoveBlockDestinationsItem,\r\n    onEditBlockDestinationsItemList\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BlockedDestinationsPage);","import {createAction} from './defaults';\r\nimport {api} from \"../api/loginRoutes\";\r\nimport {toEndDayUTCTime, toStartDayUTCTime} from \"../utils\";\r\nimport {ACTION_LOGS_LIST, ACTION_LOGS_REFERENCES, ACTION_LOGS_SET_LOADING} from \"../const\";\r\nimport {ACTION_LOGS_GET_LIST_API, ACTION_LOGS_GET_REFERENCES_API} from \"../const/apiMethods\";\r\n\r\nconst setLogsList = createAction(ACTION_LOGS_LIST);\r\nconst setLogsListLoading = createAction(ACTION_LOGS_SET_LOADING);\r\nconst setReferences = createAction(ACTION_LOGS_REFERENCES);\r\n\r\n// get list\r\nexport const getLogsList = (filter = {}, page = 1, perPage = 100) => (dispatch) => {\r\n    dispatch( setLogsListLoading(true) );\r\n\r\n    const data = {\r\n        filter: {\r\n            ...filter,\r\n            site_list: filter.site_list && filter.site_list.length\r\n                ? filter.site_list\r\n                : null,\r\n            action_list: filter.action_list && filter.action_list.length\r\n                ? filter.action_list\r\n                : null,\r\n        },\r\n        target: {account_id_list: null},\r\n        page: page,\r\n        per_page: perPage,\r\n    };\r\n\r\n    if (filter.range && filter.range.length) {\r\n        data.filter['start_date'] = toStartDayUTCTime(filter.range[0]);\r\n        data.filter['end_date'] = toEndDayUTCTime(filter.range[1]);\r\n\r\n        delete data.filter.range;\r\n    }\r\n\r\n    if (filter.account_user_id_list) {\r\n        data.target.account_user_id_list = filter.account_user_id_list && filter.account_user_id_list.length\r\n            ? filter.account_user_id_list\r\n            : null;\r\n        delete data.filter.account_user_id_list;\r\n    }\r\n    if (filter.account_id_list) {\r\n        data.target.account_id_list = filter.account_id_list && filter.account_id_list.length\r\n            ? filter.account_id_list\r\n            : null;\r\n        delete data.filter.account_id_list;\r\n    }\r\n\r\n    api(ACTION_LOGS_GET_LIST_API, data)\r\n        .then((response) => {\r\n            if (response !== undefined) {\r\n\r\n                dispatch( setLogsList({\r\n                    list: response.log_action_list || [],\r\n                    count: response.log_action_count,\r\n                    page,\r\n                    perPage,\r\n                }) );\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch( setLogsListLoading(false) );\r\n        })\r\n};\r\n\r\n// get manager list\r\nexport const getReferences = () => (dispatch) => {\r\n    api(ACTION_LOGS_GET_REFERENCES_API)\r\n        .then((response) => {\r\n            if (response !== undefined) {\r\n                dispatch(setReferences({\r\n                    action_list: response.action_list || [],\r\n                    account_user_manager_list: response.account_user_manager_list || [],\r\n                    account_user_list: response.account_user_list || [],\r\n                }));\r\n            }\r\n        })\r\n};","import React from \"react\";\r\nimport {CheckPicker, Form, FormControl} from \"rsuite\";\r\nimport {FlexGrid, FlexGridItem} from \"../../components/base/FlexGrid\";\r\nimport FieldDataRange from \"../../components/Form/FieldDataRange\";\r\nimport {debounce} from \"lodash\";\r\n\r\nconst siteList = [\r\n    {id: 2, name: 'Client'},\r\n    {id: 4, name: 'Panel'},\r\n];\r\n\r\nexport default ({\r\n    userList,\r\n    actionList,\r\n    accounts,\r\n    defaultFilter,\r\n    onChangeFilter\r\n}) => {\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                formDefaultValue={defaultFilter}\r\n                onChange={debounce((value) => {\r\n                    onChangeFilter(value);\r\n                }, 1000)}\r\n            >\r\n                <FlexGrid align=\"middle\">\r\n                    <FlexGridItem>\r\n                        <FieldDataRange\r\n                            name=\"range\"\r\n                            placement=\"bottomStart\"\r\n                            placeholder={\"Date\"}\r\n                            style={{ width: 234 }}\r\n                        />\r\n                    </FlexGridItem>\r\n                    <FlexGridItem>\r\n                        <FormControl\r\n                            accepter={CheckPicker}\r\n                            sticky\r\n                            name=\"account_id_list\"\r\n                            data={accounts}\r\n                            valueKey=\"id\"\r\n                            labelKey=\"name\"\r\n                            style={{ width: 224 }}\r\n                            placeholder={\"Accounts\"}\r\n                        />\r\n                    </FlexGridItem>\r\n                    <FlexGridItem>\r\n                        <FormControl\r\n                            accepter={CheckPicker}\r\n                            sticky\r\n                            name=\"account_user_id_list\"\r\n                            data={userList}\r\n                            valueKey=\"account_user_id\"\r\n                            labelKey=\"account_user_name\"\r\n                            style={{ width: 224 }}\r\n                            placeholder={\"Users\"}\r\n                        />\r\n                    </FlexGridItem>\r\n                    <FlexGridItem>\r\n                        <FormControl\r\n                            accepter={CheckPicker}\r\n                            sticky\r\n                            name=\"action_list\"\r\n                            data={actionList}\r\n                            valueKey=\"action\"\r\n                            labelKey=\"action\"\r\n                            style={{ minWidth: 224, maxWidth: 400 }}\r\n                            placeholder={\"Actions\"}\r\n                            menuStyle={{minWidth: 400}}\r\n                        />\r\n                    </FlexGridItem>\r\n                    <FlexGridItem>\r\n                        <FormControl\r\n                            accepter={CheckPicker}\r\n                            name=\"site_list\"\r\n                            data={siteList}\r\n                            valueKey=\"id\"\r\n                            labelKey=\"name\"\r\n                            style={{width: 224}}\r\n                            placeholder={\"Site list\"}\r\n                        />\r\n                    </FlexGridItem>\r\n\r\n                </FlexGrid>\r\n            </Form>\r\n        </>\r\n    )\r\n};","import React from \"react\";\r\nimport Table from \"../../components/Table\";\r\nimport {Button} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nexport default ({\r\n    data = [],\r\n    loading,\r\n    perPage,\r\n    page,\r\n    count,\r\n    getItems,\r\n    toggleParamsModal,\r\n    toggleErrorModal,\r\n    ...props\r\n}) => {\r\n\r\n    const columns = [\r\n        {\r\n            id: 'date',\r\n            label: \"Date / Time\",\r\n            dataKey: 'date',\r\n            width: 200,\r\n            formatData: 'datetime_en',\r\n        },\r\n        {\r\n            id: 'account_user_name',\r\n            label: \"User\",\r\n            value: ({account_user_name, account_manager_name}) => `${account_user_name} / ${account_manager_name || 'no manager'}`,\r\n            width: 300,\r\n        },\r\n        {\r\n            id: 'action',\r\n            label: \"Action\",\r\n            dataKey: 'action',\r\n            value: ({action, account_name}) => `${action}${account_name ? ' - ' + account_name : ''}`,\r\n            flexGrow: 4,\r\n            minWidth: 200,\r\n        },\r\n        {\r\n            id: 'params',\r\n            label: \"Params\",\r\n            value: (rowData) => (rowData.params && Object.keys(rowData.params).length\r\n                ? <StyledButton\r\n                    onClick={() => toggleParamsModal(true, rowData)}\r\n                >\r\n                    {`{...}`}\r\n                </StyledButton>\r\n                : ''\r\n            ),\r\n            width: 150,\r\n        },\r\n        {\r\n            id: 'result',\r\n            label: \"Result\",\r\n            value: (rowData) => {\r\n                if (rowData.result.error) {\r\n                    return <>\r\n                        error:{` `}\r\n                        <StyledButton\r\n                            onClick={() => toggleErrorModal(true, rowData)}\r\n                        >\r\n                            {`{...}`}\r\n                        </StyledButton>\r\n                    </>\r\n                }\r\n                return ( Object.keys(rowData.result).map(item => `${item}: ${rowData.result[item]}`) )\r\n            },\r\n            flexGrow: 2,\r\n            minWidth: 200,\r\n        }\r\n    ];\r\n\r\n    const height = 40 + (30 * perPage);\r\n\r\n    return (\r\n        <StyledTable\r\n            virtualized\r\n            ispagination\r\n            extraHeight={height > 700 ? 700 : height}\r\n            getItems={getItems}\r\n            per_page={perPage}\r\n            rowClassName={(rowData) => {\r\n                if ( !rowData || (!rowData.site && rowData.site !== 0) )\r\n                    return;\r\n                return rowData.site === 4 ? 'row-admin-action' : 'row-client-action'\r\n            }}\r\n            {...{\r\n                data,\r\n                loading,\r\n                columns,\r\n                page,\r\n                count\r\n            }}\r\n            {...props}\r\n        />\r\n    )\r\n};\r\n\r\n\r\nconst StyledButton = styled(Button).attrs(props => ({\r\n    appearance: 'link'\r\n}))`\r\n    &&& {\r\n        color: var(--color-brand1);\r\n        padding: 0;\r\n        text-decoration: none;\r\n        \r\n        &:hover {\r\n            color: var(--color-brand2);\r\n        }\r\n    }\r\n`;\r\n\r\nconst StyledTable = styled(Table)`\r\n    .row-admin-action .rs-table-cell {\r\n        background: #F0E7FF;\r\n    }\r\n    .row-client-action .rs-table-cell {\r\n        background: #e3ffef;\r\n    }\r\n`;","import React from \"react\";\r\nimport Modal from '../../components/Modal';\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport ReactJson from 'react-json-view'\r\n\r\nexport default ({\r\n    show,\r\n    onClose,\r\n    maxWidth = 600,\r\n    title = \"\",\r\n    currentLogItem,\r\n}) => {\r\n\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    return (\r\n        <Modal\r\n            {...{show, onClose}}\r\n            onClose={() => onClose(false)}\r\n            title={title}\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            footer={false}\r\n        >\r\n            {currentLogItem && currentLogItem.params\r\n                ? <ReactJson src={currentLogItem.params} name={false} sortKeys={true}/>\r\n                : null\r\n            }\r\n        </Modal>\r\n    )\r\n}","import React from \"react\";\r\nimport Modal from '../../components/Modal';\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport ReactJson from 'react-json-view'\r\n\r\nexport default ({\r\n    show,\r\n    onClose,\r\n    maxWidth = 600,\r\n    title = \"\",\r\n    currentLogItem,\r\n}) => {\r\n\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    return (\r\n        <Modal\r\n            {...{show, onClose}}\r\n            onClose={() => onClose(false)}\r\n            title={title}\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            footer={false}\r\n        >\r\n            {currentLogItem && currentLogItem.result && currentLogItem.result.error\r\n                ? <ReactJson src={currentLogItem.result.error} name={false} sortKeys={true}/>\r\n                : null\r\n            }\r\n        </Modal>\r\n    )\r\n}","import {connect} from \"react-redux\";\r\nimport {getLogsList, getReferences} from \"../../actions/action_logs\";\r\nimport ActionLogs from \"./ActionLogs\";\r\nimport {getDropdownAccounts} from \"../../actions/dropdown_accounts\";\r\n\r\n\r\nconst mapStateToProps = ({action_logs, dropdown_accounts}) => ({\r\n    managerList: action_logs.managerList,\r\n    actionList: action_logs.actionList,\r\n    userList: action_logs.userList,\r\n    referencesFetched: action_logs.referencesFetched,\r\n    \r\n    data: action_logs.list,\r\n    count: action_logs.count,\r\n    page: action_logs.page,\r\n    perPage: action_logs.perPage,\r\n    loading: action_logs.loading,\r\n\r\n    accounts: dropdown_accounts.items,\r\n    accountsFetched: dropdown_accounts.fetched,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getReferences,\r\n    getLogsList,\r\n    getAccounts: getDropdownAccounts,\r\n})(ActionLogs);","import React, {useEffect, useState} from \"react\";\r\nimport ActionLogsFilter from \"./ActionLogsFilter\";\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\nimport PageHeader from \"../../components/base/PageHeader\";\r\nimport ActionLogsTable from \"./ActionLogsTable\";\r\nimport ModalActionParams from \"./ModalActionParams\";\r\nimport ModalActionError from \"./ModalActionError\";\r\n\r\nexport default ({\r\n    data,\r\n    count,\r\n    perPage,\r\n    page,\r\n    loading,\r\n    managerList,\r\n    referencesFetched,\r\n    accountsFetched,\r\n    actionList,\r\n    userList,\r\n    accounts,\r\n    getReferences,\r\n    getLogsList,\r\n    getAccounts,\r\n}) => {\r\n\r\n    const today = new Date();\r\n    const [filter, onChangeFilter] = useState({\r\n        site_list: [4],\r\n        range: [today, today]\r\n    });\r\n    const [showParamsModal, setShowParamsModal] = useState(false);\r\n    const [showErrorModal, setShowErrorModal] = useState(false);\r\n    const [currentLogItem, setCurrentLogItem] = useState(null);\r\n\r\n    useEffect(() => {\r\n        getReferences();\r\n        getAccounts();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getLogsList(filter, 1, perPage);\r\n    }, [filter]);\r\n\r\n    const getItems = (page, perPage) => {\r\n        getLogsList(filter, page, perPage);\r\n    };\r\n\r\n    const toggleParamsModal = (show, data) => {\r\n        setShowParamsModal(show);\r\n        if (data) {\r\n            setCurrentLogItem({...data});\r\n        }\r\n    };\r\n\r\n    const toggleErrorModal = (show, data) => {\r\n        setShowErrorModal(show);\r\n        if (data) {\r\n            setCurrentLogItem({...data});\r\n        }\r\n    };\r\n\r\n    return (\r\n        <PanelLayout>\r\n            <PageHeader title={\"Action Logs\"}/>\r\n            <ActionLogsFilter\r\n                defaultFilter={filter}\r\n                {...{\r\n                    onChangeFilter,\r\n                    userList,\r\n                    actionList,\r\n                    accounts\r\n                }}\r\n            />\r\n            <ActionLogsTable\r\n                loading={loading || !referencesFetched || !accountsFetched}\r\n                {...{\r\n                    data,\r\n                    count,\r\n                    perPage,\r\n                    page,\r\n                    toggleParamsModal,\r\n                    toggleErrorModal\r\n                }}\r\n                getItems={getItems}\r\n            />\r\n            <ModalActionParams\r\n                onClose={() => toggleParamsModal(false)}\r\n                title={\"Action Parameters\"}\r\n                show={showParamsModal}\r\n                currentLogItem={currentLogItem}\r\n            />\r\n            <ModalActionError\r\n                onClose={() => toggleErrorModal(false)}\r\n                title={\"Error result\"}\r\n                show={showErrorModal}\r\n                currentLogItem={currentLogItem}\r\n            />\r\n        </PanelLayout>\r\n    )\r\n};","import React, {useRef} from \"react\";\r\nimport {Form, SelectPicker, Schema} from \"rsuite\";\r\nimport {FlexGrid, FlexGridItem} from \"../../components/base/FlexGrid\";\r\nimport {debounce} from \"lodash\";\r\nimport CustomField from \"../../components/Form/CustomField\";\r\nimport Text from \"../../components/Form/Text\";\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\nconst formModel = Schema.Model({\r\n    prefix: StringType()\r\n        .pattern(/^[0-9][\\d]*$/, 'The number must contain only digits')\r\n        .minLength(6, 'The minimum is 6 characters.')\r\n        .maxLength(40, \"The maximum is 15 characters\"),\r\n});\r\n\r\n\r\nexport default ({\r\n    defaultFilter = {},\r\n    subDestinationList = [],\r\n    onChangeFilter,\r\n}) => {\r\n\r\n    const formRef = useRef(null);\r\n\r\n    const handleChange = debounce( (value) => {\r\n        if ( !formRef.current.check() )\r\n            return;\r\n        onChangeFilter(value);\r\n    }, 500);\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                ref={formRef}\r\n                model={formModel}\r\n                defaultFormValue={defaultFilter}\r\n                onChange={handleChange}\r\n            >\r\n                <FlexGrid align=\"middle\">\r\n                    <FlexGridItem>\r\n                        <CustomField\r\n                            accepter={SelectPicker}\r\n                            width={200}\r\n                            data={subDestinationList}\r\n                            labelKey=\"name\"\r\n                            valueKey=\"sde_key\"\r\n                            placeholder=\"Subdestination\"\r\n                            name=\"sde_key\"\r\n                        />\r\n                    </FlexGridItem>\r\n                    <FlexGridItem>\r\n                        <Text\r\n                            name=\"prefix\"\r\n                            placeholder=\"Prefix\"\r\n                            styleFormGroupExternal={{'margin-bottom': 0}}\r\n                            width={240}\r\n                        />\r\n                    </FlexGridItem>\r\n                </FlexGrid>\r\n            </Form>\r\n        </>\r\n    )\r\n};","import React, {useRef, useEffect} from \"react\";\r\nimport Table from \"../../components/Table\";\r\n\r\n\r\nexport default ({\r\n    data = [],\r\n    loading,\r\n    perPage,\r\n    page,\r\n    count,\r\n    getItems,\r\n    toggleParamsModal,\r\n    setSelected,\r\n    filter,\r\n    ...props\r\n}) => {\r\n\r\n    let tableRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        tableRef.current.clear();\r\n    }, [perPage, filter]);\r\n\r\n    const columns = [\r\n        {\r\n            id: 'prefix',\r\n            label: \"Prefix\",\r\n            dataKey: 'prefix',\r\n            flexGrow: 2,\r\n            minWidth: 200,\r\n        },\r\n        {\r\n            id: 'sde_name',\r\n            label: \"Subdestination\",\r\n            dataKey: 'sde_name',\r\n            flexGrow: 2,\r\n            minWidth: 200,\r\n        },\r\n        {\r\n            id: 'end_date',\r\n            label: \"End date\",\r\n            dataKey: 'end_date',\r\n            width: 200,\r\n            formatData: 'datetime_en',\r\n        },\r\n        {\r\n            id: 'reason',\r\n            label: \"Reason\",\r\n            value: ({acc_key}) => (\r\n                acc_key ? \"Allocation\" : \"Traffic to numbers from range\"\r\n            ),\r\n            flexGrow: 2,\r\n            minWidth: 200,\r\n        }\r\n    ];\r\n\r\n    const height = 40 + (30 * perPage);\r\n\r\n    return (\r\n        <Table\r\n            ref={tableRef}\r\n            virtualized\r\n            isselected\r\n            ispagination\r\n            extraHeight={height > 700 ? 700 : height}\r\n            getItems={getItems}\r\n            per_page={perPage}\r\n            isSelectedAll\r\n            row_key={\"prq_key\"}\r\n            {...{\r\n                data,\r\n                loading,\r\n                columns,\r\n                page,\r\n                count,\r\n                setSelected\r\n            }}\r\n            {...props}\r\n        />\r\n    )\r\n};","import React from \"react\";\r\nimport Modal from '../../components/Modal';\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport ReactJson from 'react-json-view'\r\n\r\nexport default ({\r\n    show,\r\n    onClose,\r\n    maxWidth = 600,\r\n    title = \"\",\r\n    onSuccess,\r\n    loading,\r\n}) => {\r\n\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    return (\r\n        <Modal\r\n            {...{show, onClose}}\r\n            onClose={() => onClose(false)}\r\n            title={title}\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            footer={true}\r\n            successText=\"Confirm\"\r\n            disabled={loading}\r\n            onSuccess={() => {\r\n                onSuccess();\r\n            }}\r\n        >\r\n            You're trying to clean some ranges for Google from quarantine. It may cause of allocation recently called numbers or neighbors of recently allocated numbers. Also pay your attention that recently called ranges will be restored automatically.\r\n        </Modal>\r\n    )\r\n}","import {\r\n    GOOGLE_OTP_QUARANTINED_SET_LOADING,\r\n    GOOGLE_OTP_QUARANTINED_SET_LIST\r\n} from \"../const\";\r\n\r\nimport {\r\n    GOOGLE_OTP_QUARANTINED_GET_LIST_API,\r\n    GOOGLE_OTP_QUARANTINED_REMOVE_NUMBERS_API\r\n} from \"../const/apiMethods\";\r\n\r\nimport {createAction} from './defaults';\r\nimport {api} from \"../api/loginRoutes\";\r\n\r\nconst setGoogleOtpQuarantinedList = createAction(GOOGLE_OTP_QUARANTINED_SET_LIST);\r\nconst setGoogleOtpQuarantinedListLoading = createAction(GOOGLE_OTP_QUARANTINED_SET_LOADING);\r\n\r\n// get list\r\nexport const getGoogleOtpQuarantinedList = (filter = {}, page = 1, per_page = 10) => (dispatch) => {\r\n    dispatch( setGoogleOtpQuarantinedListLoading(true) );\r\n\r\n    api(GOOGLE_OTP_QUARANTINED_GET_LIST_API, {filter, page, per_page})\r\n        .then((response) => {\r\n            if (response !== undefined) {\r\n\r\n                dispatch( setGoogleOtpQuarantinedList({\r\n                    list: response.price_range_quarantine_list || [],\r\n                    count: response.price_range_quarantine_count,\r\n                    page,\r\n                    perPage: per_page,\r\n                }) );\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch( setGoogleOtpQuarantinedListLoading(false) );\r\n        })\r\n};\r\n\r\nexport const removeGoogleOtpQuarantinedNumbers = ({list, all}, filter = {}) => async (dispatch) => {\r\n    return await api(GOOGLE_OTP_QUARANTINED_REMOVE_NUMBERS_API, {\r\n        filter: filter,\r\n        prq_key_list: list,\r\n        delete_all: all\r\n    });\r\n};","import {connect} from \"react-redux\";\r\nimport GoogleOtpQuarantined from \"./GoogleOtpQuarantined\";\r\nimport {getGoogleOtpQuarantinedList, removeGoogleOtpQuarantinedNumbers} from \"../../actions/google_otp_quarantined\";\r\n\r\n\r\nconst mapStateToProps = ({references, google_otp_quarantined}) => ({\r\n    subDestinationList: references.subdestination_list,\r\n    data: google_otp_quarantined.list,\r\n    count: google_otp_quarantined.count,\r\n    loading: google_otp_quarantined.loading,\r\n    page: google_otp_quarantined.page,\r\n    perPage: google_otp_quarantined.perPage,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getGoogleOtpQuarantinedList,\r\n    removeGoogleOtpQuarantinedNumbers\r\n})(GoogleOtpQuarantined);","import React, {useEffect, useState} from \"react\";\r\nimport GoogleOtpQuarantinedFilter from \"./GoogleOtpQuarantinedFilter\";\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\nimport PageHeader from \"../../components/base/PageHeader\";\r\nimport GoogleOtpQuarantinedTable from \"./GoogleOtpQuarantinedTable\";\r\nimport {FlexboxGrid} from \"rsuite\";\r\nimport ModalRemoveNumbers from \"./ModalRemoveNumbers\";\r\nimport {ButtonPrimary} from \"../../components/base/BaseButton\";\r\n\r\nexport default ({\r\n    subDestinationList,\r\n    data,\r\n    count,\r\n    loading,\r\n    page,\r\n    perPage,\r\n    getGoogleOtpQuarantinedList,\r\n    removeGoogleOtpQuarantinedNumbers,\r\n}) => {\r\n\r\n    const [showRemoveNumbersModal, setShowRemoveNumbersModal] = useState(false);\r\n    const [removeNumbersLoading, setRemoveNumbersLoading] = useState(false);\r\n    const [filter, onChangeFilter] = useState({});\r\n    const [selected, setSelected] = useState({all: false, list: []});\r\n\r\n    useEffect(() => {\r\n        getGoogleOtpQuarantinedList(filter, 1, perPage);\r\n    }, [filter]);\r\n\r\n    const getItems = (page, perPage) => {\r\n        getGoogleOtpQuarantinedList(filter, page, perPage);\r\n    };\r\n\r\n    const removeNumbers = () => {\r\n        setRemoveNumbersLoading(true);\r\n        removeGoogleOtpQuarantinedNumbers(selected, filter)\r\n            .then((response) => {\r\n                if (response) {\r\n                    getGoogleOtpQuarantinedList(filter, page, perPage);\r\n                }\r\n                setRemoveNumbersLoading(false);\r\n                setShowRemoveNumbersModal(false);\r\n            })\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <PanelLayout>\r\n                <PageHeader title=\"Google OTP quarantined ranges\"/>\r\n                <FlexboxGrid>\r\n                    <FlexboxGrid.Item style={{marginRight: '30px'}}>\r\n                        <GoogleOtpQuarantinedFilter\r\n                            defaultFilter={filter}\r\n                            {...{\r\n                                subDestinationList,\r\n                                onChangeFilter\r\n                            }}\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                    <FlexboxGrid.Item style={{marginLeft: 'auto'}}>\r\n                        <ButtonPrimary\r\n                            disabled={!selected.list.length && !selected.all}\r\n                            onClick={() => setShowRemoveNumbersModal(true)}\r\n                        >\r\n                            Remove selected numbers from quarantine\r\n                        </ButtonPrimary>\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n\r\n                <GoogleOtpQuarantinedTable\r\n                    {...{\r\n                        data,\r\n                        count,\r\n                        loading,\r\n                        page,\r\n                        perPage,\r\n                        getItems,\r\n                        setSelected,\r\n                        filter\r\n                    }}\r\n                />\r\n\r\n                <ModalRemoveNumbers\r\n                    onClose={() => setShowRemoveNumbersModal(false)}\r\n                    title={\"Remove selected numbers from quarantine\"}\r\n                    show={showRemoveNumbersModal}\r\n                    onSuccess={removeNumbers}\r\n                    loading={removeNumbersLoading}\r\n                />\r\n            </PanelLayout>\r\n        </>\r\n    )\r\n};","import React from \"react\";\r\nimport {CheckPicker, DateRangePicker, Form, FormControl} from \"rsuite\";\r\nimport {FlexGrid, FlexGridItem} from \"../../components/base/FlexGrid\";\r\nimport FieldDataRange from \"../../components/Form/FieldDataRange\";\r\nimport {debounce} from \"lodash\";\r\nimport CustomField from \"../../components/Form/CustomField\";\r\n\r\nexport default ({\r\n    managerList,\r\n    defaultFilter,\r\n    onChangeFilter,\r\n    dateRange,\r\n    setDateRange\r\n}) => {\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                defaultFormValue={defaultFilter}\r\n                onChange={debounce((value) => {\r\n                    onChangeFilter(value);\r\n                }, 500)}\r\n            >\r\n                <FlexGrid align=\"middle\">\r\n                    <FlexGridItem>\r\n                        <DateRangePicker\r\n                            value={dateRange}\r\n                            onChange={setDateRange}\r\n                            cleanable={false}\r\n                            placeholder=\"Select Date Range\"\r\n                            name=\"range\"\r\n                            width={300}\r\n                        />\r\n                    </FlexGridItem>\r\n                    <FlexGridItem>\r\n                        <FormControl\r\n                            accepter={CheckPicker}\r\n                            sticky\r\n                            name=\"account_manager_user_id_list\"\r\n                            data={managerList}\r\n                            valueKey=\"account_user_id\"\r\n                            labelKey=\"account_user_name\"\r\n                            style={{ width: 224 }}\r\n                            placeholder={\"Managers\"}\r\n                        />\r\n                    </FlexGridItem>\r\n                </FlexGrid>\r\n            </Form>\r\n        </>\r\n    )\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport {Icon, IconButton, Table} from \"rsuite\";\r\nimport RenderedColumns from '../../components/Table/RenderColumns';\r\nimport styled from \"styled-components\";\r\nimport BaseTable from \"../../components/base/BaseTable\";\r\n\r\nconst {Cell, Column, HeaderCell} = Table;\r\n\r\nconst columns = [\r\n    {\r\n        id: 'account_user_manager_name',\r\n        label: \"Manager\",\r\n        value: ({date, account_user_manager_name, session_cnt}) => date\r\n            ? <div className=\"row-inner-indent\" style={{display: 'flex'}}>\r\n                <div style={{width: '50%'}}>{date}</div>\r\n                <div style={{width: '50%'}}>{session_cnt || 0}</div>\r\n            </div>\r\n            : account_user_manager_name,\r\n        minWidth: 300,\r\n        flexGrow: 2,\r\n    },\r\n    {\r\n        id: 'session_cnt',\r\n        label: \"Sessions\",\r\n        value: ({session_cnt, first_action, last_action, date}) => date\r\n            ? <div style={{display: 'flex'}}>\r\n                <div style={{width: '50%'}}>{first_action}</div>\r\n                <div style={{width: '50%'}}>{last_action}</div>\r\n            </div>\r\n            : session_cnt || 0,\r\n        minWidth: 300,\r\n        flexGrow: 1,\r\n    },\r\n    {\r\n        id: 'activity_duration',\r\n        label: \"Activity duration\",\r\n        value: ({activity_duration}) => activity_duration || '00:00:00',\r\n        width: 200,\r\n    },\r\n    {\r\n        id: 'actions',\r\n        label: \"Actions\",\r\n        value: ({actions}) => actions || 0,\r\n        width: 200,\r\n    },\r\n    {\r\n        id: 'allocations',\r\n        label: \"Allocated numbers\",\r\n        value: ({allocations}) => allocations,\r\n        width: 200,\r\n    }\r\n];\r\n\r\n\r\nexport default ({\r\n    data = [],\r\n    loading,\r\n    toggleParamsModal,\r\n    rowKey=\"account_user_manager_id\",\r\n    expandedRowData = [],\r\n    handleExpanded,\r\n    dateRange,\r\n    ...props\r\n}) => {\r\n\r\n    const [dailyItemsLength, setDailyItemsLength] = useState(0);\r\n    useEffect( () => {\r\n        if (dateRange) {\r\n            const days = (dateRange[1] - dateRange[0]) / 1000 / 3600 / 24;\r\n            setDailyItemsLength( Math.floor(days) );\r\n        }\r\n    }, [dateRange] );\r\n\r\n    const extendedData = expandedRowData.length\r\n        ?  data.reduce((result, nextValue) => {\r\n            const expandedData = expandedRowData.find(item => item.id === nextValue[rowKey]);\r\n            if (expandedData && expandedData.list.length) {\r\n                result.push({...nextValue, rowClassName: 'row-inner-parent'});\r\n                result.push({\r\n                    date: 'Date',\r\n                    session_cnt: 'Sessions',\r\n                    activity_duration: \"Activity duration\",\r\n                    actions: \"Actions\",\r\n                    allocations: \"Allocated numbers\",\r\n                    first_action: 'First action',\r\n                    last_action: 'Last action',\r\n\r\n                    rowClassName: 'row-inner-header row-inner',\r\n                    inner_header: true,\r\n                    inner: true,\r\n                });\r\n                expandedData.list.forEach((value) => {\r\n                    result.push({...value, rowClassName: 'row-inner', inner: true});\r\n                });\r\n            } else {\r\n                result.push(nextValue);\r\n            }\r\n            return result\r\n        }, [])\r\n        : data;\r\n\r\n    return (\r\n        <StyledTable\r\n            shouldUpdateScroll={false}\r\n            virtualized\r\n            rowHeight={30}\r\n            height={700}\r\n            data={extendedData}\r\n            rowClassName={(rowData) => {\r\n                return (rowData && rowData.rowClassName) || null;\r\n            }}\r\n            {...{\r\n                loading\r\n            }}\r\n            {...props}\r\n        >\r\n            {RenderedColumns(columns, null)}\r\n\r\n            {dailyItemsLength &&\r\n                <Column width={70} align=\"center\">\r\n                    <HeaderCell>#</HeaderCell>\r\n                    <ExpandCell\r\n                        dataKey={rowKey}\r\n                        onChange={handleExpanded}\r\n                        expandedRowData={expandedRowData}\r\n                    />\r\n                </Column>\r\n            }\r\n        </StyledTable>\r\n    )\r\n}\r\n\r\n\r\nconst ExpandCell = ({ rowData, dataKey, expandedRowData, onChange, ...props }) => {\r\n    const isExpanded = expandedRowData.some(item => item.id === rowData[dataKey]);\r\n    return !rowData.inner\r\n        ? <Cell {...props}>\r\n            <IconButton\r\n                size=\"xs\"\r\n                appearance=\"subtle\"\r\n                onClick={() => onChange(rowData[dataKey], isExpanded)}\r\n                icon={<Icon icon={isExpanded ? 'minus-square-o' : 'plus-square-o'}/>}\r\n            />\r\n        </Cell>\r\n        : null\r\n};\r\n\r\nconst StyledTable = styled(BaseTable)`\r\n    &&& {\r\n    \r\n        .row-inner .row-inner-indent {\r\n            padding-left: 25px;\r\n        }\r\n    \r\n        .row-inner-parent {\r\n            .rs-table-cell-content {\r\n                background-color: #e5e9f2;\r\n            }\r\n        }\r\n        \r\n        .row-inner-header {\r\n            .rs-table-cell-content {\r\n                font-size: 12px;\r\n                line-height: 18px;\r\n            }\r\n        }\r\n    }\r\n`;","import React, {useEffect, useState} from \"react\";\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\nimport PageHeader from \"../../components/base/PageHeader\";\r\nimport AmActivitiesFilter from \"./AmActivitiesFilter\";\r\nimport AmActivitiesTable from \"./AmActivitiesTable\";\r\n\r\nconst dateNow = new Date();\r\n\r\nexport default ({\r\n    data,\r\n    dateList,\r\n    loading,\r\n    managerList,\r\n\r\n    getReferences,\r\n    getAmActivitiesList,\r\n    getAmActivitiesDateList,\r\n    removeAmActivitiesDateListItem,\r\n    removeAmActivitiesDateList,\r\n}) => {\r\n\r\n    const [dateRange, setDateRange] = useState([\r\n        new Date( dateNow.getFullYear(), dateNow.getMonth(), dateNow.getDate() ),\r\n        new Date( dateNow.getFullYear(), dateNow.getMonth(), dateNow.getDate() )\r\n    ]);\r\n\r\n    const [filter, onChangeFilter] = useState({});\r\n\r\n    useEffect(() => {\r\n        getReferences();\r\n        return () => removeAmActivitiesDateList();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const data = {\r\n            ...filter,\r\n            range: dateRange,\r\n        }\r\n        getAmActivitiesList(data);\r\n    }, [filter, dateRange]);\r\n\r\n\r\n    const setManagerDailyActivity = (id, isExpanded) => {\r\n        if (isExpanded) {\r\n            removeAmActivitiesDateListItem(id);\r\n            return;\r\n        }\r\n        getAmActivitiesDateList(id, {\r\n            ...filter,\r\n            range: dateRange,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <PanelLayout>\r\n            <PageHeader title={\"AM Activities\"}/>\r\n            <AmActivitiesFilter\r\n                defaultFilter={filter}\r\n                {...{\r\n                    managerList,\r\n                    dateRange,\r\n                    onChangeFilter,\r\n                    setDateRange\r\n                }}\r\n            />\r\n            <AmActivitiesTable\r\n                handleExpanded={setManagerDailyActivity}\r\n                expandedRowData={dateList}\r\n                {...{\r\n                    data,\r\n                    loading,\r\n                    dateList,\r\n                    dateRange\r\n                }}\r\n            />\r\n        </PanelLayout>\r\n    )\r\n};","import {\r\n    AM_ACTIVITIES_SET_LOADING,\r\n    AM_ACTIVITIES_LIST,\r\n    AM_ACTIVITIES_DATE_LIST_ITEM,\r\n    AM_ACTIVITIES_DATE_LIST_ITEM_REMOVE,\r\n    AM_ACTIVITIES_DATE_LIST_REMOVE,\r\n} from \"../const\";\r\n\r\nimport {\r\n    AM_ACTIVITIES_LIST_API,\r\n    AM_ACTIVITIES_DATE_LIST_API\r\n} from \"../const/apiMethods\";\r\n\r\nimport {createAction} from './defaults';\r\nimport {api} from \"../api/loginRoutes\";\r\nimport {toEndDayUTCTime, toStartDayUTCTime} from \"../utils\";\r\n\r\nconst setAmActivitiesList = createAction(AM_ACTIVITIES_LIST);\r\nconst setAmActivitiesLoading = createAction(AM_ACTIVITIES_SET_LOADING);\r\nconst setAmActivitiesDateListItem = createAction(AM_ACTIVITIES_DATE_LIST_ITEM);\r\nexport const removeAmActivitiesDateListItem = createAction(AM_ACTIVITIES_DATE_LIST_ITEM_REMOVE);\r\nexport const removeAmActivitiesDateList = createAction(AM_ACTIVITIES_DATE_LIST_REMOVE);\r\n\r\n\r\n// get list\r\nexport const getAmActivitiesList = (filter = {}) => (dispatch) => {\r\n    dispatch( setAmActivitiesLoading(true) );\r\n\r\n    const data = {\r\n        filter: {...filter},\r\n        target: {account_id_list: null},\r\n    };\r\n\r\n    if (filter.range && filter.range.length) {\r\n        data.filter['start_date'] = toStartDayUTCTime(filter.range[0]);\r\n        data.filter['end_date'] = toEndDayUTCTime(filter.range[1]);\r\n\r\n        delete data.filter.range;\r\n    }\r\n\r\n    if (filter.account_manager_user_id_list) {\r\n        data.target.account_user_manager_id_list = filter.account_manager_user_id_list && filter.account_manager_user_id_list.length\r\n            ? filter.account_manager_user_id_list\r\n            : null;\r\n        delete data.filter.account_manager_user_id_list;\r\n    }\r\n\r\n    api(AM_ACTIVITIES_LIST_API, data)\r\n        .then((response) => {\r\n            if (response !== undefined) {\r\n\r\n                dispatch( setAmActivitiesList({\r\n                    list: response.statistic_by_account_user_manager || [],\r\n                }) );\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch( setAmActivitiesLoading(false) );\r\n        })\r\n};\r\n\r\n\r\n// get manager list\r\nexport const getAmActivitiesDateList = (id, filter = {}) => (dispatch) => {\r\n\r\n    dispatch( setAmActivitiesLoading(true) );\r\n\r\n    const data = {\r\n        target: {account_user_manager_id: id},\r\n        filter: {...filter},\r\n    };\r\n\r\n    if (filter.range && filter.range.length) {\r\n        data.filter['start_date'] = toStartDayUTCTime(filter.range[0]);\r\n        data.filter['end_date'] = toEndDayUTCTime(filter.range[1]);\r\n        delete data.filter.range;\r\n    }\r\n\r\n    api(AM_ACTIVITIES_DATE_LIST_API, data)\r\n        .then((response) => {\r\n            if (response === undefined) {\r\n                dispatch( setAmActivitiesLoading(false) );\r\n                return;\r\n            }\r\n\r\n            dispatch(setAmActivitiesDateListItem({\r\n                list: response.statistic_by_account_user_manager_date || [],\r\n                id\r\n            }));\r\n        })\r\n};","import {connect} from \"react-redux\";\r\nimport AmActivities from \"./AmActivities\";\r\nimport {\r\n    getAmActivitiesDateList, \r\n    getAmActivitiesList,\r\n    removeAmActivitiesDateListItem,\r\n    removeAmActivitiesDateList\r\n} from \"../../actions/am_activities\";\r\nimport {getReferences} from \"../../actions/action_logs\";\r\n\r\n\r\nconst mapStateToProps = ({action_logs, am_activities}) => ({\r\n    managerList: action_logs.managerList,\r\n    data: am_activities.list,\r\n    dateList: am_activities.dateList,\r\n    loading: am_activities.loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getReferences,\r\n    getAmActivitiesList,\r\n    getAmActivitiesDateList,\r\n    removeAmActivitiesDateListItem,\r\n    removeAmActivitiesDateList\r\n})(AmActivities);","import React from 'react';\r\nimport Modal from \"../../components/Modal\";\r\n\r\nexport default ({\r\n    show,\r\n    data,\r\n    onClose,\r\n    onSubmit,\r\n    disabled,\r\n}) => {\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                show={show}\r\n                footer\r\n                data={data}\r\n                disabled = {disabled}\r\n                onSuccess={onSubmit}\r\n                onClose={onClose}\r\n                successText={\"Delete\"}\r\n                title={\"Delete account manager\"}\r\n            >\r\n                <p>Are you sure about that?</p>\r\n            </Modal>\r\n        </>\r\n    )\r\n};","import React, {useState, useEffect} from \"react\";\r\nimport {Button, CheckPicker, Icon, SelectPicker, Table, Input} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport ModalRemoveAccountManager from \"./ModalRemoveAccountManager\";\r\nimport BaseTable from \"../../components/base/BaseTable\";\r\n\r\nconst {Cell, Column, HeaderCell} = Table;\r\n\r\n\r\nexport default ({\r\n    data = [],\r\n    loading,\r\n    teamLeadList,\r\n    userList,\r\n    billingList,\r\n    handleRowEdit,\r\n    modifyAccountManager,\r\n    removeAccountManager,\r\n    getAccountManagersList,\r\n    ...props\r\n}) => {\r\n\r\n    const [forms, setForms] = useState(new Map());\r\n    const [rowsLoading, setRowsLoading] = useState([]);\r\n    const [showRemoveModal, setShowRemoveModal] = useState(false);\r\n    const [removeData, setRemoveData] = useState(null);\r\n    const [removeDataLoading, setRemoveDataLoading] = useState(null);\r\n\r\n    const changeForm = (name, value, id) => {\r\n        const formsCopy = new Map(forms);\r\n        const currentForm = forms.get(id);\r\n        formsCopy.set(id, {...currentForm, [name]: value});\r\n        setForms(formsCopy);\r\n    };\r\n\r\n    const modifyRow = async (rowData) => {\r\n        setRowsLoading([...rowsLoading, rowData.id]);\r\n        const params = forms.get(rowData.id);\r\n        if (!params.name) {\r\n            setRowsLoading( rowsLoading.filter(item => item !== rowData.id) );\r\n            return;\r\n        }\r\n        if (!params.skype) {\r\n            setRowsLoading( rowsLoading.filter(item => item !== rowData.id) );\r\n            return;\r\n        }\r\n        if (!params.email) {\r\n            setRowsLoading( rowsLoading.filter(item => item !== rowData.id) );\r\n            return;\r\n        }\r\n        const res = await modifyAccountManager(params);\r\n        if (!res) {\r\n            setRowsLoading( rowsLoading.filter(item => item !== rowData.id) );\r\n            return;\r\n        }\r\n        setItemEditing(res.account_manager);\r\n        getAccountManagersList();\r\n        setRowsLoading( rowsLoading.filter(item => item !== rowData.id) );\r\n    };\r\n\r\n    const deleteRow = async () => {\r\n        setRemoveDataLoading(true);\r\n        const res = await removeAccountManager(removeData.id);\r\n        if (res) {\r\n            await getAccountManagersList();\r\n            setItemEditing(res.account_manager);\r\n            getAccountManagersList()\r\n                .then(res => {\r\n                    setRemoveDataLoading(false);\r\n                    setShowRemoveModal(false);\r\n                    setRemoveData(null);\r\n                });\r\n        }\r\n    };\r\n\r\n    const setItemEditing = (rowData) => {\r\n        const formsCopy = new Map(forms);\r\n        if ( forms.has(rowData.id) ) {\r\n            formsCopy.delete(rowData.id);\r\n        } else {\r\n            formsCopy.set(rowData.id, {\r\n                account_manager_id: rowData.id,\r\n                email: rowData.email,\r\n                name: rowData.name,\r\n                account_user_teamlead_id: rowData.account_user_teamlead && rowData.account_user_teamlead.account_user_id,\r\n                account_user_manager_id_list: rowData.account_user_manager_list\r\n                    ? rowData.account_user_manager_list.map(item => item.account_user_id)\r\n                    : null,\r\n                skype: rowData.skype\r\n            })\r\n        }\r\n        setForms(formsCopy);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <StyledTable\r\n                className={'tableFilters'}\r\n                shouldUpdateScroll={false}\r\n                headerHeight={46}\r\n                autoHeight\r\n                wordWrap\r\n                data={[...data]}\r\n                {...{\r\n                    loading\r\n                }}\r\n                {...props}\r\n            >\r\n\r\n                <Column flexGrow={1} minWidth={130}>\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">AM</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"name\"}>\r\n                        {(rowData) => {\r\n                            if ( forms.has(rowData.id) ) {\r\n                                const editableRow = forms.get(rowData.id);\r\n                                return <div className=\"rs-form-control-wrapper\">\r\n                                    <EditField\r\n                                        as={Input}\r\n                                        value={editableRow[\"name\"]}\r\n                                        name=\"name\"\r\n                                        placeholder={\"Name\"}\r\n                                        onChange={(val) => changeForm(\"name\", val, rowData.id)}\r\n                                    />\r\n                                    {!editableRow[\"name\"] &&\r\n                                        <EditFieldError text=\"Required\" />\r\n                                    }\r\n                                </div>\r\n                            }\r\n                            return <span className=\"tableFilters__previewText\">{rowData[\"name\"]}</span>\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow={1} minWidth={130}>\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">Email</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"email\"}>\r\n                        {(rowData) => {\r\n                            if ( forms.has(rowData.id) ) {\r\n                                const editableRow = forms.get(rowData.id);\r\n                                return <div className=\"rs-form-control-wrapper\">\r\n                                    <EditField\r\n                                        as={Input}\r\n                                        value={editableRow[\"email\"]}\r\n                                        name=\"email\"\r\n                                        placeholder={\"Email\"}\r\n                                        onChange={(val) => changeForm(\"email\", val, rowData.id)}\r\n                                    />\r\n                                    {!editableRow[\"email\"] &&\r\n                                    <EditFieldError text=\"Required\" />\r\n                                    }\r\n                                </div>\r\n                            }\r\n                            return <span className=\"tableFilters__previewText\">{rowData[\"email\"]}</span>\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow={1} minWidth={130}>\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">Team Lead</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"teamlead_name\"}>\r\n                        {(rowData) => {\r\n                            if ( forms.has(rowData.id) ) {\r\n                                const editableRow = forms.get(rowData.id);\r\n                                return <EditField\r\n                                        cleanable={false}\r\n                                        searchable={false}\r\n                                        data={teamLeadList}\r\n                                        value={editableRow[\"account_user_teamlead_id\"]}\r\n                                        valueKey=\"account_user_id\"\r\n                                        labelKey=\"account_user_name\"\r\n                                        name=\"account_user_teamlead_id\"\r\n                                        placeholder={\"Team Lead\"}\r\n                                        onChange={(val) => changeForm(\"account_user_teamlead_id\", val, rowData.id)}\r\n                                    />\r\n                            }\r\n                            return <span className=\"tableFilters__previewText\">\r\n                                {rowData.account_user_teamlead\r\n                                    ? rowData.account_user_teamlead.account_user_name\r\n                                    : ''\r\n                                }\r\n                            </span>\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow={1} minWidth={130}>\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">AM from Billing</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"name\"}>\r\n                        {(rowData) => {\r\n                            const billingItem = rowData[\"billing_acm_key\"] && billingList.find(item => item.ACM_KEY === rowData[\"billing_acm_key\"]);\r\n                            return (\r\n                                <span className=\"tableFilters__previewText\">\r\n                                    {rowData[\"billing_acm_key\"]\r\n                                        ? billingItem ? billingItem[\"ACM_NAME\"] : \"\"\r\n                                        : \"\"\r\n                                    }\r\n                                </span>\r\n                            )\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow={1} minWidth={130}>\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">Users</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"account_user_list\"}>\r\n                        {(rowData) => {\r\n                            if ( forms.has(rowData.id) ) {\r\n                                const editableRow = forms.get(rowData.id);\r\n                                return <EditField\r\n                                    cleanable={true}\r\n                                    searchable={false}\r\n                                    value={editableRow.account_user_manager_id_list}\r\n                                    data={userList}\r\n                                    valueKey=\"account_user_id\"\r\n                                    labelKey=\"account_user_name\"\r\n                                    name=\"account_user_manager_id_list\"\r\n                                    placeholder={\"Users\"}\r\n                                    sticky\r\n                                    as={CheckPicker}\r\n                                    onChange={(val) => changeForm(\"account_user_manager_id_list\", val, rowData.id)}\r\n                                />\r\n                            }\r\n                            const users = rowData.account_user_manager_list && rowData.account_user_manager_list.map(item => item.account_user_name).join(\", \");\r\n                            return <span className=\"tableFilters__previewText\">{users || \"\"}</span>\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow={1} minWidth={130}>\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">Skype</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey=\"skype\">\r\n                        {(rowData) => {\r\n                            if ( forms.has(rowData.id) ) {\r\n                                const editableRow = forms.get(rowData.id);\r\n                                return <div className=\"rs-form-control-wrapper\">\r\n                                    <EditField\r\n                                        as={Input}\r\n                                        value={editableRow[\"skype\"]}\r\n                                        name=\"skype\"\r\n                                        placeholder=\"Skype\"\r\n                                        onChange={(val) => changeForm(\"skype\", val, rowData.id)}\r\n                                    />\r\n                                    {!editableRow[\"skype\"] &&\r\n                                    <EditFieldError text=\"Required\" />\r\n                                    }\r\n                                </div>\r\n                            }\r\n                            return <span className=\"tableFilters__previewText\">{rowData[\"skype\"]}</span>\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column width={174}>\r\n                    <HeaderCell></HeaderCell>\r\n                    <Cell>\r\n                        {rowData => {\r\n                            const rowLoading = rowsLoading.includes(rowData.id);\r\n                            return <div className=\"tableFilters_buttons\">\r\n\r\n                                {!forms.has(rowData.id)\r\n                                    ? <Button\r\n                                        size=\"sm\"\r\n                                        color=\"lightblue\"\r\n                                        disabled={rowLoading}\r\n                                        onClick={() => setItemEditing(rowData)}\r\n                                    >\r\n                                        <Icon icon=\"edit2\"/>\r\n                                    </Button>\r\n                                    : <>\r\n                                        <Button\r\n                                            size=\"sm\"\r\n                                            color=\"green\"\r\n                                            disabled={rowLoading}\r\n                                            onClick={() => modifyRow(rowData)}\r\n                                        >\r\n                                            <Icon icon=\"check-circle\"/>\r\n                                        </Button>\r\n\r\n                                        <Button\r\n                                            size=\"sm\"\r\n                                            color=\"red\"\r\n                                            disabled={rowLoading}\r\n                                            onClick={() => setItemEditing(rowData)}\r\n                                        >\r\n                                            <Icon icon=\"close-circle\"/>\r\n                                        </Button>\r\n                                    </>\r\n                                }\r\n\r\n                                <Button\r\n                                    size=\"sm\"\r\n                                    color=\"red\"\r\n                                    disabled={rowLoading}\r\n                                    onClick={() => {\r\n                                        setRemoveData(rowData);\r\n                                        setShowRemoveModal(true);\r\n                                    }}\r\n                                >\r\n                                    <Icon icon=\"trash2\"/>\r\n                                </Button>\r\n                            </div>\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n            </StyledTable>\r\n\r\n            <ModalRemoveAccountManager\r\n                show={showRemoveModal}\r\n                onSubmit={deleteRow}\r\n                onClose={() => setShowRemoveModal(false)}\r\n                disabled={removeDataLoading}\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst StyledTable = styled(BaseTable)`\r\n    && {\r\n    \r\n        .tableFilters__previewText {\r\n            display: block;\r\n            line-height: 20px;\r\n            margin-top: 7px;\r\n            word-break: normal;\r\n        }\r\n        \r\n        .tableFilters_buttons {\r\n            height: 20px;\r\n            margin-top: 7px;\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nconst EditFieldError = ({text}) => (\r\n    <div className=\"rs-error-message-wrapper rs-form-control-message-wrapper rs-error-message-placement-top-end\">\r\n        <span className=\"rs-error-message rs-error-message-show\">\r\n            <span className=\"rs-error-message-arrow\"></span>\r\n            <span className=\"rs-error-message-inner\">{text}</span>\r\n        </span>\r\n    </div>\r\n);\r\n\r\nconst EditField = styled(SelectPicker).attrs(props => ({\r\n    className: \"tableFilters_field\",\r\n    errorPlacement: \"topEnd\",\r\n    type: \"text\",\r\n}))`\r\n`;\r\n\r\n","import React, {useRef, useState, useMemo} from \"react\";\r\nimport {Button, CheckPicker, Form, FormControl, Input, Schema, SelectPicker} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport Icon from \"rsuite/es/Icon\";\r\n\r\nconst {StringType, NumberType, ArrayType} = Schema.Types;\r\n\r\nconst formModel = Schema.Model({\r\n    email: StringType()\r\n        .isRequired('Required')\r\n        .isEmail('Please enter an email address')\r\n        .maxLength(256, 'The maximum of this field is 256 characters'),\r\n    name: StringType()\r\n        .isRequired('Required')\r\n        .maxLength(256, 'The maximum of this field is 256 characters'),\r\n    account_user_teamlead_id: StringType()\r\n        .isRequired('Required'),\r\n    account_user_manager_id_list: ArrayType()\r\n        .isRequired('Required'),\r\n    billing_acm_key: NumberType()\r\n        .isRequired('Required'),\r\n    skype: StringType()\r\n        .isRequired('Required')\r\n});\r\n\r\nexport default ({\r\n    teamLeadList,\r\n    billingList,\r\n    managersList,\r\n    userList,\r\n    onSubmit,\r\n    getAccountManagersList,\r\n}) => {\r\n\r\n    const formRef = useRef(null);\r\n    const [createAmLoading, setCreateAmLoading] = useState(false);\r\n    const disabledBillingList = useMemo(() => (\r\n        billingList\r\n            .filter(billingAM => managersList.find(manager => manager.billing_acm_key === billingAM.ACM_KEY))\r\n            .map(item => item.ACM_KEY)\r\n    ), [billingList, managersList]);\r\n\r\n    const handleSubmit = () => {\r\n        if (!formRef.current.check())\r\n            return;\r\n\r\n        setCreateAmLoading(true);\r\n\r\n        const formValue = formRef.current.getFormValue();\r\n        onSubmit(formValue)\r\n            .then(res => {\r\n                setCreateAmLoading(false);\r\n                if (res) {\r\n                    getAccountManagersList()\r\n                }\r\n            });\r\n    };\r\n\r\n    return (\r\n        <StyledForm\r\n            ref={formRef}\r\n            model={formModel}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <StyledFieldWrapper>\r\n                <StyledField\r\n                    name=\"name\"\r\n                    accepter={Input}\r\n                    placeholder=\"Name\"\r\n                />\r\n            </StyledFieldWrapper>\r\n\r\n            <StyledFieldWrapper>\r\n                <StyledField\r\n                    name=\"email\"\r\n                    accepter={Input}\r\n                    placeholder=\"Email\"\r\n                />\r\n            </StyledFieldWrapper>\r\n\r\n            <StyledFieldWrapper>\r\n                <StyledField\r\n                    name=\"account_user_teamlead_id\"\r\n                    accepter={SelectPicker}\r\n                    data={teamLeadList}\r\n                    placeholder=\"Team Lead\"\r\n                    valueKey=\"account_user_id\"\r\n                    labelKey=\"account_user_name\"\r\n                />\r\n            </StyledFieldWrapper>\r\n\r\n            <StyledFieldWrapper>\r\n                <StyledField\r\n                    name=\"billing_acm_key\"\r\n                    accepter={SelectPicker}\r\n                    data={billingList}\r\n                    disabledItemValues={disabledBillingList}\r\n                    placeholder=\"AM from Billing\"\r\n                    valueKey=\"ACM_KEY\"\r\n                    labelKey=\"ACM_NAME\"\r\n                />\r\n            </StyledFieldWrapper>\r\n\r\n            <StyledFieldWrapper>\r\n                <StyledField\r\n                    accepter={CheckPicker}\r\n                    data={userList}\r\n                    valueKey=\"account_user_id\"\r\n                    labelKey=\"account_user_name\"\r\n                    name=\"account_user_manager_id_list\"\r\n                    placeholder={\"Users\"}\r\n                    sticky\r\n                />\r\n            </StyledFieldWrapper>\r\n\r\n            <StyledFieldWrapper>\r\n                <StyledField\r\n                    name=\"skype\"\r\n                    accepter={Input}\r\n                    placeholder=\"Skype\"\r\n                />\r\n            </StyledFieldWrapper>\r\n\r\n            <StyledSubmitWrapper>\r\n                <Button\r\n                    className=\"tableFilters_submit\"\r\n                    color=\"green\"\r\n                    type=\"submit\"\r\n                    loading={createAmLoading}\r\n                >\r\n                    <Icon icon=\"plus\"/>\r\n                </Button>\r\n            </StyledSubmitWrapper>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nconst StyledField = styled(FormControl).attrs(props => ({\r\n    className: \"tableFilters_field\",\r\n    errorPlacement: \"topEnd\",\r\n    placement: \"autoVerticalStart\",\r\n    type: \"text\",\r\n    cleanable: true,\r\n    searchable: false,\r\n}))`\r\n`;\r\n\r\nconst StyledFieldWrapper = styled.div`\r\n    flex: 1 0 200px;\r\n    padding: 5px 10px;\r\n    width: 200px;\r\n`;\r\nconst StyledSubmitWrapper = styled.div`\r\n    padding: 5px 10px;\r\n    width: 174px;\r\n`;\r\n\r\nconst StyledForm = styled(Form)`\r\n    display: flex;\r\n`;","import {connect} from \"react-redux\";\r\nimport AccountManagers from \"./AccountManagers\";\r\nimport {\r\n    createAccountManager,\r\n    getAccountManagersBillingList,\r\n    getAccountManagersList,\r\n    getAccountManagersReferences,\r\n    modifyAccountManager,\r\n    removeAccountManager\r\n} from \"../../actions/account_managers\";\r\n\r\n\r\nconst mapStateToProps = ({account_managers}) => ({\r\n    managersList: account_managers.list,\r\n    loading: account_managers.loading,\r\n    userList: account_managers.userList,\r\n    teamLeadList: account_managers.teamLeadList,\r\n    billingList: account_managers.billingList,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getAccountManagersList,\r\n    getAccountManagersReferences,\r\n    getAccountManagersBillingList,\r\n    createAccountManager,\r\n    modifyAccountManager,\r\n    removeAccountManager,\r\n})(AccountManagers);","import React, {useEffect} from \"react\";\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\nimport PageHeader from \"../../components/base/PageHeader\";\r\nimport AccountManagersTable from \"./AccountManagersTable\";\r\nimport AccountManagersCreateForm from \"./AccountManagersCreateForm\";\r\n\r\nexport default ({\r\n    managersList,\r\n    loading,\r\n    teamLeadList,\r\n    userList,\r\n    billingList,\r\n    getAccountManagersList,\r\n    getAccountManagersReferences,\r\n    getAccountManagersBillingList,\r\n    createAccountManager,\r\n    modifyAccountManager,\r\n    removeAccountManager,\r\n}) => {\r\n\r\n    useEffect(() => {\r\n        getAccountManagersList();\r\n        getAccountManagersReferences();\r\n        getAccountManagersBillingList();\r\n    }, []);\r\n\r\n    return (\r\n        <PanelLayout>\r\n            <PageHeader title=\"Account Managers\"/>\r\n            <AccountManagersTable\r\n                data={managersList}\r\n                {...{\r\n                    loading,\r\n                    teamLeadList,\r\n                    userList,\r\n                    billingList,\r\n                    modifyAccountManager,\r\n                    removeAccountManager,\r\n                    getAccountManagersList,\r\n                }}\r\n            />\r\n            <AccountManagersCreateForm\r\n                onSubmit={createAccountManager}\r\n                {...{\r\n                    managersList,\r\n                    billingList,\r\n                    teamLeadList,\r\n                    userList,\r\n                    getAccountManagersList,\r\n                }}\r\n            />\r\n        </PanelLayout>\r\n    )\r\n};","import React, { Component } from \"react\";\r\n\r\nimport JSONEditor from \"jsoneditor\";\r\nimport \"jsoneditor/dist/jsoneditor.css\";\r\n\r\nexport default class JSONEditorDemo extends Component {\r\n    componentDidMount() {\r\n        const options = {\r\n            mode: \"code\",\r\n            onChangeText: this.props.onChange\r\n        };\r\n\r\n        this.jsoneditor = new JSONEditor(this.container, options);\r\n        this.jsoneditor.set(this.props.json);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.jsoneditor) {\r\n            this.jsoneditor.destroy();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.jsoneditor.update(this.props.json);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"jsoneditor-react-container\"\r\n                ref={elem => (this.container = elem)}\r\n            />\r\n        );\r\n    }\r\n}\r\n","import React, {useState} from 'react'\r\nimport styled from 'styled-components';\r\n\r\nimport {Editor} from 'react-draft-wysiwyg';\r\nimport {stateToHTML} from 'draft-js-export-html';\r\nimport {stateFromHTML} from 'draft-js-import-html';\r\nimport { EditorState} from 'draft-js';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\n\r\n\r\nconst SettingsContactEditor = ({defaultValue, onChange}) => {\r\n\r\n    const blocksFromHTML = stateFromHTML(defaultValue);\r\n    const [contactState, onChangeContactState] = useState(defaultValue && (typeof defaultValue === 'string' || defaultValue instanceof String) ?\r\n        EditorState.createWithContent(blocksFromHTML) : EditorState.createEmpty()\r\n    );\r\n\r\n    return (\r\n        <StyledEditorContainer>\r\n            <Editor\r\n                wrapperClassName=\"wrapper-class\"\r\n                editorClassName=\"editor-class\"\r\n                toolbarClassName=\"toolbar-class\"\r\n                editorState={contactState}\r\n                onEditorStateChange={(editorState) => {\r\n                    onChangeContactState(editorState);\r\n                    const value = stateToHTML(editorState.getCurrentContent());\r\n                    onChange(value)\r\n                }}\r\n                toolbar={{\r\n                    inline: { inDropdown: true },\r\n                    list: { inDropdown: true, options: ['unordered', 'ordered'] },\r\n                    textAlign: { inDropdown: true },\r\n                    link: { inDropdown: false},\r\n                    history: { inDropdown: false },\r\n                    options: ['inline', 'blockType', 'fontSize', 'fontFamily', 'list', 'textAlign', 'link', 'emoji', 'history']\r\n                }}\r\n            />\r\n        </StyledEditorContainer>\r\n    )\r\n}\r\n\r\nexport default SettingsContactEditor;\r\n\r\nconst StyledEditorContainer = styled.div`\r\n    .wrapper-class {\r\n        margin-bottom: 5px;\r\n    }\r\n    .editor-class {\r\n        padding: 2px 5px;\r\n        border: 1px solid #e5e5ea;\r\n        border-radius: 5px;\r\n    }\r\n    .toolbar-class .rdw-link-modal-target-option {\r\n        display: none;\r\n    }\r\n`;","import Modal from '../../components/Modal';\r\nimport React, {useEffect, useState} from 'react';\r\nimport {FormControl, Schema, Input} from 'rsuite/es';\r\nimport SettingsJsonEditor from 'pages/Settings/SettingsJsonEditor';\r\nimport Whisper from 'rsuite/es/Whisper';\r\nimport Tooltip from 'rsuite/es/Tooltip';\r\nimport {Icon, IconButton} from \"rsuite\";\r\nimport {FieldTextArea} from \"./styled\";\r\nimport * as S from './styled';\r\nimport SettingsContactEditor from './SettingsContactEditor'\r\n\r\n\r\nconst {NumberType, StringType} = Schema.Types;\r\n\r\nconst SettingsEditModal = ({show, dataObj, valueKey, isJson, onEditItem, isMobile, windowWidth, onClose, getList}) => {\r\n    let formRef;\r\n\r\n    const [formState, onChangeFormState] = useState(null);\r\n    const [description, setDescription] = useState(\"\");\r\n    const [showDescriptionEdit, setShowDescriptionEdit] = useState(!dataObj.description);\r\n    const [showResult, onShowResult] = useState(isJson === null || isJson === undefined,);\r\n    const [comparedData, onCompareData] = useState(true);\r\n    const [errorMessageState, onChangeErrorMessage] = useState(null);\r\n\r\n    const editSchemaNotJson = Schema.Model({\r\n        s_as_integer: NumberType('This field requires only numbers').max(100000000, 'This is the maximum number for this field'),\r\n        s_as_string: StringType().maxLength(1024, 'This is the maximum count of characters for this field'),\r\n        description: StringType().maxLength(256, 'This is the maximum count of characters for this field')\r\n    });\r\n\r\n    useEffect(() => {\r\n        onShowResult(isJson === null || isJson === undefined);\r\n    }, [isJson]);\r\n\r\n    useEffect(() => {\r\n        onChangeFormState(dataObj[valueKey])\r\n        setShowDescriptionEdit(!dataObj.description);\r\n        setDescription(dataObj.description);\r\n    }, [dataObj]);\r\n\r\n    const onSubmit = () => {\r\n        const keyList = ['s_as_string', 's_as_integer', 's_as_json', 'type', 'name', 'description'];\r\n        const data = Object.keys(dataObj).filter(key => keyList.includes(key)).reduce((result, key) => {\r\n            result[key] = dataObj[key];\r\n            return result\r\n        }, {});\r\n        const finalData = {\r\n            ...data,\r\n            [valueKey]: formState,\r\n            description: description\r\n        };\r\n\r\n        onEditItem(finalData).then(() => {\r\n            getList()\r\n        });\r\n        onShowResult(false);\r\n        onCompareData(true);\r\n    };\r\n\r\n    const formData = Object.keys(dataObj).length ? dataObj[valueKey] : {};\r\n\r\n    const compareAndUpdateFormData = (data) => {\r\n        let parsedData = null;\r\n        let errorMessage = null;\r\n        try {\r\n            parsedData = JSON.parse(data);\r\n            onChangeErrorMessage(null)\r\n        } catch (e) {\r\n            errorMessage = 'JSON is incorrect! Use the undo button';\r\n            onChangeErrorMessage(errorMessage)\r\n        }\r\n\r\n        if (!errorMessage) {\r\n            onChangeFormState(parsedData);\r\n        }\r\n        onCompareData(JSON.stringify(parsedData) === JSON.stringify(formData));\r\n    };\r\n\r\n    const comparePreviewAdaptive = (windowWidth <= 1250) && !isMobile;\r\n\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            title={'Setting value edit'}\r\n            onClose={() => {\r\n                onShowResult(false);\r\n                onCompareData(true);\r\n                setShowDescriptionEdit(false);\r\n                onClose();\r\n            }}\r\n            footer={showResult}\r\n            successText=\"Save\"\r\n            width={windowWidth * 0.4}\r\n            extraDialogClassName={isJson ? 'modal-height-limited' : ''}\r\n            onSuccess={() => {\r\n                onSubmit();\r\n                setShowDescriptionEdit(false);\r\n                onClose();\r\n            }}\r\n        >\r\n            <S.StyledForm\r\n                ref={ref => formRef = ref}\r\n                isMobile={isMobile}\r\n                model={!isJson ? editSchemaNotJson : null}\r\n                formDefaultValue={{...dataObj}}\r\n                onChange={(value) => {\r\n                    const formData = valueKey === 's_as_integer'\r\n                        ? Number.parseInt(value[valueKey])\r\n                        : value[valueKey];\r\n                    setDescription(value.description || '');\r\n                    onChangeFormState(formData);\r\n                }}\r\n            >\r\n                <S.StyledKeyValue><S.StyledLabel>Name:</S.StyledLabel><S.StyledValue>{dataObj['name']}</S.StyledValue></S.StyledKeyValue>\r\n                <S.StyledKeyValue><S.StyledLabel>Type:</S.StyledLabel><S.StyledValue>{dataObj['typeStr']}</S.StyledValue></S.StyledKeyValue>\r\n                <S.StyledKeyValue>\r\n                    <S.StyledLabel>Description:</S.StyledLabel>\r\n                    <S.StyledValue>\r\n                        {!showDescriptionEdit\r\n                            ? dataObj['description']\r\n                            : <FormControl\r\n                                accepter={Input}\r\n                                componentClass=\"textarea\"\r\n                                name=\"description\"\r\n                            />\r\n                        }\r\n                    </S.StyledValue>\r\n                    <IconButton\r\n                        style={{marginTop: '-2px'}}\r\n                        appearance=\"link\"\r\n                        size=\"xs\"\r\n                        color={!showDescriptionEdit ? \"\" : \"red\"}\r\n                        onClick={() => {\r\n                            if (showDescriptionEdit) {\r\n                                setDescription(dataObj['description']);\r\n                            }\r\n                            setShowDescriptionEdit(!showDescriptionEdit);\r\n                        }}\r\n                        icon={<Icon\r\n                            icon={!showDescriptionEdit ? \"edit2\" : \"close\"}\r\n                        />}\r\n                    />\r\n                </S.StyledKeyValue>\r\n\r\n                \r\n\r\n                {isJson\r\n                    ? <>\r\n                        {!showResult\r\n                            ? <>\r\n                                <Whisper\r\n                                    open={!!errorMessageState}\r\n                                    preventOverflow\r\n                                    placement=\"topStart\"\r\n                                    trigger=\"none\"\r\n                                    speaker={\r\n                                        <Tooltip>{errorMessageState}</Tooltip>\r\n                                    }\r\n                                >\r\n                                    <SettingsJsonEditor\r\n                                        disabled={true}\r\n                                        editable={true}\r\n                                        json={formState}\r\n                                        onChange={compareAndUpdateFormData}\r\n                                    />\r\n                                </Whisper>\r\n                                <S.StyledButton\r\n                                    color=\"green\"\r\n                                    disabled={comparedData || errorMessageState}\r\n                                    onClick={() => {\r\n                                        onShowResult(true);\r\n                                    }}\r\n                                >\r\n                                    View final result\r\n                                </S.StyledButton>\r\n                                <S.StyledButton\r\n                                    color=\"blue\"\r\n                                    onClick={() => {\r\n                                        onChangeFormState(dataObj[valueKey]);\r\n                                        onChangeErrorMessage(null);\r\n                                        onCompareData(true)\r\n                                    }}\r\n                                >\r\n                                    Reset to default\r\n                                </S.StyledButton>\r\n                            </>\r\n                            : <>\r\n                                <S.StyledButton\r\n                                    className=\"continue\"\r\n                                    onClick={() => {\r\n                                        onShowResult(false)\r\n                                    }}\r\n                                >\r\n                                    Continue editing\r\n                                </S.StyledButton>\r\n                                <S.StyledCompare\r\n                                    isMobile={comparePreviewAdaptive}\r\n                                >\r\n                                    <div>\r\n                                        <S.StyledLabel>Old json</S.StyledLabel>\r\n                                        <pre style={{marginTop: 24 }}>\r\n                                            {JSON.stringify(formData, null, 2)}\r\n                                        </pre>\r\n                                    </div>\r\n                                    <div>\r\n                                        <S.StyledLabel>New json</S.StyledLabel>\r\n                                        <pre style={{marginTop: 24 }}>\r\n                                            {formState && JSON.stringify(formState, null, 2)}\r\n                                        </pre>\r\n                                    </div>\r\n                                </S.StyledCompare>\r\n                            </>\r\n                        }\r\n                    </>\r\n                    : <>\r\n                        { valueKey === 's_as_integer' && <FormControl\r\n                            name={valueKey}\r\n                            className={'settings_input_not_json'}\r\n                        />}\r\n                        {valueKey === 's_as_string' && dataObj.name !== \"contacts_text\" ?\r\n                            <FieldTextArea\r\n                                name={valueKey}\r\n                                defaultValue={formData}\r\n                                onChange={(value) => {\r\n                                    onChangeFormState(value.target.value)\r\n                                }}\r\n                                width={windowWidth}\r\n                            />\r\n                            : <SettingsContactEditor\r\n                                defaultValue={formData}\r\n                                onChange={(value) => {\r\n                                    onChangeFormState(value)\r\n                                }}\r\n                            />\r\n                        }\r\n                    </>\r\n                }\r\n            </S.StyledForm>\r\n        </Modal>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default SettingsEditModal;\r\n","import React from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport {Button, Form} from 'rsuite/es';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport FormGroup from 'rsuite/es/FormGroup';\r\n\r\n\r\nimport {Table} from 'rsuite';\r\nimport ControlLabel from 'rsuite/es/ControlLabel';\r\nimport SettingsEditModal from 'pages/Settings/SettingsEditModal';\r\nimport SettingsJsonEditor from 'pages/Settings/SettingsJsonEditor';\r\n\r\n\r\nconst {Cell} = Table;\r\n\r\nexport const FieldTextArea = ({name, label, type, data, ...props}) => (\r\n    <Group>\r\n        {label &&\r\n        <LabelWrapper>\r\n            <Label>{label}</Label>\r\n        </LabelWrapper>\r\n        }\r\n        <div className=\"rs-form-control-wrapper\">\r\n            <FieldTextAreaAutoResize\r\n                className=\"rs-input\"\r\n                name={name}\r\n                {...props}\r\n            />\r\n        </div>\r\n    </Group>\r\n);\r\n\r\n// Responsive\r\nexport const StyledForm = styled(Form)`\r\n  & .react-json-view .variable-value {\r\n    //background-color: magenta !important;\r\n     width: ${props => {\r\n    //     console.log('CSS:props', props);\r\n    //     return `${props.windowWidth}px`\r\n    }}\r\n`;\r\nexport const StyledCompare = styled.div`\r\n  margin-top: 10px;\r\n  ${props => !props.isMobile ? css`\r\n    display: flex;\r\n    justify-content: space-between;\r\n  ` : ''}\r\n  \r\n  & > div {\r\n    display: ${props => props.isMobile ? 'block' : 'inline-block'}\r\n  }\r\n  // & {\r\n     \r\n  // }\r\n\r\n`;//${props => (!props.isMobile ? scss`display: flex;justify-content: space-between; flex-direction: row` : '')\r\nexport const FieldTextAreaAutoResize = styled(TextareaAutosize)`\r\n    &&& {\r\n        min-width: 100%;\r\n        min-height: 100% !important;\r\n        width: ${props => {\r\n            return props.width ? `${(props.width * 0.35 - 40)}px` : '100%'\r\n        }};\r\n        @media (max-width: 768px) {\r\n            width: ${props => {\r\n                return props.width ? `${(props.width - 40)}px` : '100%'\r\n            }};\r\n        }\r\n        overflow: hidden;\r\n        resize: none;\r\n    } \r\n    &.rs-input {\r\n      max-height: 100%;\r\n    }\r\n`;\r\n\r\nexport const Group = styled(FormGroup)`\r\n    margin-bottom: 15px;\r\n    \r\n    @media (min-width: 768px) {\r\n        align-items: center;\r\n        display: flex;\r\n    }\r\n`;\r\n\r\nexport const LabelWrapper = styled.div`\r\n    flex-shrink: 0;\r\n    width: 160px;\r\n    \r\n    ${props => props.vAlign &&\r\n    css`\r\n            align-self: ${props.vAlign};\r\n        `\r\n}\r\n    ${props => props.top &&\r\n    css`\r\n            margin-top: ${props.top}px;\r\n        `\r\n}\r\n`;\r\n\r\nexport const Label = styled(ControlLabel)`\r\n    flex-shrink: 0;\r\n    font-weight: 600;\r\n    padding-right: 20px;\r\n    text-align: left;\r\n    width: auto;\r\n\r\n    .rtl & {\r\n        padding-left: 20px;\r\n        padding-right: 0;\r\n        text-align: right;\r\n    }\r\n    \r\n    && {\r\n        \r\n        @media (min-width: 768px) {\r\n            margin-bottom: 0;\r\n        }\r\n    }\r\n`;\r\nexport const StyledEditButton = styled(Button)`\r\n  width: 100%;\r\n    \r\n  &.rs-btn-disabled {\r\n    background-color: #cdcdcd !important;\r\n  }\r\n`;\r\nexport const StyledButton = styled(Button)`\r\n  margin-top: 20px;\r\n  margin-bottom: 10px;\r\n  width: 100%;\r\n  \r\n  &.continue {\r\n    margin-top: 0;\r\n    background-color: var(--primary);\r\n    color: white;\r\n  }\r\n`;\r\nexport const StyledKeyValue = styled.div`\r\n  & div {\r\n    display: inline-block;\r\n    vertical-align: top;\r\n  }\r\n`;\r\nexport const StyledValue = styled.div`\r\n  margin: 0 10px 20px 10px;\r\n`;\r\nexport const StyledLabel = styled.div`\r\n    margin: 0 0 20px 0;\r\n    font-weight: 800;\r\n`;\r\n\r\nexport const CustomCell = styled(Cell)`\r\n  .duplicates_badge {\r\n    position: absolute;\r\n    top: 14px;\r\n    left: 5px;\r\n  }\r\n`;\r\n","import React, {memo, useState, useMemo} from 'react';\r\nimport {Icon, Table} from 'rsuite';\r\nimport * as S from './styled';\r\nimport SettingsEditModal from 'pages/Settings/SettingsEditModal';\r\nimport {isObject} from 'utils/helpers';\r\nimport {SCREEN_MEDIA} from 'const';\r\nimport BaseTable from \"../../components/base/BaseTable\";\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\nconst settingTypes = [\r\n    {name: 'Number', type: 0},\r\n    {name: 'Text', type: 1},\r\n    {name: 'JSON Object', type: 2}\r\n];\r\n\r\nconst getDataKey = (type) => {\r\n    return {\r\n        0: \"s_as_integer\",\r\n        1: \"s_as_string\",\r\n        2: \"s_as_json\"\r\n    }[type]\r\n};\r\n\r\nexport default memo(({\r\n    dataList = [],\r\n    onEditItem,\r\n    loading,\r\n    windowWidth,\r\n    getList,\r\n}) => {\r\n\r\n    const isMobile = useMemo(() => windowWidth <= SCREEN_MEDIA.md.min, [windowWidth]);\r\n    const [editModalData, onChangeEditData] = useState({});\r\n\r\n    return (\r\n        <>\r\n            <BaseTable\r\n                virtualized\r\n                className=\"tableFilters\"\r\n                data={dataList}\r\n                loading={loading}\r\n                headerHeight={47}\r\n                rowHeight={46}\r\n                autoHeight\r\n            >\r\n\r\n                <Column flexGrow={2} minWidth={130} align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">Name</span>\r\n                    </HeaderCell>\r\n                    <S.CustomCell dataKey={\"name\"}>\r\n                        {(rowData) => (\r\n                            <span className=\"tableFilters__previewText\">{rowData[\"name\"]}</span>\r\n                        )}\r\n                    </S.CustomCell>\r\n                </Column>\r\n\r\n                <Column flexGrow={1} minWidth={130} align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"tableFilters__headerText\">Type</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"type\"}>\r\n                        {(rowData) => {\r\n                            let typeName = null;\r\n\r\n                            if (!rowData[\"type\"]) {\r\n                                const comingValues = [0, 1, 2]\r\n                                    .map(type => rowData[getDataKey(type)])\r\n                                    .filter(value => !!value);\r\n\r\n                                typeName = comingValues.length\r\n                                    ? settingTypes.find(item => item.type === comingValues.indexOf(comingValues[0]))[\"name\"]\r\n                                    : null;\r\n\r\n                            } else {\r\n                                typeName = settingTypes.find(item => item.type === rowData[\"type\"])[\"name\"]\r\n                            }\r\n                            return (\r\n                                <span className=\"tableFilters__previewText\">{typeName}</span>\r\n                            );\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow={3} minWidth={130} className=\"access_list_exclusion__column\" align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"access_list_exclusion__header_text\">Description</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"description\"}>\r\n                        {({description}) => (\r\n                            <span className=\"tableFilters__previewText\">{description}</span>\r\n                        )}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow={3} minWidth={130} className=\"access_list_exclusion__column\" align=\"center\">\r\n                    <HeaderCell>\r\n                        <span className=\"access_list_exclusion__header_text\">Value</span>\r\n                    </HeaderCell>\r\n                    <Cell dataKey={\"sde_name\"}>\r\n                        {(rowData) => {\r\n                            const key = getDataKey(rowData[\"type\"]);\r\n                            let value = rowData[key] ? rowData[key] : null;\r\n\r\n                            if (!value && value !== 0) {\r\n\r\n                                const comingValues = [0, 1, 2]\r\n                                    .map(type => rowData[getDataKey(type)])\r\n                                    .filter(value => !!value);\r\n\r\n                                value = comingValues.length\r\n                                    ? comingValues[0]\r\n                                    : null;\r\n                            }\r\n                            return (!isObject(value)\r\n                                ? <span className=\"tableFilters__previewText\">{value}</span>\r\n                                : <>It is a JSON Object</>)\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n                <Column flexGrow={1} width={174}>\r\n                    <HeaderCell></HeaderCell>\r\n                    <Cell>\r\n                        {rowData => {\r\n                            const key = getDataKey(rowData[\"type\"]);\r\n\r\n                            return (<div className=\"tableFilters_buttons\">\r\n                                <S.StyledEditButton\r\n                                    color=\"lightblue\"\r\n                                    disabled={rowData['type'] === null}\r\n                                    onClick={() => {\r\n                                        onChangeEditData({...rowData, key, typeStr: settingTypes.find(st => st.type === rowData['type']).name})\r\n                                    }}>\r\n                                    {isMobile ? '': 'Edit '}<Icon icon=\"edit2\"/>\r\n                                </S.StyledEditButton>\r\n                            </div>)\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n            </BaseTable>\r\n\r\n            <SettingsEditModal\r\n                show={editModalData && Object.keys(editModalData).length}\r\n                dataObj={editModalData}\r\n                valueKey={editModalData && editModalData['key']}\r\n                isJson={isObject(editModalData) && editModalData['s_as_json']}\r\n                onEditItem={onEditItem}\r\n                isMobile={isMobile}\r\n                windowWidth={windowWidth}\r\n                getList={getList}\r\n                onClose={() => onChangeEditData({})}\r\n            />\r\n        </>\r\n    )\r\n});","import {api} from '../api/loginRoutes';\r\nimport {createAction} from './defaults';\r\nimport {GLOBAL_SETTING_SET_LOADING, GLOBAL_SETTING_SET_LIST} from './actionTypes';\r\nimport {\r\n    GLOBAL_SETTING_GET_LIST_API, GLOBAL_SETTING_CREATE_API, GLOBAL_SETTING_MODIFY_API} from '../const/apiMethods';\r\n\r\nconst setLoading = createAction(GLOBAL_SETTING_SET_LOADING);\r\nconst setSettingList = createAction(GLOBAL_SETTING_SET_LIST);\r\n\r\nexport const getSettingList = () => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n\r\n    api(GLOBAL_SETTING_GET_LIST_API, {})\r\n        .then((response) => {\r\n            dispatch(setSettingList({...response}));\r\n        })\r\n        .finally(() => dispatch(setLoading(false)));\r\n};\r\n\r\nexport const onEditSettingItem = (data) => async (dispatch) => {\r\n    return await api(GLOBAL_SETTING_MODIFY_API, {...data})\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport PageHeader from '../../components/base/PageHeader';\r\nimport {connect} from 'react-redux';\r\nimport PanelLayout from '../../components/base/PanelLayout';\r\nimport SettingTable from 'pages/Settings/SettingsTable';\r\nimport {getSettingList, onEditSettingItem} from 'actions/global_setting';\r\nimport './Settings.css'\r\nimport {useWindowWidth} from 'hooks';\r\n\r\n\r\nconst SIMTrafficRangesPage = ({ loading, settingList, getSettingList, onEditSettingItem}) => {\r\n    useEffect(() => {\r\n        getSettingList()\r\n    }, []);\r\n    const windowWidth = useWindowWidth();\r\n\r\n    return (\r\n        <PanelLayout>\r\n            <PageHeader title=\"Settings\"/>\r\n            <SettingTable\r\n                windowWidth={windowWidth}\r\n                getList={getSettingList}\r\n                dataList={settingList}\r\n                onEditItem={onEditSettingItem}\r\n                loading={loading}\r\n            />\r\n        </PanelLayout>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({global_setting}) => ({\r\n    settingList: global_setting.list,\r\n    loading: global_setting.loading\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getSettingList,\r\n    onEditSettingItem\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SIMTrafficRangesPage);\r\n\r\n","import React from 'react';\r\nimport Modal from \"../../components/Modal\";\r\n\r\nexport default ({\r\n    show,\r\n    data,\r\n    onClose,\r\n    onSubmit,\r\n    disabled,\r\n    title\r\n}) => {\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                show={show}\r\n                footer\r\n                data={data}\r\n                disabled={disabled}\r\n                onSuccess={onSubmit}\r\n                onClose={onClose}\r\n                successText={\"Ok\"}\r\n                title={title}\r\n            >\r\n                <p>Be careful, this setting will replace the default values for quarantine</p>\r\n            </Modal>\r\n        </>\r\n    )\r\n};","import React from 'react';\r\nimport Modal from \"../../components/Modal\";\r\n\r\nexport default ({\r\n    show,\r\n    data,\r\n    onClose,\r\n    onSubmit,\r\n    disabled,\r\n}) => {\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                show={show}\r\n                footer\r\n                data={data}\r\n                disabled = {disabled}\r\n                onSuccess={onSubmit}\r\n                onClose={onClose}\r\n                successText={\"Delete\"}\r\n                title={\"Remove special term\"}\r\n            >\r\n                <p>Are you sure about that?</p>\r\n            </Modal>\r\n        </>\r\n    )\r\n};","import React, {useEffect, useState, useMemo} from \"react\";\r\nimport {Button, FormControl, Icon, InputNumber, Schema, SelectPicker, Table, Form} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport ModalSettingSubmitApprove from \"./ModalSettingSubmitApprove\";\r\nimport ModalSettingRemove from \"./ModalSettingRemove\";\r\nimport BaseTable from \"../../components/base/BaseTable\";\r\n\r\nconst {Cell, Column, HeaderCell} = Table;\r\nconst {NumberType} = Schema.Types;\r\n\r\nconst formModelPeriodTraffic = Schema.Model({\r\n    period_traffic: NumberType()\r\n        .isRequired('Required')\r\n        .addRule((value) => value > 0, 'The number must be greater then 0'),\r\n});\r\n\r\nconst formModelPeriodAllocation = Schema.Model({\r\n    period_allocation: NumberType()\r\n        .isRequired('Required')\r\n        .addRule((value) => value > 0, 'The number must be greater then 0'),\r\n});\r\n\r\nconst formModelPeriodAutoRevoke = Schema.Model({\r\n    period_autorevoke: NumberType()\r\n        .isRequired('Required')\r\n        .addRule((value) => value > 0, 'The number must be greater then 0'),\r\n});\r\n\r\nconst idKey = 'prqs_key';\r\n\r\nexport default ({\r\n    data = [],\r\n    loading,\r\n    filter,\r\n    worldzoneList,\r\n    destinationList,\r\n    subdestinationList,\r\n    getPriceRangeQuarantineSettingList,\r\n    modifyPriceRangeQuarantineSetting,\r\n    removePriceRangeQuarantineSetting,\r\n    ...props\r\n}) => {\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                flexGrow: 2,\r\n                dataKey: 'wz_key',\r\n                dataValue: 'wz_name',\r\n                label: 'Zone',\r\n\r\n                // field props\r\n                placeholder: 'Zone',\r\n                data: worldzoneList,\r\n                valueKey: \"wz_key\",\r\n                labelKey: \"name\",\r\n                accepter: SelectPicker,\r\n            },\r\n            {\r\n                flexGrow: 2,\r\n                dataKey: 'de_key',\r\n                dataValue: 'de_name',\r\n                label: 'Destination',\r\n\r\n                // field props\r\n                placeholder: 'Destination',\r\n                data: destinationList,\r\n                valueKey: \"de_key\",\r\n                labelKey: \"name\",\r\n                accepter: SelectPicker,\r\n            },\r\n            {\r\n                flexGrow: 2,\r\n                dataKey: 'sde_key',\r\n                dataValue: 'sde_name',\r\n                label: 'Subdestination',\r\n\r\n                // field props\r\n                placeholder: 'Subdestination',\r\n                data: subdestinationList,\r\n                valueKey: \"sde_key\",\r\n                labelKey: \"name\",\r\n                accepter: SelectPicker,\r\n            },\r\n            {\r\n                flexGrow: 1,\r\n                dataKey: 'period_traffic',\r\n                label: 'From last call',\r\n                model: formModelPeriodTraffic,\r\n\r\n                // field props\r\n                placeholder: 'From last call ',\r\n                min: 0.01,\r\n                max: Infinity,\r\n                accepter: InputNumber,\r\n            },\r\n            {\r\n                flexGrow: 1,\r\n                dataKey: 'period_allocation',\r\n                label: 'From allocation',\r\n                model: formModelPeriodAllocation,\r\n\r\n                // field props\r\n                placeholder: 'From allocation',\r\n                min: 0.01,\r\n                max: Infinity,\r\n                accepter: InputNumber,\r\n            },\r\n            {\r\n                flexGrow: 1,\r\n                dataKey: 'period_autorevoke',\r\n                label: 'Autorevoke period',\r\n                model: formModelPeriodAutoRevoke,\r\n\r\n                // field props\r\n                placeholder: 'Autorevoke period',\r\n                min: 0.01,\r\n                max: Infinity,\r\n                accepter: InputNumber,\r\n            }\r\n        ]\r\n    }, [worldzoneList, destinationList, subdestinationList]);\r\n\r\n    const refs = new Map();\r\n\r\n    const [editedRows, setEditedRows] = useState(new Map());\r\n    const [rowsLoading, setRowsLoading] = useState([]);\r\n\r\n    const [modalRemoveData, setModalRemoveData] = useState(null);\r\n    const [showRemoveModal, setShowRemoveModal] = useState(false);\r\n    const [removeDataLoading, setRemoveDataLoading] = useState(null);\r\n\r\n    const [modalApproveData, setModalApproveData] = useState(false);\r\n    const [showModalApprove, setShowModalApprove] = useState(false);\r\n    const [modalApproveLoading, setModalApproveLoading] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const editedRowsCopy = new Map(editedRows);\r\n        const rowsLoadingCopy = new Set(rowsLoading);\r\n        for (const editedRowData of editedRows) {\r\n            const rowData = data.find(item => item[idKey] === editedRowData[0]);\r\n            if (rowData && JSON.stringify(rowData) !== JSON.stringify(editedRowData[1])) {\r\n                editedRowsCopy.delete(rowData[idKey]);\r\n                rowsLoadingCopy.delete(rowData[idKey]);\r\n            }\r\n        }\r\n        setEditedRows(editedRowsCopy);\r\n        setRowsLoading(Array.from(rowsLoadingCopy));\r\n    }, [data]);\r\n\r\n\r\n    const modifyRow = async (rowData) => {\r\n\r\n        // check form\r\n        const rowForms = refs.get(rowData[idKey]);\r\n        for ( const form of Object.keys(rowForms) ) {\r\n            if (!rowForms[form].check()) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        // get params\r\n        const params = Object.keys(rowForms)\r\n            .reduce( (sum, current) => (\r\n                {...sum, [current]: rowForms[current].getFormValue()[current]}\r\n            ), {[idKey]: rowData[idKey]} );\r\n\r\n        // check differences\r\n        const hasDifferences = Object.keys(params)\r\n            .reduce( (sum, current) => {\r\n                if (sum === true)\r\n                    return sum;\r\n                const value = ( rowData[current] !== null && !isNaN(rowData[current]) )\r\n                    ? +params[current]\r\n                    : params[current];\r\n                return rowData[current] !== value;\r\n            }, false );\r\n\r\n        if (!hasDifferences) {\r\n            setRowEditing(rowData, false);\r\n            setRowLoading(rowData, false);\r\n            return;\r\n        }\r\n\r\n        // Approve modal\r\n        if (!params.wz_key && !params.de_key && !params.sde_key) {\r\n            setShowModalApprove(true);\r\n            setModalApproveData(params);\r\n            return;\r\n        }\r\n\r\n        // approve modal with text and condition and on submit, remove loading when open. BaseModal is hear\r\n        // optimize refs array. share callbacks (row edit loading) in function except calss component\r\n        setRowLoading(rowData, true);\r\n        const res = await modifyPriceRangeQuarantineSetting(params);\r\n        if (!res) {\r\n            setRowLoading(rowData, false);\r\n            return;\r\n        }\r\n\r\n        getPriceRangeQuarantineSettingList(filter);\r\n    };\r\n\r\n\r\n    const onApprovedSubmit = async () => {\r\n        setModalApproveLoading(true);\r\n        await modifyPriceRangeQuarantineSetting(modalApproveData);\r\n        getPriceRangeQuarantineSettingList(filter);\r\n        setModalApproveLoading(false);\r\n        setShowModalApprove(false);\r\n    };\r\n\r\n\r\n    const deleteRow = async () => {\r\n        setRemoveDataLoading(true);\r\n        const res = await removePriceRangeQuarantineSetting(modalRemoveData[idKey]);\r\n        if (res) {\r\n            await getPriceRangeQuarantineSettingList(filter);\r\n            setRemoveDataLoading(false);\r\n            setShowRemoveModal(false);\r\n            setModalRemoveData(null);\r\n        }\r\n    };\r\n\r\n\r\n    const setRowEditing = (rowData, status) => {\r\n        const editedRowsCopy = new Map(editedRows);\r\n        if ( editedRows.has(rowData[idKey]) && !status) {\r\n            editedRowsCopy.delete(rowData[idKey]);\r\n        } else if (!editedRows.has(rowData[idKey] && status)) {\r\n            editedRowsCopy.set(rowData[idKey], rowData)\r\n        }\r\n        setEditedRows(editedRowsCopy);\r\n    };\r\n\r\n\r\n    const setRowLoading = (rowData, status) => {\r\n        if (!status) {\r\n            setRowsLoading( rowsLoading.filter(item => item !== rowData[idKey]) );\r\n            return;\r\n        }\r\n        setRowsLoading([...rowsLoading, rowData[idKey]]);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <StyledTable\r\n                className={'tableFilters'}\r\n                shouldUpdateScroll={false}\r\n                headerHeight={46}\r\n                rowHeight={46}\r\n                autoHeight\r\n                {...{\r\n                    data,\r\n                    loading\r\n                }}\r\n                {...props}\r\n            >\r\n\r\n                {columns.map( ({dataKey, dataValue, flexGrow = null, minWidth = 130, model, label = \"\", type, ...fieldProps}) => (\r\n                    <Column {...{flexGrow, minWidth}}>\r\n                        <HeaderCell>\r\n                            <span className=\"tableFilters__headerText\">{label}</span>\r\n                        </HeaderCell>\r\n                        <Cell {...{dataKey}}>\r\n                            {(rowData) => {\r\n                                if ( editedRows.has(rowData[idKey]) ) {\r\n                                    return (\r\n                                        <Form\r\n                                            ref={ref => {\r\n                                                if (ref) {\r\n                                                    if (refs.has(rowData[idKey])) {\r\n                                                        const currentRefsCopy = refs.get(rowData[idKey]);\r\n                                                        refs.set(rowData[idKey], {\r\n                                                            ...currentRefsCopy,\r\n                                                            [dataKey]: ref\r\n                                                        });\r\n                                                        return;\r\n                                                    }\r\n                                                    refs.set(rowData[idKey], {[dataKey]: ref});\r\n                                                }\r\n                                            }}\r\n                                            model={model}\r\n                                            formDefaultValue={{[dataKey]: rowData[dataKey]}}\r\n                                        >\r\n                                            <EditField\r\n                                                name={dataKey}\r\n                                                {...fieldProps}\r\n                                            />\r\n                                        </Form>\r\n                                    );\r\n                                }\r\n\r\n                                return <span className=\"tableFilters__previewText\">{rowData[dataValue || dataKey]}</span>\r\n                            }}\r\n                        </Cell>\r\n                    </Column>\r\n                ))}\r\n\r\n                <Column width={174}>\r\n                    <HeaderCell></HeaderCell>\r\n                    <Cell>\r\n                        {rowData => {\r\n                            const rowLoading = rowsLoading.includes(rowData[idKey]);\r\n                            return <div className=\"tableFilters_buttons\">\r\n\r\n                                {!editedRows.has(rowData[idKey])\r\n                                    ? <Button\r\n                                        size=\"sm\"\r\n                                        color=\"lightblue\"\r\n                                        disabled={rowLoading}\r\n                                        onClick={() => setRowEditing(rowData, true)}\r\n                                    >\r\n                                        <Icon icon=\"edit2\"/>\r\n                                    </Button>\r\n                                    : <>\r\n                                        <Button\r\n                                            size=\"sm\"\r\n                                            color=\"green\"\r\n                                            disabled={rowLoading}\r\n                                            onClick={() => modifyRow(rowData)}\r\n                                        >\r\n                                            <Icon icon=\"check-circle\"/>\r\n                                        </Button>\r\n\r\n                                        <Button\r\n                                            size=\"sm\"\r\n                                            color=\"red\"\r\n                                            disabled={rowLoading}\r\n                                            onClick={() => setRowEditing(rowData, false)}\r\n                                        >\r\n                                            <Icon icon=\"close-circle\"/>\r\n                                        </Button>\r\n                                    </>\r\n                                }\r\n\r\n                                <Button\r\n                                    size=\"sm\"\r\n                                    color=\"red\"\r\n                                    disabled={rowLoading}\r\n                                    onClick={() => {\r\n                                        setModalRemoveData(rowData);\r\n                                        setShowRemoveModal(true);\r\n                                    }}\r\n                                >\r\n                                    <Icon icon=\"trash2\"/>\r\n                                </Button>\r\n                            </div>\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n            </StyledTable>\r\n\r\n            <ModalSettingRemove\r\n                show={showRemoveModal}\r\n                onSubmit={deleteRow}\r\n                onClose={() => setShowRemoveModal(false)}\r\n                disabled={removeDataLoading}\r\n            />\r\n\r\n            <ModalSettingSubmitApprove\r\n                show={showModalApprove}\r\n                onSubmit={onApprovedSubmit}\r\n                onClose={() => setShowModalApprove(false)}\r\n                disabled={modalApproveLoading}\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst StyledTable = styled(BaseTable)`\r\n    && {\r\n    \r\n        .tableFilters__previewText {\r\n            display: block;\r\n            line-height: 20px;\r\n            margin-top: 7px;\r\n            word-break: normal;\r\n        }\r\n        \r\n        .tableFilters_buttons {\r\n            height: 20px;\r\n            margin-top: 7px;\r\n        }\r\n    }\r\n`;\r\n\r\nconst EditField = styled(FormControl).attrs(() => ({\r\n    className: \"tableFilters_field\",\r\n    errorPlacement: \"topEnd\",\r\n    type: \"text\",\r\n    cleanable: true,\r\n    searchable: true,\r\n}))`\r\n`;\r\n\r\n","import React, {useRef, useState} from \"react\";\r\nimport {Button, Form, FormControl, InputNumber, Schema, SelectPicker} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport Icon from \"rsuite/es/Icon\";\r\nimport ModalSettingSubmitApprove from \"./ModalSettingSubmitApprove\";\r\n\r\nconst {NumberType} = Schema.Types;\r\n\r\nconst formModel = Schema.Model({\r\n    period_traffic: NumberType()\r\n        .isRequired('Required')\r\n        .addRule((value) => value > 0, 'The number must be greater then 0'),\r\n    period_allocation: NumberType()\r\n        .isRequired('Required')\r\n        .addRule((value) => value > 0, 'The number must be greater then 0'),\r\n    period_autorevoke: NumberType()\r\n        .isRequired('Required')\r\n        .addRule((value) => value > 0, 'The number must be greater then 0'),\r\n});\r\n\r\nexport default ({\r\n    filter,\r\n    worldzoneList,\r\n    destinationList,\r\n    subdestinationList,\r\n    onSubmit,\r\n    getPriceRangeQuarantineSettingList,\r\n}) => {\r\n\r\n    const formRef = useRef(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [modalApproveData, setModalApproveData] = useState(false);\r\n    const [showModalApprove, setShowModalApprove] = useState(false);\r\n    const [modalApproveLoading, setModalApproveLoading] = useState(null);\r\n\r\n    const handleSubmit = () => {\r\n        if (!formRef.current.check())\r\n            return;\r\n\r\n        const formValue = formRef.current.getFormValue();\r\n        formValue.period_traffic = +formValue.period_traffic;\r\n        formValue.period_allocation = +formValue.period_allocation;\r\n        formValue.period_autorevoke = +formValue.period_autorevoke;\r\n\r\n        // Approve modal\r\n        if (!formValue.wz_key && !formValue.de_key && !formValue.sde_key) {\r\n            setShowModalApprove(true);\r\n            setModalApproveData(formValue);\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        onSubmit(formValue)\r\n            .then(res => {\r\n                setLoading(false);\r\n                if (res) {\r\n                    getPriceRangeQuarantineSettingList(filter)\r\n                }\r\n            });\r\n    };\r\n\r\n    const onApprovedSubmit = async () => {\r\n        setModalApproveLoading(true);\r\n        await onSubmit(modalApproveData);\r\n        getPriceRangeQuarantineSettingList(filter);\r\n        setModalApproveLoading(false);\r\n        setShowModalApprove(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <StyledForm\r\n                ref={formRef}\r\n                model={formModel}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                <StyledFieldWrapper grow={2}>\r\n                    <StyledField\r\n                        accepter={SelectPicker}\r\n                        name=\"wz_key\"\r\n                        className=\"tableFilters_field\"\r\n                        errorPlacement=\"topEnd\"\r\n                        data={worldzoneList}\r\n                        placeholder=\"Zone\"\r\n                        valueKey=\"wz_key\"\r\n                        labelKey=\"name\"\r\n                        type=\"text\"\r\n                    />\r\n                </StyledFieldWrapper>\r\n\r\n                <StyledFieldWrapper grow={2}>\r\n                    <StyledField\r\n                        accepter={SelectPicker}\r\n                        name=\"de_key\"\r\n                        className=\"tableFilters_field\"\r\n                        errorPlacement=\"topEnd\"\r\n                        data={destinationList}\r\n                        placeholder=\"Destination\"\r\n                        valueKey=\"de_key\"\r\n                        labelKey=\"name\"\r\n                        type=\"text\"\r\n                    />\r\n                </StyledFieldWrapper>\r\n\r\n                <StyledFieldWrapper grow={2}>\r\n                    <StyledField\r\n                        name=\"sde_key\"\r\n                        className=\"tableFilters_field\"\r\n                        errorPlacement=\"topEnd\"\r\n                        accepter={SelectPicker}\r\n                        data={subdestinationList}\r\n                        placeholder=\"Subdestination\"\r\n                        valueKey=\"sde_key\"\r\n                        labelKey=\"name\"\r\n                        type=\"text\"\r\n                    />\r\n                </StyledFieldWrapper>\r\n\r\n                <StyledFieldWrapper>\r\n                    <StyledField\r\n                        name=\"period_traffic\"\r\n                        min={0.01}\r\n                        max={Infinity}\r\n                        accepter={InputNumber}\r\n                        placeholder=\"From last call\"\r\n                    />\r\n                </StyledFieldWrapper>\r\n\r\n                <StyledFieldWrapper>\r\n                    <StyledField\r\n                        name=\"period_allocation\"\r\n                        min={0.01}\r\n                        max={Infinity}\r\n                        accepter={InputNumber}\r\n                        placeholder=\"From allocation\"\r\n                    />\r\n                </StyledFieldWrapper>\r\n\r\n                <StyledFieldWrapper>\r\n                    <StyledField\r\n                        name=\"period_autorevoke\"\r\n                        min={0.01}\r\n                        max={Infinity}\r\n                        accepter={InputNumber}\r\n                        placeholder=\"Autorevoke period\"\r\n                    />\r\n                </StyledFieldWrapper>\r\n\r\n                <StyledSubmitWrapper>\r\n                    <Button\r\n                        className=\"tableFilters_submit\"\r\n                        color=\"green\"\r\n                        type=\"submit\"\r\n                        loading={loading}\r\n                    >\r\n                        <Icon icon=\"plus\"/>\r\n                    </Button>\r\n                </StyledSubmitWrapper>\r\n            </StyledForm>\r\n\r\n            <ModalSettingSubmitApprove\r\n                show={showModalApprove}\r\n                onSubmit={onApprovedSubmit}\r\n                onClose={() => setShowModalApprove(false)}\r\n                disabled={modalApproveLoading}\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nconst StyledField = styled(FormControl).attrs(props => ({\r\n    className: \"tableFilters_field\",\r\n    errorPlacement: \"topEnd\",\r\n    placement: \"autoVerticalStart\",\r\n    type: \"text\",\r\n    cleanable: true,\r\n    searchable: true,\r\n}))`\r\n`;\r\n\r\nconst StyledFieldWrapper = styled.div`\r\n    flex-grow: ${props => props.grow || '0'};\r\n    flex-shrink: 0;\r\n    flex-basis: 200px;\r\n    padding: 5px 10px;\r\n    width: 174px;\r\n`;\r\nconst StyledSubmitWrapper = styled.div`\r\n    padding: 5px 10px;\r\n    width: 174px;\r\n`;\r\n\r\nconst StyledForm = styled(Form)`\r\n    display: flex;\r\n`;","import React, {useRef} from \"react\";\r\nimport {Form, SelectPicker, Schema, FormControl} from \"rsuite\";\r\nimport {FlexGrid, FlexGridItem} from \"../../components/base/FlexGrid\";\r\nimport {debounce} from \"lodash\";\r\nimport Text from \"../../components/Form/Text\";\r\nimport CustomField from \"../../components/Form/CustomField\";\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\nconst formModel = Schema.Model({\r\n    str: StringType()\r\n        .pattern(/^[0-9][\\d]*$/, 'The number must contain only digits')\r\n        .minLength(6, 'The minimum is 6 characters.')\r\n        .maxLength(40, \"The maximum is 15 characters\"),\r\n});\r\n\r\n\r\nexport default ({\r\n    filter = {},\r\n    onChangeFilter,\r\n    worldzoneList,\r\n    destinationList,\r\n    subdestinationList,\r\n}) => {\r\n\r\n    const formRef = useRef(null);\r\n\r\n    const handleChange = debounce( (value) => {\r\n        if ( !formRef.current.check() )\r\n            return;\r\n        onChangeFilter(value);\r\n    }, 500);\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                ref={formRef}\r\n                model={formModel}\r\n                defaultFormValue={filter}\r\n                onChange={handleChange}\r\n            >\r\n                <FlexGrid align=\"middle\">\r\n                    <FlexGridItem>\r\n                            <CustomField\r\n                                accepter={SelectPicker}\r\n                                width={200}\r\n                                name=\"wz_key\"\r\n                                className=\"tableFilters_field\"\r\n                                errorPlacement=\"topEnd\"\r\n                                data={worldzoneList}\r\n                                placeholder=\"Zone\"\r\n                                valueKey=\"wz_key\"\r\n                                labelKey=\"name\"\r\n                                type=\"text\"\r\n                            />\r\n                    </FlexGridItem>\r\n                    <FlexGridItem>\r\n                            <CustomField\r\n                                accepter={SelectPicker}\r\n                                width={200}\r\n                                name=\"de_key\"\r\n                                className=\"tableFilters_field\"\r\n                                errorPlacement=\"topEnd\"\r\n                                data={destinationList}\r\n                                placeholder=\"Destination\"\r\n                                valueKey=\"de_key\"\r\n                                labelKey=\"name\"\r\n                                type=\"text\"\r\n                            />\r\n                    </FlexGridItem>\r\n                    <FlexGridItem>\r\n                            <CustomField\r\n                                width={200}\r\n                                name=\"sde_key\"\r\n                                className=\"tableFilters_field\"\r\n                                errorPlacement=\"topEnd\"\r\n                                accepter={SelectPicker}\r\n                                data={subdestinationList}\r\n                                placeholder=\"Subdestination\"\r\n                                valueKey=\"sde_key\"\r\n                                labelKey=\"name\"\r\n                                type=\"text\"\r\n                            />\r\n                    </FlexGridItem>\r\n                </FlexGrid>\r\n            </Form>\r\n        </>\r\n    )\r\n};","import {\r\n    PRICE_RANGE_QUARANTINE_SETTING_LOADING,\r\n    PRICE_RANGE_QUARANTINE_SETTING_LIST,\r\n} from \"../const\";\r\n\r\nimport {\r\n    PRICE_RANGE_QUARANTINE_SETTING_GET_LIST_API,\r\n    PRICE_RANGE_QUARANTINE_SETTING_CREATE_API,\r\n    PRICE_RANGE_QUARANTINE_SETTING_MODIFY_API,\r\n    PRICE_RANGE_QUARANTINE_SETTING_REMOVE_API,\r\n} from \"../const/apiMethods\";\r\n\r\nimport {createAction} from './defaults';\r\nimport {api} from \"../api/loginRoutes\";\r\n\r\nconst setPriceRangeQuarantineSettingList = createAction(PRICE_RANGE_QUARANTINE_SETTING_LIST);\r\nconst setPriceRangeQuarantineSettingLoading = createAction(PRICE_RANGE_QUARANTINE_SETTING_LOADING);\r\n\r\n\r\n// get list\r\nexport const getPriceRangeQuarantineSettingList = (filter = {}) => async (dispatch) => {\r\n    dispatch( setPriceRangeQuarantineSettingLoading(true) );\r\n\r\n    await api(PRICE_RANGE_QUARANTINE_SETTING_GET_LIST_API, {filter})\r\n        .then((response) => {\r\n            if (response && response.price_range_quarantine_setting) {\r\n\r\n                dispatch( setPriceRangeQuarantineSettingList({\r\n                    list: response.price_range_quarantine_setting || [],\r\n                }) );\r\n\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch( setPriceRangeQuarantineSettingLoading(false) );\r\n        })\r\n};\r\n\r\nexport const createPriceRangeQuarantineSetting = (data) => async () => {\r\n    const params = {target: {}, ...data};\r\n    const response = await api(PRICE_RANGE_QUARANTINE_SETTING_CREATE_API, {...params});\r\n    return response;\r\n};\r\n\r\nexport const modifyPriceRangeQuarantineSetting = (params) => async () => {\r\n    const response = await api(PRICE_RANGE_QUARANTINE_SETTING_MODIFY_API, {\r\n        ...params,\r\n        period_traffic: +params.period_traffic,\r\n        period_allocation: +params.period_allocation,\r\n        period_autorevoke: +params.period_autorevoke\r\n    });\r\n    return response;\r\n};\r\n\r\nexport const removePriceRangeQuarantineSetting = (prqs_key) => async () => {\r\n    const response = await api(PRICE_RANGE_QUARANTINE_SETTING_REMOVE_API, {prqs_key});\r\n    return response;\r\n};\r\n\r\n","import {connect} from \"react-redux\";\r\nimport PriceRangeQuarantineSetting from \"./PriceRangeQuarantineSetting\";\r\nimport {\r\n    createPriceRangeQuarantineSetting,\r\n    getPriceRangeQuarantineSettingList,\r\n    modifyPriceRangeQuarantineSetting,\r\n    removePriceRangeQuarantineSetting\r\n} from \"../../actions/special_limit_terms\";\r\n\r\nconst mapStateToProps = ({special_limit_terms, references}) => ({\r\n    data: special_limit_terms.list,\r\n    loading: special_limit_terms.loading,\r\n    worldzoneList: references.worldzone_list,\r\n    destinationList: references.destination_list,\r\n    subdestinationList: references.subdestination_list,\r\n    globalSettings: references.global_setting,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getPriceRangeQuarantineSettingList,\r\n    createPriceRangeQuarantineSetting,\r\n    modifyPriceRangeQuarantineSetting,\r\n    removePriceRangeQuarantineSetting\r\n})(PriceRangeQuarantineSetting);","import React, {useEffect, useState} from \"react\";\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\nimport PageHeader from \"../../components/base/PageHeader\";\r\nimport PriceRangeQuarantineSettingTable from \"./PriceRangeQuarantineSettingTable\";\r\nimport PriceRangeQuarantineSettingCreateForm from \"./PriceRangeQuarantineSettingCreateForm\";\r\nimport {FlexboxGrid} from \"rsuite\";\r\nimport PriceRangeQuarantineSettingFilter from \"./PriceRangeQuarantineSettingFilter\";\r\n\r\nexport default ({\r\n    data,\r\n    loading,\r\n    worldzoneList,\r\n    destinationList,\r\n    subdestinationList,\r\n    globalSettings = {},\r\n    getPriceRangeQuarantineSettingList,\r\n    createPriceRangeQuarantineSetting,\r\n    modifyPriceRangeQuarantineSetting,\r\n    removePriceRangeQuarantineSetting,\r\n}) => {\r\n\r\n    const [filter, onChangeFilter] = useState({});\r\n\r\n    useEffect(() => {\r\n        getPriceRangeQuarantineSettingList(filter);\r\n    }, [filter]);\r\n\r\n    useEffect(() => {\r\n        getPriceRangeQuarantineSettingList();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <PanelLayout>\r\n            <PageHeader title=\"Special Quarantine Terms\"/>\r\n\r\n            <p>\r\n                Default values for quarantine are <b>{globalSettings.google_quarantine_period_allocation}</b> hour after allocation\r\n                and <b>{globalSettings.google_quarantine_period_traffic}</b> hours after last call to 10k group.\r\n            </p>\r\n\r\n            <FlexboxGrid>\r\n                <FlexboxGrid.Item style={{marginTop: '30px'}}>\r\n                    <PriceRangeQuarantineSettingFilter\r\n                        {...{\r\n                            filter,\r\n                            onChangeFilter,\r\n                            worldzoneList,\r\n                            destinationList,\r\n                            subdestinationList,\r\n                        }}\r\n                    />\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n\r\n            <PriceRangeQuarantineSettingTable\r\n                {...{\r\n                    data,\r\n                    loading,\r\n                    worldzoneList,\r\n                    destinationList,\r\n                    subdestinationList,\r\n                    filter,\r\n\r\n                    getPriceRangeQuarantineSettingList,\r\n                    modifyPriceRangeQuarantineSetting,\r\n                    removePriceRangeQuarantineSetting,\r\n                }}\r\n            />\r\n\r\n            <PriceRangeQuarantineSettingCreateForm\r\n                onSubmit={createPriceRangeQuarantineSetting}\r\n                {...{\r\n                    filter,\r\n                    worldzoneList,\r\n                    destinationList,\r\n                    subdestinationList,\r\n                    getPriceRangeQuarantineSettingList,\r\n                }}\r\n            />\r\n        </PanelLayout>\r\n    )\r\n};","import React from 'react';\r\nimport Modal from \"../../components/Modal\";\r\n\r\nexport default ({\r\n                    show,\r\n                    data,\r\n                    onClose,\r\n                    onSubmit,\r\n                    disabled,\r\n                    title\r\n                }) => {\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                show={show}\r\n                footer\r\n                data={data}\r\n                disabled={disabled}\r\n                onSuccess={onSubmit}\r\n                onClose={onClose}\r\n                successText={\"Ok\"}\r\n                title={title}\r\n            >\r\n                <p>Are you sure you want reject this registration request?</p>\r\n            </Modal>\r\n        </>\r\n    )\r\n};","export default {\r\n    // customer fields\r\n    name: {\r\n        name: 'name',\r\n        label: 'Name',\r\n        labelId: 'name'\r\n    },\r\n    skype: {\r\n        name: 'skype',\r\n        label: 'Skype',\r\n        labelId: 'skype'\r\n    },\r\n    email: {\r\n        name: 'email',\r\n        label: 'Email',\r\n        labelId: 'email'\r\n    },\r\n    cntr_code: {\r\n        name: 'cntr_code',\r\n        type: 'select_cntr_code',\r\n        label: 'Country',\r\n        labelId: 'cntr_code'\r\n    },\r\n    comment: {\r\n        name: 'comment',\r\n        type: 'select_comment',\r\n        label: 'How did you find us',\r\n        labelId: 'comment'\r\n    },\r\n    month_traffic_minute: {\r\n        name: 'month_traffic_minute',\r\n        type: 'integer',\r\n        label: 'Monthly traffic (minutes)',\r\n        labelId: 'month_traffic_minute'\r\n    },\r\n    cur_key: {\r\n        name: 'cur_key',\r\n        type: 'select_cur_key',\r\n        label: 'Currency',\r\n        labelId: 'cur_key'\r\n    },\r\n    traffic_type: {\r\n        name: 'traffic_type',\r\n        type: 'select_traffic_type',\r\n        label: 'Traffic type',\r\n        labelId: 'traffic_type'\r\n    },\r\n}\r\n\r\nexport const selectableFields = {\r\n    select_comment: [\r\n        {\r\n            name: 'Facebook groups',\r\n            id: 'Facebook groups'\r\n        },\r\n        {\r\n            name: 'Google search',\r\n            id: 'Google search'\r\n        },\r\n        {\r\n            name: 'Friend',\r\n            id: 'Friend'\r\n        },\r\n        {\r\n            name: 'Other',\r\n            id: 'Other'\r\n        },\r\n    ],\r\n    select_traffic_type: [\r\n        {\r\n            name: 'Single CLI',\r\n            id: 0\r\n        },\r\n        {\r\n            name: 'Multiple CLI\\'s',\r\n            id: 1\r\n        }\r\n    ]\r\n}\r\n\r\nexport const registrationFormFields = [\r\n    'name',\r\n    'skype',\r\n    'email',\r\n    'cntr_code',\r\n    'comment',\r\n    'month_traffic_minute',\r\n    'cur_key',\r\n    'traffic_type',\r\n];","import React, {useEffect, useState} from 'react'\r\nimport {Button, Icon, Table} from 'rsuite'\r\nimport styled from 'styled-components'\r\nimport ModalRejectRegistration from './ModalRejectRegistration'\r\n\r\nimport {selectableFields} from '../Login/RegistrationFormFields'\r\nimport {\r\n    REGISTRATION_REQUEST_STATUS_APPROVED,\r\n    REGISTRATION_REQUEST_STATUS_REJECTED,\r\n    REGISTRATION_REQUEST_STATUS_SENT\r\n} from '../../const'\r\nimport {Link} from 'react-router-dom'\r\nimport BaseTable from '../../components/base/BaseTable'\r\n\r\nconst {Cell, Column, HeaderCell} = Table;\r\n\r\nexport default ({\r\n                    dataList,\r\n                    filter,\r\n                    currencyList,\r\n                    getRegistrationList,\r\n                    setDefaultFormCreateAccount,\r\n                    rejectRegistration,\r\n                    onSetRedirectTab\r\n                }) => {\r\n\r\n    const [dataListState, onChangeDataList] = useState(dataList);\r\n    const allRequestStatusList = [\r\n        REGISTRATION_REQUEST_STATUS_SENT,\r\n        REGISTRATION_REQUEST_STATUS_APPROVED,\r\n        REGISTRATION_REQUEST_STATUS_REJECTED\r\n    ];\r\n\r\n    useEffect(() => {\r\n        if (!filter)\r\n            onChangeDataList(dataList)\r\n\r\n        if (!filter.processed) {\r\n            onChangeDataList(dataList.filter(value => value.status === REGISTRATION_REQUEST_STATUS_SENT))\r\n        } else if (filter.processed) {\r\n            onChangeDataList(dataList.filter(value => allRequestStatusList.includes(value.status)))\r\n        }\r\n    }, [dataList, filter.processed])\r\n\r\n    const columns = [\r\n        {\r\n            flexGrow: 2,\r\n            label: 'Name',\r\n            value: ({name}) => {\r\n                return <span>{name}</span>\r\n            }\r\n        },\r\n        {\r\n            flexGrow: 3,\r\n            label: 'Contacts',\r\n            value: ({email, skype}) => {\r\n                return <span>\r\n                    {getColumnKeyValueString({email: email, skype: skype})}\r\n                </span>\r\n            }\r\n        },\r\n        {\r\n            flexGrow: 4,\r\n            label: 'Detail',\r\n            value: ({cntr_code, cur_key, month_traffic_minute, traffic_type, comment}) => {\r\n                let currencyName = cur_key;\r\n                if (cur_key) {\r\n                    const dataListValue = currencyList.find(value => value['cur_key'] === cur_key);\r\n                    currencyName = dataListValue && dataListValue.name;\r\n                }\r\n\r\n                let trafficTypeValue = traffic_type;\r\n                if (traffic_type !== null && traffic_type.toString()) {\r\n                    const dataListValue = selectableFields['select_traffic_type'].find(value => {\r\n                        return value.id === trafficTypeValue\r\n                    });\r\n                    trafficTypeValue = dataListValue && dataListValue.name;\r\n                }\r\n                return <span>\r\n                    {getColumnKeyValueString({country: cntr_code, currency: currencyName, \"monthly traffic\": month_traffic_minute, \"traffic type\": trafficTypeValue, \"how found\": comment})}\r\n                </span>\r\n            }\r\n        },\r\n        {\r\n            flexGrow: 3,\r\n            label: 'Comment',\r\n            value: ({account_name, rejected_at, rejected_manager_name, account_id}) => {\r\n                const existingLink = `/accounts/view/${account_id}`;\r\n                const linkedAccountName = account_name ? <Link to={existingLink} onClick={() => {onSetRedirectTab(\"general\")}}>{account_name}</Link> : null;\r\n                const rejectedDate = new Date(rejected_at);\r\n                const day = fillZeroDateValue(rejectedDate.getDate());\r\n                const month = fillZeroDateValue(rejectedDate.getMonth() + 1);\r\n                const year = fillZeroDateValue(rejectedDate.getFullYear() - 2000);\r\n                const hours = fillZeroDateValue(rejectedDate.getHours());\r\n                const minutes = fillZeroDateValue(rejectedDate.getMinutes());\r\n                const dateFormat = rejected_at ? `${day}/${month}/${year} ${hours}:${minutes}` : null;\r\n\r\n                return <span>\r\n                    {getColumnKeyValueString(\r\n                        {\r\n                            \"Email already exist in\": linkedAccountName,\r\n                            \"rejected at\": dateFormat,\r\n                            \"manager\": rejected_manager_name}\r\n                        )}\r\n                </span>\r\n            }\r\n        }\r\n    ];\r\n\r\n    const [showRejectModal, setShowRejectModal] = useState(false);\r\n    // const [showExtended, onShowExtended] = useState({});\r\n\r\n    const fillZeroDateValue = (date) => {\r\n        if (date.toString().length === 1) {\r\n            return `0${date}`;\r\n        }\r\n        return date;\r\n    };\r\n\r\n    // const getColumnKeyValueExtendable = (key, keyValueObj, notExtendedLength) => {\r\n    //     const notExtendedString = Object.keys(keyValueObj).reduce((result, keyValue) => {\r\n    //         const value = keyValueObj[keyValue];\r\n    //         if (value) {\r\n    //             if (result.length !== 0) {\r\n    //                 if (result.length + (keyValue.length + value.length) < notExtendedLength) {\r\n    //                     const string = `${keyValue}: ${value}`.slice(0, notExtendedLength);\r\n    //                     result = <>{result}, <span><b>{string.slice(0, keyValue.length)}</b>{string.slice(keyValue.length, string.length)}</span></>\r\n    //                 }\r\n    //             } else {\r\n    //                 const string = `${keyValue}: ${value}`.slice(0, notExtendedLength);\r\n    //                 result = <span><b>{string.slice(0, keyValue.length)}</b>{string.slice(keyValue.length, string.length)}</span>\r\n    //             }\r\n    //         }\r\n    //         return result\r\n    //     }, '');\r\n    //     const extendedColumn = <StyledKeyValueColumn>\r\n    //         <BackButton\r\n    //             appearance=\"ghost\"\r\n    //             componentClass={Link}\r\n    //             onClick={() => {\r\n    //                 onShowExtended({...showExtended, [key]: false})\r\n    //             }}\r\n    //         >\r\n    //             <Icon icon=\"arrow-left-line\"/>\r\n    //         </BackButton>\r\n    //         {Object.keys(keyValueObj).map((key) => {\r\n    //             if (keyValueObj[key]) {\r\n    //                 return <StyledColumnItem><b>{key}</b>: {keyValueObj[key]}</StyledColumnItem>\r\n    //             }\r\n    //         })}\r\n    //     </StyledKeyValueColumn>;\r\n    //     const neededToExtend = Object.keys(keyValueObj).reduce((result, key) => {\r\n    //         if (keyValueObj[key]) {\r\n    //             result = result + (keyValueObj[key] ? (key.length + keyValueObj[key].length) : 0);\r\n    //         }\r\n    //         return result;\r\n    //     }, 0);\r\n    //     const notExtendedColumn = <StyledNotExtendedColumn>\r\n    //         {notExtendedString}\r\n    //         {neededToExtend > notExtendedLength && <Link to=\"#\" onClick={() => {\r\n    //             onShowExtended({...showExtended, [key]: true})\r\n    //         }}>\r\n    //             ...\r\n    //         </Link>}\r\n    //     </StyledNotExtendedColumn>;\r\n    //\r\n    //     if (showExtended[key]) {\r\n    //         return <>\r\n    //             {extendedColumn}\r\n    //         </>\r\n    //     } else {\r\n    //         return <>\r\n    //             {notExtendedColumn}\r\n    //         </>\r\n    //     }\r\n    //\r\n    // };\r\n\r\n    const getColumnKeyValueString = (keyValueObj) => {\r\n        return <StyledKeyValueColumn>\r\n            {Object.keys(keyValueObj).map((key) => {\r\n                if (keyValueObj[key]) {\r\n                    return <StyledColumnItem><b>{key}</b>: {keyValueObj[key]}</StyledColumnItem>\r\n                }\r\n            })}\r\n        </StyledKeyValueColumn>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <StyledTable\r\n                className=\"registration\"\r\n                shouldUpdateScroll={false}\r\n                headerHeight={46}\r\n                rowHeight={46}\r\n                autoHeight\r\n                rowClassName={(rowData) => {\r\n                    if (rowData) {\r\n                        let rowClassName = \"registration_column sent\";\r\n\r\n                        if (rowData.status === REGISTRATION_REQUEST_STATUS_APPROVED) {\r\n                            rowClassName = \"registration_column approved\";\r\n                        } else if (rowData.status === REGISTRATION_REQUEST_STATUS_REJECTED) {\r\n                            rowClassName = \"registration_column rejected\";\r\n                        }\r\n\r\n                        return rowClassName;\r\n                    }\r\n                }}\r\n                data={dataListState}\r\n            >\r\n                {columns.map(({\r\n                    dataKey, dataValue, flexGrow = null, minWidth = 130, label = \"\", data, accepter, valueKey, type,\r\n                    date, tooltip, value, ...columnProps\r\n                }) => {\r\n                    return (<Column {...{flexGrow, minWidth, ...columnProps}}>\r\n                            <HeaderCell>\r\n                                <span className=\"registration_text_field\">{label}</span>\r\n                            </HeaderCell>\r\n                            <Cell {...{dataKey}}>\r\n                                {value}\r\n                            </Cell>\r\n                        </Column>\r\n                    )}\r\n                )}\r\n                <Column width={90}>\r\n                    <HeaderCell></HeaderCell>\r\n                    <Cell>\r\n                        {(rowData) => {\r\n                            let requestAction = <div className=\"registration_buttons_field\">\r\n                                <Link to=\"/accounts/new\">\r\n                                    <Button\r\n                                        disabled={\r\n                                            rowData.status!==REGISTRATION_REQUEST_STATUS_SENT ||\r\n                                            rowData.account_id && rowData.status === REGISTRATION_REQUEST_STATUS_APPROVED ||\r\n                                            !!rowData.account_id\r\n                                        }\r\n                                        className=\"registration_button approve\"\r\n                                        color=\"green\"\r\n                                        onClick={() => {\r\n                                            setDefaultFormCreateAccount({\r\n                                                name: rowData.name,\r\n                                                email: rowData.email,\r\n                                                skype: rowData.skype,\r\n                                                cur_key: rowData.cur_key,\r\n                                                reg_key: rowData.reg_key\r\n                                            })\r\n                                        }}\r\n                                    >\r\n                                        <Icon icon=\"plus-square\"/>\r\n                                    </Button>\r\n                                </Link>\r\n                                <Button\r\n                                    disabled={rowData.status!==REGISTRATION_REQUEST_STATUS_SENT}\r\n                                    className=\"registration_button reject\"\r\n                                    color=\"red\"\r\n                                    onClick={() => {setShowRejectModal(rowData['reg_key'])}}\r\n                                >\r\n                                    <Icon icon=\"warning\"/>\r\n                                </Button>\r\n                            </div>;\r\n\r\n                            return requestAction\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n            </StyledTable>\r\n            <ModalRejectRegistration\r\n                show={showRejectModal}\r\n                onSubmit={() => {\r\n                    rejectRegistration({reg_key: showRejectModal}).then(() => {\r\n                        setShowRejectModal(null);\r\n                        getRegistrationList()\r\n                    });\r\n                }}\r\n                onClose={() => setShowRejectModal(null)}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nconst StyledTable = styled(BaseTable)`\r\n    && {\r\n        .registration_button {\r\n            width: 30px;\r\n            height: 30px;\r\n            padding: 5px;\r\n        }\r\n        .registration_text_field {\r\n            display: block;\r\n            line-height: 20px;\r\n            margin-top: 7px;\r\n            word-break: normal;\r\n        }\r\n        \r\n        .registration_column.approved .rs-table-cell {\r\n            background-color: #dfffdf;\r\n        }\r\n        .registration_column.rejected .rs-table-cell {\r\n            background-color: #e2e2e2;\r\n        }\r\n        .registration_buttons_field {\r\n            display: flex;\r\n            flex-direction: row;\r\n            justify-content: space-between;\r\n        }\r\n        .created_account_link {\r\n            width: 100%;\r\n            display: flex;\r\n            justify-content: space-between;\r\n        }\r\n        .existing_account_buttons_field {\r\n            width: 100%;\r\n            display: flex;\r\n            justify-content: space-between;\r\n        }\r\n        .rs-table-cell-content {\r\n            padding: 6px 10px;\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: center;\r\n        }\r\n    }\r\n`;\r\nconst StyledKeyValueColumn = styled.div`\r\n    line-break: auto;\r\n    line-height: 20px;\r\n    display: block;\r\n`;\r\nconst StyledColumnItem = styled.span`\r\n    display: block;\r\n    margin-right: 15px;\r\n    float: left;\r\n`;\r\n// const StyledNotExtendedColumn = styled.div`\r\n// `;\r\n// const BackButton = styled(Button)`\r\n//     display: block !important;\r\n//     position: absolute !important;\r\n//     width: 30px;\r\n//     height: 30px;\r\n//     padding: 4px 5px !important;\r\n//     right: 0;\r\n//     top: 8px;\r\n// `;","import React, {useRef} from \"react\";\r\nimport {FlexGrid, FlexGridItem} from \"../../components/base/FlexGrid\";\r\nimport {debounce} from \"lodash\";\r\nimport Checkbox from 'rsuite/es/Checkbox'\r\n\r\n\r\n\r\nexport default ({\r\n    filter,\r\n    onChangeFilter\r\n}) => {\r\n    return (\r\n        <>\r\n            <FlexGrid align=\"middle\">\r\n                <FlexGridItem>\r\n                    <Checkbox\r\n                        name=\"processed\"\r\n                        onChange={(_, checked) => {onChangeFilter({processed: checked})}}\r\n                        defaultChecked={filter.processed}\r\n                    >\r\n                        Show processed\r\n                    </Checkbox>\r\n                </FlexGridItem>\r\n            </FlexGrid>\r\n        </>\r\n    )\r\n};","import {connect} from \"react-redux\";\r\nimport {\r\n    getAccounts,\r\n    setDefaultFormCreateAccount,\r\n    onSetRedirectTab\r\n} from '../../actions/accounts';\r\nimport {\r\n    getRegistrationList,\r\n    approveRegistration,\r\n    rejectRegistration\r\n} from \"../../actions/registration\";\r\nimport RegistrationRequestsPage from './RegistrationRequestsPage'\r\n\r\nconst mapState = ({accounts, registration, references}) => ({\r\n    registrationList: registration.registration_list,\r\n    currencyList: references.currency_list,\r\n    countryList: references.country_list,\r\n    accountList: accounts.items\r\n});\r\n\r\nexport default connect(mapState, {\r\n    getAccounts,\r\n    getRegistrationList,\r\n    approveRegistration,\r\n    rejectRegistration,\r\n    setDefaultFormCreateAccount,\r\n    onSetRedirectTab\r\n})(RegistrationRequestsPage);","import React, {useEffect, useState} from \"react\";\r\nimport PageHeader from \"../../components/base/PageHeader\";\r\n\r\nimport RegistrationRequestsTable from './RegistrationRequestsTable'\r\nimport RegistrationRequestsFilter from './RegistrationRequestsFilter'\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\n\r\n\r\nexport default ({\r\n    accountList,\r\n    getAccounts,\r\n    countryList,\r\n    currencyList,\r\n    onSetRedirectTab,\r\n    registrationList,\r\n    getRegistrationList,\r\n    approveRegistration,\r\n    rejectRegistration,\r\n    setDefaultFormCreateAccount\r\n}) => {\r\n\r\n    useEffect(() => {\r\n        getAccounts();\r\n        getRegistrationList()\r\n    }, []);\r\n\r\n    const [filterState, onChangeFilter] = useState({processed: false});\r\n\r\n    return (\r\n        <>\r\n            <PanelLayout>\r\n                <PageHeader title=\"Registration requests\"/>\r\n                <RegistrationRequestsFilter\r\n                    filter={filterState}\r\n                    onChangeFilter={onChangeFilter}\r\n                />\r\n                <RegistrationRequestsTable\r\n                    dataList={registrationList}\r\n                    {...{\r\n                        filter: filterState,\r\n                        accountList,\r\n                        countryList,\r\n                        currencyList,\r\n                        onSetRedirectTab,\r\n                        getRegistrationList,\r\n                        approveRegistration,\r\n                        rejectRegistration,\r\n                        setDefaultFormCreateAccount\r\n                    }}\r\n                />\r\n            </PanelLayout>\r\n        </>\r\n    )\r\n};","import React from 'react';\r\nimport Modal from \"../../components/Modal\";\r\n\r\nexport default ({\r\n    show,\r\n    data,\r\n    onClose,\r\n    onSubmit,\r\n    disabled,\r\n}) => {\r\n    return (\r\n        <>\r\n            <Modal\r\n                show={show}\r\n                footer\r\n                data={data}\r\n                disabled = {disabled}\r\n                onSuccess={onSubmit}\r\n                onClose={onClose}\r\n                successText={\"Delete\"}\r\n                title={\"Remove Google OTP allocation subdestination\"}\r\n            >\r\n                <p>Are you sure about that?</p>\r\n            </Modal>\r\n        </>\r\n    )\r\n};","import React, {useEffect, useState, useMemo} from \"react\";\r\nimport {Button, FormControl, Icon, InputNumber, Schema, Table, Form} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport BaseTable from \"../../components/base/BaseTable\";\r\nimport {countDecimals} from '../../utils'\r\nimport ModalGoogleOtpAllocationRemove from './ModalGoogleOtpAllocationRemove'\r\n\r\nconst {Cell, Column, HeaderCell} = Table;\r\nconst {NumberType} = Schema.Types;\r\n\r\nconst formModel = Schema.Model({\r\n    range_numbers_default: NumberType()\r\n        .isRequired('Required')\r\n        .addRule((value) => value > 0, 'The number must be greater then 0')\r\n        .addRule((value) => value % 1 === 0, 'The number must be integer')\r\n        .addRule((value, formValues) => {\r\n            const currentValue =  Number.parseInt(value);\r\n            const compareValue = formValues.range_numbers_max ? Number.parseInt(formValues.range_numbers_max) : null;\r\n\r\n            return currentValue <= compareValue;\r\n        }, 'The default number must be lesser than default'),\r\n    range_numbers_max: NumberType()\r\n        .isRequired('Required')\r\n        .addRule((value) => value > 0, 'The number must be greater then 0')\r\n        .addRule((value) => value % 1 === 0, 'The number must be integer')\r\n        .addRule((value, formValues) => {\r\n            const currentValue =  Number.parseInt(value);\r\n            const compareValue = formValues.range_numbers_default ? Number.parseInt(formValues.range_numbers_default) : null;\r\n\r\n            return  currentValue >= compareValue\r\n        }, 'The max number must be greater than default'),\r\n    autorevoke_hours: NumberType()\r\n        .isRequired('Required')\r\n        .addRule((value) => value > 0, 'The number must be greater then 0')\r\n        .addRule((value) => countDecimals(value) <= 1, 'This non-integer number must have maximum of one decimal')\r\n});\r\n\r\nconst idKey = 'oa_key';\r\n\r\nexport default ({\r\n        data = [],\r\n        loading,\r\n        filter,\r\n        subdestinationList,\r\n        getGoogleOtpAllocationList,\r\n        modifyGoogleOtpAllocation,\r\n        removeGoogleOtpAllocation,\r\n        ...props\r\n    }) => {\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                flexGrow: 2,\r\n                dataKey: 'sde_key',\r\n                dataValue: 'sde_name',\r\n                label: 'Subdestination',\r\n                editable: false\r\n            },\r\n            {\r\n                flexGrow: 1,\r\n                dataKey: 'range_numbers_default',\r\n                label: 'Range number default',\r\n                model: formModel,\r\n\r\n                // field props\r\n                placeholder: 'Range number default',\r\n                min: 0,\r\n                max: 1000,\r\n                accepter: InputNumber,\r\n            },\r\n            {\r\n                flexGrow: 1,\r\n                dataKey: 'range_numbers_max',\r\n                label: 'Range number maximum',\r\n                model: formModel,\r\n\r\n                // field props\r\n                placeholder: 'Range number maximum',\r\n                min: 0,\r\n                max: 1000,\r\n                accepter: InputNumber,\r\n            },\r\n            {\r\n                flexGrow: 1,\r\n                dataKey: 'autorevoke_hours',\r\n                label: 'Autorevoke hours',\r\n                model: formModel,\r\n\r\n                // field props\r\n                placeholder: 'Autorevoke hours',\r\n                min: 0.01,\r\n                max: 1000,\r\n                accepter: InputNumber,\r\n            }\r\n        ]\r\n    }, [subdestinationList]);\r\n\r\n    const refs = new Map();\r\n\r\n    const [editedRows, setEditedRows] = useState(new Map());\r\n    const [rowsLoading, setRowsLoading] = useState([]);\r\n\r\n    const [modalRemoveData, setModalRemoveData] = useState(null);\r\n    const [showRemoveModal, setShowRemoveModal] = useState(false);\r\n    const [removeDataLoading, setRemoveDataLoading] = useState(null);\r\n\r\n    const [formErrorState, onChangeFormError] = useState({});\r\n    const [formValueState, onChangeFormValue] = useState({});\r\n    \r\n    useEffect(() => {\r\n        const editedRowsCopy = new Map(editedRows);\r\n        const rowsLoadingCopy = new Set(rowsLoading);\r\n        for (const editedRowData of editedRows) {\r\n            const rowData = data.find(item => item[idKey] === editedRowData[0]);\r\n            if (rowData && JSON.stringify(rowData) !== JSON.stringify(editedRowData[1])) {\r\n                editedRowsCopy.delete(rowData[idKey]);\r\n                rowsLoadingCopy.delete(rowData[idKey]);\r\n            }\r\n        }\r\n        setEditedRows(editedRowsCopy);\r\n        setRowsLoading(Array.from(rowsLoadingCopy));\r\n        data.sort((item) => {\r\n            if (item.sde_key === null) {\r\n                return -1\r\n            } else {\r\n                return 1\r\n            }\r\n        });\r\n    }, [data]);\r\n\r\n\r\n    const modifyRow = async (rowData) => {\r\n        // check form\r\n        const rowForms = refs.get(rowData[idKey]);\r\n        for ( const form of Object.keys(rowForms) ) {\r\n            if (!rowForms[form].check()) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        // get params\r\n        const params = Object.keys(rowForms)\r\n            .reduce( (sum, current) => (\r\n                {...sum, [current]: rowForms[current].getFormValue()[current]}\r\n            ), {[idKey]: rowData[idKey]} );\r\n\r\n        // check differences\r\n        const hasDifferences = Object.keys(params)\r\n            .reduce( (sum, current) => {\r\n                if (sum === true)\r\n                    return sum;\r\n                const value = ( rowData[current] !== null && !isNaN(rowData[current]) )\r\n                    ? +params[current]\r\n                    : params[current];\r\n                return rowData[current] !== value;\r\n            }, false );\r\n\r\n        setRowLoading(rowData, true);\r\n        if (hasDifferences) {\r\n            params.range_numbers_default = +params.range_numbers_default;\r\n            params.range_numbers_max = +params.range_numbers_max;\r\n            params.autorevoke_hours = +params.autorevoke_hours;\r\n        } else {\r\n            setRowEditing(rowData, false);\r\n            setRowLoading(rowData, false);\r\n            return;\r\n        }\r\n\r\n        const res = await modifyGoogleOtpAllocation(params);\r\n        if (!res) {\r\n            setRowLoading(rowData, false);\r\n            return;\r\n        }\r\n\r\n        getGoogleOtpAllocationList(filter);\r\n    };\r\n\r\n\r\n    const deleteRow = async () => {\r\n        setRemoveDataLoading(true);\r\n        const res = await removeGoogleOtpAllocation(modalRemoveData[idKey]);\r\n        if (res) {\r\n            await getGoogleOtpAllocationList(filter);\r\n            setRemoveDataLoading(false);\r\n        }\r\n    };\r\n\r\n    const setRowEditing = (rowData, status) => {\r\n        const editedRowsCopy = new Map(editedRows);\r\n\r\n        if ( editedRows.has(rowData[idKey]) && !status) {\r\n            editedRowsCopy.delete(rowData[idKey]);\r\n        } else if (!editedRows.has(rowData[idKey] && status)) {\r\n            editedRowsCopy.set(rowData[idKey], rowData)\r\n        }\r\n        setEditedRows(editedRowsCopy);\r\n    };\r\n\r\n\r\n    const setRowLoading = (rowData, status) => {\r\n        if (!status) {\r\n            setRowsLoading( rowsLoading.filter(item => item !== rowData[idKey]) );\r\n            return;\r\n        }\r\n        setRowsLoading([...rowsLoading, rowData[idKey]]);\r\n    };\r\n\r\n    const updateFormErrorState = (value) => {\r\n        const checkedFormData = formModel.check(value);\r\n        const existErrorData = {\r\n            ...formErrorState,\r\n            ...Object.keys(checkedFormData).reduce((result, dataKey) => {\r\n                if (checkedFormData[dataKey].hasError && value.hasOwnProperty(dataKey)) {\r\n                    result[dataKey] = checkedFormData[dataKey].errorMessage\r\n                } else {\r\n                    result[dataKey] = null\r\n                }\r\n                return result\r\n            }, formErrorState)\r\n        }\r\n\r\n        onChangeFormError(existErrorData)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <StyledTable\r\n                className={'tableFilters'}\r\n                shouldUpdateScroll={false}\r\n                headerHeight={46}\r\n                rowHeight={46}\r\n                autoHeight\r\n                {...{\r\n                    data,\r\n                    loading\r\n                }}\r\n                {...props}\r\n            >\r\n                {columns.map(({dataKey, dataValue, flexGrow = null, minWidth = 130, model, label = \"\", type, value, editable = true, ...fieldProps}) => (\r\n                    <Column {...{flexGrow, minWidth}}>\r\n                        <HeaderCell>\r\n                            <span className=\"tableFilters__headerText\">{label}</span>\r\n                        </HeaderCell>\r\n                        <Cell {...{dataKey}}>\r\n                            {(rowData) => {\r\n                                if (editedRows.has(rowData[idKey]) && editable) {\r\n                                    return (\r\n                                        <Form\r\n                                            ref={ref => {\r\n                                                if (ref) {\r\n                                                    if (refs.has(rowData[idKey])) {\r\n                                                        const currentRefsCopy = refs.get(rowData[idKey]);\r\n                                                        refs.set(rowData[idKey], {\r\n                                                            ...currentRefsCopy,\r\n                                                            [dataKey]: ref\r\n                                                        });\r\n                                                        return;\r\n                                                    }\r\n                                                    refs.set(rowData[idKey], {[dataKey]: ref});\r\n                                                }\r\n                                            }}\r\n                                            formError={formErrorState}\r\n                                            formDefaultValue={{[dataKey]: rowData[dataKey]}}\r\n                                        >\r\n                                            <EditField\r\n                                                name={dataKey}\r\n                                                {...fieldProps}\r\n                                                onChange={(value) => {\r\n                                                    const formValue = {...formValueState, [dataKey]: value};\r\n                                                    updateFormErrorState(formValue);\r\n                                                    onChangeFormValue(formValue);\r\n                                                }}\r\n                                            />\r\n                                        </Form>\r\n                                    );\r\n                                }\r\n\r\n                                return <span className=\"tableFilters__previewText\">{rowData[dataValue || dataKey]}</span>\r\n                            }}\r\n                        </Cell>\r\n                    </Column>\r\n                ))}\r\n\r\n                <Column width={174}>\r\n                    <HeaderCell></HeaderCell>\r\n                    <Cell>\r\n                        {rowData => {\r\n                            const rowLoading = rowsLoading.includes(rowData[idKey]);\r\n                            const defaultItem = rowData.sde_key === null;\r\n\r\n                            return <div className=\"tableFilters_buttons\">\r\n                                {!editedRows.has(rowData[idKey])\r\n                                    ? <Button\r\n                                        size=\"sm\"\r\n                                        color=\"lightblue\"\r\n                                        disabled={rowLoading}\r\n                                        onClick={() => setRowEditing(rowData, true)}\r\n                                    >\r\n                                        <Icon icon=\"edit2\"/>\r\n                                    </Button>\r\n                                    : <>\r\n                                        <Button\r\n                                            size=\"sm\"\r\n                                            color=\"green\"\r\n                                            disabled={rowLoading}\r\n                                            onClick={() => modifyRow(rowData)}\r\n                                        >\r\n                                            <Icon icon=\"check-circle\"/>\r\n                                        </Button>\r\n\r\n                                        <Button\r\n                                            size=\"sm\"\r\n                                            color=\"red\"\r\n                                            disabled={rowLoading}\r\n                                            onClick={() => setRowEditing(rowData, false)}\r\n                                        >\r\n                                            <Icon icon=\"close-circle\"/>\r\n                                        </Button>\r\n                                    </>\r\n                                }\r\n\r\n                                <Button\r\n                                    size=\"sm\"\r\n                                    color=\"red\"\r\n                                    disabled={rowLoading || defaultItem}\r\n                                    onClick={() => {\r\n                                        setModalRemoveData(rowData);\r\n                                        setShowRemoveModal(true);\r\n                                    }}\r\n                                >\r\n                                    <Icon icon=\"trash2\"/>\r\n                                </Button>\r\n                            </div>\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n            </StyledTable>\r\n\r\n            <ModalGoogleOtpAllocationRemove\r\n                show={showRemoveModal}\r\n                onSubmit={async () => {\r\n                    await deleteRow()\r\n                    setShowRemoveModal(false)\r\n                }}\r\n                onClose={() => setShowRemoveModal(false)}\r\n                disabled={removeDataLoading}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nconst StyledTable = styled(BaseTable)`\r\n    && {\r\n    \r\n        .tableFilters__previewText {\r\n            display: block;\r\n            line-height: 20px;\r\n            margin-top: 7px;\r\n            word-break: normal;\r\n        }\r\n        \r\n        .tableFilters_buttons {\r\n            height: 20px;\r\n            margin-top: 7px;\r\n        }\r\n    }\r\n`;\r\n\r\nconst EditField = styled(FormControl).attrs(() => ({\r\n    className: \"tableFilters_field\",\r\n    errorPlacement: \"topEnd\",\r\n    type: \"text\",\r\n    cleanable: true,\r\n    searchable: true,\r\n}))`\r\n`;\r\n","import React, {createRef, useRef, useState} from 'react'\r\nimport {Button, Form, FormControl, InputNumber, Schema, SelectPicker} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport Icon from \"rsuite/es/Icon\";\r\nimport {countDecimals} from '../../utils/helpers';\r\nimport Text from '../../components/Form/Text'\r\n\r\nconst {NumberType} = Schema.Types;\r\n\r\n\r\nconst formModel = Schema.Model({\r\n    sde_key: NumberType()\r\n        .isRequired('Required'),\r\n    range_numbers_default: NumberType()\r\n        .isRequired('Required')\r\n        .addRule((value) => value > 0, 'The number must be greater than 0')\r\n        .addRule((value) => value % 1 === 0, 'The number must be integer')\r\n        .addRule((value, formValues) => {\r\n            const currentValue =  Number.parseInt(value);\r\n            const compareValue = formValues.range_numbers_max ? Number.parseInt(formValues.range_numbers_max) : null;\r\n\r\n            return currentValue <= compareValue;\r\n        }, 'The default number must be lesser than default'),\r\n    range_numbers_max: NumberType()\r\n        .isRequired('Required')\r\n        .addRule((value) => value > 0, 'The number must be greater than 0')\r\n        .addRule((value) => value % 1  === 0, 'The number must be integer')\r\n        .addRule((value, formValues) => {\r\n            const currentValue =  Number.parseInt(value);\r\n            const compareValue = formValues.range_numbers_default ? Number.parseInt(formValues.range_numbers_default) : null;\r\n\r\n            return  currentValue >= compareValue\r\n        }, 'The max number must be greater than default'),\r\n    autorevoke_hours: NumberType()\r\n        .isRequired('Required')\r\n        .addRule((value) => value > 0, 'The number must be greater than 0')\r\n        .addRule((value) => countDecimals(value) <= 1, 'This non-integer number must have maximum of one decimal')\r\n});\r\n\r\nexport default ({\r\n                    filter,\r\n                    subdestinationList,\r\n                    onSubmit,\r\n                    getGoogleOtpAllocationList,\r\n                }) => {\r\n\r\n    const formRef = useRef(null);\r\n    const testRef = useRef(null);\r\n\r\n    const [formErrorState, onChangeFormError] = useState({});\r\n    const [formValueState, onChangeFormValue] = useState({});\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleSubmit = () => {\r\n        if (!formRef.current.check())\r\n            return;\r\n\r\n        const formValue = formRef.current.getFormValue();\r\n        formValue.range_numbers_default = +formValue.range_numbers_default;\r\n        formValue.range_numbers_max = +formValue.range_numbers_max;\r\n        formValue.autorevoke_hours = +formValue.autorevoke_hours;\r\n\r\n        setLoading(true);\r\n        onSubmit(formValue)\r\n            .then(res => {\r\n                setLoading(false);\r\n                if (res) {\r\n                    getGoogleOtpAllocationList(filter)\r\n                }\r\n            });\r\n    };\r\n\r\n    const updateFormErrorState = (value) => {\r\n        const checkedFormData = formModel.check(value);\r\n        const existErrorData = {\r\n            ...formErrorState,\r\n            ...Object.keys(checkedFormData).reduce((result, dataKey) => {\r\n                if (checkedFormData[dataKey].hasError && value.hasOwnProperty(dataKey)) {\r\n                    result[dataKey] = checkedFormData[dataKey].errorMessage\r\n                } else {\r\n                    result[dataKey] = null\r\n                }\r\n                return result\r\n            }, formErrorState)\r\n        }\r\n\r\n        onChangeFormError(existErrorData)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <StyledForm\r\n                ref={formRef}\r\n                formError={formErrorState}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                <StyledFieldWrapper grow={3}>\r\n                    <StyledField\r\n                        name=\"sde_key\"\r\n                        onChange={(value) => {\r\n                            const key = \"sde_key\";\r\n                            const formValue = {...formValueState, [key]: value};\r\n                            updateFormErrorState(formValue);\r\n                            onChangeFormValue(formValue);\r\n                        }}\r\n                        className=\"tableFilters_field\"\r\n                        errorPlacement=\"topEnd\"\r\n                        accepter={SelectPicker}\r\n                        data={subdestinationList}\r\n                        placeholder=\"Subdestination\"\r\n                        valueKey=\"sde_key\"\r\n                        labelKey=\"name\"\r\n                        type=\"text\"\r\n                    />\r\n                </StyledFieldWrapper>\r\n\r\n                <StyledFieldWrapper grow={2}>\r\n                    <StyledField\r\n                        name=\"range_numbers_default\"\r\n                        onChange={(value) => {\r\n                            const key = \"range_numbers_default\";\r\n                            const formValue = {...formValueState, [key]: value};\r\n                            updateFormErrorState(formValue);\r\n                            onChangeFormValue(formValue);\r\n                        }}\r\n                        min={0.01}\r\n                        max={1000}\r\n                        accepter={InputNumber}\r\n                        placeholder=\"Range number default\"\r\n                    />\r\n                </StyledFieldWrapper>\r\n\r\n                <StyledFieldWrapper grow={2}>\r\n                    <StyledField\r\n                        name=\"range_numbers_max\"\r\n                        onChange={(value) => {\r\n                            const key = \"range_numbers_max\";\r\n                            const formValue = {...formValueState, [key]: value};\r\n                            updateFormErrorState(formValue);\r\n                            onChangeFormValue(formValue);\r\n                        }}\r\n                        min={0.01}\r\n                        max={1000}\r\n                        accepter={InputNumber}\r\n                        placeholder=\"Range number maximum\"\r\n                    />\r\n                </StyledFieldWrapper>\r\n\r\n                <StyledFieldWrapper grow={2}>\r\n                    <StyledField\r\n                        name=\"autorevoke_hours\"\r\n                        onChange={(value) => {\r\n                            const key = \"autorevoke_hours\";\r\n                            const formValue = {...formValueState, [key]: value};\r\n                            updateFormErrorState(formValue);\r\n                            onChangeFormValue(formValue);\r\n                        }}\r\n                        min={0.01}\r\n                        max={1000}\r\n                        accepter={InputNumber}\r\n                        placeholder=\"Autorevoke hours\"\r\n                    />\r\n                </StyledFieldWrapper>\r\n\r\n                <StyledSubmitWrapper>\r\n                    <Button\r\n                        className=\"tableFilters_submit\"\r\n                        color=\"green\"\r\n                        type=\"submit\"\r\n                        loading={loading}\r\n                    >\r\n                        <Icon icon=\"plus\"/>\r\n                    </Button>\r\n                </StyledSubmitWrapper>\r\n            </StyledForm>\r\n        </>\r\n    )\r\n};\r\n\r\nconst StyledField = styled(FormControl).attrs(props => ({\r\n    className: \"tableFilters_field\",\r\n    errorPlacement: \"topEnd\",\r\n    placement: \"autoVerticalStart\",\r\n    type: \"text\",\r\n    cleanable: true,\r\n    searchable: true,\r\n}))`\r\n`;\r\n\r\nconst StyledFieldWrapper = styled.div`\r\n    flex-grow: ${props => props.grow || '0'};\r\n    flex-shrink: 0;\r\n    flex-basis: 200px;\r\n    padding: 5px 10px;\r\n    width: 174px;\r\n`;\r\nconst StyledSubmitWrapper = styled.div`\r\n    padding: 5px 10px;\r\n    //width: 174px;\r\n`;\r\n\r\nconst StyledForm = styled(Form)`\r\n    display: flex;\r\n`;","import React, {useRef} from \"react\";\r\nimport {Form, SelectPicker} from \"rsuite\";\r\nimport {FlexGrid, FlexGridItem} from \"../../components/base/FlexGrid\";\r\nimport {debounce} from \"lodash\";\r\nimport CustomField from \"../../components/Form/CustomField\";\r\n\r\nexport default ({\r\n        defaultFilter = {},\r\n        subdestinationList = [],\r\n        onChangeFilter,\r\n    }) => {\r\n\r\n    const formRef = useRef(null);\r\n\r\n    const handleChange = debounce( (value) => {\r\n        if ( !formRef.current.check() )\r\n            return;\r\n        onChangeFilter(value);\r\n    }, 500);\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                ref={formRef}\r\n                defaultFormValue={defaultFilter}\r\n                onChange={handleChange}\r\n            >\r\n                <FlexGrid align=\"middle\">\r\n                    <FlexGridItem>\r\n                        <CustomField\r\n                            accepter={SelectPicker}\r\n                            width={300}\r\n                            data={subdestinationList}\r\n                            labelKey=\"name\"\r\n                            valueKey=\"sde_key\"\r\n                            placeholder=\"Subdestination\"\r\n                            name=\"sde_key\"\r\n                        />\r\n                    </FlexGridItem>\r\n                </FlexGrid>\r\n            </Form>\r\n        </>\r\n    )\r\n};","import {\r\n    GOOGLE_OTP_ALLOCATION_SET_LOADING,\r\n    GOOGLE_OTP_ALLOCATION_SET_LIST\r\n} from \"../const\";\r\n\r\nimport {\r\n    GOOGLE_OTP_ALLOCATION_GET_LIST_API,\r\n    GOOGLE_OTP_ALLOCATION_CREATE_API,\r\n    GOOGLE_OTP_ALLOCATION_MODIFY_API,\r\n    GOOGLE_OTP_ALLOCATION_REMOVE_API\r\n} from \"../const/apiMethods\";\r\n\r\nimport {createAction} from './defaults';\r\nimport {api} from \"../api/loginRoutes\";\r\n\r\nconst setGoogleOtpAllocationList = createAction(GOOGLE_OTP_ALLOCATION_SET_LIST);\r\nconst setGoogleOtpAllocationListLoading = createAction(GOOGLE_OTP_ALLOCATION_SET_LOADING);\r\n\r\n// get list\r\nexport const getGoogleOtpAllocationList = (filter = {}) => (dispatch) => {\r\n    dispatch( setGoogleOtpAllocationListLoading(true) );\r\n\r\n    api(GOOGLE_OTP_ALLOCATION_GET_LIST_API, {filter})\r\n        .then((response) => {\r\n            if (response !== undefined) {\r\n\r\n                dispatch( setGoogleOtpAllocationList({\r\n                    list: response.otp_allocation2 || []\r\n                }) );\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch( setGoogleOtpAllocationListLoading(false) );\r\n        })\r\n};\r\n\r\nexport const createGoogleOtpAllocation = (params) => async (dispatch) => {\r\n    return await api(GOOGLE_OTP_ALLOCATION_CREATE_API, {...params});\r\n};\r\n\r\nexport const modifyGoogleOtpAllocation = (params) => async (dispatch) => {\r\n    return await api(GOOGLE_OTP_ALLOCATION_MODIFY_API, {...params});\r\n};\r\n\r\nexport const removeGoogleOtpAllocation = (key) => async (dispatch) => {\r\n    return await api(GOOGLE_OTP_ALLOCATION_REMOVE_API, {oa_key: key});\r\n};","import {connect} from \"react-redux\";\r\nimport GoogleOtpAllocation from \"./GoogleOtpAllocation\";\r\nimport {getGoogleOtpAllocationList, createGoogleOtpAllocation, modifyGoogleOtpAllocation, removeGoogleOtpAllocation} from \"../../actions/google_otp_allocation\";\r\n\r\n\r\nconst mapStateToProps = ({references, google_otp_allocation}) => ({\r\n    subdestinationList: references.subdestination_list,\r\n    data: google_otp_allocation.list,\r\n    count: google_otp_allocation.count,\r\n    loading: google_otp_allocation.loading,\r\n    page: google_otp_allocation.page,\r\n    perPage: google_otp_allocation.perPage,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getGoogleOtpAllocationList,\r\n    createGoogleOtpAllocation,\r\n    modifyGoogleOtpAllocation,\r\n    removeGoogleOtpAllocation\r\n})(GoogleOtpAllocation);","import React, {useEffect, useState} from \"react\";\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\nimport PageHeader from \"../../components/base/PageHeader\";\r\nimport GoogleOtpAllocationTable from \"./GoogleOtpAllocationTable\";\r\nimport GoogleOtpAllocationCreateForm from './GoogleOtpAllocationCreateForm'\r\nimport GoogleOtpAllocationFilter from './GoogleOtpAllocationFilter'\r\n\r\nexport default ({\r\n        data,\r\n        loading,\r\n        subdestinationList,\r\n        getGoogleOtpAllocationList,\r\n        createGoogleOtpAllocation,\r\n        modifyGoogleOtpAllocation,\r\n        removeGoogleOtpAllocation\r\n    }) => {\r\n    const [filter, onChangeFilter] = useState({});\r\n\r\n    useEffect(() => {\r\n        getGoogleOtpAllocationList(filter);\r\n    }, [filter]);\r\n\r\n    return (\r\n        <>\r\n            <PanelLayout>\r\n                <PageHeader title=\"Google OTP allocation subdestination\"/>\r\n\r\n                <GoogleOtpAllocationFilter\r\n                    defaultFilter={filter}\r\n                    {...{\r\n                        subdestinationList,\r\n                        onChangeFilter\r\n                    }}\r\n                />\r\n                <GoogleOtpAllocationTable\r\n                    {...{\r\n                        data,\r\n                        loading,\r\n                        filter,\r\n                        subdestinationList,\r\n                        getGoogleOtpAllocationList,\r\n                        modifyGoogleOtpAllocation,\r\n                        removeGoogleOtpAllocation\r\n                    }}\r\n                />\r\n                <GoogleOtpAllocationCreateForm\r\n                    onSubmit={createGoogleOtpAllocation}\r\n                    {...{\r\n                        getGoogleOtpAllocationList,\r\n                        subdestinationList,\r\n                    }}\r\n                />\r\n            </PanelLayout>\r\n        </>\r\n    )\r\n};","import React from \"react\";\r\nimport {Icon, IconButton, Loader, Tree} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nexport default ({\r\n    list,\r\n    activeIvr,\r\n    loading,\r\n    handleSelectIvr,\r\n    handleSelectIvrCreate,\r\n}) => {\r\n\r\n    return (\r\n        <>\r\n            <StyledTreeWrapper>\r\n\r\n                <StyledTree\r\n                    virtualized\r\n                    data={list}\r\n                    valueKey=\"id\"\r\n                    labelKey=\"name\"\r\n                    height={300}\r\n                    value={activeIvr && activeIvr.id}\r\n                    onSelect={(item) => {\r\n                        handleSelectIvr(item.id);\r\n                    }}\r\n                    defaultExpandAll\r\n                />\r\n                <StyledButtonCreateIvr\r\n                    appearance=\"link\"\r\n                    onClick={handleSelectIvrCreate}\r\n                    icon={<Icon icon=\"plus\" />}\r\n                >\r\n                    Create new IVR\r\n                </StyledButtonCreateIvr>\r\n                {loading && <Loader backdrop size=\"sm\" />}\r\n            </StyledTreeWrapper>\r\n        </>\r\n    )\r\n};\r\n\r\nconst StyledTreeWrapper = styled.div`\r\n    position: relative;\r\n    box-shadow: 0 4px 4px rgba(0, 0, 0, 0.12), 0 0 10px rgba(0, 0, 0, 0.06);\r\n    border-radius: 6px;\r\n    width: 100%;\r\n    overflow: hidden;\r\n    \r\n    .rs-picker-none {\r\n        border-top: 2px solid transparent;\r\n        height: 300px;\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nconst StyledTree = styled(Tree)`\r\n  \r\n    .rs-tree-node {\r\n        padding: 0 !important;\r\n    }\r\n    \r\n    &&& .rs-tree-node-label-content {\r\n        padding-left: 12px;\r\n        padding-right: 12px;\r\n        width: 100%;\r\n    }\r\n    \r\n    .rs-tree-node-active > .rs-tree-node-label > .rs-tree-node-label-content {\r\n        \r\n        &,\r\n        &:hover {\r\n            font-weight: normal;\r\n        }\r\n    }\r\n`;\r\n\r\nconst StyledButtonCreateIvr = styled(IconButton)`\r\n`;","import React, {useState, useEffect} from \"react\";\r\nimport {ControlLabel, Divider, Form, FormControl, Input, InputNumber, Loader, Panel} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\nimport {params} from \"./parametersData\";\r\n\r\nexport default (\r\n    {\r\n        activeIvrActionList,\r\n        activeActionId,\r\n        loading,\r\n        activeActionType = null\r\n    }\r\n) => {\r\n\r\n    // console.log(\"activeActionType\", activeActionType);\r\n\r\n    const [value, setValue] = useState({});\r\n\r\n    useEffect(() => {\r\n        const actionData = activeIvrActionList && activeIvrActionList.find(item => item.id === activeActionId);\r\n        if (actionData) {\r\n            setValue(actionData.params || {});\r\n        }\r\n    }, [activeIvrActionList, activeActionId]);\r\n\r\n    return (\r\n        <Panel  style={{minHeight: '100%'}} shaded>\r\n            <BlockHeader>Parameters</BlockHeader>\r\n            <Spacer size={20} />\r\n\r\n            {loading && <Loader backdrop size=\"sm\" />}\r\n\r\n            <Form\r\n                formValue={value}\r\n            >\r\n\r\n                {activeActionType === 'Wait before connect' &&\r\n                <>\r\n                    <FormSection>\r\n                        <FormSectionTitle>Delay before ringback</FormSectionTitle>\r\n                        <FormRow>\r\n                            <ControlLabel>from</ControlLabel>\r\n                            <ParameterNumberField name=\"before_min\"/>\r\n\r\n                            <ControlLabel>to</ControlLabel>\r\n                            <ParameterNumberField name=\"before_max\"/>\r\n                        </FormRow>\r\n                    </FormSection>\r\n\r\n                    <FormSection>\r\n                        <FormSectionTitle>Ringback duration</FormSectionTitle>\r\n                        <FormRow>\r\n                            <ControlLabel>from</ControlLabel>\r\n                            <ParameterNumberField name=\"ringing_min\"/>\r\n\r\n                            <ControlLabel>to</ControlLabel>\r\n                            <ParameterNumberField name=\"ringing_max\"/>\r\n                        </FormRow>\r\n                    </FormSection>\r\n                </>\r\n                }\r\n\r\n                {activeActionType === 'Playback' &&\r\n                <FormSection>\r\n                    <FormSectionTitle>Playback</FormSectionTitle>\r\n                    <FormRow>\r\n                        <ControlLabel>from</ControlLabel>\r\n                        <ParameterNumberField name=\"playback_min\"/>\r\n\r\n                        <ControlLabel>to</ControlLabel>\r\n                        <ParameterNumberField name=\"playback_max\"/>\r\n                    </FormRow>\r\n                </FormSection>\r\n                }\r\n\r\n                {activeActionType === 'Playback repeat' &&\r\n                <FormSection>\r\n                    <FormSectionTitle></FormSectionTitle>\r\n                    <FormRow>\r\n                        <ControlLabel>Repeat</ControlLabel>\r\n                        <ParameterNumberField name=\"repetitions\"/>\r\n                    </FormRow>\r\n                </FormSection>\r\n                }\r\n\r\n                {activeActionType === 'Radio' &&\r\n                <FormSection>\r\n                    <FormSectionTitle>Radio params</FormSectionTitle>\r\n                    <FormRow>\r\n                        <ControlLabel>from</ControlLabel>\r\n                        <ParameterNumberField name=\"radio_min\"/>\r\n\r\n                        <ControlLabel>to</ControlLabel>\r\n                        <ParameterNumberField name=\"radio_max\"/>\r\n                    </FormRow>\r\n                </FormSection>\r\n                }\r\n\r\n                {activeActionType === 'Send DTMF' &&\r\n                <FormSection>\r\n                    <FormSectionTitle></FormSectionTitle>\r\n                    <FormRow>\r\n                        <ControlLabel>DTMF Signal</ControlLabel>\r\n                        <FormControl accepter={Input} name=\"digits\"/>\r\n                    </FormRow>\r\n                </FormSection>\r\n                }\r\n\r\n                {activeActionType === 'Silence' &&\r\n                <FormSection>\r\n                    <FormSectionTitle>Silence params</FormSectionTitle>\r\n                    <FormRow>\r\n                        <ControlLabel>from</ControlLabel>\r\n                        <ParameterNumberField name=\"silence_min\"/>\r\n\r\n                        <ControlLabel>to</ControlLabel>\r\n                        <ParameterNumberField name=\"silence_max\"/>\r\n                    </FormRow>\r\n                </FormSection>\r\n                }\r\n\r\n                {activeActionType === 'Timeout' &&\r\n                <FormSection>\r\n                    <FormSectionTitle>Timeout</FormSectionTitle>\r\n                    <FormRow>\r\n                        <ControlLabel>from</ControlLabel>\r\n                        <ParameterNumberField name=\"min\"/>\r\n\r\n                        <ControlLabel>to</ControlLabel>\r\n                        <ParameterNumberField name=\"max\"/>\r\n                    </FormRow>\r\n                </FormSection>\r\n                }\r\n\r\n                {activeActionType === 'Wait' &&\r\n                <FormSection>\r\n                    <FormSectionTitle>Wait</FormSectionTitle>\r\n                    <FormRow>\r\n                        <ControlLabel>from</ControlLabel>\r\n                        <ParameterNumberField name=\"wait_min\"/>\r\n\r\n                        <ControlLabel>to</ControlLabel>\r\n                        <ParameterNumberField name=\"wait_max\"/>\r\n                    </FormRow>\r\n                </FormSection>\r\n                }\r\n\r\n            </Form>\r\n            <Spacer size={20}/>\r\n        </Panel>\r\n    )\r\n};\r\n\r\n\r\nconst BlockHeader = styled.h5`\r\n    font-family: inherit;\r\n    font-weight: 400;\r\n    font-size: 18px;\r\n    line-height: 21px;\r\n    color: var(--color-brand1);\r\n`;\r\n\r\nconst FormSection = styled.div`\r\n    & + * {\r\n        padding-top: 20px;\r\n    }\r\n`;\r\n\r\nconst FormSectionTitle = styled.p`\r\n    padding-bottom: 10px;\r\n    font-weight: 500;\r\n`;\r\n\r\nconst FormRow = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    \r\n    .rs-control-label {\r\n        margin-right: 10px;\r\n    }\r\n    .form-input {\r\n        padding-right: 15px;\r\n    }\r\n    \r\n    & + * {\r\n        padding-top: 20px;\r\n    }\r\n`;\r\n\r\nconst ParameterNumberField = (props) => (\r\n    <div className=\"form-input\" style={{maxWidth: '90px'}}>\r\n        <FormControl\r\n            accepter={InputNumber}\r\n            errorPlacement=\"topStart\"\r\n            min={0}\r\n            step={1}\r\n            {...props}\r\n        />\r\n    </div>\r\n);","const FILES = require('./sounds.json');\r\n\r\nlet initialized = false;\r\nconst SOUNDS = new Map([\r\n    ['ringback', {audio: new Audio(FILES['ringback']), volume: 1.0}],\r\n    ['ringing', {audio: new Audio(FILES['ringing']), volume: 1.0 }],\r\n    ['answered', {audio: new Audio(FILES['answered']), volume: 1.0}],\r\n    ['rejected', {audio: new Audio(FILES['rejected']), volume: 0.5}]\r\n]);\r\n\r\n\t/**\r\n\t * Play all the sounds so they will play in mobile browsers at any time\r\n\t */\r\nexport const initialize = () => {\r\n    if (initialized)\r\n        return;\r\n\r\n    for ( const sound of SOUNDS.values() ) {\r\n        sound.audio.volume = 0;\r\n\r\n        try {\r\n            sound.audio.play();\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n\r\n    initialized = true;\r\n};\r\n\r\n/**\r\n * Play a sound\r\n * @param {String} name - Sound name\r\n * @param {[Float]} relativeVolume - Relative volume (0.0 - 1.0)\r\n */\r\nexport const play = (name, relativeVolume) => {\r\n    initialize();\r\n\r\n    if (typeof relativeVolume !== 'number') {\r\n        relativeVolume = 1.0;\r\n    }\r\n\r\n    const sound = SOUNDS.get(name);\r\n\r\n    if (!sound) {\r\n        throw new Error(`unknown sound name \"${name}\"`);\r\n    }\r\n\r\n    try {\r\n        sound.audio.pause();\r\n        sound.audio.currentTime = 0.0;\r\n        sound.audio.volume = (sound.volume || 1.0) * relativeVolume;\r\n        sound.audio.play();\r\n    } catch (error) {\r\n        console.log('play() | error: ', error);\r\n    }\r\n};\r\n\r\nexport const stop = (name) => {\r\n    const sound = SOUNDS.get(name);\r\n\r\n    if (!sound) {\r\n        throw new Error(`unknown sound name \"${name}\"`);\r\n    }\r\n\r\n    sound.audio.pause();\r\n    sound.audio.currentTime = 0.0;\r\n};","import React from 'react';\r\nimport JsSIP from 'jssip';\r\n\r\nexport default class Session extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ringing: false\r\n        };\r\n\r\n        this._localClonedStream = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        const localVideo = this.refs.localVideo;\r\n        const session = this.props.session;\r\n        const peerconnection = session.connection;\r\n        const localStream = peerconnection.getLocalStreams()[0];\r\n        const remoteStream = peerconnection.getRemoteStreams()[0];\r\n\r\n        // Handle local stream\r\n        if (localStream) {\r\n            this._localClonedStream = localStream.clone();\r\n            localVideo.srcObject = this._localClonedStream;\r\n        }\r\n\r\n        // If incoming all we already have the remote stream\r\n        if (remoteStream) {\r\n            this._handleRemoteStream(remoteStream);\r\n        }\r\n\r\n        session.on('progress', () => {\r\n            console.log(\"session progress\");\r\n            if (session.direction === 'outgoing') {\r\n                this.setState({ringing: true});\r\n            }\r\n        });\r\n\r\n        session.on('accepted', () => {\r\n            console.log(\"session accepted\");\r\n            this.setState({ringing: false});\r\n        });\r\n\r\n        session.on('failed', () => {\r\n            console.log(\"session failed\");\r\n            if (session.direction === 'outgoing')\r\n                this.setState({ringing: false});\r\n        });\r\n\r\n        session.on('ended', () => {\r\n            console.log(\"session ended\");\r\n            if (session.direction === 'outgoing') {\r\n                this.setState({ringing: false});\r\n            }\r\n        });\r\n\r\n        peerconnection.addEventListener('addstream', (event) => {\r\n            this._handleRemoteStream(event.stream);\r\n        });\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        JsSIP.Utils.closeMediaStream(this._localClonedStream);\r\n    }\r\n\r\n\r\n    _handleRemoteStream(stream) {\r\n        const remoteVideo = this.refs.remoteVideo;\r\n        // Display remote stream\r\n        remoteVideo.srcObject = stream;\r\n        stream.addEventListener('addtrack', () => {\r\n            if (remoteVideo.srcObject !== stream)\r\n                return;\r\n            // Refresh remote video\r\n            remoteVideo.srcObject = stream;\r\n        });\r\n\r\n        stream.addEventListener('removetrack', () => {\r\n            if (remoteVideo.srcObject !== stream)\r\n                return;\r\n            // Refresh remote video\r\n            remoteVideo.srcObject = stream;\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div style={{display: 'none'}}>\r\n                <video ref='localVideo' autoPlay muted />\r\n                <video ref='remoteVideo' autoPlay />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport JsSIP from 'jssip';\r\nimport * as audioPlayer from './audioPlayer';\r\nimport Session from './Session';\r\nimport styled, {css} from \"styled-components\";\r\nimport {ButtonSecondary} from \"../base/BaseButton\";\r\nimport {Icon} from \"rsuite\";\r\nimport {api} from \"../../api/loginRoutes\";\r\nimport {IVR_LISTEN_API} from \"../../const/apiMethods\";\r\nimport {Alert} from \"rsuite\";\r\n\r\n\r\nconst DEFAULT_SETTINGS = {\r\n    display_name: \"128\",\r\n    authorization_user: \"128\",\r\n    uri: \"sip:128@10.0.22.9:5060\",\r\n    password: \"40S1joiT\",\r\n\r\n    registrar_server: \"10.0.22.9:5060\",\r\n    contact_uri: null,\r\n    instance_id: null,\r\n    session_timers: true,\r\n    use_preloaded_route: false,\r\n    socket: {\r\n        uri: \"wss://web-call.lexico-telecom.com:8089/ws\",\r\n        via_transport: \"wss\"\r\n    },\r\n    pcConfig: {\r\n        rtcpMuxPolicy: \"negotiate\",\r\n        iceServers: [\r\n            // {urls: [\"stun:stun.l.google.com:19302\"]}\r\n        ]\r\n    },\r\n    callstats: {\r\n        enabled: false,\r\n        AppID: null,\r\n        AppSecret: null\r\n    }\r\n};\r\n\r\nexport default class Phone extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this._ua = null;\r\n        this.state = {\r\n            loading: false,\r\n            isInCall: false,\r\n            session: null\r\n        };\r\n    }\r\n\r\n    fetchIvrRegisterData () {\r\n        const {ivrId} = this.props;\r\n\r\n        if (!ivrId) {\r\n            return;\r\n        }\r\n\r\n        this.setState({loading: true});\r\n        api(IVR_LISTEN_API, {target: {ivr_id: ivrId}})\r\n            .then(r => {\r\n                if (!r || r.listen.status !== 'ok') {\r\n                    this.setState({loading: true});\r\n                    return;\r\n                }\r\n\r\n                const settings = {\r\n                    ...DEFAULT_SETTINGS,\r\n                    display_name: r.listen.login,\r\n                    authorization_user: r.listen.login,\r\n                    uri: `sip:${r.listen.login}@10.0.22.9:5060`,\r\n                    password: r.listen.password,\r\n                };\r\n\r\n                this.handleRegister(settings, r.listen.number);\r\n            })\r\n    };\r\n\r\n    handleRegister (settings, callUri) {\r\n\r\n        const socket = new JsSIP.WebSocketInterface(settings.socket.uri);\r\n        socket['via_transport'] = \"wss\";\r\n\r\n        try {\r\n\r\n            this._ua = new JsSIP.UA({\r\n                uri: settings.uri,\r\n                password: settings.password,\r\n                'display_name': settings.display_name,\r\n                sockets: [socket],\r\n                'registrar_server': settings.registrar_server,\r\n                'contact_uri': settings.contact_uri,\r\n                'authorization_user': settings.authorization_user,\r\n                'instance_id': settings.instance_id,\r\n                'session_timers': settings.session_timers,\r\n                'use_preloaded_route': settings.use_preloaded_route\r\n            });\r\n\r\n        }\r\n        catch (error) {\r\n            return;\r\n        }\r\n\r\n        // event handlers\r\n\r\n        // connecting\r\n        this._ua.on('connecting', () => {\r\n            console.log(\"connecting params\", settings);\r\n        });\r\n\r\n        // registered\r\n        this._ua.on('registered', () => {\r\n            console.log(\"registered params\", settings);\r\n            this.handleOutgoingCall(settings, callUri);\r\n        });\r\n\r\n        // unregistered\r\n        this._ua.on('unregistered', () => {\r\n            this.setState({isInCall: false});\r\n            console.log(\"unregistered params\", settings);\r\n            // Alert.error(\"unregistered\", 10000);\r\n        });\r\n\r\n        // registrationFailed\r\n        this._ua.on('registrationFailed', () => {\r\n            this.setState({\r\n                isInCall: false,\r\n                loading: false\r\n            });\r\n            Alert.error(\"registrationFailed\", 10000);\r\n            console.log(\"registrationFailed params\", settings);\r\n        });\r\n\r\n        this._ua.start();\r\n    }\r\n\r\n\r\n    handleOutgoingCall(settings, callUri = '111') {\r\n\r\n        const session = this._ua.call(callUri, {\r\n            pcConfig: settings.pcConfig || {iceServers: []},\r\n            mediaConstraints: {\r\n                audio: true,\r\n                video: false\r\n            },\r\n            rtcOfferConstraints: {\r\n                offerToReceiveAudio: 1,\r\n                offerToReceiveVideo: 0\r\n            }\r\n        });\r\n\r\n        console.log(\"start session\");\r\n\r\n        session.on('connecting', () => {\r\n            // this.setState({session});\r\n            console.log(\"connecting\", session);\r\n        });\r\n\r\n        session.on('progress', () => {\r\n            audioPlayer.play('ringback');\r\n            console.log(\"progress\", session);\r\n        });\r\n\r\n        session.on('failed', (data) => {\r\n            audioPlayer.stop('ringback');\r\n            audioPlayer.play('rejected');\r\n            this.setState({\r\n                session: null,\r\n                loading: false\r\n            });\r\n            console.log(\"failed log\", data);\r\n            Alert.error(`Session failed: ${data.cause}`, 10000);\r\n        });\r\n\r\n        session.on('ended', () => {\r\n            audioPlayer.stop('ringback');\r\n            this.setState({\r\n                session: null,\r\n                isInCall: false,\r\n            });\r\n        });\r\n\r\n        session.on('accepted', () => {\r\n            audioPlayer.stop('ringback');\r\n            audioPlayer.play('answered');\r\n            this.setState({\r\n                isInCall: true,\r\n                loading: false\r\n            });\r\n        });\r\n\r\n        this.setState({session});\r\n    }\r\n\r\n\r\n    handleStopSession() {\r\n        const {session} = this.state;\r\n        session.terminate();\r\n        this._ua.stop();\r\n    }\r\n\r\n    render() {\r\n        const {session, isInCall, loading} = this.state;\r\n\r\n        return (\r\n            <>\r\n                <ButtonPlay\r\n                    isInCall={isInCall}\r\n                    loading={loading}\r\n                    onClick={() => {\r\n                        if (session) {\r\n                            this.handleStopSession();\r\n                            return;\r\n                        }\r\n                        this.fetchIvrRegisterData();\r\n                    }}\r\n                >\r\n                    {isInCall\r\n                        ? <Icon icon=\"pause\"/>\r\n                        : <Icon icon=\"play\"/>\r\n                    }\r\n                </ButtonPlay>\r\n\r\n                {session &&\r\n                    <Session session={session}/>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst ButtonPlay = styled(ButtonSecondary)`\r\n    && {\r\n        padding: 0 0 0 3px;\r\n        border-radius: 44px;\r\n        height: 44px;\r\n        width: 44px;\r\n        margin-right: 10px;\r\n        \r\n        ${props => props.isInCall && css`\r\n            padding: 0;\r\n        `}\r\n        \r\n        .rs-icon {\r\n            font-size: 18px;\r\n            line-height: 44px;\r\n        }\r\n    }\r\n`;","import React, {useEffect, useState, useMemo} from \"react\";\r\nimport {ButtonGroup, Icon, IconButton, Input, List, Loader, Panel, SelectPicker, Whisper} from \"rsuite\";\r\nimport {ButtonClose, ButtonDefault, ButtonPrimary, ButtonSecondary} from \"../../../components/base/BaseButton\";\r\nimport styled from \"styled-components\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\nimport { FlexGrid, FlexGridItem } from \"../../../components/base/FlexGrid\";\r\nimport BlockIvrParameters from \"./BlockIvrParameters\";\r\nimport { api } from \"../../../api/loginRoutes\";\r\nimport { IVR_LISTEN_API } from \"../../../const/apiMethods\";\r\nimport Tooltip from \"rsuite/es/Tooltip\";\r\nimport {generateId} from \"../../../utils\";\r\nimport IvrListener from \"../../../components/IvrListener/IvrListener\";\r\n\r\n\r\nexport default (\r\n    {\r\n        activeIvr,\r\n        ivrTypes,\r\n        loading,\r\n\r\n        submitIvr,\r\n        removeIvr,\r\n    }\r\n) => {\r\n\r\n    const [name, setName] = useState(null);\r\n    const [showNameEditField, setShowNameEditField] = useState(false);\r\n    const [activeIvrActionList, setActiveIvrActionList] = useState(null);\r\n    const [activeActionId, setActiveActionId] = useState(null);\r\n\r\n\r\n    // set active IVR actions\r\n    useEffect(() => {\r\n\r\n        if (!activeIvr) {\r\n            setName(null);\r\n            setShowNameEditField(false);\r\n            setActiveIvrActionList(null);\r\n            setActiveActionId(null);\r\n            return;\r\n        }\r\n\r\n        if (activeIvr.isNew) {\r\n            const id = generateId();\r\n            setName(\"\");\r\n            setShowNameEditField(true);\r\n            setActiveActionId(id);\r\n            setActiveIvrActionList([{\r\n                id: id,\r\n                params: null,\r\n                action_name: null,\r\n                sound_name: null,\r\n            }]);\r\n            return;\r\n        }\r\n\r\n        setName(activeIvr.name);\r\n        setShowNameEditField(false);\r\n        const activeIvrActionList = activeIvr.action_list\r\n            .sort((a, b) => {\r\n                return a.position - b.position\r\n            })\r\n            .map((item) => ({\r\n                id: generateId(),\r\n                params: item.params,\r\n                action_name: item.action_type.name,\r\n                sound_name: item.sound && item.sound.name,\r\n            }));\r\n\r\n        setActiveActionId(activeIvrActionList.length ? activeIvrActionList[0].id : null);\r\n\r\n        setActiveIvrActionList(activeIvrActionList);\r\n    }, [activeIvr]);\r\n\r\n\r\n    const handleAddAction = (index) => {\r\n        const actionCloned = [...activeIvrActionList];\r\n        actionCloned.splice(index + 1, 0, {\r\n            id: generateId(),\r\n            params: null,\r\n            action_name: null,\r\n            sound_name: null,\r\n        });\r\n        setActiveIvrActionList(actionCloned);\r\n    };\r\n\r\n\r\n    const handleSubmit = () => {\r\n        const actions = activeIvrActionList.map((item, index) => ({\r\n            ...item,\r\n            position: index + 2,\r\n            params: {},\r\n            sound_name: \"SOUND1\",\r\n        }));\r\n\r\n        const data = {\r\n            name: name,\r\n            action_list: [...actions]\r\n        };\r\n\r\n        submitIvr(data);\r\n    };\r\n\r\n\r\n    const handleChangeType = (currentIndex, type) => {\r\n        const actions = activeIvrActionList.map((item, index) => (\r\n            currentIndex === index\r\n                ? {...item, action_name: type}\r\n                : item\r\n        ));\r\n        setActiveIvrActionList(actions);\r\n    };\r\n\r\n\r\n    const handleIncreasePosition = (index, e) => {\r\n        if (index >= activeIvrActionList.length - 1)\r\n            return;\r\n\r\n        e.stopPropagation();\r\n\r\n        const actionCloned = [...activeIvrActionList];\r\n        const currentElement = actionCloned[index];\r\n        actionCloned[index] = actionCloned[index + 1];\r\n        actionCloned[index + 1] = currentElement;\r\n        setActiveActionId(currentElement.id);\r\n        setActiveIvrActionList(actionCloned);\r\n    };\r\n\r\n\r\n    const handleDecreasePosition = (index, e) => {\r\n        if (index === 0)\r\n            return;\r\n\r\n        e.stopPropagation();\r\n\r\n        const actionCloned = [...activeIvrActionList];\r\n        const currentElement = actionCloned[index];\r\n        actionCloned[index] = actionCloned[index - 1];\r\n        actionCloned[index - 1] = currentElement;\r\n        setActiveActionId(currentElement.id);\r\n        setActiveIvrActionList(actionCloned);\r\n    };\r\n\r\n\r\n    const handleRemoveAction = (index) => {\r\n        const actionCloned = [...activeIvrActionList];\r\n        actionCloned.splice(index, 1);\r\n        setActiveIvrActionList(actionCloned);\r\n    };\r\n\r\n\r\n    const activeActionType = useMemo(() => {\r\n        if (!activeIvrActionList || !activeIvrActionList.length) {\r\n            return null;\r\n        }\r\n        const activeActionData = activeIvrActionList.find(item => item.id === activeActionId);\r\n        return activeActionData ? activeActionData.action_name : null;\r\n    }, [activeActionId, activeIvrActionList]);\r\n\r\n\r\n    return (\r\n        <FlexGrid hSpace={'-20px'} align={'stretch'}>\r\n            <FlexGridItem grow={1} hSpace={'20px'}>\r\n                <Panel style={{minHeight: '506px'}} shaded>\r\n\r\n                    <StyledHeader>\r\n                        <StyledHeaderItem>\r\n                            <BlockHeader>\r\n                                {name === null\r\n                                    ? \"Choose IVR\"\r\n                                    : showNameEditField\r\n                                        ? <Input\r\n                                            name=\"name\"\r\n                                            value={name}\r\n                                            onChange={setName}\r\n                                            placeholder=\"Enter IVR name\"\r\n                                        />\r\n                                        : name\r\n                                }\r\n                            </BlockHeader>\r\n                        </StyledHeaderItem>\r\n\r\n                        {activeIvrActionList &&\r\n                            <StyledHeaderItem>\r\n\r\n                                <Whisper\r\n                                    placement=\"left\"\r\n                                    speaker={<Tooltip>Listen IVR</Tooltip>}\r\n                                >\r\n                                    <IvrListener ivrId={activeIvr.id}/>\r\n                                </Whisper>\r\n\r\n                                <ButtonPrimary onClick={handleSubmit}>Save/Edit</ButtonPrimary>\r\n                                <ButtonClose onClick={() => removeIvr()}>Delete</ButtonClose>\r\n                            </StyledHeaderItem>\r\n                        }\r\n                    </StyledHeader>\r\n\r\n                    {loading && <Loader backdrop size=\"sm\" />}\r\n\r\n                    {activeIvr &&\r\n                        <>\r\n                            <Spacer size={30}/>\r\n                            <StyledList>\r\n                                {activeIvrActionList && activeIvrActionList.map((item, index) => {\r\n\r\n                                    // console.log(activeActionId, item.id);\r\n\r\n                                    const isActive = activeActionId === item.id;\r\n\r\n                                    return (\r\n                                        <StyledListItem\r\n                                            key={item.id}\r\n                                            index={index}\r\n                                            onClick={(e) => {\r\n                                                setActiveActionId(item.id);\r\n                                            }}\r\n                                            className={isActive ? \"active\" : \"\"}\r\n                                        >\r\n                                            <StyledListItemContent>\r\n                                                <SelectPicker\r\n                                                    className=\"ivr-action-type-dropdown\"\r\n                                                    data={ivrTypes}\r\n                                                    labelKey=\"name\"\r\n                                                    valueKey=\"name\"\r\n                                                    value={item.action_name}\r\n                                                    placeholder=\"Dialer\"\r\n                                                    name=\"dialer_id\"\r\n                                                    searchable={false}\r\n                                                    cleanable={false}\r\n                                                    onChange={(val) => handleChangeType(index, val)}\r\n                                                />\r\n\r\n                                                <div className=\"ivr-action-type-control\">\r\n                                                    <StyledListButton\r\n                                                        icon={<Icon icon=\"plus\"/>}\r\n                                                        onClick={() => handleAddAction(index)}\r\n                                                    />\r\n\r\n                                                    <StyledListButton\r\n                                                        icon={<Icon icon=\"minus\"/>}\r\n                                                        onClick={() => handleRemoveAction(index)}\r\n                                                    />\r\n\r\n                                                    <ButtonGroup style={{paddingLeft: 10}}>\r\n                                                        <StyledListButton\r\n                                                            disabled={index === 0}\r\n                                                            onClick={(e) => handleDecreasePosition(index, e)}\r\n                                                            icon={<Icon icon=\"caret-up\"/>}\r\n                                                        />\r\n                                                        <StyledListButton\r\n                                                            disabled={index === activeIvrActionList.length - 1}\r\n                                                            onClick={(e) => handleIncreasePosition(index, e)}\r\n                                                            icon={<Icon icon=\"caret-down\"/>}\r\n                                                        />\r\n                                                    </ButtonGroup>\r\n                                                </div>\r\n                                            </StyledListItemContent>\r\n                                        </StyledListItem>\r\n                                    )\r\n                                })}\r\n                            </StyledList>\r\n                        </>\r\n                    }\r\n\r\n                    <Spacer size={20}/>\r\n                </Panel>\r\n            </FlexGridItem>\r\n            \r\n            <FlexGridItem width=\"430px\" hSpace={'20px'}>\r\n                <BlockIvrParameters\r\n                    {...{\r\n                        activeActionType,\r\n                        activeIvr,\r\n                        loading,\r\n                        activeIvrActionList,\r\n                        activeActionId\r\n                    }}\r\n                />\r\n            </FlexGridItem>\r\n        </FlexGrid>\r\n    )\r\n};\r\n\r\nconst StyledHeader = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n`;\r\n\r\nconst StyledHeaderItem = styled.div`\r\n    .rs-btn {\r\n        margin-left: 20px;\r\n    }\r\n`;\r\n\r\nconst BlockHeader = styled.h5`\r\n    font-family: inherit;\r\n    font-weight: 400;\r\n    font-size: 18px;\r\n    line-height: 21px;\r\n    color: var(--color-brand1);\r\n`;\r\n\r\nconst StyledList = styled(List)`\r\n    margin-left: -20px;\r\n    margin-right: -20px;\r\n    box-shadow: none !important;\r\n    overflow: visible !important;\r\n`;\r\n\r\nconst StyledListItemContent = styled.div.attrs(() => ({\r\n    className: 'ivr-list-item-content'\r\n}))`\r\n    display: flex;\r\n    \r\n    .ivr-action-type-dropdown {\r\n        width: 100%;\r\n        max-width: 400px;\r\n    }\r\n    \r\n    .ivr-action-type-control {\r\n        margin-left: auto;\r\n        flex-shrink: 0;\r\n        .rs-btn {\r\n            margin-left: 10px;\r\n        }\r\n    }\r\n`;\r\n\r\nconst StyledListButton = styled(IconButton).attrs(() => ({\r\n    className: 'action-list-button'\r\n}))`\r\n    \r\n`;\r\n\r\nconst StyledListItem = styled(List.Item)`\r\n    padding-left: 20px;\r\n    padding-right: 20px;\r\n    background-color: transparent;\r\n    transition: background-color 0.2s ease, box-shadow 0.2s ease;\r\n    box-shadow: none !important;\r\n    border-bottom: 1px solid #e5e5ea;\r\n    border-top: 1px solid #e5e5ea;\r\n    \r\n    & + & {\r\n        margin-top: -1px;\r\n    }\r\n    \r\n    &.active {\r\n        background-color: #f2faff;\r\n    }\r\n    \r\n    &:hover {\r\n        position: relative;\r\n        z-index: 10;\r\n        box-shadow: 0 0 4px 1px #e5e5ea !important;\r\n    }\r\n`;","import React from \"react\";\r\nimport {Form, FormControl, Input, InputGroup} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default ({\r\n    onChangeFilter\r\n}) => {\r\n\r\n    return (\r\n        <StyledField>\r\n            <InputGroup>\r\n                <Form\r\n                    onChange={onChangeFilter}\r\n                >\r\n                    <FormControl\r\n                        name=\"str\"\r\n                        accepter={Input}\r\n                        placeholder={'Sound filename, IVR, CLI or phone'}\r\n                    />\r\n                </Form>\r\n            </InputGroup>\r\n        </StyledField>\r\n    )\r\n}\r\n\r\nconst StyledField = styled.div`\r\n    max-width: 300px;\r\n`;","import {IVR as PREFIX} from '../const/';\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from  './defaults';\r\nimport {IVR_LIST_API, IVR_ACTION_TYPE_LIST_API} from \"../const/apiMethods\";\r\n\r\nconst setIvrList = createAction('SET_ITEMS_' + PREFIX);\r\nconst setIvrTypes = createAction('SET_TYPES_' + PREFIX);\r\nconst setLoading = createAction('SET_LOADING_' + PREFIX);\r\n\r\n\r\nexport const getIvrList = () => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    api(IVR_LIST_API)\r\n        .then(({ivr_list}) => {\r\n            if (ivr_list === undefined) {\r\n                return;\r\n            }\r\n            dispatch(setIvrList({\r\n                list: ivr_list\r\n            }));\r\n        })\r\n        .finally(() => dispatch(setLoading(false)));\r\n};\r\n\r\n\r\nexport const getIvrTypes = () => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    api(IVR_ACTION_TYPE_LIST_API)\r\n        .then(({ivr_action_type_list}) => {\r\n            if (ivr_action_type_list === undefined) {\r\n                return;\r\n            }\r\n            dispatch(setIvrTypes({\r\n                types: ivr_action_type_list\r\n            }));\r\n        })\r\n        .finally(() => dispatch(setLoading(false)));\r\n};","import {IVR_SOUNDS as PREFIX} from '../const/';\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from  './defaults';\r\nimport {IVR_SOUND_LIST_API} from \"../const/apiMethods\";\r\n\r\nconst setIvrSoundList = createAction('SET_ITEMS_' + PREFIX);\r\nconst setLoading = createAction('SET_LOADING_' + PREFIX);\r\n\r\nexport const getIvrSoundList = () => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    api(IVR_SOUND_LIST_API)\r\n        .then(({ivr_sound_list}) => {\r\n            if (ivr_sound_list === undefined) {\r\n                return;\r\n            }\r\n            dispatch(setIvrSoundList({\r\n                list: ivr_sound_list\r\n            }));\r\n        })\r\n        .finally(() => dispatch(setLoading(false)));\r\n};","import {connect} from 'react-redux';\r\nimport PageIvrs from \"./PageIvrs\";\r\nimport {getIvrList, getIvrTypes} from \"../../../actions/ivr\";\r\nimport {getIvrSoundList} from \"../../../actions/ivr_sounds\";\r\n\r\nconst mapState = ({ivr, ivr_cli}) => ({\r\n    ivrList: ivr.list,\r\n    loading: ivr.loading,\r\n    ivrTypes: ivr.types,\r\n    ivrCliList: ivr_cli.list,\r\n});\r\n\r\nexport default connect(mapState, {\r\n    getIvrList,\r\n    getIvrTypes,\r\n    getIvrSoundList,\r\n})(PageIvrs);","import React, {useEffect, useMemo, useState} from \"react\";\r\nimport {\r\n    IVR_CREATE_API,\r\n    IVR_REMOVE_API,\r\n    IVR_MODIFY_API,\r\n} from \"../../../const/apiMethods\";\r\nimport {api} from \"../../../api/loginRoutes\";\r\nimport _ from \"lodash\";\r\nimport BlockIvrList from \"./BlockIvrList\";\r\nimport BlockIvrActionList from \"./BlockIvrActionList\";\r\nimport BlockIvrListFilter from \"./BlockIvrListFilter\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\nimport {FlexGrid, FlexGridItem} from \"../../../components/base/FlexGrid\";\r\n\r\n\r\nexport default (\r\n    {\r\n        loading,\r\n        ivrList,\r\n        ivrTypes,\r\n        getIvrList,\r\n        getIvrTypes,\r\n        getIvrSoundList,\r\n    }\r\n) => {\r\n\r\n\r\n    const [activeIvr, setActiveIvr] = useState(null);\r\n    const [submitIvrDataLoading, setSubmitIvrDataLoading] = useState(false);\r\n    const [filter, setFilter] = useState({});\r\n    \r\n\r\n    useEffect(() => {\r\n        getIvrList();\r\n        getIvrTypes();\r\n        getIvrSoundList();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (ivrList.length) {\r\n            setActiveIvr(ivrList[0]);\r\n        } else {\r\n            setActiveIvr(null);\r\n        }\r\n    }, [ivrList]);\r\n\r\n\r\n    const handleSelectIvr = (id) => {\r\n        if (!id) {\r\n            setActiveIvr(null);\r\n        }\r\n        const activeIvr = ivrList.find(item => item.id === id);\r\n        setActiveIvr(activeIvr);\r\n    };\r\n\r\n\r\n    const handleSelectIvrCreate = () => {\r\n        setActiveIvr({name: null, isNew: true});\r\n    };\r\n\r\n\r\n    const submitIvr = (data) => {\r\n        const method = activeIvr.isNew\r\n            ? IVR_CREATE_API\r\n            : IVR_MODIFY_API;\r\n\r\n        setSubmitIvrDataLoading(true);\r\n        api(method, data)\r\n            .then((r) => getIvrList())\r\n            .finally(() => {\r\n                setSubmitIvrDataLoading(false);\r\n            });\r\n    };\r\n\r\n\r\n    const removeIvr = () => {\r\n        api(IVR_REMOVE_API, {target: {ivr_id: activeIvr.id}})\r\n    };\r\n\r\n\r\n    const filteredIvrList = useMemo(() => (\r\n        ivrList.filter(item => {\r\n            if (!filter.str)\r\n                return true;\r\n            const str = _.toLower(filter.str);\r\n            return _.toLower(item.name).indexOf(str) !== -1;\r\n        })\r\n    ), [filter, ivrList]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Spacer size={30}/>\r\n            <BlockIvrListFilter\r\n                activeIvr={activeIvr}\r\n                onChangeFilter={setFilter}\r\n            />\r\n            <Spacer size={20}/>\r\n\r\n            <FlexGrid hSpace={'-20px'} align={'stretch'}>\r\n\r\n                <FlexGridItem width=\"300px\" hSpace={'20px'}>\r\n                    <BlockIvrList\r\n                        list={filteredIvrList}\r\n                        submitLoading={submitIvrDataLoading}\r\n                        {...{\r\n                            activeIvr,\r\n                            loading,\r\n                            handleSelectIvr,\r\n                            handleSelectIvrCreate\r\n                        }}\r\n                    />\r\n                </FlexGridItem>\r\n\r\n                <FlexGridItem grow={1} hSpace={'20px'}>\r\n                    <BlockIvrActionList\r\n                        {...{\r\n                            loading,\r\n                            activeIvr,\r\n                            ivrTypes,\r\n                            submitIvr,\r\n                            removeIvr\r\n                        }}\r\n                    />\r\n                </FlexGridItem>\r\n\r\n            </FlexGrid>\r\n\r\n            <Spacer size={30}/>\r\n        </>\r\n    )\r\n};","import React from \"react\";\r\nimport {Input, InputGroup} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default (props) => {\r\n    return (\r\n        <StyledField>\r\n            <InputGroup>\r\n                <Input\r\n                    placeholder={'Sound filename, IVR, CLI or phone'}\r\n                />\r\n            </InputGroup>\r\n        </StyledField>\r\n    )\r\n}\r\n\r\nconst StyledField = styled.div`\r\n    max-width: 300px;\r\n    width: 100%;\r\n`;","import { apiFormData } from '../../../api/loginRoutes';\r\nimport {IVR_SOUND_CREATE_API, IVR_SOUND_MODIFY_API} from 'const/apiMethods';\r\nimport React, {useRef, useState} from 'react';\r\nimport {Form, FormControl, Input, Uploader, ControlLabel} from 'rsuite';\r\nimport Modal from \"../../../components/Modal\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default ({\r\n    show,\r\n    data,\r\n    onClose,\r\n    disabled,\r\n    activeSoundId,\r\n    getIvrSoundList,\r\n}) => {\r\n\r\n    const formRef = useRef();\r\n    const [files, setFiles] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleSubmit = () => {\r\n        if (!formRef.current.check()) {\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n\r\n        const dt = new DataTransfer();\r\n        dt.items.add(files[0].blobFile);\r\n\r\n        const formValue = formRef.current.getFormValue();\r\n        const params = {...formValue, files: dt.files};\r\n\r\n        console.log(params);\r\n\r\n        let method = activeSoundId \r\n            ? IVR_SOUND_MODIFY_API\r\n            : IVR_SOUND_CREATE_API;\r\n\r\n        if (activeSoundId) {\r\n            params.target = {\r\n                ivr_sound_id: activeSoundId\r\n            }\r\n        }\r\n\r\n        apiFormData(method, params)\r\n            .then(r => {\r\n                if (!r)\r\n                    return;\r\n\r\n                getIvrSoundList();\r\n                handleClose();\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n        \r\n    };\r\n\r\n    const handleClose = () => {\r\n        setFiles([]);\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                show={show}\r\n                footer\r\n                data={data}\r\n                disabled = {disabled}\r\n                onSuccess={handleSubmit}\r\n                onClose={handleClose}\r\n                successText={\"Add\"}\r\n                title={\"Add new sound\"}\r\n                loading={loading}\r\n            >\r\n                <Form\r\n                    ref={formRef}\r\n                >\r\n                    <div>\r\n                        <ControlLabel>Choose File</ControlLabel>\r\n                        <FormControl\r\n                            accepter={StyledUploader}\r\n                            fileList={files}\r\n                            autoUpload={false}\r\n                            multiple={false}\r\n                            removable={false}\r\n                            accept=\"audio/mpeg,audio/wave,audio/wav,audio/x-wav,audio/x-pn-wav\"\r\n                            onChange={(files) => {\r\n                                setFiles([files[files.length - 1]]);\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <ControlLabel>File Name</ControlLabel>\r\n                        <FormControl\r\n                            accepter={Input}\r\n                            name=\"name\"\r\n                        />\r\n                    </div>\r\n                </Form>\r\n            </Modal>\r\n        </>\r\n    )\r\n};\r\n\r\n\r\nconst StyledUploader = styled(Uploader)`\r\n    .rs-uploader-file-item.rs-uploader-file-item-text {\r\n        display: block !important;\r\n    }\r\n`;","import React, {useState} from \"react\";\r\nimport { api } from \"api/loginRoutes\";\r\nimport {IVR_SOUND_REMOVE_API} from \"const/apiMethods\";\r\nimport {Modal} from \"../../../components/Modal\";\r\nimport {useWindowWidth} from \"../../../hooks\";\r\n\r\n\r\nexport default ({\r\n    show,\r\n    onClose,\r\n    activeSoundId,\r\n    maxWidth = 600,\r\n    getIvrSoundList,\r\n}) => {\r\n\r\n    const resizedWidth = useWindowWidth();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleSuccess = async () => {\r\n        if (!activeSoundId) {\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n\r\n        api(IVR_SOUND_REMOVE_API, {target: {ivr_sound_id: activeSoundId}})\r\n            .then(() => {\r\n                getIvrSoundList();\r\n                onClose();\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            })\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            {...{show, onClose}}\r\n            onClose={() => onClose(false)}\r\n            title={`Remove IVR sound`}\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            footer={true}\r\n            loading={loading}\r\n            onSuccessClose={false}\r\n            successText=\"Yes\"\r\n            focusTarget=\"close\"\r\n            onSuccess={handleSuccess}\r\n        >\r\n            Are you sure?\r\n        </Modal>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\nimport BlockIvrSoundsFilter from \"./BlockIvrSoundsFilter\";\r\nimport {BaseButton, ButtonPrimary} from \"../../../components/base/BaseButton\";\r\nimport {Button, List, Icon, Loader, IconButton} from \"rsuite\";\r\nimport AudioPlayer, {RHAP_UI} from 'react-h5-audio-player';\r\nimport styled from \"styled-components\";\r\nimport ModalAddSound from \"./ModalAddSound\";\r\nimport ModalCancel from \"./ModalCancel\";\r\n\r\n\r\nexport default (\r\n    {\r\n        data,\r\n        loading,\r\n        getIvrSoundList,\r\n        activeIvr\r\n    }\r\n) => {\r\n\r\n    const [modalNewSoundShow, setModalNewSoundShow] = useState(false);\r\n    const [modalCancelShow, setModalCancelShow] = useState(false);\r\n    const [activeSoundId, setActiveSoundId] = useState(null);\r\n\r\n    useEffect(() => {\r\n        getIvrSoundList();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Spacer size={30}/>\r\n            <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                <BlockIvrSoundsFilter\r\n                    style={{flexShrink: 0}}\r\n                    activeIvr={activeIvr}\r\n                />\r\n                <ButtonPrimary onClick={() => setModalNewSoundShow(true)}>Add New</ButtonPrimary>\r\n            </div>\r\n            \r\n            <Spacer size={30}/>\r\n\r\n            <List>\r\n                {data.map(item => (\r\n                    <List.Item key={item.id}>\r\n                        <IvrAudio className=\"ivr-audio\">\r\n                            <div className=\"ivr-audio__title\">{item.filename}</div>\r\n\r\n                            <StyledAudioPlayer\r\n                                className=\"ivr-audio__content\"\r\n                                src={item.url_source}\r\n                                autoPlay={false}\r\n                                layout=\"horizontal-reverse\"\r\n                                showJumpControls={false}\r\n                                customProgressBarSection={[\r\n                                    RHAP_UI.CURRENT_TIME,\r\n                                    RHAP_UI.PROGRESS_BAR,\r\n                                    RHAP_UI.DURATION,\r\n                                ]}\r\n                                customControlsSection={[RHAP_UI.MAIN_CONTROLS]}\r\n                            />\r\n\r\n                            <div className=\"ivr-audio__actions\">\r\n                                <IconButton\r\n                                    as={BaseButton}\r\n                                    download={item.filename}\r\n                                    href={item.url_source}\r\n                                    buttonStyle=\"primary\"\r\n                                    icon={<Icon icon=\"download\"/>}\r\n                                />\r\n                                <BaseButton\r\n                                    onClick={() => {\r\n                                        setActiveSoundId(item.id);\r\n                                        setModalNewSoundShow(true);\r\n                                    }}\r\n                                    buttonStyle=\"secondary\"\r\n                                >\r\n                                    Replace by sound\r\n                                </BaseButton>\r\n                                <Button\r\n                                    onClick={() => {\r\n                                        setModalCancelShow(true);\r\n                                        setActiveSoundId(item.id);\r\n                                    }}\r\n                                    color=\"red\"\r\n                                >\r\n                                    <Icon icon=\"trash2\"/>\r\n                                </Button>\r\n                            </div>\r\n                        </IvrAudio>\r\n                    </List.Item>\r\n                ))}\r\n            </List>\r\n\r\n            <ModalAddSound\r\n                show={modalNewSoundShow}\r\n                activeSoundId={activeSoundId}\r\n                getIvrSoundList={getIvrSoundList}\r\n                onClose={() => {\r\n                    setModalNewSoundShow(false);\r\n                    setActiveSoundId(null);\r\n                }}\r\n            />\r\n\r\n            <ModalCancel\r\n                show={modalCancelShow}\r\n                activeSoundId={activeSoundId}\r\n                getIvrSoundList={getIvrSoundList}\r\n                onClose={() => {\r\n                    setModalCancelShow(false);\r\n                    setActiveSoundId(null);\r\n                }}\r\n            />\r\n\r\n            {loading && <Loader backdrop />}\r\n        </>\r\n    )\r\n};\r\n\r\n\r\nconst StyledAudioPlayer = styled(AudioPlayer)`\r\n    .rhap_controls-section {\r\n        flex-grow: 0;\r\n    }\r\n`;\r\n\r\nconst IvrAudio = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    \r\n    .ivr-audio__content {\r\n        padding: 2px 15px;\r\n        max-width: 800px;\r\n        box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.1);\r\n        border-radius: 5px;\r\n    }\r\n    \r\n    .rhap_time {\r\n        font-size: 14px;\r\n    }\r\n    \r\n    .ivr-audio__actions {\r\n        flex-shrink: 0;\r\n        margin-left: auto;\r\n        \r\n        .rs-btn {\r\n            margin-left: 15px;\r\n        }\r\n    }\r\n    \r\n    .rhap_play-pause-button {\r\n        font-size: 35px;\r\n        width: 35px;\r\n        height: 35px;\r\n        margin-left: 0;\r\n        \r\n        svg {\r\n            vertical-align: top;\r\n        }\r\n    }\r\n    \r\n    .ivr-audio__title {\r\n        width: 270px;\r\n        word-break: break-all\r\n    }\r\n`;","import {connect} from 'react-redux';\r\nimport PageIvrSounds from \"./PageIvrSounds\";\r\nimport {getIvrSoundList} from \"../../../actions/ivr_sounds\";\r\n\r\nconst mapState = ({ivr_sounds}) => ({\r\n    data: ivr_sounds.list,\r\n    loading: ivr_sounds.loading,\r\n});\r\n\r\nexport default connect(mapState, {\r\n    getIvrSoundList,\r\n})(PageIvrSounds);","import React from \"react\";\r\nimport {Input, InputGroup} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default (props) => {\r\n    return (\r\n        <StyledField>\r\n            <InputGroup>\r\n                <Input placeholder={'CLI search'}/>\r\n            </InputGroup>\r\n        </StyledField>\r\n    )\r\n}\r\n\r\nconst StyledField = styled.div`\r\n    max-width: 300px;\r\n    width: 100%;\r\n`;","import React from 'react';\r\nimport Modal from \"../../Modal/Modal\";\r\n\r\nexport default ({\r\n    show,\r\n    data,\r\n    onClose,\r\n    onSubmit,\r\n    disabled,\r\n    title\r\n}) => {\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                show={show}\r\n                footer\r\n                data={data}\r\n                disabled={disabled}\r\n                onSuccess={onSubmit}\r\n                onClose={onClose}\r\n                successText={\"Ok\"}\r\n                title={title}\r\n            >\r\n                <p>Be careful, this setting will replace the default values for quarantine</p>\r\n            </Modal>\r\n        </>\r\n    )\r\n};","import React from 'react';\r\nimport Modal from \"../../Modal\";\r\n\r\nexport default ({\r\n    show,\r\n    data,\r\n    onClose,\r\n    onSubmit,\r\n    disabled,\r\n}) => {\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                show={show}\r\n                footer\r\n                data={data}\r\n                disabled = {disabled}\r\n                onSuccess={onSubmit}\r\n                onClose={onClose}\r\n                successText={\"Delete\"}\r\n                title={\"Remove special term\"}\r\n            >\r\n                <p>Are you sure about that?</p>\r\n            </Modal>\r\n        </>\r\n    )\r\n};","import React, {useRef, useState} from \"react\";\r\nimport {Button, Form, FormControl, Input, SelectPicker, Icon} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport ModalSubmitRowApprove from \"./ModalSubmitRowApprove\";\r\n\r\n\r\nexport default ({\r\n    formModel,\r\n    onSubmit,\r\n    onDataUpdate,\r\n    ivrList,\r\n}) => {\r\n\r\n    const formRef = useRef(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [modalApproveData, setModalApproveData] = useState(false);\r\n    const [showModalApprove, setShowModalApprove] = useState(false);\r\n    const [modalApproveLoading, setModalApproveLoading] = useState(null);\r\n\r\n    const handleSubmit = () => {\r\n        if (!formRef.current.check())\r\n            return;\r\n\r\n        const formValue = formRef.current.getFormValue();\r\n\r\n        setLoading(true);\r\n        onSubmit(formValue)\r\n            .then(res => {\r\n                setLoading(false);\r\n                if (res) {\r\n                    onDataUpdate();\r\n                }\r\n            });\r\n    };\r\n\r\n    const onApprovedSubmit = async () => {\r\n        setModalApproveLoading(true);\r\n        await onSubmit(modalApproveData);\r\n        onDataUpdate();\r\n        setModalApproveLoading(false);\r\n        setShowModalApprove(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <StyledForm\r\n                ref={formRef}\r\n                model={formModel}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                <StyledFieldWrapper grow={2}>\r\n                    <StyledField\r\n                        accepter={Input}\r\n                        name=\"prefix\"\r\n                        className=\"tableFilters_field\"\r\n                        errorPlacement=\"topEnd\"\r\n                        placeholder=\"CLI\"\r\n                        type=\"text\"\r\n                    />\r\n                </StyledFieldWrapper>\r\n\r\n                <StyledFieldWrapper grow={2}>\r\n                    <StyledField\r\n                        accepter={Input}\r\n                        name=\"description\"\r\n                        className=\"tableFilters_field\"\r\n                        errorPlacement=\"topEnd\"\r\n                        placeholder=\"Description\"\r\n                        type=\"text\"\r\n                    />\r\n                </StyledFieldWrapper>\r\n\r\n                <StyledFieldWrapper grow={2}>\r\n                    <StyledField\r\n                        accepter={SelectPicker}\r\n                        name=\"ivr_id\"\r\n                        className=\"tableFilters_field\"\r\n                        errorPlacement=\"topEnd\"\r\n                        data={ivrList}\r\n                        cleanable={false}\r\n                        searchable={false}\r\n                        placeholder=\"IVR\"\r\n                        valueKey=\"id\"\r\n                        labelKey=\"name\"\r\n                        type=\"text\"\r\n                    />\r\n                </StyledFieldWrapper>\r\n\r\n                <StyledSubmitWrapper>\r\n                    <Button\r\n                        className=\"tableFilters_submit\"\r\n                        color=\"green\"\r\n                        type=\"submit\"\r\n                        loading={loading}\r\n                    >\r\n                        <Icon icon=\"plus\"/>\r\n                    </Button>\r\n                </StyledSubmitWrapper>\r\n            </StyledForm>\r\n\r\n            <ModalSubmitRowApprove\r\n                show={showModalApprove}\r\n                onSubmit={onApprovedSubmit}\r\n                onClose={() => setShowModalApprove(false)}\r\n                disabled={modalApproveLoading}\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nconst StyledField = styled(FormControl).attrs(props => ({\r\n    className: \"tableFilters_field\",\r\n    errorPlacement: \"topEnd\",\r\n    placement: \"autoVerticalStart\",\r\n    type: \"text\",\r\n    cleanable: true,\r\n    searchable: true,\r\n}))`\r\n`;\r\n\r\nconst StyledFieldWrapper = styled.div`\r\n    flex-grow: ${props => props.grow || '0'};\r\n    flex-shrink: 0;\r\n    flex-basis: 200px;\r\n    padding: 5px 10px;\r\n    width: 174px;\r\n`;\r\nconst StyledSubmitWrapper = styled.div`\r\n    padding: 5px 10px;\r\n    width: 174px;\r\n`;\r\n\r\nconst StyledForm = styled(Form)`\r\n    display: flex;\r\n`;","/* \r\nComponent name: Table Edit Cells\r\nProduct: ATX\r\nDeveloper: Applesinkin\r\n\r\nPlease, do not change it. You can fork it to make changes...\r\n*/\r\n\r\n\r\nimport React, {useState, useEffect} from \"react\";\r\nimport {Button, FormControl, Icon, Table, Form} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport BaseTable from \"../../../components/base/BaseTable\";\r\nimport ModalSubmitRowApprove from \"./ModalSubmitRowApprove\";\r\nimport ModalRemoveRow from \"./ModalRemoveRow\";\r\nimport FormCreateRow from \"./FormCreateRow\";\r\n\r\nconst {Cell, Column, HeaderCell} = Table;\r\n\r\n\r\nexport default ({\r\n    data = [],\r\n    loading,\r\n    columns,\r\n    idKey = \"id\",\r\n    formModel = {},\r\n\r\n    onDataUpdate,\r\n    onModifyRow,\r\n    onRemoveRow,\r\n    checkParamsBeforeModify,\r\n\r\n    ivrList,\r\n\r\n    ...props\r\n}) => {\r\n\r\n    const refs = new Map();\r\n\r\n    const [editedRows, setEditedRows] = useState(new Map());\r\n    const [rowsLoading, setRowsLoading] = useState([]);\r\n\r\n    const [modalRemoveData, setModalRemoveData] = useState(null);\r\n    const [showRemoveModal, setShowRemoveModal] = useState(false);\r\n    const [removeDataLoading, setRemoveDataLoading] = useState(null);\r\n\r\n    const [modalApproveData, setModalApproveData] = useState(false);\r\n    const [showModalApprove, setShowModalApprove] = useState(false);\r\n    const [modalApproveLoading, setModalApproveLoading] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        // on data updated\r\n        const editedRowsCopy = new Map(editedRows);\r\n        const rowsLoadingCopy = new Set(rowsLoading);\r\n        for (const editedRowData of editedRows) {\r\n            const rowData = data.find(item => item[idKey] === editedRowData[0]);\r\n            if (rowData && JSON.stringify(rowData) !== JSON.stringify(editedRowData[1])) {\r\n                editedRowsCopy.delete(rowData[idKey]);\r\n                rowsLoadingCopy.delete(rowData[idKey]);\r\n            }\r\n        }\r\n        setEditedRows(editedRowsCopy);\r\n        setRowsLoading(Array.from(rowsLoadingCopy));\r\n    }, [data]);\r\n\r\n\r\n    const handleModifyRow = async (rowData) => {\r\n\r\n        // check form\r\n        const rowForms = refs.get(rowData[idKey]);\r\n\r\n        if (!rowForms) {\r\n            setRowEditing(rowData, false);\r\n            return;\r\n        }\r\n\r\n        for ( const form of Object.keys(rowForms) ) {\r\n            if (!rowForms[form].check()) {\r\n                return;\r\n            }\r\n        }\r\n\r\n\r\n        // get params\r\n        const params = Object.keys(rowForms)\r\n            .reduce( (sum, current) => (\r\n                {...sum, [current]: rowForms[current].getFormValue()[current]}\r\n            ), {[idKey]: rowData[idKey]} );\r\n\r\n\r\n        // check differences\r\n        const hasDifferences = Object.keys(params)\r\n            .reduce( (sum, current) => {\r\n                if (sum === true)\r\n                    return sum;\r\n                const value = ( rowData[current] !== null && !isNaN(rowData[current]) )\r\n                    ? +params[current]\r\n                    : params[current];\r\n                return rowData[current] !== value;\r\n            }, false );\r\n\r\n\r\n        if (!hasDifferences) {\r\n            setRowEditing(rowData, false);\r\n            setRowLoading(rowData, false);\r\n            return;\r\n        }\r\n\r\n\r\n        // Approve modal\r\n        if (checkParamsBeforeModify) {\r\n            const notApproved = checkParamsBeforeModify(params);\r\n            if (notApproved) {\r\n                setShowModalApprove(true);\r\n                setModalApproveData(params);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (!onModifyRow) {\r\n            return;\r\n        }\r\n\r\n        // approve modal with text and condition and on submit, remove loading when open. BaseModal is hear\r\n        // optimize refs array. share callbacks (row edit loading) in function except calss component\r\n        setRowLoading(rowData, true);\r\n        const res = await onModifyRow(params, rowData);\r\n        \r\n        setRowLoading(rowData, false);\r\n        \r\n        if (!res) {\r\n            return;\r\n        }\r\n\r\n        setRowEditing(rowData, false);\r\n\r\n        if (onDataUpdate) {\r\n            onDataUpdate();\r\n        }\r\n    };\r\n\r\n\r\n    const handleApprovedSubmit = async () => {\r\n        if (!onModifyRow) {\r\n            return;\r\n        }\r\n        setModalApproveLoading(true);\r\n        await onModifyRow(modalApproveData);\r\n        setModalApproveLoading(false);\r\n        setShowModalApprove(false);\r\n        \r\n        if (onDataUpdate) {\r\n            onDataUpdate();\r\n        }\r\n    };\r\n\r\n\r\n    const handleDeleteRow = async () => {\r\n        if (!onRemoveRow) {\r\n            return;\r\n        }\r\n        setRemoveDataLoading(true);\r\n        const res = await onRemoveRow(modalRemoveData[idKey]);\r\n        if (res) {\r\n            setRemoveDataLoading(false);\r\n            setShowRemoveModal(false);\r\n            setModalRemoveData(null);\r\n            \r\n            if (onDataUpdate) {\r\n                onDataUpdate();\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    const setRowEditing = (rowData, status) => {\r\n        const editedRowsCopy = new Map(editedRows);\r\n        if ( editedRows.has(rowData[idKey]) && !status) {\r\n            editedRowsCopy.delete(rowData[idKey]);\r\n        } else if (!editedRows.has(rowData[idKey] && status)) {\r\n            editedRowsCopy.set(rowData[idKey], rowData)\r\n        }\r\n        setEditedRows(editedRowsCopy);\r\n    };\r\n\r\n\r\n    const setRowLoading = (rowData, status) => {\r\n        if (!status) {\r\n            setRowsLoading( rowsLoading.filter(item => item !== rowData[idKey]) );\r\n            return;\r\n        }\r\n        setRowsLoading([...rowsLoading, rowData[idKey]]);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <StyledTable\r\n                data={data}\r\n                loading={loading}\r\n                className={'tableFilters'}\r\n                shouldUpdateScroll={false}\r\n                headerHeight={46}\r\n                rowHeight={46}\r\n                autoHeight\r\n                {...props}\r\n            >\r\n\r\n                \r\n                \r\n                {/* Row Cells */}\r\n\r\n                {columns.map( ({dataKey, dataValue, customValue, flexGrow = null, minWidth = 130, model, label = \"\", type, ...fieldProps}) => (\r\n                    <Column {...{flexGrow, minWidth}}>\r\n                        <HeaderCell>\r\n                            <span className=\"tableFilters__headerText\">{label}</span>\r\n                        </HeaderCell>\r\n                        <Cell {...{dataKey}}>\r\n                            {(rowData) => {\r\n                                if ( editedRows.has(rowData[idKey]) && fieldProps.accepter ) {\r\n                                    return (\r\n                                        <Form\r\n                                            ref={ref => {\r\n                                                if (!ref) {\r\n                                                    return;\r\n                                                }\r\n\r\n                                                if (refs.has(rowData[idKey])) {\r\n                                                    const currentRefsCopy = refs.get(rowData[idKey]);\r\n                                                    refs.set(rowData[idKey], {\r\n                                                        ...currentRefsCopy,\r\n                                                        [dataKey]: ref\r\n                                                    });\r\n                                                    return;\r\n                                                }\r\n                                                \r\n                                                refs.set(rowData[idKey], {[dataKey]: ref});\r\n                                            }}\r\n                                            model={model}\r\n                                            formDefaultValue={{[dataKey]: rowData[dataKey]}}\r\n                                        >\r\n                                            <EditField\r\n                                                name={dataKey}\r\n                                                {...fieldProps}\r\n                                            />\r\n                                        </Form>\r\n                                    );\r\n                                }\r\n\r\n                                return <span className=\"tableFilters__previewText\">{(customValue && customValue(rowData)) || rowData[dataValue || dataKey]}</span>\r\n                            }}\r\n                        </Cell>\r\n                    </Column>\r\n                ))}\r\n\r\n\r\n\r\n                {/* Row Actions */}\r\n\r\n                <Column width={174}>\r\n                    <HeaderCell></HeaderCell>\r\n                    <Cell>\r\n                        {rowData => {\r\n                            const rowLoading = rowsLoading.includes(rowData[idKey]);\r\n                            return <div className=\"tableFilters_buttons\">\r\n\r\n                                {!editedRows.has(rowData[idKey])\r\n                                    ? <Button\r\n                                        size=\"sm\"\r\n                                        color=\"lightblue\"\r\n                                        disabled={rowLoading}\r\n                                        onClick={() => setRowEditing(rowData, true)}\r\n                                    >\r\n                                        <Icon icon=\"edit2\"/>\r\n                                    </Button>\r\n                                    : <>\r\n                                        <Button\r\n                                            size=\"sm\"\r\n                                            color=\"green\"\r\n                                            disabled={rowLoading}\r\n                                            onClick={() => handleModifyRow(rowData)}\r\n                                        >\r\n                                            <Icon icon=\"check-circle\"/>\r\n                                        </Button>\r\n\r\n                                        <Button\r\n                                            size=\"sm\"\r\n                                            color=\"red\"\r\n                                            disabled={rowLoading}\r\n                                            onClick={() => setRowEditing(rowData, false)}\r\n                                        >\r\n                                            <Icon icon=\"close-circle\"/>\r\n                                        </Button>\r\n                                    </>\r\n                                }\r\n\r\n                                <Button\r\n                                    size=\"sm\"\r\n                                    color=\"red\"\r\n                                    disabled={rowLoading}\r\n                                    onClick={() => {\r\n                                        setModalRemoveData(rowData);\r\n                                        setShowRemoveModal(true);\r\n                                    }}\r\n                                >\r\n                                    <Icon icon=\"trash2\"/>\r\n                                </Button>\r\n                            </div>\r\n                        }}\r\n                    </Cell>\r\n                </Column>\r\n\r\n            </StyledTable>\r\n\r\n            <FormCreateRow \r\n                formModel={formModel}\r\n                ivrList={ivrList}\r\n                onSubmit={onModifyRow}\r\n                onDataUpdate={onDataUpdate}\r\n            />\r\n\r\n            <ModalRemoveRow\r\n                show={showRemoveModal}\r\n                onSubmit={handleDeleteRow}\r\n                onClose={() => setShowRemoveModal(false)}\r\n                disabled={removeDataLoading}\r\n            />\r\n\r\n            <ModalSubmitRowApprove\r\n                show={showModalApprove}\r\n                onSubmit={handleApprovedSubmit}\r\n                onClose={() => setShowModalApprove(false)}\r\n                disabled={modalApproveLoading}\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst StyledTable = styled(BaseTable)`\r\n    && {\r\n    \r\n        .tableFilters__previewText {\r\n            display: block;\r\n            line-height: 20px;\r\n            margin-top: 7px;\r\n            word-break: normal;\r\n        }\r\n        \r\n        .tableFilters_buttons {\r\n            height: 20px;\r\n            margin-top: 7px;\r\n        }\r\n    }\r\n`;\r\n\r\nconst EditField = styled(FormControl).attrs(() => ({\r\n    className: \"tableFilters_field\",\r\n    errorPlacement: \"topEnd\",\r\n    type: \"text\",\r\n    cleanable: true,\r\n    searchable: true,\r\n}))`\r\n`;\r\n\r\n","import React, {useMemo} from \"react\";\r\nimport {SelectPicker, Schema, Button, Icon} from \"rsuite\";\r\nimport TableEditCells from \"../../../components/Table/TableEditCells\";\r\nimport styled from \"styled-components\";\r\nimport {BaseButton} from \"../../../components/base/BaseButton\";\r\n\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\nconst formModelPrefix = Schema.Model({\r\n    prefix: StringType()\r\n        .isRequired('Required')\r\n        .pattern(/^[0-9][\\d]*$/, 'The number must contain only digits')\r\n        .minLength(6, 'The minimum is 6 characters.')\r\n        .maxLength(40, \"The maximum is 15 characters\"),\r\n});\r\nconst formModelDescription = Schema.Model({\r\n    description: StringType()\r\n    .isRequired('Required')\r\n});\r\nconst formModelIvr = Schema.Model({\r\n    ivr_id: StringType()\r\n    .isRequired('Required')\r\n});\r\nconst formModel = Schema.Model.combine(\r\n    formModelPrefix, \r\n    formModelDescription, \r\n    formModelIvr\r\n);\r\n\r\n\r\nexport default ({\r\n    data = [],\r\n    loading,\r\n    getIvrCliList,\r\n    ivrList,\r\n    handleSubmit,\r\n    handleRemove,\r\n    ...props\r\n}) => {\r\n\r\n\r\n    const handleUpdate = () => {\r\n        getIvrCliList();\r\n    }\r\n\r\n\r\n    const columns = useMemo(() => [\r\n        {\r\n            dataKey: \"prefix\",\r\n            dataValue: 'prefix',\r\n            flexGrow: 2,\r\n            label: 'CLI',\r\n        },\r\n        {\r\n            dataKey: 'description',\r\n            dataValue: 'description',\r\n            flexGrow: 2,\r\n            label: 'Description',\r\n        },\r\n        {\r\n            dataKey: 'ivr_id',\r\n            dataValue: 'ivr_name',\r\n            flexGrow: 2,\r\n            label: 'IVR',\r\n\r\n            placeholder: 'IVR',\r\n            accepter: SelectPicker,\r\n            model: formModelIvr,\r\n\r\n            data: ivrList,\r\n            valueKey: \"id\",\r\n            labelKey: \"name\",\r\n            searchable: false,\r\n            cleanable: false,\r\n        },\r\n        {\r\n            dataKey: 'listen',\r\n            customValue: () => (\r\n                <StyledButtonPlay buttonStyle=\"secondary\">\r\n                    <Icon icon=\"play\" />\r\n                </StyledButtonPlay>\r\n            )\r\n        }\r\n    ], [ivrList]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <TableEditCells\r\n                data={data}\r\n                loading={loading}\r\n                idKey=\"prefix\"\r\n                columns={columns}\r\n\r\n                formModel={formModel}\r\n\r\n                onDataUpdate={handleUpdate}\r\n                onModifyRow={handleSubmit}\r\n                onRemoveRow={handleRemove}\r\n\r\n                ivrList={ivrList}\r\n\r\n                {...props}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nconst StyledButtonPlay = styled(BaseButton)`\r\n    && {\r\n        padding: 0 0 0 3px;\r\n        width: 28px;\r\n        height: 28px;\r\n        line-height: 28px;\r\n        border-radius: 28px;\r\n        margin: -3px 0 0;\r\n        \r\n        .rs-icon {\r\n            line-height: 28px;\r\n            font-size: 13px;\r\n        }\r\n    }\r\n`;\r\n","import {IVR_CLI as PREFIX} from '../const/';\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from  './defaults';\r\nimport {IVR_CLI_LIST_API} from \"../const/apiMethods\";\r\n\r\nconst setIvrCliList = createAction('SET_ITEMS_' + PREFIX);\r\nconst setLoading = createAction('SET_LOADING_' + PREFIX);\r\n\r\nexport const getIvrCliList = () => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    api(IVR_CLI_LIST_API)\r\n        .then(({ivr_cli_list}) => {\r\n            if (ivr_cli_list === undefined) {\r\n                return;\r\n            }\r\n            dispatch(setIvrCliList({\r\n                list: ivr_cli_list.map(item => ({\r\n                    ...item,\r\n                    ivr_id: item.ivr ? item.ivr.id : '',\r\n                    ivr_name: item.ivr ? item.ivr.name : '',\r\n                }))\r\n            }));\r\n        })\r\n        .finally(() => dispatch(setLoading(false)));\r\n};","import {connect} from 'react-redux';\r\nimport PageIvrSpecialCli from './PageIvrSpecialCli';\r\nimport {getIvrCliList} from '../../../actions/ivr_cli';\r\nimport {getIvrList} from '../../../actions/ivr';\r\n\r\nconst mapState = ({ivr_cli, ivr}) => ({\r\n    list: ivr_cli.list,\r\n    loading: ivr_cli.loading,\r\n    ivrList: ivr.list,\r\n});\r\n\r\nexport default connect(mapState, {\r\n    getIvrCliList,\r\n    getIvrList\r\n})(PageIvrSpecialCli);","import React, {useEffect} from \"react\";\r\nimport PageIvrSpecialCliFilter from \"./PageIvrSpecialCliFilter\";\r\nimport PageIvrSpecialCliTable from \"./PageIvrSpecialCliTable\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\nimport {api} from \"api/loginRoutes\";\r\nimport {IVR_CLI_CREATE_MODIFY_API, IVR_CLI_REMOVE_API} from \"../../../const/apiMethods\";\r\n\r\n\r\nexport default (\r\n    {\r\n        list,\r\n        loading,\r\n        ivrList,\r\n        getIvrCliList,\r\n        getIvrList,\r\n    }\r\n) => {\r\n\r\n    useEffect(() => {\r\n        getIvrCliList();\r\n        getIvrList();\r\n    }, []);\r\n\r\n\r\n    const handleSubmit = (formValue, data) => {\r\n        \r\n        const params = {\r\n            target: {\r\n                ivr_id: formValue.ivr_id\r\n            },\r\n            prefix: formValue.prefix || data.prefix\r\n        }\r\n\r\n        if (formValue.description) {\r\n            params.description = formValue.description;\r\n        }\r\n\r\n        return api(IVR_CLI_CREATE_MODIFY_API, params).then(r => r)\r\n    }\r\n\r\n    const handleRemove = (prefix) => {\r\n        return api(IVR_CLI_REMOVE_API, {\r\n            prefix: prefix\r\n        }).then(r => r)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Spacer size={30}/>\r\n            \r\n            <PageIvrSpecialCliFilter\r\n                style={{flexShrink: 0}}\r\n            />\r\n\r\n            <Spacer size={30}/>\r\n\r\n            <PageIvrSpecialCliTable\r\n                data={list}\r\n                loading={loading}\r\n                getIvrCliList={getIvrCliList}\r\n                ivrList={ivrList}\r\n                handleSubmit={handleSubmit}\r\n                handleRemove={handleRemove}\r\n            />\r\n        </>\r\n    )\r\n};","import {IVR_DEFAULT as PREFIX} from '../const/';\r\nimport {api} from '../api/loginRoutes';\r\nimport {createAction} from  './defaults';\r\nimport {IVR_DEFAULT_API, IVR_SET_DEFAULT_API} from \"../const/apiMethods\";\r\nimport {Alert} from 'rsuite';\r\n\r\nconst setDefaultIvr = createAction('SET_ITEMS_' + PREFIX);\r\nconst setLoading = createAction('SET_LOADING_' + PREFIX);\r\n\r\nexport const getDefaultIvr = () => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    api(IVR_DEFAULT_API)\r\n        .then(({ivr_default}) => {\r\n            if (ivr_default === undefined) {\r\n                return;\r\n            }\r\n            dispatch(setDefaultIvr({ivr_default}));\r\n        })\r\n        .finally(() => dispatch(setLoading(false)));\r\n};\r\n\r\n\r\nexport const changeDefaultIvr = (params) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    api(IVR_SET_DEFAULT_API, params)\r\n        .then((r) => {\r\n            if (r && r.ivr) {\r\n                Alert.success(\"Default IVR was successfully changed\");\r\n            }\r\n        })\r\n        .finally(() => dispatch(setLoading(false)));\r\n};","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Form, FormControl, Message, SelectPicker} from \"rsuite\";\r\nimport {BaseButton} from \"../../../components/base/BaseButton\";\r\nimport { Spacer } from \"../../../components/base/Spacer\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nexport default (\r\n    {\r\n        ivrDefault,\r\n        ivrList,\r\n        getIvrList,\r\n        getDefaultIvr,\r\n        changeDefaultIvr\r\n    }\r\n) => {\r\n\r\n    const formRef = useRef(null);\r\n    const [value, setValue] = useState({});\r\n\r\n    \r\n    useEffect(() => {\r\n        if (!ivrDefault || !ivrDefault.id) {\r\n            setValue({});\r\n            return;    \r\n        }\r\n        \r\n        setValue({ivr_id: ivrDefault.id});\r\n    }, [ivrDefault]);\r\n\r\n\r\n    useEffect(() => {\r\n        getIvrList();\r\n        getDefaultIvr();\r\n    }, []);\r\n\r\n\r\n    const handleSubmit = () => {\r\n        if (!value || !value.ivr_id) {\r\n            return;\r\n        }\r\n\r\n        changeDefaultIvr({target: {ivr_id: value.ivr_id}});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Spacer size={30}/>\r\n\r\n            <Message\r\n                showIcon\r\n                type=\"warning\"\r\n                description=\"This IVR will be played if no other is not applicable. Changing this IVR will affect a lot of traffic.\"\r\n            />\r\n\r\n            <Spacer size={20}/>\r\n\r\n            <StyledForm\r\n                ref={formRef}\r\n                formValue={value}\r\n                onChange={setValue}\r\n            >\r\n                <FormControl\r\n                    accepter={SelectPicker}\r\n                    name={\"ivr_id\"}\r\n                    data={ivrList}\r\n                    valueKey=\"id\"\r\n                    labelKey=\"name\"\r\n                    cleanable={false}\r\n                />\r\n                <BaseButton\r\n                    buttonStyle=\"primary\"\r\n                    onClick={handleSubmit}\r\n                >\r\n                    Save\r\n                </BaseButton>\r\n            </StyledForm>\r\n        </>\r\n    )\r\n};\r\n\r\n\r\nconst StyledForm = styled(Form)`\r\n    display: flex;\r\n\r\n    .rs-picker-toggle-wrapper {\r\n        width: 100%;\r\n    }\r\n\r\n    .rs-form-control-wrapper {\r\n        max-width: 300px;\r\n        margin-right: 20px;\r\n    }\r\n    \r\n    .rs-btn {\r\n        flex-shrink: 0;\r\n        padding-left: 34px;\r\n        padding-right: 34px;\r\n    }\r\n`;","import {connect} from 'react-redux';\r\nimport {getIvrList} from \"../../../actions/ivr\";\r\nimport {getDefaultIvr, changeDefaultIvr} from \"../../../actions/ivr_default\";\r\nimport PageIvrDefault from \"./PageIvrDefault\";\r\n\r\nconst mapState = ({ivr, ivr_default}) => ({\r\n    ivrDefault: ivr_default.ivrDefault,\r\n    ivrList: ivr.list,\r\n});\r\n\r\nexport default connect(mapState, {\r\n    getIvrList,\r\n    getDefaultIvr,\r\n    changeDefaultIvr,\r\n})(PageIvrDefault);","import React, {useState} from \"react\";\r\nimport PageTabs from \"../../components/PageTabs\";\r\nimport {Panel} from \"rsuite\";\r\nimport PageIvrs from \"./PageIvrs\";\r\nimport PageIvrSounds from \"./PageIvrSounds\";\r\nimport PageIvrSpecialCli from \"./PageIvrSpecialCli\";\r\nimport PageIvrDefault from \"./PageIvrDefault\";\r\n\r\nexport default ({}) => {\r\n\r\n    const [activeTab, setActiveTab] = useState(\"ivrs\");\r\n\r\n    const menuItems = [\r\n        {id: \"ivrs\", eventKey: \"ivrs\", title: \"IVRs\"},\r\n        {id: \"sounds\", eventKey: \"sounds\", title: \"Sounds\"},\r\n        {id: \"special-cli-ivrs\", eventKey: \"special-cli-ivrs\", title: \"Special CLI IVRs\"},\r\n        {id: \"default-ivr\", eventKey: \"default-ivr\", title: \"Default IVR\"},\r\n    ];\r\n\r\n    return (\r\n        <Panel style={{marginTop: 10, marginBottom: 20}} classPrefix=\"white-panel\">\r\n            <PageTabs\r\n                onSelect={setActiveTab}\r\n                activeTab={activeTab}\r\n                {...{\r\n                    menuItems\r\n                }}\r\n            />\r\n\r\n            {(() => {\r\n                switch (activeTab) {\r\n                    case 'ivrs':\r\n                        return (\r\n                            <PageIvrs />\r\n                        );\r\n                    case 'sounds':\r\n                        return (\r\n                            <PageIvrSounds />\r\n                        );\r\n                    case 'special-cli-ivrs':\r\n                        return (\r\n                            <PageIvrSpecialCli />\r\n                        );\r\n\r\n                    case 'default-ivr':\r\n                        return (\r\n                            <PageIvrDefault />\r\n                        );\r\n\r\n                    default:\r\n                        return null;\r\n                }\r\n            })()}\r\n        </Panel>\r\n    )\r\n};","import React from \"react\";\r\nimport {Redirect, Switch} from \"react-router\";\r\nimport AuthRoute from \"../components/Router/AuthRoute\";\r\nimport Payments from \"../pages/Payments\";\r\nimport Accounts from \"../containers/Accounts\";\r\nimport AccountView from \"../pages/Account\";\r\nimport NewAccount from \"../containers/CreateAccount\";\r\nimport AccessList from \"../pages/AccessList/AccessList\";\r\nimport LiveCalls from \"../pages/LiveCalls\";\r\nimport Prices from \"../pages/Prices/Prices\";\r\nimport RangesNumbers from \"../pages/RangesAndNumbers/Ranges\";\r\nimport CDRPage from \"../pages/CDR/CDRPage\";\r\nimport TrafficReportsPage from \"../pages/TrafficReports/TrafficReportsPage\";\r\nimport AuthNumbers from \"../pages/AuthNumbers/AuthNumbers\";\r\nimport Reload from \"../components/Reload\";\r\nimport AccessListException from \"../pages/AccessListException/AccessListException\";\r\nimport SIMTrafficRangesPage from \"../pages/SIMTrafficRanges/SIMTrafficRangesPage\";\r\nimport BlockedDestinationsPage from \"../pages/BlockedDestinations/BlockedDestinationsPage\";\r\nimport ActionLogs from \"../pages/ActionLogs\";\r\nimport GoogleOtpQuarantined from \"../pages/GoogleOtpQuarantined\";\r\nimport AmActivities from \"../pages/AmActivities\";\r\nimport AccountManagers from \"../pages/AccountManagers\";\r\nimport SettingsPage from \"../pages/Settings/SettingsPage\";\r\nimport PriceRangeQuarantineSetting from \"../pages/PriceRangeQuarantineSetting\";\r\nimport RegistrationRequests from '../pages/RegistrationRequests';\r\nimport {DEFAULT_AUTH_PATH_ADMIN} from \"../const\";\r\nimport GoogleOtpAllocation from '../pages/GoogleOtpAllocation';\r\nimport Ivr from \"../pages/Ivr/Ivr\";\r\n\r\n\r\nexport default ({auth}) => {\r\n    return (\r\n        <Switch>\r\n            <AuthRoute exact path=\"/payments\" component={Payments}/>\r\n            <AuthRoute exact path=\"/accounts\" component={Accounts}/>\r\n            <AuthRoute exact path=\"/accounts/view/:id\" component={AccountView}/>\r\n            <AuthRoute exact path=\"/accounts/new\" component={NewAccount}/>\r\n            <AuthRoute exact path=\"/access-list\" component={AccessList}/>\r\n            <AuthRoute exact path=\"/live-calls\" component={LiveCalls}/>\r\n            <AuthRoute exact path=\"/prices\" component={Prices}/>\r\n            <AuthRoute exact path=\"/ranges-numbers\" component={RangesNumbers}/>\r\n            <AuthRoute exact path=\"/cdr\" component={CDRPage}/>\r\n            <AuthRoute exact path=\"/traffic-reports\" component={TrafficReportsPage}/>\r\n            <AuthRoute exact path=\"/auth-numbers\" component={AuthNumbers}/>\r\n            <AuthRoute exact path=\"/reload\" component={Reload}/>\r\n            <AuthRoute exact path=\"/exceptions-accesses\" component={AccessListException}/>\r\n            <AuthRoute exact path=\"/sim-traffic-ranges\" component={SIMTrafficRangesPage}/>\r\n            <AuthRoute exact path=\"/blocked-destinations\" component={BlockedDestinationsPage}/>\r\n            <AuthRoute exact path=\"/action-logs\" component={ActionLogs}/>\r\n            <AuthRoute exact path=\"/google-otp-quarantined-ranges\" component={GoogleOtpQuarantined}/>\r\n            <AuthRoute exact path=\"/am-activities\" component={AmActivities}/>\r\n            <AuthRoute exact path=\"/account-managers\" component={AccountManagers}/>\r\n            <AuthRoute exact path=\"/settings\" component={SettingsPage}/>\r\n            <AuthRoute exact path=\"/special-quarantine-terms\" component={PriceRangeQuarantineSetting}/>\r\n            <AuthRoute exact path=\"/registration-requests\" component={RegistrationRequests}/>\r\n            <AuthRoute exact path=\"/google-otp-allocation-subdestination\" component={GoogleOtpAllocation}/>\r\n            <AuthRoute exact path=\"/ivrs\" component={Ivr}/>\r\n\r\n            <Redirect to={DEFAULT_AUTH_PATH_ADMIN}/>\r\n        </Switch>\r\n    )\r\n}","export const _setValue = (prefix) => (items) => ({\r\n    type: prefix,\r\n    payload: items\r\n})\r\n","import {LIVE_CALLS_DIALER as PREFIX} from '../../const'\r\nimport {api} from '../../api/loginRoutes'\r\nimport {_setValue} from './defaults'\r\nimport {LIVE_CALLS_LIST_DIALER_API} from \"../../const/apiMethods\";\r\n\r\nconst setItems = _setValue('SET_ITEMS_' + PREFIX);\r\nconst setLoading = _setValue('SET_LOADING_' + PREFIX);\r\n\r\nexport const getLiveCalls = (testCalls = false) => (dispatch) => {\r\n    dispatch( setLoading(true) );\r\n    api(LIVE_CALLS_LIST_DIALER_API, {test_calls: testCalls})\r\n        .then((response) => {\r\n            dispatch( setLoading(false) );\r\n            if (response === undefined)\r\n                return;\r\n\r\n            dispatch(setItems({\r\n                live_calls_list: response.live_call_list || []\r\n            }))\r\n        })\r\n};","import styled from 'styled-components';\r\nimport { Form, InputGroup, FormControl } from 'rsuite';\r\n\r\nimport {SCREEN_MEDIA} from \"../../../const\";\r\n\r\nconst {sm} = SCREEN_MEDIA;\r\n\r\nexport const PaginationContainer = styled.div.attrs(() => ({\r\n    className: \"pagination-container\"\r\n}))`\r\n    align-items: center;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding-bottom: 5px;\r\n    padding-top: 20px;\r\n\r\n    @media (min-width: ${sm.min}px) {\r\n        justify-content: stretch;\r\n    }\r\n    \r\n    && {\r\n        .rs-pagination {\r\n            border: 1px solid var(--color-grey);\r\n            border-radius: 3px;\r\n            \r\n            a {\r\n                color: #c4c4c4;\r\n                border-right: 1px solid #c4c4c4;\r\n                border-radius: 0 !important;\r\n            }\r\n            \r\n            .rs-pagination-btn:last-child a {\r\n                border-right: none;\r\n            }\r\n            \r\n            & > li.rs-pagination-btn-active > a,\r\n            & > li.rs-pagination-btn-active > a:hover,\r\n            & > li.rs-pagination-btn-active > a:focus,\r\n            & > li.rs-pagination-btn-active > a:active,\r\n            & > li.rs-pagination-btn-active > a:active:hover,\r\n            & > li.rs-pagination-btn-active > a:active:focus,\r\n            & > li.rs-pagination-btn-active > a:active.focus,\r\n            & > li.rs-pagination-btn-active > a.focus {\r\n                color: #fff;\r\n                background-color: var(--color-brand2);\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const PaginationForm = styled(Form).attrs(() => ({\r\n    className: \"pagination-form\"\r\n}))`\r\n    flex-shrink: 1;\r\n    margin-left: 5px;\r\n    position: relative;\r\n\r\n    @media (min-width: ${sm.min}px) {\r\n        margin-left: 15px\r\n    }\r\n\r\n    .rtl & {\r\n        margin-left: 0;\r\n        margin-right: 5px;\r\n\r\n        @media (min-width: ${sm.min}px) {\r\n            margin-right: 15px\r\n        }\r\n    }\r\n`;\r\n\r\nexport const PaginationFormGroup = styled(InputGroup).attrs(() => ({\r\n    className: \"pagination-group\"\r\n}))`\r\n    \r\n    &&& {\r\n        border-color: var(--color-grey);\r\n        border-radius: 3px;\r\n        padding: 0px;\r\n        width: auto;\r\n    }\r\n`;\r\n\r\nexport const PaginationFormGroupCount = styled(InputGroup.Addon).attrs(() => ({\r\n    className: \"pagination-group-count\"\r\n}))`\r\n    &&& {\r\n        background-color: var(--color-light);\r\n        padding: 5px; \r\n        min-width: 20px; \r\n        padding-left: 2px;\r\n\r\n        .rtl & {\r\n            padding-left: 0;\r\n            padding-right: 2px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const PaginationFormField = styled(FormControl).attrs(() => ({\r\n    className: \"pagination-field\"\r\n}))`\r\n    \r\n    &&&& {\r\n        min-width: 30px;\r\n        height: 24px;\r\n        border-radius: 3px;\r\n        padding-left: 11px;\r\n        padding-right: 2px;\r\n        width: calc(100vw - 355px);\r\n        \r\n        &::placeholder {\r\n            color: var(--color-grey);\r\n            opacity: .75;\r\n        }\r\n    \r\n        @media (min-width: ${sm.min}px) {\r\n            width: 114px;\r\n        }\r\n    \r\n        .rtl & {\r\n            padding-left: 2px;\r\n            padding-right: 11px;\r\n        }\r\n    }    \r\n`;\r\n\r\nexport const PaginationTotal = styled.span.attrs(() => ({\r\n    className: \"pagination-total\"\r\n}))`\r\n    align-self: flex-start;\r\n    display: none;\r\n    flex-shrink: 0;\r\n    margin-left: auto;\r\n    opacity: 0.6;\r\n\r\n    @media (min-width: ${sm.min}px) {\r\n        display: block;\r\n    }\r\n\r\n    .rtl & {\r\n        margin-left: 0;\r\n        margin-right: auto;\r\n    }\r\n`;","import React from 'react';\r\nimport {Pagination, Schema} from 'rsuite';\r\nimport {debounce} from 'lodash';\r\nimport {useIntl} from \"react-intl\";\r\nimport {DEFAULT_PER_PAGE_DIALER} from \"../../../const\";\r\nimport {useWindowWidth} from \"../../../hooks\";\r\nimport * as S from './styled';\r\nimport m from \"../../../definedMessages\"\r\n\r\nconst {NumberType} = Schema.Types;\r\n\r\nconst perPageModel = Schema.Model({\r\n    per_page: NumberType()\r\n        .isInteger('Integer')\r\n        .isRequired('Required')\r\n        .min(1, 'Minimum 1')\r\n        .max(10000, 'Maximum 10000'),\r\n});\r\n\r\nexport default (\r\n    {\r\n        total = 0,\r\n        per_page = DEFAULT_PER_PAGE_DIALER,\r\n        activePage = 1,\r\n        limitWidth = 475,\r\n        savedPerPage,\r\n        hidePerPage,\r\n        hideTotalCount,\r\n        onChangePage = () => {},\r\n        onChangePerPage\r\n    }\r\n) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    return (\r\n        <S.PaginationContainer>\r\n            <Pagination \r\n                size=\"xs\"\r\n                pages={Math.ceil(total / per_page)}\r\n                activePage={activePage || 1}\r\n                total={total || 0}\r\n                // onChangePage={onChangePage}\r\n                maxButtons={3}\r\n                onSelect={onChangePage}\r\n                boundaryLinks={resizedWidth > (limitWidth + 250)}\r\n                ellipsis={resizedWidth > (limitWidth + 250)}\r\n                first={resizedWidth < (limitWidth + 250)}\r\n                last={resizedWidth < (limitWidth + 250)}\r\n                next\r\n                prev\r\n            />\r\n            \r\n            {!hidePerPage &&\r\n\r\n                <S.PaginationForm\r\n                    onChange={debounce(({per_page = 0}) => {\r\n                        return per_page ? onChangePerPage(+per_page) : null\r\n                    }, 500)}\r\n                    model={perPageModel}\r\n                >\r\n                    <S.PaginationFormGroup>\r\n\r\n                        <S.PaginationFormField\r\n                            name=\"per_page\"\r\n                            errorPlacement=\"topEnd\"\r\n                            placeholder={resizedWidth > (limitWidth - 50) ? formatMessage(m.rowsPerPage) + ':' : ''}\r\n                        />\r\n\r\n                        <S.PaginationFormGroupCount>\r\n                            {savedPerPage || per_page}\r\n                        </S.PaginationFormGroupCount>\r\n\r\n                    </S.PaginationFormGroup>\r\n                </S.PaginationForm>\r\n            }\r\n\r\n            {!hideTotalCount &&\r\n                <S.PaginationTotal>\r\n                    {(resizedWidth > (limitWidth + 75)) && formatMessage(m.total) + ':'} {total}\r\n                </S.PaginationTotal>\r\n            }\r\n        </S.PaginationContainer>\r\n    );\r\n}","import styled from \"styled-components\";\r\nimport {Icon} from 'rsuite';\r\n\r\nexport const MenuShowColumnsIcon = styled(Icon)`\r\n    \r\n    && {\r\n        position: absolute;\r\n        z-index: 6;\r\n        margin-left: 10px;\r\n        margin-top: 8px;\r\n        color: white;\r\n\r\n        .rtl & {\r\n            margin-left: 0;\r\n            margin-right: 10px;\r\n        }\r\n    }\r\n`;","import styled from 'styled-components';\r\n\r\nexport const SpeakerContainer = styled.div`\r\n    text-align: ${props => props.rtl ? 'left' : 'right'};\r\n`;","import React from 'react';\r\nimport {ButtonToolbar, ButtonDefault} from '../../base/BaseButton';\r\nimport * as S from './styled';\r\n\r\nconst Speaker = ({\r\n    successText = \"Yes\",\r\n    cancelText = \"No, only on this page\",\r\n    onSuccess = () => {}, \r\n    onCancel = () => {},\r\n    rtl = false\r\n}) => {\r\n    \r\n    return (\r\n        <S.SpeakerContainer rtl={rtl}>\r\n            <ButtonToolbar>\r\n                <ButtonDefault appearance=\"default\" onClick ={onSuccess}>{successText}</ButtonDefault>\r\n                <ButtonDefault appearance=\"default\" onClick ={onCancel} >{cancelText}</ButtonDefault>\r\n            </ButtonToolbar>\r\n        </S.SpeakerContainer>\r\n    )\r\n};\r\n\r\nexport default Speaker","import React, {Component, useContext} from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport {Notification, Table, Checkbox, CheckPicker} from 'rsuite';\r\nimport {injectIntl} from 'react-intl';\r\nimport Pagination from '../../../components/client/Pagination';\r\nimport {DEFAULT_PER_PAGE_DIALER, TWO_STAGE_DEFAULT_PER_PAGE_DIALER} from '../../../const';\r\nimport {MenuShowColumnsIcon} from '../../../components/base/MenuShowColumns';\r\nimport Speaker from '../Speaker';\r\nimport styled from 'styled-components';\r\nimport BaseTable from \"../../base/BaseTable\";\r\nimport m from \"../../../definedMessages\";\r\nimport {RtlContext} from \"../../../App\";\r\n\r\nconst { Column, HeaderCell, Cell } = Table;\r\n\r\n\r\nclass CustomizableTable extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.selectedList = new Set();\r\n\r\n        this.formatMessage = props.intl.formatMessage.bind(props.intl);\r\n\r\n        this.state = {\r\n            columnMenuShow: false,\r\n            selectedRows: new Set(),\r\n            selectAll: false\r\n        }\r\n    }\r\n\r\n    onChangeColumnsTable = (columns) => {\r\n        this.props.onChangeColumns(columns)\r\n    };\r\n\r\n    onOpenColumnChangeMenu = (changed) => {\r\n        this.setState({columnMenuShow: changed})\r\n    };\r\n\r\n    getColumnsFromIds = (id_list) => {\r\n        return this.props.pickedColumns.filter(elem=>id_list.includes(elem.id));\r\n    };\r\n\r\n    onToggleItem = (id, isChecked) => {\r\n        const {useSelectedData, data = [], row_key = 'id'} = this.props;\r\n\r\n        if(isChecked) {\r\n            this.selectedList.add(id);\r\n        } else {\r\n            this.selectedList.delete(id);\r\n        }\r\n\r\n        if (useSelectedData) {\r\n            const checkedData = data.filter(item => item[row_key] === id);\r\n            useSelectedData(checkedData, isChecked)\r\n        }\r\n\r\n        this.setSelectParent();\r\n        this.forceUpdate();\r\n    };\r\n\r\n    onToggleAll = (isChecked) => {\r\n        const {selectAll} = this.state;\r\n        const {data, isPaginated, isSelectedAll, useSelectedData} = this.props;\r\n\r\n        if (!isChecked) {\r\n            Notification.close(\"allocatedNumberChooser\");\r\n        }\r\n\r\n        if (isSelectedAll && isChecked && !selectAll && isPaginated) {\r\n            const placement = this.props.rtl ? 'topStart' : 'topEnd';\r\n            Notification.open({\r\n                top: 67,\r\n                duration: 0,\r\n                description: [\r\n                    <div key=\"description\" className=\"mb-2\">\r\n                        {this.formatMessage(m.doYouWantToChooseRecordsOnAllPages)}\r\n                    </div>,\r\n                    <div key='speaker'>\r\n                        <Speaker\r\n                            successText={this.formatMessage(m.yes)}\r\n                            cancelText={this.formatMessage(m.onlyOnThisPage)}\r\n                            onSuccess={() => {\r\n                                this.setState({selectAll: true}, this.setSelectParent);\r\n                                Notification.closeAll();\r\n                            }}\r\n                            onCancel={() => {\r\n                                Notification.closeAll();\r\n                            }}\r\n                        />\r\n                    </div>\r\n                ],\r\n                key: 'allocatedNumberChooser',\r\n                placement\r\n            });\r\n        } else if (!isChecked && selectAll) {\r\n            this.setState({selectAll: false}, this.setSelectParent);\r\n        }\r\n\r\n        for (let row of data) {\r\n            isChecked\r\n                ? this.selectedList.add(this.gettingSelectedItem(row))\r\n                : this.selectedList.delete(this.gettingSelectedItem(row))\r\n        }\r\n\r\n        if (useSelectedData) {\r\n            useSelectedData(data, isChecked)\r\n        }\r\n\r\n        this.setSelectParent();\r\n        this.forceUpdate();\r\n    };\r\n\r\n    setSelectParent = () => {\r\n        const {setSelected} = this.props;\r\n        const {selectAll} = this.state;\r\n\r\n        if (!setSelected) return;\r\n\r\n        setSelected({\r\n            list: Array.from(this.selectedList.values()),\r\n            all: selectAll\r\n        })\r\n    };\r\n\r\n    gettingSelectedItem = (row) => {\r\n        const { row_key = 'id' } = this.props;\r\n        return row[row_key];\r\n    };\r\n\r\n    clear = () => {\r\n        const { isSelect } = this.props;\r\n        const {selectAll } = this.state;\r\n        if(isSelect) {\r\n            this.selectedList.clear();\r\n\r\n            if(selectAll) {\r\n                this.setState({selectAll: false}, this.setSelectParent)\r\n            } else {\r\n                this.setSelectParent()\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        const {\r\n            data,\r\n            pickedColumns,\r\n            renderedColumns,\r\n            savedTableColumns,\r\n            count,\r\n            per_page,\r\n            savedPerPage,\r\n            page,\r\n            loading,\r\n            onChangePage,\r\n            onChangePerPage,\r\n            onSaveColumnsTable,\r\n            isSelect,\r\n            isChangedColumns,\r\n            isPaginated,\r\n            actionColumn,\r\n            defaultPerPage,\r\n            wordWrap = false,\r\n            calculatedOuterHeight,\r\n            rowHeight = 35,\r\n            headerHeight = 35,\r\n            twoStaged,\r\n            isMobile = false,\r\n            rowClassName = \"\",\r\n            extraRows = 0,\r\n            rtl,\r\n            ...props\r\n        } = this.props;\r\n\r\n        const {columnMenuShow, selectAll} = this.state;\r\n\r\n        const getColumnsFromIds = this.getColumnsFromIds;\r\n        const onChangeColumnsTable = this.onChangeColumnsTable;\r\n        const onOpenColumnChangeMenu = this.onOpenColumnChangeMenu;\r\n\r\n        const defaultColumns = pickedColumns && pickedColumns.map(({id: value, label})=>({value, label}));\r\n        const savedDefaultColumns = savedTableColumns && savedTableColumns.length ? getColumnsFromIds(savedTableColumns).map(({id: value, label})=>({value, label})) : [];\r\n\r\n        if (actionColumn) {\r\n            const column = actionColumn();\r\n            renderedColumns.push(column);\r\n        }\r\n\r\n        let everyRowsChecked = false;\r\n        if (data.length && data.every(\r\n            row => this.selectedList.has(this.gettingSelectedItem(row))\r\n        )) {\r\n            everyRowsChecked = true\r\n        }\r\n\r\n        const columnChecked = (\r\n            <Column key=\"table_toggle\" width={50}>\r\n                <HeaderCell>\r\n                    <Checkbox\r\n                        onChange={(value, isChecked) => this.onToggleAll(isChecked)}\r\n                        checked={selectAll || everyRowsChecked}\r\n                        className=\"columnCheckbox\"\r\n                    />\r\n                </HeaderCell>\r\n                <Cell>\r\n                    {(row) => <Checkbox\r\n                        disabled={selectAll}\r\n                        checked = { row.checked || this.selectedList.has(this.gettingSelectedItem(row)) || selectAll}\r\n                        onChange={(value, isChecked) => this.onToggleItem(this.gettingSelectedItem(row), isChecked)}\r\n                        className=\"columnCheckbox\"\r\n                    />}\r\n                </Cell>\r\n            </Column>\r\n        );\r\n\r\n        if (isSelect && data.length) {\r\n            renderedColumns.push(columnChecked);\r\n        }\r\n\r\n        // add fixing column to fix horizontal scroll\r\n        const columnMobileFix = (\r\n            <Column key=\"table_scrollfix\" width={0} fixed>\r\n                <HeaderCell></HeaderCell>\r\n                <Cell></Cell>\r\n            </Column>\r\n        );\r\n        renderedColumns.push(columnMobileFix);\r\n\r\n        // reverse columns for RTL. Haven't found good CSS solution to fix yet\r\n        if (rtl) renderedColumns.reverse();\r\n\r\n        \r\n        // Calculate table height\r\n        const calculatedTableHeight = window.innerHeight - (calculatedOuterHeight || 410);\r\n        const defaultTableRowsHeight = (defaultPerPage || (twoStaged ? TWO_STAGE_DEFAULT_PER_PAGE_DIALER + extraRows : DEFAULT_PER_PAGE_DIALER + extraRows)) * (rowHeight || 35) + (headerHeight || 35);\r\n        // const calculatedTableRows = Math.floor(calculatedTableHeight / (rowHeight || 35));\r\n\r\n        return (\r\n            <>\r\n                {\r\n                    !!columnMenuShow &&\r\n                        ReactDOM.createPortal(\r\n                            <CheckPickerPortal onClick={()=>onOpenColumnChangeMenu(false)}/>\r\n                        , document.body)\r\n                }\r\n\r\n                {isChangedColumns &&\r\n                    <MenuShowColumnsIcon\r\n                        icon={!columnMenuShow ? 'align-justify' : 'indent'}\r\n                        onClick={() => onOpenColumnChangeMenu(!columnMenuShow)}\r\n                    />\r\n                }\r\n                <StyledCheckPicker className=\"checkPicker__container\">\r\n                    <CheckPicker\r\n                        data={defaultColumns}\r\n                        defaultValue={savedDefaultColumns && savedDefaultColumns.length ? savedDefaultColumns.map(({value})=>value) : defaultColumns && defaultColumns.map(({value})=>value)}\r\n                        onChange={id => {\r\n                            const idList = id.filter(item=>typeof item === 'string');\r\n                            const comparedColumns = getColumnsFromIds(idList);\r\n                            onChangeColumnsTable(comparedColumns, idList);\r\n                            onSaveColumnsTable(idList);\r\n                        }}\r\n                        open={columnMenuShow}\r\n                        searchable={false}\r\n                        sticky={true}\r\n                        className=\"checkPicker\"\r\n                    />\r\n                </StyledCheckPicker>\r\n\r\n\r\n                <StyledTable\r\n                    virtualized={!isMobile}\r\n                    height={calculatedTableHeight < defaultTableRowsHeight ? defaultTableRowsHeight : calculatedTableHeight}\r\n                    autoHeight={isMobile || (calculatedTableHeight <= defaultTableRowsHeight && data.length === (twoStaged ? TWO_STAGE_DEFAULT_PER_PAGE_DIALER + extraRows : defaultPerPage || DEFAULT_PER_PAGE_DIALER + extraRows))}\r\n                    headerHeight={isMobile ? undefined : headerHeight}\r\n                    data={data.sort((a, b) => {\r\n                        return a.datetime > b.datetime;\r\n                    })}\r\n                    loading={loading}\r\n                    wordWrap={wordWrap || isMobile}\r\n                    rowHeight={isMobile ? undefined : rowHeight}\r\n                    rowClassName={rowClassName}\r\n                    {...props}\r\n                >\r\n                    {renderedColumns}\r\n                </StyledTable>\r\n                {\r\n                    isPaginated &&\r\n                    <Pagination\r\n                        total={count}\r\n                        per_page={per_page}\r\n                        savedPerPage={savedPerPage}\r\n                        activePage={page}\r\n                        onChangePage={onChangePage}\r\n                        onChangePerPage={onChangePerPage}\r\n                    />\r\n                }\r\n            </>\r\n\r\n        )}\r\n};\r\n\r\nexport default injectIntl(CustomizableTable, {forwardRef: true})\r\n\r\nconst CheckPickerPortal = styled.div`\r\n    width: 100%;\r\n    height: ${() => document.body.offsetHeight - 56}px;\r\n    top: 56px;\r\n    left: 0;\r\n    position: absolute;\r\n    z-index: 5;\r\n`;\r\n\r\nconst StyledCheckPicker = styled.div`\r\n    width: 220px;\r\n    position: absolute;\r\n    \r\n    .checkPicker {\r\n        width: 100%;\r\n        visibility: hidden;\r\n    }\r\n`;\r\n\r\nexport const StyledTable = styled(BaseTable)`\r\n    .rs-table-cell-content {\r\n        // line-height: 26px;\r\n    }\r\n`;","import React, {useContext, useState} from 'react';\r\nimport {renderColumn} from '../../utils/helpers';\r\nimport CustomizableTable from '../../components/client/CustomizableTable/CustomizableTable';\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport {RtlContext} from \"../../App\";\r\n\r\nexport default FormHOC(({\r\n    data,\r\n    loading,\r\n    count,\r\n    page,\r\n    per_page,\r\n    pickedColumns,\r\n    savedTableColumns,\r\n    savedPerPage,\r\n    onChangePerPage,\r\n    onChangePage,\r\n    onSaveColumnsTable,\r\n    ...props\r\n}) => {\r\n\r\n    const [columns, onChangeColumns] = useState(savedTableColumns && savedTableColumns.length ? pickedColumns.filter(elem => savedTableColumns.includes(elem.id)) : pickedColumns);\r\n    const rtl = useContext(RtlContext);\r\n\r\n    const renderedColumns = columns.map(renderColumn);\r\n    return (\r\n        <CustomizableTable\r\n            {...{\r\n                rtl,\r\n                data,\r\n                count,\r\n                page,\r\n                per_page,\r\n                loading,\r\n                pickedColumns,\r\n                savedPerPage,\r\n                onChangePage,\r\n                onChangePerPage,\r\n                renderedColumns,\r\n                onChangeColumns,\r\n                onSaveColumnsTable,\r\n                savedTableColumns,\r\n                ...props\r\n            }}\r\n            isChangedColumns={true}\r\n            isPaginated={true}\r\n            rowClassName={rowData => {\r\n                if (rowData && rowData.is_test_call) {\r\n                    return \"rs-table-row rs-table-row--test-call-highlighted\";\r\n                }\r\n\r\n                return \"\";\r\n            }}\r\n        />\r\n    );\r\n});\r\n\r\n","import {Component} from 'react';\r\nimport React from 'react';\r\nimport Form from 'rsuite/es/Form';\r\n\r\nexport class CustomizableForm extends Component {\r\n\r\n    renderFields = (children) => {\r\n        const {disabled} = this.props;\r\n\r\n        return React.Children.map(children, child => {\r\n\r\n            // return a child that is not a React element\r\n            if (!React.isValidElement(child)) {\r\n                return child\r\n            }\r\n\r\n            const props = {};\r\n\r\n            // add status \"disabled\" to FormControl\r\n            if (this.props.formDefaultValue) {\r\n                if (Object.keys(this.props.formDefaultValue).includes(child.props.name)) {\r\n                    props['disabled'] = disabled;\r\n                }\r\n            }\r\n\r\n            // clone element children if it has\r\n            if (child.props.children) {\r\n                child = React.cloneElement(child, {\r\n                    ...props,\r\n                    children: this.renderFields(child.props.children)\r\n                })\r\n            } else {\r\n                child = React.cloneElement(child, props)\r\n            }\r\n\r\n            // return cloned child\r\n            return child\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const {children} = this.props;\r\n\r\n        return (\r\n            <Form\r\n                {...this.props}\r\n            >\r\n                {this.renderFields(children)}\r\n            </Form>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {FormControl, Schema} from 'rsuite';\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport {CustomizableForm} from '../../components/client/Form/CustomizableForm';\r\nimport {debounce} from 'lodash';\r\nimport {injectIntl} from \"react-intl\";\r\nimport {compose} from \"redux\";\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport { FlexGrid, FlexGridItem } from '../../components/base/FlexGrid';\r\nimport m from \"../../definedMessages\";\r\nimport {BaseInputField} from \"../../components/base/BaseForm\";\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\nconst MAX_CHARACTERS = 40;\r\n\r\nconst LiveCallsFilters = (({\r\n    loading, \r\n    onChangeFilters, \r\n    savedTableFilter, \r\n    intl\r\n}) => {\r\n\r\n    const {formatMessage} = intl;\r\n\r\n    const filtersModel = Schema.Model({\r\n            number_destination: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS}))\r\n        }\r\n    );\r\n\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    const onSubmit = (data, checkedData) => {\r\n        const checker = Object.keys(checkedData)\r\n            .map(i => checkedData[i].hasError)\r\n            .every(value => value === false);\r\n\r\n        if (checker) {\r\n            onChangeFilters({...data});\r\n        }\r\n        return false;\r\n    };\r\n\r\n    return (\r\n        <CustomizableForm\r\n            model={filtersModel}\r\n            formDefaultValue={savedTableFilter || {number_destination: ''}}\r\n            onChange={debounce((data) => {\r\n                const checkedData = filtersModel.check(data);\r\n                onSubmit(data, checkedData);\r\n            }, 1000)}\r\n            fluid\r\n            readOnly={loading}\r\n        >\r\n            <FlexGrid align=\"middle\">\r\n                <FlexGridItem width=\"260px\">\r\n                   <FormControl\r\n                       accepter={BaseInputField}\r\n                       name='number_destination'\r\n                       errorPlacement='topEnd'\r\n                       placeholder={resizedWidth > 300 ? formatMessage(m.filterPerNumOrDest) : 'Numbers/Destination'}\r\n                   />\r\n                </FlexGridItem>\r\n            </FlexGrid>\r\n        </CustomizableForm>\r\n    );\r\n});\r\n\r\nexport default compose(\r\n    FormHOC,\r\n    injectIntl\r\n)(LiveCallsFilters)\r\n","import React from 'react';\r\nimport {Form} from 'rsuite';\r\nimport Checkbox from '../../components/Form/CheckboxControl';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nexport default ({onChangeFilters}) => {\r\n\r\n    const onSubmit = (filters) => {\r\n        onChangeFilters(filters);\r\n    }\r\n\r\n    return (\r\n        <Form onChange={onSubmit}>\r\n            <Checkbox name=\"test_calls\">\r\n                <FormattedMessage id=\"liveCalls.showTestCallsToo\" defaultMessage=\"Show test calls too\" />\r\n            </Checkbox>\r\n        </Form>\r\n    )\r\n\r\n};","import React from 'react';\r\nimport {FormattedMessage, injectIntl} from \"react-intl\";\r\nimport styled from 'styled-components';\r\nimport {Icon} from 'rsuite';\r\n\r\nimport LiveCallsTable from './LiveCallsTable';\r\nimport LiveCallsFilters from './LiveCallsFilters';\r\nimport LiveCallsApiFilters from './LiveCallsApiFilters';\r\nimport {\r\n    TWO_STAGE_DEFAULT_PER_PAGE_DIALER,\r\n    LOCAL_STORAGE_LIVE_CALLS_COLUMNS_DIALER,\r\n    LOCAL_STORAGE_LIVE_CALLS_FILTERS_DIALER,\r\n    LOCAL_STORAGE_LIVE_CALLS_PER_PAGE_DIALER,\r\n    MIN_PER_PAGE_DIALER\r\n} from '../../const';\r\nimport PageHeader from '../../components/base/PageHeader';\r\nimport {FlexGridItem, FlexGrid} from '../../components/base/FlexGrid';\r\nimport { Spacer } from '../../components/base/Spacer';\r\nimport {ButtonPrimary} from '../../components/base/BaseButton';\r\nimport m from \"../../definedMessages\";\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\nimport {LOCAL_STORAGE_LIVE_CALLS_AUTO_UPDATE, LOCAL_STORAGE_USER_INFO} from \"../../const/localStorageKeys\";\r\nimport LiveCallsAutoUpdateForm from \"../../pages/LiveCalls/LiveCallsAutoUpdateForm\";\r\n\r\n\r\nclass LiveCalls extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.filter = {number_destination: ''};\r\n        this.filterApi = {test_calls: false};\r\n\r\n        this.curPerPage = null;\r\n        this.curPage = null;\r\n        this.isTest = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')).session.account.is_test : false;\r\n        this.formatMessage = props.intl.formatMessage.bind(props.intl);\r\n        const savedAutoUpdate = localStorage.getItem(LOCAL_STORAGE_LIVE_CALLS_AUTO_UPDATE);\r\n        const timerValue = savedAutoUpdate && !isNaN(savedAutoUpdate) && parseFloat(savedAutoUpdate) <= 100000\r\n            ? savedAutoUpdate\r\n            : null;\r\n        this.state = {\r\n            show: false,\r\n            searchLoading: false,\r\n            savedTableFilter: JSON.parse(localStorage.getItem(LOCAL_STORAGE_LIVE_CALLS_FILTERS_DIALER)),\r\n            savedPerPage: JSON.parse(localStorage.getItem(LOCAL_STORAGE_LIVE_CALLS_PER_PAGE_DIALER)),\r\n            savedTableColumns: JSON.parse(localStorage.getItem(LOCAL_STORAGE_LIVE_CALLS_COLUMNS_DIALER)),\r\n            resizedWidth: window.innerWidth,\r\n            paginatedData: [],\r\n            numbersCount: 0,\r\n\r\n            autoUpdateFormValue: {\r\n                timer: timerValue || null\r\n            },\r\n        };\r\n\r\n        this.updateDataTimer = null;\r\n\r\n        this.columns = [\r\n            {\r\n                id: 'a_number', \r\n                label: this.formatMessage(m.aNumber),\r\n                dataKey: 'a_number', \r\n                flexGrow: 2,\r\n                minWidth: 120,\r\n                align: 'center',\r\n                value: ({a_number, a_subdestination_name}) => {\r\n                    return (\r\n                        <div className=\"table-two-staged__cell\">\r\n                            <div className=\"table-two-staged__cell-first\">{a_number}</div>\r\n                            <div className=\"table-two-staged__cell-second\">{a_subdestination_name}</div>\r\n                        </div>\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                id: 'b_number', \r\n                label: this.formatMessage(m.bNumber),\r\n                dataKey: 'b_number', \r\n                flexGrow: 2,\r\n                minWidth: 120,\r\n                align: 'center',\r\n                value: ({b_number, b_subdestination_name}) => {\r\n                    return (\r\n                        <div className=\"table-two-staged__cell\">\r\n                            <div className=\"table-two-staged__cell-first\">{b_number}</div>\r\n                            <div className=\"table-two-staged__cell-second\">{b_subdestination_name}</div>\r\n                        </div>\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                id: 'range',\r\n                label: this.formatMessage(m.range),\r\n                dataKey: 'range',\r\n                flexGrow: 4,\r\n                minWidth: 200,\r\n                align: 'center',\r\n                value: ({range, rate_term}) => {\r\n                    return (\r\n                        <div className=\"table-two-staged__cell\">\r\n                            <div className=\"table-two-staged__cell-first\">{range}</div>\r\n                            <div className=\"table-two-staged__cell-second\">Rate: {rate_term}</div>\r\n                        </div>\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                id: 'term',\r\n                label: `${this.state.resizedWidth > 1366 ? this.formatMessage(m.terminationPoint) : this.formatMessage(m.termPoint)}`,\r\n                flexGrow: 2,\r\n                minWidth: 120,\r\n                align: 'center',\r\n                value: ({ip_term, port_term})=> {\r\n                    return (\r\n                        <div className=\"table-two-staged__cell\">\r\n                            <div className=\"table-two-staged__cell-single\">{`${ip_term}:${port_term}`}</div>\r\n                        </div>\r\n                    )\r\n                },\r\n            },\r\n            {\r\n                id: 'duration',\r\n                label: this.formatMessage(m.duration),\r\n                dataKey: 'duration',\r\n                flexGrow: 1,\r\n                minWidth: 80,\r\n                align: 'center',\r\n                value: ({duration})=> {\r\n                    return (\r\n                        <div className=\"table-two-staged__cell\">\r\n                            <div className=\"table-two-staged__cell-single\">{duration}</div>\r\n                        </div>\r\n                    )\r\n                },\r\n            },\r\n        ]\r\n    }\r\n\r\n    handleResize = () => {\r\n        this.setState({resizedWidth: window.innerWidth});\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {savedPerPage} = this.state;\r\n        const {getLiveCalls} = this.props;\r\n\r\n        this.curPerPage = savedPerPage;\r\n        getLiveCalls();\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const {live_calls_list} = this.props;\r\n        if (prevProps.live_calls_list !== live_calls_list) {\r\n            this.setState({paginatedData: this.getPaginatedData(live_calls_list)});\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize);\r\n        if (this.updateDataTimer) {\r\n            clearTimeout(this.updateDataTimer);\r\n            this.updateDataTimer = null;\r\n        }\r\n    }\r\n\r\n    onChangeApiFilters = (filtersObj) => {\r\n        const {getLiveCalls, live_calls_list} = this.props;\r\n        this.curPage = 1;\r\n        this.filterApi = filtersObj;\r\n        getLiveCalls(!!filtersObj.test_calls);\r\n        this.setState({\r\n            paginatedData: this.getPaginatedData(live_calls_list)\r\n        });\r\n    }\r\n\r\n    onChangeFilters = (filtersObj) => {\r\n        const {searchLoading} = this.state;\r\n        const {live_calls_list} = this.props;\r\n\r\n        if (!searchLoading) this.setState({searchLoading: true});\r\n\r\n        const intervalTimer = () => {\r\n            setTimeout(() => {\r\n                this.setState({searchLoading: false});\r\n            }, 500);\r\n        };\r\n\r\n        this.filter = filtersObj;\r\n\r\n        this.setState({paginatedData: this.getPaginatedData(live_calls_list)});\r\n        localStorage.setItem(LOCAL_STORAGE_LIVE_CALLS_FILTERS_DIALER, JSON.stringify(this.filter));\r\n\r\n        intervalTimer();\r\n    };\r\n\r\n    onChangePerPage = (perPage) => {\r\n        const {searchLoading} = this.state;\r\n        const {live_calls_list} = this.props;\r\n\r\n        if (perPage)\r\n            this.setState({savedPerPage: null});\r\n        else\r\n            this.setState({savedPerPage: this.curPerPage});\r\n\r\n        if (!searchLoading) this.setState({searchLoading: true});\r\n\r\n        const intervalTimer = () => {\r\n            setTimeout(() => {\r\n                this.setState({searchLoading: false});\r\n            }, 500);\r\n        };\r\n        const per_page = Number(perPage) || this.curPerPage;\r\n\r\n        per_page <= 0 ? this.curPerPage = MIN_PER_PAGE_DIALER : per_page > 100 ? this.curPerPage = 100 : this.curPerPage = per_page;\r\n\r\n        this.setState({paginatedData: this.getPaginatedData(live_calls_list)});\r\n        localStorage.setItem(LOCAL_STORAGE_LIVE_CALLS_PER_PAGE_DIALER, JSON.stringify(this.curPerPage));\r\n\r\n        intervalTimer();\r\n    };\r\n\r\n    onChangePage = (pageNumber) => {\r\n        const {searchLoading} = this.state;\r\n        const {live_calls_list} = this.props;\r\n\r\n        if (!searchLoading) this.setState({searchLoading: true});\r\n\r\n        const intervalTimer = () => {\r\n            setTimeout(() => {\r\n                this.setState({searchLoading: false});\r\n            }, 1000);\r\n        };\r\n        intervalTimer();\r\n        this.curPage = pageNumber;\r\n\r\n\r\n        this.setState({paginatedData: this.getPaginatedData(live_calls_list)});\r\n\r\n    };\r\n\r\n    getPaginatedData = (data) => {\r\n        const {savedPerPage, savedTableFilter} = this.state;\r\n\r\n        const page = this.curPage || 1;\r\n        const per_page = this.curPerPage || savedPerPage || TWO_STAGE_DEFAULT_PER_PAGE_DIALER;\r\n        const filterValue = savedTableFilter && savedTableFilter.number_destination\r\n            ? savedTableFilter.number_destination\r\n            : this.filter && this.filter.number_destination\r\n                ? this.filter.number_destination\r\n                : '';\r\n        const dataValue = data.filter((value) => {\r\n            return value && (\r\n                (value.a_number && value.a_number.includes(filterValue))\r\n                || (value.b_number && value.b_number.includes(filterValue))\r\n                || (value.a_subdestination_name && value.a_subdestination_name.includes(filterValue))\r\n                || (value.b_subdestination_name && value.b_subdestination_name.includes(filterValue))\r\n                || (value.termination_point && value.termination_point.includes(filterValue))\r\n            )\r\n\r\n        });\r\n\r\n        this.setState({numbersCount: dataValue.length});\r\n\r\n        return dataValue ? dataValue.slice(page * per_page - per_page, page * per_page) : [];\r\n    };\r\n\r\n    onSaveColumnsTable = (idListToSave) => {\r\n        localStorage.setItem(LOCAL_STORAGE_LIVE_CALLS_COLUMNS_DIALER, JSON.stringify(idListToSave));\r\n    };\r\n\r\n    onUpdateData = () => {\r\n        const {getLiveCalls} = this.props;\r\n        getLiveCalls(this.filterApi.test_calls || false);\r\n    };\r\n\r\n    onTableDataUpdate = () => {\r\n        const {autoUpdateFormValue} = this.state;\r\n        if (!autoUpdateFormValue.timer && this.updateDataTimer) {\r\n            clearTimeout(this.updateDataTimer);\r\n            return;\r\n        }\r\n\r\n        if (this.updateDataTimer) {\r\n            clearTimeout(this.updateDataTimer);\r\n        }\r\n\r\n        this.updateDataTimer = setTimeout(() => {\r\n            this.onUpdateData()\r\n        }, autoUpdateFormValue.timer * 1000);\r\n    };\r\n\r\n    onChangeAutoUpdateValue = (value) => {\r\n        const timer = isNaN(value.timer) || !parseFloat(value.timer) ? \"\" : value.timer;\r\n        localStorage.setItem(LOCAL_STORAGE_LIVE_CALLS_AUTO_UPDATE, timer);\r\n        this.setState(() => ({autoUpdateFormValue: {timer}}), this.onTableDataUpdate);\r\n    };\r\n\r\n    render() {\r\n        const {searchLoading, savedTableFilter, savedPerPage, paginatedData, savedTableColumns, numbersCount, autoUpdateFormValue} = this.state;\r\n        const {loading} = this.props;\r\n\r\n        const onUpdateData =  this.onUpdateData;\r\n        const onChangePage = this.onChangePage;\r\n        const onChangePerPage = this.onChangePerPage;\r\n        const onSaveColumnsTable = this.onSaveColumnsTable;\r\n        const onChangeAutoUpdateValue = this.onChangeAutoUpdateValue;\r\n        const onTableDataUpdate = this.onTableDataUpdate;\r\n\r\n        return (\r\n            <PanelLayout>\r\n                <PageHeader title={<FormattedMessage id=\"liveCalls.liveCalls.header\" defaultMessage=\"LIVE CALLS\" />}/>\r\n\r\n                <FlexGrid justify=\"space-between\">\r\n                    <FlexGridItem>\r\n                        <FlexGrid>\r\n                            <FlexGridItem>\r\n                                <LiveCallsFilters\r\n                                    onChangeFilters={this.onChangeFilters}\r\n                                    loading={loading || searchLoading}\r\n                                    {...{savedTableFilter}}\r\n                                />\r\n                            </FlexGridItem>\r\n                            {!this.isTest &&\r\n                                <FlexGridItem>\r\n                                    <LiveCallsApiFilters\r\n                                        onChangeFilters={this.onChangeApiFilters}\r\n                                    />\r\n                                </FlexGridItem>\r\n                            }\r\n                        </FlexGrid>\r\n                    </FlexGridItem>\r\n                    <FlexGridItem>\r\n                        <StyledUpdateBlock>\r\n                            <LiveCallsAutoUpdateForm\r\n                                formDefaultValue={autoUpdateFormValue}\r\n                                onChange={onChangeAutoUpdateValue}\r\n                            />\r\n                            <ButtonPrimary\r\n                                onClick={onUpdateData}\r\n                                loading={loading}\r\n                            >\r\n                                <StyledActionButtonIcon icon='refresh'/>\r\n                                {this.formatMessage(m.updateData)}\r\n                            </ButtonPrimary>\r\n                        </StyledUpdateBlock>\r\n                    </FlexGridItem>\r\n                </FlexGrid>\r\n                \r\n                <Spacer/>\r\n\r\n                <LiveCallsTable\r\n                    count={numbersCount || 0}\r\n                    data={paginatedData.length ? paginatedData : []}\r\n                    page={this.curPage || 1}\r\n                    per_page={this.curPerPage || savedPerPage || TWO_STAGE_DEFAULT_PER_PAGE_DIALER}\r\n                    loading={loading || searchLoading}\r\n                    pickedColumns={this.columns}\r\n                    rowHeight={46}\r\n                    twoStaged={true}\r\n                    onDataUpdated={onTableDataUpdate}\r\n                    {...{\r\n                        onChangePage,\r\n                        onChangePerPage,\r\n                        onSaveColumnsTable,\r\n                        savedTableColumns,\r\n                        savedPerPage,\r\n                    }}\r\n                />\r\n            </PanelLayout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default injectIntl(LiveCalls)\r\n\r\nconst StyledActionButtonIcon = styled(Icon)`\r\n    margin-right: 5px;\r\n    \r\n    .rtl & {\r\n        margin-left: 5px;\r\n        margin-right: 0;\r\n    }\r\n`;\r\n\r\nconst StyledUpdateBlock = styled.div`\r\n    text-align: center;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: flex-start;\r\n    margin-bottom: -10px;\r\n    \r\n    & > * {\r\n        margin-bottom: 10px;\r\n    }\r\n    \r\n    .rs-form {\r\n        margin-right: 20px;\r\n    }\r\n    \r\n    @media (min-width: 768px) {\r\n        text-align: right;\r\n    }\r\n`;","import {connect} from 'react-redux';\r\nimport {getLiveCalls} from '../../actions/client/liveCalls';\r\nimport LiveCalls from './LiveCalls';\r\n\r\nconst mapState = ({client_live_calls}) => ({\r\n    loading: client_live_calls.loading,\r\n    live_calls_list: client_live_calls.live_calls_list,\r\n    page: client_live_calls.page,\r\n    per_page: client_live_calls.per_page,\r\n    count: client_live_calls.count,\r\n});\r\n\r\nexport default connect(mapState, {getLiveCalls})(LiveCalls);\r\n","import React, {useContext} from 'react';\r\nimport {renderColumn} from '../../utils/helpers';\r\nimport {useIntl} from \"react-intl\";\r\nimport CustomizableTable from '../../components/client/CustomizableTable/CustomizableTable';\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport m from \"../../definedMessages\";\r\nimport {RtlContext} from \"../../App\";\r\n\r\nexport default ({data = [], loading, page, count, per_page, savedPerPage, onChangePerPage, onChangePage}) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n    const windowWidth = useWindowWidth();\r\n    const rtl = useContext(RtlContext);\r\n\r\n    const columns = [\r\n        {\r\n            id: 'datetime', \r\n            label: formatMessage(m.calltime),\r\n            dataKey: 'datetime', \r\n            align: 'center',\r\n            flexGrow: 2,\r\n            minWidth: 120,\r\n            value: ({datetime}) => {\r\n                return (\r\n                    <div className=\"table-two-staged__cell\">\r\n                        <div className=\"table-two-staged__cell-single\">{datetime}</div>\r\n                    </div>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            id: 'a_number', \r\n            label: formatMessage(m.aNumber), \r\n            dataKey: 'a_number',\r\n            flexGrow: 2,\r\n            minWidth: 120, \r\n            align: 'center',\r\n            value: ({a_number, a_subdestination_name}) => {\r\n                return (\r\n                    <div className=\"table-two-staged__cell\">\r\n                        <div className=\"table-two-staged__cell-first\">{a_number}</div>\r\n                        <div className=\"table-two-staged__cell-second\">{a_subdestination_name}</div>\r\n                    </div>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            id: 'b_number', \r\n            label: formatMessage(m.bNumber), \r\n            dataKey: 'b_number',\r\n            flexGrow: 2,\r\n            minWidth: 120, \r\n            align: 'center',\r\n            value: ({b_number, b_subdestination_name}) => {\r\n                return (\r\n                    <div className=\"table-two-staged__cell\">\r\n                        <div className=\"table-two-staged__cell-first\">{b_number}</div>\r\n                        <div className=\"table-two-staged__cell-second\">{b_subdestination_name}</div>\r\n                    </div>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            id: 'range', \r\n            label: formatMessage(m.range), \r\n            dataKey: 'range', \r\n            flexGrow: 4,\r\n            minWidth: 200, \r\n            align: 'center',\r\n            value: ({range}) => {\r\n                return (\r\n                    <div className=\"table-two-staged__cell\">\r\n                        <div className=\"table-two-staged__cell-single\">{range}</div>\r\n                    </div>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            id: 'duration', \r\n            label: formatMessage(m.duration), \r\n            dataKey: 'duration', \r\n            flexGrow: 2,\r\n            minWidth: 120, \r\n            align: 'center',\r\n            value: ({duration}) => {\r\n                return (\r\n                    <div className=\"table-two-staged__cell\">\r\n                        <div className=\"table-two-staged__cell-single\">{duration}</div>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    ];\r\n\r\n    const renderedColumns = columns.map(renderColumn);\r\n\r\n    return (\r\n        <>\r\n            <CustomizableTable\r\n                {...{\r\n                    rtl,\r\n                    data,\r\n                    count,\r\n                    page,\r\n                    per_page,\r\n                    loading,\r\n                    savedPerPage,\r\n                    onChangePage,\r\n                    onChangePerPage,\r\n                    renderedColumns\r\n                }}\r\n                data={data}\r\n                isMobile={windowWidth < 768}\r\n                rowHeight={46}\r\n                twoStaged={true}\r\n                isChangedColumns={false}\r\n                isPaginated={true}\r\n            />\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport {ControlLabel, FormControl, FormGroup, HelpBlock} from 'rsuite';\r\nimport s from './CustomField.module.css';\r\n\r\nexport default class extends React.PureComponent {\r\n    render() {\r\n        const {name, message, label, accepter, error, inline = false, ...props} = this.props;\r\n        let formGroupClasses = [s.formGroup];\r\n\r\n        if (error)\r\n            formGroupClasses.push('has-error');\r\n\r\n        if (inline)\r\n            formGroupClasses.push(s.inline);\r\n\r\n        return (\r\n            <FormGroup className={formGroupClasses.join(\" \")}>\r\n                {\r\n                    ( () => label ? <ControlLabel className={s.label}>{label}</ControlLabel> : <></> )()\r\n                }\r\n                <div className={s.field}>\r\n                    <FormControl\r\n                        className={s.input}\r\n                        name={name}\r\n                        accepter={accepter}\r\n                        errorMessage={error}\r\n                        {...props}\r\n                    />\r\n                </div>\r\n                {(() => message ? <HelpBlock>{message}</HelpBlock> : <></>)()}\r\n            </FormGroup>\r\n        )\r\n    }\r\n}","import React, {useState} from 'react';\r\nimport {DateRangePicker, Schema} from 'rsuite';\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport {removeTZFromDate} from '../../utils/helpers';\r\nimport {debounce} from 'lodash';\r\nimport {CustomizableForm} from '../../components/client/Form/CustomizableForm';\r\nimport {useIntl} from \"react-intl\";\r\nimport {compose} from \"redux\";\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport {FlexGrid, FlexGridItem} from '../../components/base/FlexGrid';\r\nimport CustomField from '../../components/client/Form/CustomField/CustomField';\r\nimport m from \"../../definedMessages\";\r\nimport {BaseDateRangePicker, BaseInputField} from \"../../components/base/BaseForm\";\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\nconst MAX_CHARACTERS = 40;\r\n\r\nconst TestCallsFilters = ({loading, onChangeFilters, savedTableFilter, ...props}) => {\r\n    const {formatMessage} = useIntl();\r\n\r\n    const filtersModel = Schema.Model({\r\n            a_number: StringType()\r\n                .pattern(/^\\d+$/, formatMessage(m.correctNumber))\r\n                .maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})),\r\n            b_number: StringType()\r\n                .pattern(/^\\d+$/, formatMessage(m.correctNumber))\r\n                .maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})),\r\n        }\r\n    );\r\n\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    // let form;\r\n\r\n    const todayDateStart = new Date(new Date().setHours(0, 0, 0, 0));\r\n    const todayDateEnd = new Date(new Date().setHours(23, 59, 59, 999));\r\n    const [changedFormValue, changeFormData] = useState(savedTableFilter || {\r\n        start_end_date: [todayDateStart, todayDateEnd],\r\n        start_date: null,\r\n        end_date: null,\r\n        a_number: '',\r\n        b_number: ''\r\n    });\r\n\r\n    const onSubmit = (data, checkedData) => {\r\n        const checker = Object.keys(checkedData).map(i => checkedData[i].hasError).every(value => value === false);\r\n\r\n        if (checker) {\r\n            onChangeFilters({\r\n                ...data,\r\n                start_date: removeTZFromDate(data.start_date),\r\n                end_date: removeTZFromDate(data.end_date),\r\n            });\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const calendarPlacement = resizedWidth >= 768 ? (props.rtl ? \"bottomEnd\" : \"bottomStart\") : 'auto';\r\n\r\n    return (\r\n        <CustomizableForm\r\n            // ref={ref => (form = ref)}\r\n            model={filtersModel}\r\n            onChange={debounce((data) => {\r\n                const startDate = new Date(new Date(data.start_end_date[0]).setHours(0, 0, 0, 0));\r\n                const endDate = new Date(new Date(data.start_end_date[1]).setHours(23, 59, 59, 999));\r\n                const formData = {...data, start_date: startDate, end_date: endDate};\r\n                const checkedData = filtersModel.check(formData);\r\n                onSubmit(formData, checkedData);\r\n                changeFormData(formData);\r\n            }, 1000)}\r\n            formDefaultValue={savedTableFilter || {\r\n                    start_end_date: [todayDateStart, todayDateEnd],\r\n                    start_date: null,\r\n                    end_date: null,\r\n                    a_number: '',\r\n                    b_number: ''\r\n                }\r\n            }\r\n            // formValue={changedFormValue}\r\n            fluid\r\n            readOnly={loading}\r\n        >\r\n\r\n            <FlexGrid align=\"middle\">\r\n\r\n                {\r\n                    (resizedWidth > 912) &&\r\n                        <FlexGridItem>{formatMessage(m.fromDate)}</FlexGridItem>\r\n                }\r\n                <FlexGridItem width={resizedWidth > 767 ? \"230px\" : \"100%\"}>\r\n                    <CustomField\r\n                        name=\"start_end_date\"\r\n                        placement={calendarPlacement}\r\n                        showOneCalendar={resizedWidth <= 767}\r\n                        accepter={BaseDateRangePicker}\r\n                        value={[changedFormValue.start_end_date[0], changedFormValue.start_end_date[1]]}\r\n                        cleanable={false}\r\n                        ranges={[\r\n                            {\r\n                                label: formatMessage(m.yesterday),\r\n                                value: [\r\n                                    new Date(new Date(new Date().setDate(new Date().getDate() - 1)).setHours(0, 0, 0, 0)),\r\n                                    new Date(new Date(new Date().setDate(new Date().getDate() - 1)).setHours(23, 59, 59, 999))\r\n                                ]\r\n                            }, {\r\n                                label: formatMessage(m.today),\r\n                                value: [\r\n                                    new Date(new Date().setHours(0, 0, 0, 0)),\r\n                                    new Date(new Date().setHours(23, 59, 59, 999))\r\n                                ]\r\n                            }, {\r\n                                label: formatMessage(m.last7Days),\r\n                                value: [\r\n                                    new Date(new Date(new Date().setDate(new Date().getDate() - 6)).setHours(0, 0, 0, 0)),\r\n                                    new Date(new Date().setHours(23, 59, 59, 999))\r\n                                ]\r\n                            }]}\r\n                    />\r\n                </FlexGridItem>\r\n\r\n                <FlexGridItem width={resizedWidth > 767 ? \"230px\" : \"100%\"}>\r\n                    <CustomField\r\n                        accepter={BaseInputField}\r\n                        name=\"a_number\"\r\n                        errorPlacement=\"topEnd\"\r\n                        placeholder={formatMessage(m.aNumber)}\r\n                    />\r\n                </FlexGridItem>\r\n\r\n                <FlexGridItem width={resizedWidth > 767 ? \"230px\" : \"100%\"}>\r\n                    <CustomField\r\n                        accepter={BaseInputField}\r\n                        name=\"b_number\"\r\n                        errorPlacement=\"topEnd\"\r\n                        placeholder={formatMessage(m.bNumber)}\r\n                    />\r\n\r\n                </FlexGridItem>\r\n            </FlexGrid>\r\n        </CustomizableForm>\r\n    );\r\n};\r\n\r\nexport default compose(\r\n    FormHOC\r\n)(TestCallsFilters)","import React from 'react';\r\nimport PageHeader from '../../components/base/PageHeader';\r\nimport TestCallsTable from './TestCallsTable';\r\nimport TestCallsFilters from './TestCallsFilters';\r\nimport {objectIsEmpty, removeTZFromDate} from '../../utils/helpers';\r\nimport {\r\n    LOCAL_STORAGE_TEST_CALLS_FILTERS_DIALER,\r\n    LOCAL_STORAGE_TEST_CALLS_PER_PAGE_DIALER,\r\n    MAX_PER_PAGE_DIALER,\r\n    MIN_PER_PAGE_DIALER\r\n} from '../../const';\r\nimport {FormattedMessage} from \"react-intl\";\r\nimport {FlexGrid, FlexGridItem} from '../../components/base/FlexGrid';\r\nimport {Spacer} from '../../components/base/Spacer';\r\nimport {Drawer, FlexboxGrid, Icon, IconButton} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\n\r\n\r\nexport default class extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.filter = {};\r\n        this.defaultFilter = {\r\n            start_date: removeTZFromDate(new Date(new Date().setHours(0, 0, 0, 0))),\r\n            end_date: removeTZFromDate(new Date(new Date().setHours(23, 59, 59, 999)))\r\n        };\r\n        this.curPerPage = null;\r\n\r\n        this.state = {\r\n            searchLoading: false,\r\n            savedTableFilter: JSON.parse(localStorage.getItem(LOCAL_STORAGE_TEST_CALLS_FILTERS_DIALER)),\r\n            savedPerPage: JSON.parse(localStorage.getItem(LOCAL_STORAGE_TEST_CALLS_PER_PAGE_DIALER)),\r\n            resizedWidth: window.innerWidth,\r\n            activeFiltersCount: 0,\r\n            showFilters: false,\r\n        };\r\n    }\r\n\r\n    handleResize = () => {\r\n        this.setState({resizedWidth: window.innerWidth});\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {savedPerPage, savedTableFilter} = this.state;\r\n        const {getDialerTestCalls, per_page} = this.props;\r\n\r\n        this.setActiveFiltersCount(this.state.savedTableFilter);\r\n\r\n        this.curPerPage = savedPerPage;\r\n        let pickedFilter;\r\n\r\n        if (!objectIsEmpty(savedTableFilter)) {\r\n            pickedFilter = savedTableFilter;\r\n        } else if (!objectIsEmpty(this.filter)) {\r\n            pickedFilter = this.filter;\r\n        } else {\r\n            pickedFilter = this.defaultFilter;\r\n        }\r\n\r\n        getDialerTestCalls(savedPerPage || per_page, pickedFilter, 1);\r\n\r\n    }\r\n\r\n    componentWillMount() {\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    onChangeFilters = (filtersObj) => {\r\n        const {savedPerPage} = this.state;\r\n        const {getDialerTestCalls, per_page} = this.props;\r\n\r\n        this.setActiveFiltersCount(filtersObj);\r\n\r\n        this.filter = filtersObj;\r\n\r\n        localStorage.setItem(LOCAL_STORAGE_TEST_CALLS_FILTERS_DIALER, JSON.stringify(this.filter));\r\n\r\n        this.setState({\r\n            savedTableFilter: filtersObj\r\n        });\r\n\r\n        getDialerTestCalls(savedPerPage || this.curPerPage || per_page, this.filter, 1);\r\n    };\r\n\r\n    combineFilters = (filter, savedFilter) => {\r\n        return {\r\n            start_date: filter && filter.start_date ? filter.start_date :\r\n                savedFilter && savedFilter.start_date ? savedFilter.start_date :\r\n                    removeTZFromDate(new Date(new Date().setHours(0, 0, 0, 0))),\r\n            end_date: filter && filter.end_date ? filter.end_date :\r\n                savedFilter && savedFilter.end_date ? savedFilter.end_date :\r\n                    removeTZFromDate(new Date(new Date().setHours(23, 59, 59, 999))),\r\n            a_number: filter && (filter.a_number || filter.a_number === '') ? filter.a_number :\r\n                savedFilter && (savedFilter.a_number || savedFilter.a_number === '') ? savedFilter.a_number : '',\r\n            b_number: filter && (filter.b_number || filter.b_number === '') ? filter.b_number :\r\n                savedFilter && (savedFilter.b_number || savedFilter.b_number === '') ? savedFilter.b_number : ''\r\n        };\r\n    };\r\n\r\n    setActiveFiltersCount = (value = null) => {\r\n        if (!value)\r\n            return;\r\n\r\n        const filters = Object.keys(value);\r\n        const dateFilters = ['start_end_date', 'start_date', 'end_date'];\r\n        const activeFilters = filters.filter(item => {\r\n            if ( dateFilters.includes(item) )\r\n                return false;\r\n\r\n            if ( value[item] === this.defaultFilter[item] || (!value[item] && value[item] !== 0) ) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n\r\n        this.setState({\r\n            activeFiltersCount: activeFilters.length + 1\r\n        });\r\n    };\r\n\r\n    onChangePerPage = (perPage) => {\r\n        const {savedTableFilter} = this.state;\r\n        const {getDialerTestCalls} = this.props;\r\n\r\n        if (perPage)\r\n            this.setState({savedPerPage: null});\r\n        else\r\n            this.setState({savedPerPage: this.curPerPage});\r\n\r\n        let pickedFilter;\r\n        const per_page = Number(perPage) || this.curPerPage;\r\n        const combinedFilter = this.combineFilters(this.filter, savedTableFilter);\r\n\r\n        if (!objectIsEmpty(this.filter) || !objectIsEmpty(savedTableFilter)) {\r\n            pickedFilter = combinedFilter;\r\n        } else {\r\n            pickedFilter = this.defaultFilter;\r\n        }\r\n\r\n        per_page <= 0 ? this.curPerPage = MIN_PER_PAGE_DIALER : per_page > MAX_PER_PAGE_DIALER ? this.curPerPage = MAX_PER_PAGE_DIALER : this.curPerPage = per_page;\r\n\r\n        localStorage.setItem(LOCAL_STORAGE_TEST_CALLS_PER_PAGE_DIALER, JSON.stringify(this.curPerPage));\r\n\r\n        getDialerTestCalls(this.curPerPage, pickedFilter, 1);\r\n\r\n    };\r\n\r\n    onChangePage = (pageNumber) => {\r\n        const {savedTableFilter, savedPerPage} = this.state;\r\n        const {getDialerTestCalls, per_page} = this.props;\r\n\r\n        let pickedFilter;\r\n        const combinedFilter = this.combineFilters(this.filter, savedTableFilter);\r\n\r\n        if (!objectIsEmpty(this.filter) || !objectIsEmpty(savedTableFilter)) {\r\n            pickedFilter = combinedFilter;\r\n        } else {\r\n            pickedFilter = this.defaultFilter;\r\n        }\r\n\r\n        getDialerTestCalls(savedPerPage || this.curPerPage || per_page, pickedFilter, pageNumber);\r\n    };\r\n\r\n    render() {\r\n        const {searchLoading, savedTableFilter, savedPerPage} = this.state;\r\n        const {loading, test_calls_list, count, page, per_page} = this.props;\r\n        const onChangePage = this.onChangePage;\r\n        const onChangePerPage = this.onChangePerPage;\r\n\r\n        return (\r\n            <PanelLayout>\r\n                <FlexboxGrid align=\"middle\" justify=\"space-between\">\r\n                    <FlexboxGrid.Item>\r\n                        <PageHeader title={<FormattedMessage id=\"testCalls.testCalls\" defaultMessage=\"TEST CALLS\" />}/>\r\n                    </FlexboxGrid.Item>\r\n\r\n                    {this.state.resizedWidth < 768 &&\r\n\r\n                        <FlexboxGrid.Item>\r\n                            <Toggler\r\n                                icon={<Icon icon=\"filter\"/>}\r\n                                onClick={() => this.setState({showFilters: true})}\r\n                            >\r\n                                {this.state.activeFiltersCount}\r\n                            </Toggler>\r\n                            <Drawer\r\n                                size=\"xs\"\r\n                                placement=\"bottom\"\r\n                                style={{height: '240px'}}\r\n                                show={this.state.showFilters}\r\n                                onHide={() => this.setState({showFilters: false})}\r\n                            >\r\n                                <Drawer.Header>\r\n                                </Drawer.Header>\r\n                                <Drawer.Body>\r\n                                    <TestCallsFilters\r\n                                        onChangeFilters={this.onChangeFilters}\r\n                                        loading={loading || searchLoading}\r\n                                        {...{savedTableFilter}}\r\n                                    />\r\n                                </Drawer.Body>\r\n                            </Drawer>\r\n                        </FlexboxGrid.Item>\r\n\r\n                    }\r\n\r\n                </FlexboxGrid>\r\n\r\n                {this.state.resizedWidth >= 768 &&\r\n                    <FlexGrid>\r\n                        <FlexGridItem>\r\n                            <TestCallsFilters\r\n                                onChangeFilters={this.onChangeFilters}\r\n                                loading={loading || searchLoading}\r\n                                {...{savedTableFilter}}\r\n                            />\r\n                            <Spacer/>\r\n                        </FlexGridItem>\r\n                    </FlexGrid>\r\n                }\r\n\r\n                <TestCallsTable\r\n                    data={test_calls_list}\r\n                    loading={loading || searchLoading}\r\n                    {...{\r\n                        onChangePage,\r\n                        onChangePerPage,\r\n                        page,\r\n                        count,\r\n                        per_page,\r\n                        savedPerPage\r\n                    }}\r\n                />\r\n            </PanelLayout>\r\n        );\r\n    }\r\n}\r\n\r\nconst Toggler = styled(IconButton)`\r\n    && {\r\n        color: #363434;\r\n    }\r\n`;","import {TEST_CALLS_DIALER as PREFIX} from '../../const'\r\nimport {api} from '../../api/loginRoutes'\r\nimport {_setValue} from './defaults'\r\nimport {TEST_CALLS_LIST_DIALER_API} from \"../../const/apiMethods\";\r\n\r\nconst setTestCalls = _setValue('SET_ITEMS_' + PREFIX);\r\nconst setLoading = _setValue('SET_LOADING_' + PREFIX);\r\n\r\nexport const getDialerTestCalls = (per_page = 12, filter = {}, page = 1) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    api(TEST_CALLS_LIST_DIALER_API, {filter, page, per_page}).then((response) => {\r\n        if (response !== undefined)\r\n            dispatch(setTestCalls({\r\n                cdr_full_test_list: response.cdr_full_test_list,\r\n                cdr_full_test_count: response.cdr_full_test_count,\r\n                page,\r\n                per_page\r\n            }))\r\n    })\r\n};\r\n","import {connect} from 'react-redux';\r\nimport TestCalls from './TestCalls';\r\nimport {getDialerTestCalls} from \"../../actions/client/testCalls\";\r\n\r\nconst mapState = ({client_test_calls}) => ({\r\n    loading: client_test_calls.loading,\r\n    test_calls_list: client_test_calls.test_calls_list,\r\n    count: client_test_calls.count,\r\n    page: client_test_calls.page,\r\n    per_page: client_test_calls.per_page\r\n});\r\n\r\nexport default connect(mapState, {getDialerTestCalls})(TestCalls);\r\n","import React, {useContext, useState} from 'react';\r\nimport {renderColumn} from '../../../utils/helpers';\r\nimport CustomizableTable from '../../../components/client/CustomizableTable/CustomizableTable';\r\nimport FormHOC from '../../../hoc/FilltersForm';\r\nimport {RtlContext} from \"../../../App\";\r\n\r\nexport default FormHOC(({\r\n    data,\r\n    pickedColumns,\r\n    savedTableColumns,\r\n    loading,\r\n    page,\r\n    count,\r\n    per_page,\r\n    savedPerPage,\r\n    onChangePerPage,\r\n    onChangePage,\r\n    onSaveColumnsTable,\r\n    extraRows\r\n}) => {\r\n\r\n    const rtl = useContext(RtlContext);\r\n    const [columns, onChangeColumns] = useState(savedTableColumns && savedTableColumns.length\r\n        ? pickedColumns.filter(elem=>savedTableColumns.includes(elem.id))\r\n        : pickedColumns);\r\n\r\n    const renderedColumns = columns.map(renderColumn);\r\n\r\n    return (\r\n        <CustomizableTable\r\n            {...{\r\n                rtl,\r\n                data,\r\n                savedTableColumns,\r\n                pickedColumns,\r\n                onChangeColumns,\r\n                count,\r\n                per_page,\r\n                savedPerPage,\r\n                page,\r\n                loading,\r\n                onChangePage,\r\n                onChangePerPage,\r\n                onSaveColumnsTable,\r\n                renderedColumns,\r\n                extraRows\r\n            }}\r\n            isChangedColumns={true}\r\n            isPaginated={true}\r\n            rowClassName={rowData => {\r\n                if (rowData && rowData.id === \"summaries\") {\r\n                    return \"summaries\";\r\n                }\r\n\r\n                return \"\";\r\n            }}\r\n        />\r\n\r\n    );\r\n});\r\n","import React, {useState, useMemo} from 'react';\r\nimport {DateRangePicker, Schema} from 'rsuite';\r\nimport FormHOC from '../../../hoc/FilltersForm';\r\nimport {getAllowedRangesByIntervalMonth, removeTZFromDate} from '../../../utils/helpers';\r\nimport {debounce} from 'lodash';\r\nimport {CustomizableForm} from '../../../components/client/Form/CustomizableForm';\r\nimport {injectIntl, useIntl} from \"react-intl\";\r\nimport {compose} from \"redux\";\r\nimport {useWindowWidth} from \"../../../hooks\";\r\nimport { FlexGrid, FlexGridItem } from '../../../components/base/FlexGrid';\r\nimport CustomField from '../../../components/client/Form/CustomField/CustomField';\r\nimport m from \"../../../definedMessages\";\r\nimport {BaseDateRangePicker, BaseInputField} from \"../../../components/base/BaseForm\";\r\n\r\nconst {StringType, ArrayType} = Schema.Types;\r\nconst MAX_CHARACTERS = 40;\r\n\r\n\r\nconst CDRFilters = ({loading, onChangeFilters, savedTableFilter, globalSettings = {}, rtl}) => {\r\n    const {formatMessage} = useIntl();\r\n\r\n    const allowedRanges = useMemo(() => {\r\n        return getAllowedRangesByIntervalMonth(globalSettings.cdr_full__interval_month);\r\n    }, [globalSettings]);\r\n\r\n    const filtersModel = Schema.Model({\r\n        start_end_date: ArrayType()\r\n            .addRule((value) => {\r\n                if (value && value[0] && value[1]) {\r\n                    const startDate = new Date(value[0]);\r\n                    const startDateYmd = `${startDate.getFullYear()}${('0' + (startDate.getMonth() + 1)).slice(-2)}${('0' + startDate.getDate()).slice(-2)}`;\r\n                    if (startDateYmd < allowedRanges[0]) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true;\r\n            }, formatMessage(m.cdrHistoryPeriodIs, {count: globalSettings.cdr_full__interval_month})),\r\n        a_number: StringType()\r\n            .pattern(/^\\d+$/, formatMessage(m.correctNumber))\r\n            .maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})),\r\n        b_number: StringType()\r\n            .pattern(/^\\d+$/, formatMessage(m.correctNumber))\r\n            .maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})),\r\n    });\r\n\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    // let form;\r\n    const todayDateStart = new Date(new Date().setHours(0, 0, 0, 0));\r\n    const todayDateEnd = new Date(new Date().setHours(23, 59, 59, 999));\r\n\r\n    const [changedFormValue, changeFormData] = useState(savedTableFilter || {\r\n        start_end_date: [todayDateStart, todayDateEnd],\r\n        start_date: null,\r\n        end_date: null,\r\n        a_number: '',\r\n        b_number: ''\r\n    });\r\n\r\n    const onSubmit = (data, checkedData) => {\r\n        const checker = Object.keys(checkedData).map(i => checkedData[i].hasError).every(value => value === false);\r\n\r\n        const validatedData = filtersModel.check(data);\r\n        for (const item of Object.keys(validatedData)) {\r\n            if (validatedData[item].hasError) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (checker) {\r\n            onChangeFilters({\r\n                ...data,\r\n                start_date: removeTZFromDate(data.start_date),\r\n                end_date: removeTZFromDate(data.end_date),\r\n            });\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const calendarPlacement = resizedWidth >= 768 ? (rtl ? \"bottomEnd\" : \"bottomStart\") : 'auto';\r\n\r\n    return (\r\n        <CustomizableForm\r\n            // ref={ref => (form = ref)}\r\n            model={filtersModel}\r\n            onChange={debounce((data) => {\r\n                const startDate = new Date(new Date(data.start_end_date[0]).setHours(0, 0, 0, 0));\r\n                const endDate = new Date(new Date(data.start_end_date[1]).setHours(23, 59, 59, 999));\r\n                const formData = {...data, start_date: startDate, end_date: endDate};\r\n                const checkedData = filtersModel.check(formData);\r\n                onSubmit(formData, checkedData);\r\n                changeFormData(formData);\r\n            }, 1000)}\r\n            formDefaultValue={savedTableFilter || {\r\n                    start_end_date: [todayDateStart, todayDateEnd],\r\n                    start_date: null,\r\n                    end_date: null,\r\n                    a_number: '',\r\n                    b_number: ''\r\n                }\r\n            }\r\n            fluid\r\n            // readOnly={loading && 'disabled' || ''}\r\n            readOnly={loading}\r\n        >\r\n            <FlexGrid align=\"middle\">\r\n                \r\n                {(resizedWidth > 1005) && \r\n                    <FlexGridItem>{formatMessage(m.dateFrom)}</FlexGridItem>\r\n                }\r\n\r\n                <FlexGridItem width=\"260px\">\r\n                    <CustomField\r\n                        name=\"start_end_date\"\r\n                        showOneCalendar={resizedWidth <= 767}\r\n                        accepter={BaseDateRangePicker}\r\n                        placement={calendarPlacement}\r\n                        value={[changedFormValue.start_end_date[0], changedFormValue.start_end_date[1]]}\r\n                        cleanable={false}\r\n                        ranges={[\r\n                            {\r\n                                label: formatMessage(m.yesterday),\r\n                                value: [\r\n                                    new Date(new Date(new Date().setDate(new Date().getDate() - 1)).setHours(0, 0, 0, 0)),\r\n                                    new Date(new Date(new Date().setDate(new Date().getDate() - 1)).setHours(23, 59, 59, 999))\r\n                                ]\r\n                            }, {\r\n                                label: formatMessage(m.today),\r\n                                value: [\r\n                                    new Date(new Date().setHours(0, 0, 0, 0)),\r\n                                    new Date(new Date().setHours(23, 59, 59, 999))\r\n                                ]\r\n                            }, {\r\n                                label: formatMessage(m.last7Days),\r\n                                value: [\r\n                                    new Date(new Date(new Date().setDate(new Date().getDate() - 6)).setHours(0, 0, 0, 0)),\r\n                                    new Date(new Date().setHours(23, 59, 59, 999))\r\n                                ]\r\n                            }]}\r\n                    />\r\n                </FlexGridItem>\r\n                <FlexGridItem width=\"260px\">\r\n                    <CustomField\r\n                        accepter={BaseInputField}\r\n                        name=\"a_number\"\r\n                        placeholder={formatMessage(m.aNumber)}\r\n                    />\r\n                </FlexGridItem>\r\n                <FlexGridItem width=\"260px\">\r\n                    <CustomField\r\n                        accepter={BaseInputField}\r\n                        name=\"b_number\"\r\n                        placeholder={formatMessage(m.bNumber)}\r\n                    />\r\n                </FlexGridItem>\r\n            </FlexGrid>\r\n        </CustomizableForm>\r\n    );\r\n};\r\n\r\nexport default compose(\r\n    FormHOC,\r\n    injectIntl\r\n)(CDRFilters)","import React from 'react';\r\nimport {compose} from \"redux\";\r\nimport {useIntl} from \"react-intl\";\r\nimport {Icon, Tooltip, Whisper} from 'rsuite';\r\nimport FormHOC from '../../../hoc/FilltersForm'\r\nimport {useWindowWidth} from \"../../../hooks\";\r\nimport {ButtonPrimary} from \"../../base/BaseButton\";\r\nimport styled from \"styled-components\";\r\nimport m from \"../../../definedMessages\";\r\n\r\n\r\nconst ButtonDownload = (({\r\n    onDownload,\r\n    limitWidth = 640,\r\n    iconName = \"download\",\r\n    loading, \r\n    buttonText = '', \r\n    tooltipText = '', \r\n    ...props\r\n}) => {\r\n    \r\n    const {formatMessage} = useIntl();\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    tooltipText = tooltipText ? tooltipText : formatMessage(m.enterFiltersToActivateTheButton);\r\n    buttonText = buttonText ? buttonText : formatMessage(m.download);\r\n\r\n    const speakerPlacement = resizedWidth >= limitWidth ? 'auto' : 'bottomStart';\r\n\r\n    return (\r\n        <Whisper\r\n            speaker={<Tooltip>{tooltipText}</Tooltip>}\r\n            placement={speakerPlacement}\r\n        >\r\n            <ButtonPrimary\r\n                onClick={onDownload}\r\n                loading={loading}\r\n                {...props}\r\n            >\r\n                <StyledIcon icon={iconName}/>{buttonText}\r\n            </ButtonPrimary>\r\n        </Whisper>\r\n    );\r\n});\r\n\r\nexport default compose(\r\n    FormHOC\r\n)(ButtonDownload)\r\n\r\n\r\nconst StyledIcon = styled(Icon)`\r\n    margin-right: 5px;\r\n    \r\n    .app-client.rtl & {\r\n        margin-left: 5px;\r\n        margin-right: 0;\r\n    }\r\n`;","import React from 'react';\r\nimport CDRTable from './CDRTable';\r\nimport CDRFilters from './CDRFilters';\r\nimport {objectIsEmpty, removeTZFromDate} from '../../../utils/helpers';\r\nimport {ButtonPrimary} from '../../../components/base/BaseButton';\r\nimport {\r\n    LOCAL_STORAGE_CDR_COLUMNS_DIALER,\r\n    LOCAL_STORAGE_CDR_FILTERS_DIALER,\r\n    LOCAL_STORAGE_CDR_PER_PAGE_DIALER,\r\n    MAX_PER_PAGE_DIALER,\r\n    MIN_PER_PAGE_DIALER\r\n} from '../../../const';\r\nimport {injectIntl} from \"react-intl\";\r\nimport { FlexGrid, FlexGridItem } from '../../../components/base/FlexGrid';\r\nimport {Spacer} from \"../../../components/base/Spacer\"\r\nimport {Drawer, Icon, IconButton} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport m from \"../../../definedMessages\";\r\nimport ButtonDownload from \"../../../components/client/ButtonDownload\";\r\n\r\n\r\nclass CDR extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.filter = {};\r\n        this.defaultFilter = {\r\n            start_date: removeTZFromDate(new Date(new Date().setHours(0, 0, 0, 0))),\r\n            end_date: removeTZFromDate(new Date(new Date().setHours(23, 59, 59, 999)))\r\n        };\r\n        this.formatMessage = this.props.intl.formatMessage.bind(this.props.intl);\r\n        this.curPage = 1;\r\n        this.curPerPage = null;\r\n        this.columns = [\r\n            {\r\n                id: 'datetime',\r\n                label: this.formatMessage(m.datetime),\r\n                dataKey: 'datetime',\r\n                align: 'center',\r\n                flexGrow: 4,\r\n                minWidth: 200\r\n            },\r\n            {\r\n                id: 'a_number',\r\n                label: this.formatMessage(m.aNumber),\r\n                dataKey: 'a_number',\r\n                flexGrow: 3,\r\n                minWidth: 150,\r\n                align: 'center'\r\n            },\r\n            {\r\n                id: 'b_number',\r\n                label: this.formatMessage(m.bNumber),\r\n                dataKey: 'b_number',\r\n                flexGrow: 3,\r\n                minWidth: 150,\r\n                align: 'center'\r\n            },\r\n            {\r\n                id: 'range',\r\n                label: this.formatMessage(m.range),\r\n                dataKey: 'range',\r\n                flexGrow: 5,\r\n                minWidth: 250,\r\n                align: 'center'\r\n            },\r\n            {\r\n                id: 'rate_dialer',\r\n                label: this.formatMessage(m.rate),\r\n                dataKey: 'rate_dialer',\r\n                flexGrow: 2,\r\n                minWidth: 100,\r\n                align: 'right'\r\n            },\r\n            {\r\n                id: 'cost_dialer',\r\n                label: this.formatMessage(m.cost),\r\n                dataKey: 'cost_dialer',\r\n                flexGrow: 2,\r\n                minWidth: 100,\r\n                align: 'right'\r\n            },\r\n            {\r\n                id: 'term',\r\n                label: this.formatMessage(m.termPoint),\r\n                value: (item) => {\r\n                    if (item.id === \"summaries\")\r\n                        return \"\";\r\n\r\n                    const {ip, port, tprefix_dialer} = item;\r\n                    return `${ip}:${port} ${tprefix_dialer}`;\r\n                },\r\n                flexGrow: 4,\r\n                minWidth: 200,\r\n                align: 'center'\r\n            },\r\n            {\r\n                id: 'duration',\r\n                label: this.formatMessage(m.duration),\r\n                value: (item) => {\r\n                    return item.id === \"summaries\"\r\n                        ? <span title={item.duration}>{item.duration}</span>\r\n                        : item.duration\r\n                },\r\n                // dataKey: 'duration',\r\n                flexGrow: 2,\r\n                minWidth: 100,\r\n                align: 'center'\r\n            },\r\n            {\r\n                id: 'sip',\r\n                label: this.formatMessage(m.sipCause),\r\n                dataKey: 'sip_cause',\r\n                flexGrow: 2,\r\n                minWidth: 100,\r\n                align: 'right'\r\n            },\r\n        ];\r\n\r\n        this.state = {\r\n            searchLoading: false,\r\n            savedTableFilter: null,\r\n            savedPerPage: JSON.parse(localStorage.getItem(LOCAL_STORAGE_CDR_PER_PAGE_DIALER)),\r\n            savedTableColumns: JSON.parse(localStorage.getItem(LOCAL_STORAGE_CDR_COLUMNS_DIALER)),\r\n            resizedWidth: window.innerWidth,\r\n            activeFiltersCount: 0,\r\n            showFilters: false,\r\n        };\r\n    }\r\n\r\n\r\n    handleResize = () => {\r\n        this.setState({resizedWidth: window.innerWidth});\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {savedPerPage, savedTableFilter} = this.state;\r\n        const {getCDRList, per_page} = this.props;\r\n\r\n        this.setActiveFiltersCount(this.state.savedTableFilter);\r\n\r\n        this.curPerPage = savedPerPage;\r\n        let pickedFilter;\r\n\r\n        if (!objectIsEmpty(savedTableFilter)) {\r\n            pickedFilter = savedTableFilter;\r\n        } else if (!objectIsEmpty(this.filter)) {\r\n            pickedFilter = this.filter;\r\n        } else {\r\n            pickedFilter = this.defaultFilter;\r\n        }\r\n\r\n        getCDRList(savedPerPage || per_page, pickedFilter, 1);\r\n    }\r\n\r\n    componentWillMount() {\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    onChangeFilters = (filtersObj) => {\r\n        const {savedPerPage} = this.state;\r\n        const {getCDRList, per_page} = this.props;\r\n\r\n        this.setActiveFiltersCount(filtersObj);\r\n\r\n        this.filter = filtersObj;\r\n\r\n        this.setState({\r\n            savedTableFilter: filtersObj\r\n        });\r\n\r\n        getCDRList(savedPerPage || this.curPerPage || per_page, this.filter, 1);\r\n    };\r\n\r\n    setActiveFiltersCount = (value = null) => {\r\n        if (!value)\r\n            return;\r\n\r\n        const filters = Object.keys(value);\r\n        const dateFilters = ['start_end_date', 'start_date', 'end_date'];\r\n        const activeFilters = filters.filter(item => {\r\n            if ( dateFilters.includes(item) )\r\n                return false;\r\n\r\n            if ( value[item] === this.defaultFilter[item] || (!value[item] && value[item] !== 0) ) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n\r\n        this.setState({\r\n            activeFiltersCount: activeFilters.length + 1\r\n        });\r\n    };\r\n\r\n    combineFilters = (filter, savedFilter) => {\r\n        return {\r\n            start_date: filter && filter.start_date ? filter.start_date :\r\n                savedFilter && savedFilter.start_date ? savedFilter.start_date :\r\n                    removeTZFromDate(new Date(new Date().setHours(0, 0, 0, 0))),\r\n            end_date: filter && filter.end_date ? filter.end_date :\r\n                savedFilter && savedFilter.end_date ? savedFilter.end_date :\r\n                    removeTZFromDate(new Date(new Date().setHours(23, 59, 59, 999))),\r\n            a_number: filter && (filter.a_number || filter.a_number === '') ? filter.a_number :\r\n                savedFilter && savedFilter.a_number ? savedFilter.a_number : '',\r\n            b_number: filter && (filter.b_number || filter.b_number === '') ? filter.b_number :\r\n                savedFilter && savedFilter.b_number ? savedFilter.b_number : ''\r\n        };\r\n    };\r\n\r\n    onChangePerPage = (perPage) => {\r\n        const {savedTableFilter} = this.state;\r\n        const {getCDRList} = this.props;\r\n\r\n        if (perPage)\r\n            this.setState({savedPerPage: null});\r\n        else\r\n            this.setState({savedPerPage: this.curPerPage});\r\n\r\n        let pickedFilter;\r\n        const per_page = Number(perPage) || this.curPerPage;\r\n        const combinedFilter = this.combineFilters(this.filter, savedTableFilter);\r\n\r\n        if (!objectIsEmpty(this.filter) || !objectIsEmpty(savedTableFilter)) {\r\n            pickedFilter = combinedFilter;\r\n        } else {\r\n            pickedFilter = this.defaultFilter;\r\n        }\r\n\r\n        per_page <= 0 ? this.curPerPage = MIN_PER_PAGE_DIALER : per_page > MAX_PER_PAGE_DIALER ? this.curPerPage = MAX_PER_PAGE_DIALER : this.curPerPage = per_page;\r\n\r\n        localStorage.setItem(LOCAL_STORAGE_CDR_PER_PAGE_DIALER, JSON.stringify(this.curPerPage));\r\n\r\n        getCDRList(this.curPerPage, pickedFilter, 1);\r\n    };\r\n\r\n    onChangePage = (pageNumber) => {\r\n        const {savedTableFilter, savedPerPage} = this.state;\r\n        const {getCDRList, per_page} = this.props;\r\n\r\n        let pickedFilter;\r\n        const combinedFilter = this.combineFilters(this.filter, savedTableFilter);\r\n\r\n        if (!objectIsEmpty(this.filter) || !objectIsEmpty(savedTableFilter)) {\r\n            pickedFilter = combinedFilter;\r\n        } else {\r\n            pickedFilter = this.defaultFilter;\r\n        }\r\n\r\n        getCDRList(savedPerPage || this.curPerPage || per_page, pickedFilter, pageNumber);\r\n    };\r\n\r\n    exportCDR = () => {\r\n        const {savedTableFilter} = this.state;\r\n\r\n        let pickedFilter;\r\n\r\n        if (!objectIsEmpty(savedTableFilter)) {\r\n            pickedFilter = savedTableFilter;\r\n        } else if (!objectIsEmpty(this.filter)) {\r\n            pickedFilter = this.filter;\r\n        } else {\r\n            pickedFilter = this.defaultFilter;\r\n        }\r\n\r\n        this.props.exportCDR(pickedFilter, this.curPage, this.curPerPage);\r\n    };\r\n\r\n    onSaveColumnsTable = (idListToSave) => {\r\n        localStorage.setItem(LOCAL_STORAGE_CDR_COLUMNS_DIALER, JSON.stringify(idListToSave));\r\n    };\r\n\r\n\r\n    render() {\r\n        const {searchLoading, savedPerPage, savedTableFilter, savedTableColumns} = this.state;\r\n        const {loading, uploadLoading, cdr_list, page, count, per_page, summaries, globalSettings} = this.props;\r\n        const exportCDR = this.exportCDR;\r\n        const onChangePage = this.onChangePage;\r\n        const onChangePerPage = this.onChangePerPage;\r\n        const onSaveColumnsTable = this.onSaveColumnsTable;\r\n\r\n        // remake with reselector\r\n        let dataWithSummaries = [];\r\n        let summariesData = {};\r\n\r\n        if (Object.keys(summaries).length && cdr_list.length) {\r\n            summariesData = {...cdr_list[0]};\r\n\r\n            Object.keys(summariesData).forEach(item => {\r\n\r\n                switch (item) {\r\n                    case \"cost_dialer\":\r\n                        summariesData[item] = summaries[\"cost\"] !== undefined ? summaries[\"cost\"] : null;\r\n                        break;\r\n\r\n                    case \"id\":\r\n                        summariesData[item] = \"summaries\";\r\n                        break;\r\n\r\n                    default:\r\n                        summariesData[item] = summaries[item] || null;\r\n                }\r\n\r\n            });\r\n\r\n            dataWithSummaries = [...cdr_list];\r\n            dataWithSummaries.push(summariesData);\r\n        }\r\n\r\n        return (\r\n            <>\r\n\r\n                {this.state.resizedWidth < 768 &&\r\n\r\n                    <>\r\n                        <Toggler\r\n                            icon={<Icon icon=\"filter\"/>}\r\n                            onClick={() => this.setState({showFilters: true})}\r\n                        >\r\n                            {this.state.activeFiltersCount}\r\n                        </Toggler>\r\n                        <Drawer\r\n                            size=\"xs\"\r\n                            placement=\"bottom\"\r\n                            style={{height: '240px'}}\r\n                            show={this.state.showFilters}\r\n                            onHide={() => this.setState({showFilters: false})}\r\n                        >\r\n                            <Drawer.Header>\r\n                            </Drawer.Header>\r\n                            <Drawer.Body>\r\n                                <CDRFilters\r\n                                    onChangeFilters={this.onChangeFilters}\r\n                                    loading={loading || searchLoading}\r\n                                    {...{\r\n                                        savedTableFilter,\r\n                                        globalSettings\r\n                                    }}\r\n                                />\r\n                            </Drawer.Body>\r\n                        </Drawer>\r\n                    </>\r\n\r\n                }\r\n\r\n                <Spacer size={30}/>\r\n\r\n                {this.state.resizedWidth >= 768 &&\r\n                    <div>\r\n                        <FlexGrid justify=\"space-between\">\r\n\r\n                            <FlexGridItem>\r\n                                <CDRFilters\r\n                                    onChangeFilters={this.onChangeFilters}\r\n                                    loading={loading || searchLoading}\r\n                                    {...{\r\n                                        savedTableFilter,\r\n                                        globalSettings\r\n                                    }}\r\n                                />\r\n                            </FlexGridItem>\r\n                            <FlexGridItem>\r\n                                <ButtonDownload\r\n                                    onDownload={exportCDR}\r\n                                    loading={uploadLoading}\r\n                                    limitWidth={1179}\r\n                                    buttonText={this.formatMessage(m.exportReport)}\r\n                                />\r\n                            </FlexGridItem>\r\n                        </FlexGrid>\r\n                        <Spacer size={19}/>\r\n                    </div>\r\n                }\r\n\r\n                <Spacer size={1}/>\r\n\r\n                <CDRTable\r\n                    data={Object.keys(summariesData).length ? dataWithSummaries : cdr_list}\r\n                    extraRows={Object.keys(summariesData).length ? 1 : 0}\r\n                    pickedColumns={this.columns}\r\n                    loading={loading || searchLoading}\r\n                    {...{\r\n                        onChangePage,\r\n                        onChangePerPage,\r\n                        page,\r\n                        per_page,\r\n                        count,\r\n                        savedPerPage,\r\n                        savedTableColumns,\r\n                        onSaveColumnsTable\r\n                    }}\r\n                />\r\n\r\n                {this.state.resizedWidth < 768 &&\r\n                    <StyledActionButtonWrapper>\r\n                        <ButtonDownload\r\n                            onDownload={exportCDR}\r\n                            loading={uploadLoading}\r\n                            limitWidth={1179}\r\n                            buttonText={this.formatMessage(m.exportReport)}\r\n                        />\r\n                    </StyledActionButtonWrapper>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default injectIntl(CDR)\r\n\r\nconst Toggler = styled(IconButton)`\r\n    && {\r\n        color: #363434;\r\n        float: right;\r\n        margin-top: 6px;\r\n    }\r\n`;\r\n\r\nconst StyledActionButtonWrapper = styled.div`\r\n    padding-top: 15px;\r\n    text-align: center;\r\n    \r\n    @media (min-width: 768px) {\r\n        text-align: right;\r\n    }\r\n`;","import {CDR_DIALER as PREFIX} from '../../const';\r\nimport {api, getFileResponse} from '../../api/loginRoutes';\r\nimport {_setValue} from './defaults';\r\nimport {createUrl} from '../../utils/helpers';\r\nimport {SET_UPLOAD_LOADING_DIALER} from '../../const';\r\nimport {CDR_LIST_DIALER_API} from \"../../const/apiMethods\";\r\n\r\nconst setTestCalls = _setValue('SET_ITEMS_' + PREFIX);\r\nconst setLoading = _setValue('SET_LOADING_' + PREFIX);\r\nconst setUploadLoading = _setValue(SET_UPLOAD_LOADING_DIALER);\r\n\r\nexport const getDialerCDRList = (per_page = 12, filter = {}, page = 1) => (dispatch) => {\r\n    dispatch( setLoading(true) );\r\n    // api method not found\r\n    api(CDR_LIST_DIALER_API, {per_page, filter, page})\r\n        .then((response) => {\r\n            if (response === undefined) {\r\n                dispatch( setLoading(false) );\r\n                return;\r\n            }\r\n            dispatch(setTestCalls({\r\n                cdr_full_list: response.cdr_full_list,\r\n                cdr_full_count: response.cdr_full_count,\r\n                cdr_full_summaries: response.cdr_full_summaries,\r\n                page,\r\n                per_page\r\n            }));\r\n        })\r\n        .catch(() => {\r\n            dispatch( setLoading(false) );\r\n        });\r\n};\r\n\r\nexport const exportDialerCDR = (filter = {}) => async (dispatch) => {\r\n    dispatch(setUploadLoading(true));\r\n    await getFileResponse(CDR_LIST_DIALER_API, {filter}).then((response) => createUrl(response, 'cdr.csv'));\r\n    dispatch(setUploadLoading(false));\r\n};\r\n","import {connect} from 'react-redux';\r\nimport CDR from './CDR';\r\nimport {exportDialerCDR, getDialerCDRList} from \"../../../actions/client/cdr\";\r\n\r\nconst mapState = ({client_cdr, references}) => ({\r\n    loading: client_cdr.loading,\r\n    page: client_cdr.page,\r\n    per_page: client_cdr.per_page,\r\n    count: client_cdr.count,\r\n    cdr_list: client_cdr.cdr_list,\r\n    summaries: client_cdr.summaries,\r\n    uploadLoading: references.uploadLoadingDialer,\r\n    globalSettings: references.global_setting,\r\n});\r\n\r\nexport default connect(mapState, {\r\n    getCDRList: getDialerCDRList,\r\n    exportCDR: exportDialerCDR\r\n})(CDR);\r\n","import React, {useContext, useState} from 'react';\r\nimport {renderColumn} from '../../../utils/helpers';\r\nimport CustomizableTable from '../../../components/client/CustomizableTable/CustomizableTable';\r\nimport FormHOC from '../../../hoc/FilltersForm';\r\nimport { useWindowWidth } from '../../../hooks';\r\nimport {RtlContext} from \"../../../App\";\r\n\r\nlet renderColumns = [];\r\n\r\nexport default FormHOC(({\r\n                     data,\r\n                     page,\r\n                     count,\r\n                     per_page,\r\n                     loading,\r\n                     pickedColumns,\r\n                     savedTableColumns,\r\n                     savedPerPage,\r\n                     onChangePerPage,\r\n                     onChangePage,\r\n                     onSaveColumnsTable,\r\n                     extraRows\r\n                 }) => {\r\n\r\n\r\n    const rtl = useContext(RtlContext);\r\n    const [columns, onChangeColumns] = useState( savedTableColumns && savedTableColumns.length \r\n            ? pickedColumns.filter(elem=>savedTableColumns.includes(elem.id)) \r\n            : pickedColumns\r\n    );\r\n\r\n    const dataObj = data[0];\r\n\r\n    const windowWidth = useWindowWidth();\r\n\r\n    if (dataObj) {\r\n        renderColumns = [];\r\n        const dataLabels = [];\r\n        for (let column of columns) {\r\n            if (dataObj[column.dataKey] || dataObj[column.dataKey] === 0) {\r\n                dataLabels.push(column.label);\r\n            }\r\n        }\r\n\r\n        for (let column of columns) {\r\n            if (dataObj[column.dataKey] || dataObj[column.dataKey] === 0) {\r\n                renderColumns.push(column);\r\n            }\r\n        }\r\n    }\r\n\r\n    let selectedColumns = null;\r\n    if (renderColumns.length > 0) {\r\n        selectedColumns = renderColumns;\r\n    } else {\r\n        selectedColumns = columns;\r\n    }    \r\n\r\n    const renderedColumns = selectedColumns.map(renderColumn);\r\n\r\n    return (\r\n        <CustomizableTable\r\n            {...{\r\n                rtl,\r\n                data,\r\n                count,\r\n                page,\r\n                per_page,\r\n                loading,\r\n                pickedColumns,\r\n                savedPerPage,\r\n                onChangePage,\r\n                onChangePerPage,\r\n                renderedColumns,\r\n                onChangeColumns,\r\n                onSaveColumnsTable,\r\n                savedTableColumns,\r\n                extraRows\r\n            }}\r\n            isChangedColumns={true}\r\n            isPaginated={true}\r\n            isMobile={windowWidth < 768 ? true : false}\r\n            rowClassName={rowData => {\r\n                if (rowData && rowData.id === \"summaries\") {\r\n                    return \"summaries\";\r\n                }\r\n\r\n                return \"\";\r\n            }}\r\n        />\r\n    );\r\n});\r\n","import React, {useMemo, useRef} from 'react';\r\nimport {\r\n    Checkbox,\r\n    CheckboxGroup,\r\n    ControlLabel,\r\n    DateRangePicker,\r\n    FormControl,\r\n    FormGroup,\r\n    Schema,\r\n    Input,\r\n    Form\r\n} from 'rsuite';\r\nimport FormHOC from '../../../hoc/FilltersForm';\r\nimport {getAllowedRangesByIntervalMonth, removeTZFromDate} from '../../../utils/helpers';\r\nimport {debounce} from 'lodash'\r\nimport {useIntl} from \"react-intl\";\r\nimport {compose} from \"redux\";\r\nimport {useWindowWidth} from \"../../../hooks\";\r\nimport { FlexGrid, FlexGridItem } from '../../../components/base/FlexGrid';\r\nimport m from \"../../../definedMessages\";\r\nimport {BaseCheckboxField, BaseDateRangePicker, BaseInputField} from \"../../../components/base/BaseForm\";\r\n\r\nconst {ArrayType, StringType} = Schema.Types;\r\nconst MAX_CHARACTERS = 40;\r\n\r\nconst groupsList = ['range', 'a_number', 'b_number'];\r\n\r\nconst TrafficStatFilters = ({\r\n    loading,\r\n    onChangeFilters,\r\n    filter,\r\n    globalSettings = {},\r\n    rtl\r\n}) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n    const form = useRef();\r\n    const resizedWidth = useWindowWidth();\r\n\r\n\r\n    const filtersModel = useMemo(() => {\r\n        const allowedRanges = getAllowedRangesByIntervalMonth(globalSettings.cdr_full__interval_month);\r\n        return Schema.Model({\r\n            start_end_date: ArrayType()\r\n                .addRule((value) => {\r\n                    if (value && value[0] && value[1]) {\r\n                        const startDate = new Date(value[0]);\r\n                        const startDateYmd = `${startDate.getFullYear()}${('0' + (startDate.getMonth() + 1)).slice(-2)}${('0' + startDate.getDate()).slice(-2)}`;\r\n                        if (startDateYmd < allowedRanges[0]) {\r\n                            return false\r\n                        }\r\n                    }\r\n                    return true;\r\n                }, formatMessage(m.cdrHistoryPeriodIs, {count: globalSettings.cdr_full__interval_month})),\r\n            a_number: StringType()\r\n                .pattern(/^\\d+$/, formatMessage(m.correctNumber))\r\n                .maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS}))\r\n        });\r\n    }, [globalSettings]);\r\n\r\n\r\n    const onSubmit = (data) => {\r\n\r\n        const startDate = new Date(new Date(data.start_end_date[0]).setHours(0, 0, 0, 0));\r\n        const endDate = new Date(new Date(data.start_end_date[1]).setHours(23, 59, 59, 999));\r\n\r\n        if ( !form.current || !form.current.check() )\r\n            return;\r\n\r\n        const filtersDataGroup = groupsList.reduce((sum, current) => (\r\n            data['checkbox'] && data['checkbox'].find(dataItem => dataItem === current)\r\n                ? [...sum, current]\r\n                : sum\r\n        ), []);\r\n\r\n        const filtersData = {\r\n            ...data,\r\n\r\n            group: (data['checkbox']\r\n                ? filtersDataGroup.join('/')\r\n                : 'range/a_number/b_number'),\r\n\r\n            checkbox: data.checkbox && data.checkbox\r\n                ? data.checkbox\r\n                : ['range', 'a_number', 'b_number'],\r\n\r\n            start_date: removeTZFromDate(startDate),\r\n            end_date: removeTZFromDate(endDate),\r\n        };\r\n        onChangeFilters(filtersData);\r\n    };\r\n\r\n\r\n    return (\r\n        <Form\r\n            ref={form}\r\n            model={filtersModel}\r\n            onChange={debounce(onSubmit, 1000)}\r\n            formDefaultValue={filter}\r\n            fluid\r\n            disabled={loading}\r\n        >\r\n            <FlexGrid align=\"middle\">\r\n                {(resizedWidth > 406) &&\r\n                    <FlexGridItem>{formatMessage(m.dateFrom)}</FlexGridItem>\r\n                }\r\n                <FlexGridItem>\r\n                    <FormControl\r\n                        name=\"start_end_date\"\r\n                        showOneCalendar={resizedWidth <= 767}\r\n                        accepter={BaseDateRangePicker}\r\n                        placement={resizedWidth >= 768 ? (rtl ? \"bottomEnd\" : \"bottomStart\") : 'auto'}\r\n                        cleanable={false}\r\n                        ranges={[\r\n                            {\r\n                                label: formatMessage(m.yesterday),\r\n                                value: [\r\n                                    new Date(new Date(new Date().setDate(new Date().getDate() - 1)).setHours(0, 0, 0, 0)),\r\n                                    new Date(new Date(new Date().setDate(new Date().getDate() - 1)).setHours(23, 59, 59, 999))\r\n                                ]\r\n                            }, {\r\n                                label: formatMessage(m.today),\r\n                                value: [\r\n                                    new Date(new Date().setHours(0, 0, 0, 0)),\r\n                                    new Date(new Date().setHours(23, 59, 59, 999))\r\n                                ]\r\n                            }, {\r\n                                label: formatMessage(m.last7Days),\r\n                                value: [\r\n                                    new Date(new Date(new Date().setDate(new Date().getDate() - 6)).setHours(0, 0, 0, 0)),\r\n                                    new Date(new Date().setHours(23, 59, 59, 999))\r\n                                ]\r\n                            }]}\r\n                    />\r\n                </FlexGridItem>\r\n\r\n                <FlexGridItem>\r\n                    <FormControl\r\n                        name=\"a_number\"\r\n                        accepter={BaseInputField}\r\n                        placement={resizedWidth >= 768 ? (rtl ? \"bottomEnd\" : \"bottomStart\") : 'auto'}\r\n                        placeholder={formatMessage(m.aNumber)}\r\n                    />\r\n                </FlexGridItem>\r\n\r\n                <FlexGridItem>\r\n                    <FlexGrid align=\"middle\">\r\n\r\n                        {resizedWidth > 406 &&\r\n                            <FlexGridItem>\r\n                                <ControlLabel>{formatMessage(m.groupBy)}</ControlLabel>\r\n                            </FlexGridItem>\r\n                        }\r\n\r\n                        <FlexGridItem>\r\n                            <FormGroup>\r\n                                <FormControl\r\n                                    name=\"checkbox\"\r\n                                    accepter={CheckboxGroup}\r\n                                    inline\r\n                                >\r\n                                    {[['a_number', m.aNumber], ['b_number', m.bNumber], ['range', m.ranges]].map(item => (\r\n                                        <BaseCheckboxField\r\n                                            key={item[0]}\r\n                                            value={item[0]}\r\n                                            defaultChecked\r\n                                            disabled={loading}\r\n                                        >\r\n                                            {formatMessage(item[1])}\r\n                                        </BaseCheckboxField>\r\n                                    ))}\r\n                                </FormControl>\r\n                            </FormGroup>\r\n                        </FlexGridItem>\r\n\r\n                    </FlexGrid>\r\n                </FlexGridItem>\r\n            </FlexGrid>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default compose(\r\n    FormHOC,\r\n)(TrafficStatFilters)","import React from 'react';\r\nimport TrafficStatTable from './TrafficStatTable';\r\nimport TrafficStatFilters from './TrafficStatFilters';\r\nimport {removeTZFromDate} from '../../../utils/helpers';\r\nimport {ButtonPrimary} from '../../../components/base/BaseButton';\r\nimport {\r\n    LOCAL_STORAGE_TRAFFIC_STAT_COLUMNS_DIALER,\r\n    LOCAL_STORAGE_TRAFFIC_STAT_FILTERS_DIALER,\r\n    LOCAL_STORAGE_TRAFFIC_STAT_PER_PAGE_DIALER,\r\n    MAX_PER_PAGE_DIALER,\r\n    MIN_PER_PAGE_DIALER\r\n} from '../../../const';\r\nimport {injectIntl} from \"react-intl\";\r\nimport {FlexGrid, FlexGridItem} from '../../../components/base/FlexGrid';\r\nimport { Spacer } from '../../../components/base/Spacer';\r\nimport {Drawer, Icon, IconButton} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\nimport m from \"../../../definedMessages\";\r\nimport ButtonDownload from \"../../../components/client/ButtonDownload\";\r\n\r\n\r\nclass TrafficStat extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const todayDateStart = new Date(new Date().setHours(0, 0, 0, 0));\r\n        const todayDateEnd = new Date(new Date().setHours(23, 59, 59, 999));\r\n\r\n        const savedTableFilter = JSON.parse(localStorage.getItem(LOCAL_STORAGE_TRAFFIC_STAT_FILTERS_DIALER));\r\n        localStorage.removeItem(LOCAL_STORAGE_TRAFFIC_STAT_FILTERS_DIALER);\r\n\r\n        this.defaultFilter = savedTableFilter\r\n            ? {...savedTableFilter}\r\n            : {\r\n                start_end_date: [todayDateStart, todayDateEnd],\r\n                start_date: removeTZFromDate(new Date(new Date().setHours(0, 0, 0, 0))),\r\n                end_date: removeTZFromDate(new Date(new Date().setHours(23, 59, 59, 999))),\r\n                group: 'range/a_number/b_number',\r\n                checkbox: ['range', 'a_number', 'b_number']\r\n            };\r\n\r\n        this.formatMessage = this.props.intl.formatMessage.bind(this.props.intl);\r\n\r\n        this.curPerPage = null;\r\n        this.columns = [\r\n            {\r\n                id: 'A-Number',\r\n                label: this.formatMessage(m.aNumber),\r\n                dataKey: 'a_number',\r\n                flexGrow: 5, \r\n                minWidth: 130,\r\n                align: 'center'\r\n            },\r\n            {\r\n                id: 'B-Number',\r\n                label: this.formatMessage(m.bNumber),\r\n                dataKey: 'b_number',\r\n                flexGrow: 5,\r\n                minWidth: 130,\r\n                align: 'center'\r\n            },\r\n            {\r\n                id: 'range', \r\n                label: this.formatMessage(m.ranges), \r\n                dataKey: 'range',\r\n                flexGrow: 5, \r\n                minWidth: 150, \r\n                align: 'center'\r\n            },\r\n            {\r\n                id: 'duration', \r\n                label: this.formatMessage(m.duration), \r\n                dataKey: 'sum_duration',\r\n                value: (item) => {\r\n                    return item.id === \"summaries\"\r\n                        ? <span title={item.sum_duration}>{item.sum_duration}</span>\r\n                        : item.sum_duration\r\n                },\r\n                flexGrow: 3, \r\n                minWidth: 80, \r\n                align: 'right'\r\n            },\r\n            {\r\n                id: 'call', \r\n                label: this.formatMessage(m.calls), \r\n                dataKey: 'count_cost_dialer', \r\n                flexGrow: 3,\r\n                minWidth: 80, \r\n                align: 'right'\r\n            },\r\n            {\r\n                id: 'cost', \r\n                label: this.formatMessage(m.cost), \r\n                dataKey: 'sum_cost_dialer', \r\n                flexGrow: 3,\r\n                minWidth: 80,\r\n                align: 'right'\r\n            },\r\n\r\n        ];\r\n\r\n        this.state = {\r\n            searchLoading: false,\r\n            filter: {...this.defaultFilter},\r\n            savedPerPage: JSON.parse(localStorage.getItem(LOCAL_STORAGE_TRAFFIC_STAT_PER_PAGE_DIALER)),\r\n            savedTableColumns: JSON.parse(localStorage.getItem(LOCAL_STORAGE_TRAFFIC_STAT_COLUMNS_DIALER)),\r\n            resizedWidth: window.innerWidth,\r\n            activeFiltersCount: 0,\r\n            showFilters: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {savedPerPage, filter} = this.state;\r\n        const {getTrafficStat, per_page} = this.props;\r\n        this.setActiveFiltersCount(filter);\r\n        this.curPerPage = savedPerPage;\r\n\r\n        getTrafficStat(savedPerPage || per_page, filter, 1, filter.group, filter.checkbox);\r\n    }\r\n\r\n\r\n    componentWillMount() {\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize);\r\n    }\r\n    handleResize = () => {\r\n        this.setState({resizedWidth: window.innerWidth});\r\n    };\r\n\r\n    onChangeFilters = (filtersObj) => {\r\n        const {savedPerPage} = this.state;\r\n        const {getTrafficStat, per_page} = this.props;\r\n\r\n        this.setActiveFiltersCount(filtersObj);\r\n\r\n        this.setState({\r\n            filter: filtersObj\r\n        });\r\n\r\n        getTrafficStat(savedPerPage || this.curPerPage || per_page, filtersObj, 1, filtersObj.group, filtersObj.checkbox);\r\n\r\n    };\r\n\r\n    setActiveFiltersCount = (value = null) => {\r\n        if (!value)\r\n            return;\r\n\r\n        let activeFilters = 0;\r\n        activeFilters = value.checkbox.length !== 3 ? activeFilters + 1 : activeFilters;\r\n        activeFilters = value.a_number ? activeFilters + 1 : activeFilters;\r\n\r\n        this.setState({\r\n            activeFiltersCount: activeFilters + 1\r\n        });\r\n    };\r\n\r\n    onChangePerPage = (perPage) => {\r\n        const {filter} = this.state;\r\n        const {getTrafficStat} = this.props;\r\n\r\n        if (perPage)\r\n            this.setState({savedPerPage: null});\r\n        else\r\n            this.setState({savedPerPage: this.curPerPage});\r\n\r\n        const per_page = Number(perPage) || this.curPerPage;\r\n\r\n        this.curPerPage = per_page <= 0\r\n            ? MIN_PER_PAGE_DIALER\r\n            : per_page > MAX_PER_PAGE_DIALER ? MAX_PER_PAGE_DIALER : per_page;\r\n\r\n        localStorage.setItem(LOCAL_STORAGE_TRAFFIC_STAT_PER_PAGE_DIALER, JSON.stringify(this.curPerPage));\r\n\r\n        getTrafficStat(this.curPerPage, filter, 1, filter.group, filter.checkbox);\r\n    };\r\n\r\n    onChangePage = (pageNumber) => {\r\n        const {filter, savedPerPage} = this.state;\r\n        const {getTrafficStat, per_page} = this.props;\r\n\r\n        getTrafficStat(savedPerPage || this.curPerPage || per_page, filter, pageNumber, filter.group, filter.checkbox);\r\n    };\r\n\r\n    exportReport = () => {\r\n        const {filter} = this.state;\r\n        this.props.exportReport(filter, filter.group, filter.checkbox);\r\n    };\r\n\r\n    onSaveColumnsTable = (idListToSave) => {\r\n        localStorage.setItem(LOCAL_STORAGE_TRAFFIC_STAT_COLUMNS_DIALER, JSON.stringify(idListToSave));\r\n    };\r\n\r\n    render() {\r\n        const {searchLoading, filter, savedPerPage, savedTableColumns} = this.state;\r\n        const {loading, uploadLoading, trafficStat, page, count, per_page, summaries, globalSettings} = this.props;\r\n        const onChangePage = this.onChangePage;\r\n        const onChangePerPage = this.onChangePerPage;\r\n        const exportReport = this.exportReport;\r\n        const onSaveColumnsTable = this.onSaveColumnsTable;\r\n\r\n        // remake with reselector\r\n        let dataWithSummaries = [];\r\n        let summariesData = {};\r\n        \r\n        if (Object.keys(summaries).length && trafficStat.length) {\r\n            summariesData = {...trafficStat[0]};\r\n\r\n            Object.keys(summariesData).forEach(item => {\r\n\r\n                switch (item) {\r\n                    case \"sum_cost_dialer\":\r\n                        summariesData[item] = summaries[\"cost\"] !== undefined ? summaries[\"cost\"] : null;\r\n                        break;\r\n\r\n                    case \"count_cost_dialer\":\r\n                        summariesData[item] = summaries[\"calls\"] || null;\r\n                        break;\r\n\r\n                    case \"sum_duration\":\r\n                        summariesData[item] = summaries[\"duration\"] || null;\r\n                        break;\r\n                    \r\n                    case \"id\":\r\n                        summariesData[item] = \"summaries\";\r\n                        break;\r\n                    \r\n                    default:\r\n                        summariesData[item] = summaries[item] || null;\r\n                }\r\n                \r\n            });\r\n\r\n            dataWithSummaries = [...trafficStat];\r\n            dataWithSummaries.push(summariesData);\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {this.state.resizedWidth < 768 &&\r\n                    <>\r\n                        <Toggler\r\n                            icon={<Icon icon=\"filter\"/>}\r\n                            onClick={() => this.setState({showFilters: true})}\r\n                        >\r\n                            {this.state.activeFiltersCount}\r\n                        </Toggler>\r\n                        <Drawer\r\n                            size=\"xs\"\r\n                            placement=\"bottom\"\r\n                            style={{height: '260px'}}\r\n                            show={this.state.showFilters}\r\n                            onHide={() => this.setState({showFilters: false})}\r\n                        >\r\n                            <Drawer.Header>\r\n                            </Drawer.Header>\r\n                            <Drawer.Body>\r\n                                <TrafficStatFilters\r\n                                    onChangeFilters={this.onChangeFilters}\r\n                                    loading={loading || searchLoading}\r\n                                    {...{\r\n                                        filter,\r\n                                        globalSettings\r\n                                    }}\r\n                                />\r\n                            </Drawer.Body>\r\n                        </Drawer>\r\n                    </>\r\n                }\r\n\r\n                <Spacer size={30}/>\r\n\r\n                {this.state.resizedWidth >= 768 &&\r\n                    <>\r\n                        <FlexGrid justify=\"space-between\">\r\n                            <FlexGridItem>\r\n                                <TrafficStatFilters\r\n                                    onChangeFilters={this.onChangeFilters}\r\n                                    loading={loading || searchLoading}\r\n                                    {...{\r\n                                        filter,\r\n                                        globalSettings\r\n                                    }}\r\n                                />\r\n                            </FlexGridItem>\r\n                            <FlexGridItem>\r\n                                <ButtonDownload\r\n                                    onDownload={exportReport}\r\n                                    limitWidth={875}\r\n                                    buttonText={this.formatMessage(m.exportReport)}\r\n                                    loading={uploadLoading}\r\n                                />\r\n                            </FlexGridItem>\r\n                        </FlexGrid>\r\n\r\n                        <Spacer size={19}/>\r\n                    </>\r\n                }\r\n\r\n                <Spacer size={1}/>\r\n\r\n                <TrafficStatTable\r\n                    data={Object.keys(summariesData).length ? dataWithSummaries : trafficStat}\r\n                    extraRows={Object.keys(summariesData).length ? 1 : 0}\r\n                    pickedColumns={this.columns}\r\n                    loading={loading || searchLoading}\r\n                    {...{\r\n                        onChangePage,\r\n                        onChangePerPage,\r\n                        page,\r\n                        per_page,\r\n                        count,\r\n                        savedPerPage,\r\n                        savedTableColumns,\r\n                        onSaveColumnsTable\r\n                    }}\r\n                />\r\n                {this.state.resizedWidth < 768 &&\r\n                    <StyledActionButtonWrapper>\r\n                        <ButtonDownload\r\n                            onDownload={exportReport}\r\n                            limitWidth={875}\r\n                            buttonText={this.formatMessage(m.exportReport)}\r\n                            loading={uploadLoading}\r\n                        />\r\n                    </StyledActionButtonWrapper>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default injectIntl(TrafficStat)\r\n\r\nconst Toggler = styled(IconButton)`\r\n    && {\r\n        color: #363434;\r\n        float: right;\r\n        margin-top: 6px;\r\n    }\r\n`;\r\n\r\nconst StyledActionButtonWrapper = styled.div`\r\n    padding-top: 15px;\r\n    text-align: center;\r\n    \r\n    @media (min-width: 768px) {\r\n        text-align: right;\r\n    }\r\n`;","import {SET_UPLOAD_LOADING_DIALER, TRAFFIC_STAT_DIALER as PREFIX} from '../../const';\r\nimport {api, getFileResponse} from '../../api/loginRoutes';\r\nimport {_setValue} from './defaults';\r\nimport {createUrl} from '../../utils/helpers';\r\nimport {TRAFFIC_STAT_LIST_DIALER_API} from \"../../const/apiMethods\";\r\n\r\nconst setTestCalls = _setValue('SET_ITEMS_' + PREFIX);\r\nconst setLoading = _setValue('SET_LOADING_' + PREFIX);\r\nconst setUploadLoading = _setValue(SET_UPLOAD_LOADING_DIALER);\r\n\r\nexport const getDialerTrafficStat = (per_page = 12, filterData = {}, page = 1, group = 'range/a_number/b_number') => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    const filter = {...filterData};\r\n    if (filter.checkbox)\r\n        delete filter.checkbox;\r\n    if (filter.group)\r\n        delete filter.group;\r\n\r\n    api(TRAFFIC_STAT_LIST_DIALER_API, {group, filter, page, per_page})\r\n        .then((response) => {\r\n            if (response === undefined) {\r\n                dispatch( setLoading(false) );\r\n                return;\r\n            }\r\n            dispatch(setTestCalls({\r\n                group_list: response.group_list || [],\r\n                group_count: response.group_count || 0,\r\n                group_summaries: response.group_summaries || {},\r\n                page,\r\n                per_page\r\n            }));\r\n        })\r\n        .catch(error => {\r\n            dispatch( setLoading(false) );\r\n        });\r\n};\r\n\r\nexport const exportDialerReport = (filterData = {}, group = 'range/a_number/b_number') => async (dispatch) => {\r\n    dispatch(setUploadLoading(true));\r\n\r\n    const filter = {...filterData};\r\n    if (filter.checkbox)\r\n        delete filter.checkbox;\r\n    if (filter.group)\r\n        delete filter.group;\r\n\r\n    await getFileResponse(TRAFFIC_STAT_LIST_DIALER_API, {filter, group}).then((response) => createUrl(response, 'traffic_stats.csv'));\r\n    dispatch(setUploadLoading(false));\r\n};\r\n","import {connect} from 'react-redux';\r\nimport TrafficStat from './TrafficStat';\r\nimport {exportDialerReport, getDialerTrafficStat} from \"../../../actions/client/trafficStat\";\r\n\r\nconst mapState = ({client_traffic_stat, references}) => ({\r\n    loading: client_traffic_stat.loading,\r\n    page: client_traffic_stat.page,\r\n    per_page: client_traffic_stat.per_page,\r\n    count: client_traffic_stat.count,\r\n    trafficStat: client_traffic_stat.trafficStat,\r\n    summaries: client_traffic_stat.summaries,\r\n    uploadLoading: references.uploadLoadingDialer,\r\n    globalSettings: references.global_setting,\r\n});\r\n\r\nexport default connect(mapState, {\r\n    getTrafficStat: getDialerTrafficStat,\r\n    exportReport: exportDialerReport\r\n})(TrafficStat);\r\n","import {Toggle} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const BaseToggle = styled(Toggle).attrs(() => ({\r\n    size: \"lg\"\r\n}))`\r\n    && {\r\n        background-color: var(--color-brand1);\r\n        \r\n        &.rs-btn-toggle-checked {\r\n            background-color: var(--color-brand2);\r\n        }\r\n        \r\n        &:hover {\r\n            background-color: var(--color-grey);\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport {Toggle} from 'rsuite';\r\nimport CDR from './CDR';\r\nimport TrafficStat from './TrafficStat';\r\nimport {injectIntl} from \"react-intl\";\r\nimport {withRouter} from \"react-router\";\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\nimport m from \"../../definedMessages\";\r\nimport {Spacer} from \"../../components/base/Spacer\";\r\nimport {BaseToggle} from \"../../components/base/BaseToggle\";\r\n\r\n\r\nclass Traffic extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.formatMessage = this.props.intl.formatMessage.bind(this.props.intl);\r\n        this.startTab = new URLSearchParams(this.props.location.search).get(\"start_tab\");\r\n\r\n        this.state = {\r\n            typeTrafficCDR: this.startTab === \"traffic_reports\" || false\r\n        };\r\n    }\r\n\r\n    changeTypeTrafficCDR = (value) => {\r\n        this.setState({typeTrafficCDR: value});\r\n    };\r\n\r\n    render() {\r\n        const {typeTrafficCDR} = this.state;\r\n\r\n        return (\r\n            <PanelLayout>\r\n                <BaseToggle\r\n                    checkedChildren={this.formatMessage(m.trafficStat)}\r\n                    unCheckedChildren={this.formatMessage(m.cdr)}\r\n                    defaultChecked={typeTrafficCDR}\r\n                    onChange={value => this.changeTypeTrafficCDR(value)}\r\n                />\r\n                {typeTrafficCDR ? <TrafficStat/> : <CDR/>}\r\n            </PanelLayout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default injectIntl( withRouter(Traffic) )","import {\r\n    PRICE_DIALER as PREFIX,\r\n    SET_TRUNK_NUMBER_DIALER,\r\n    SET_LOADING_PRICE_ALLOCATED_NUMBERS_DIALER,\r\n    SET_UPLOAD_LOADING_DIALER\r\n} from '../../const';\r\n\r\nimport {\r\n    RATECARD_LIST_OTP_DEFAULT_DIALER,\r\n    RATECARD_LIST_DEFAULT_DIALER,\r\n    RATECARD_LIST_OTP_ACCOUNT_DIALER,\r\n    RATECARD_LIST_ACCOUNT_DIALER,\r\n    ALLOCATION_PRICE_RANGE_DIALER_API,\r\n} from '../../const/apiMethods';\r\n\r\nimport {api, getFileResponse} from '../../api/loginRoutes';\r\nimport {_setValue} from './defaults';\r\nimport {createUrl} from '../../utils/helpers';\r\n\r\nconst setPriceList = _setValue('SET_ITEMS_' + PREFIX);\r\nconst setLoading = _setValue('SET_LOADING_' + PREFIX);\r\nconst setUploadLoading = _setValue(SET_UPLOAD_LOADING_DIALER);\r\nconst setTrunkList = _setValue(SET_TRUNK_NUMBER_DIALER);\r\n\r\nexport const setLoadingAllocatedNumbersDialer = _setValue(SET_LOADING_PRICE_ALLOCATED_NUMBERS_DIALER);\r\n\r\nexport const setUploadingPriceLoadingDialer = (state) => (dispatch) => {\r\n    dispatch(setUploadLoading(state));\r\n};\r\n\r\nexport const getPriceListDialer = (per_page = 12, filter = {}, page = 1, isAuth = false) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n\r\n    const isTest = localStorage.getItem('userInfo')\r\n        ? JSON.parse(localStorage.getItem('userInfo')).session.account.is_test \r\n        : false;\r\n    \r\n    const request = isAuth \r\n        ? !isTest ? RATECARD_LIST_OTP_ACCOUNT_DIALER : RATECARD_LIST_OTP_DEFAULT_DIALER\r\n        : !isTest ? RATECARD_LIST_ACCOUNT_DIALER : RATECARD_LIST_DEFAULT_DIALER;\r\n\r\n    api(request, {\r\n        filter, \r\n        page, \r\n        per_page, \r\n        add: {}\r\n    }).then((response) => {\r\n        if (response !== undefined) {\r\n            dispatch(setPriceList({\r\n            ...(isAuth\r\n                ? {\r\n                    ratecard_list: response.ratecard_otp_list || [],\r\n                    ratecard_count: response.ratecard_otp_count || 0\r\n                }\r\n                : {\r\n                    ratecard_list: response.ratecard_standart_list || [],\r\n                    ratecard_count: response.ratecard_standart_count || 0\r\n                }),\r\n                page,\r\n                per_page\r\n            }));\r\n        }\r\n    });\r\n};\r\n\r\nexport const setLoadingDataDialer = (load) => (dispatch) => {\r\n    dispatch(setLoading(load));\r\n};\r\n\r\nexport const exportPriceDialer = (filter = {}, isAuth = false) => async (dispatch) => {\r\n    const isTest = localStorage.getItem('userInfo') \r\n        ? JSON.parse(localStorage.getItem('userInfo')).session.account.is_test \r\n        : false;\r\n    \r\n    const request = isAuth\r\n        ? !isTest ? RATECARD_LIST_OTP_ACCOUNT_DIALER : RATECARD_LIST_OTP_DEFAULT_DIALER\r\n        : !isTest ? RATECARD_LIST_ACCOUNT_DIALER : RATECARD_LIST_DEFAULT_DIALER;\r\n    \r\n    dispatch(setUploadLoading(true));\r\n    await getFileResponse(request, {filter})\r\n        .then((response) => createUrl(response, 'prices.csv'))\r\n        .catch( e => e );\r\n    dispatch(setUploadLoading(false));\r\n};\r\n\r\nexport const getTrunkListDialer = () => (dispatch) => {\r\n    api('trunk:get_list', {}).then((response) => {\r\n        if (response !== undefined)\r\n            dispatch(setTrunkList(response.trunk_list || []));\r\n    });\r\n};\r\n\r\nexport const allocateByPriceRangeDialer = (trunk_id, pr_key, numbers, random_order) => async (dispatch) => {\r\n\r\n    try {\r\n        dispatch(setLoadingAllocatedNumbersDialer(true));\r\n        const response = await api(ALLOCATION_PRICE_RANGE_DIALER_API, {target: {trunk_id}, pr_key, numbers, random_number: random_order});\r\n        dispatch(setLoadingAllocatedNumbersDialer(false));\r\n        if (response.response && response.response.data.error) {\r\n            return response.response.data.error;\r\n        }\r\n        return response;\r\n    } catch {\r\n        dispatch(setLoadingAllocatedNumbersDialer(false));\r\n    }\r\n};","import {\r\n    ACCESS_LIST_DIALER as PREFIX,\r\n    SET_LOADING_ACCESS_ALLOCATED_NUMBERS_DIALER,\r\n    SET_UPLOAD_LOADING_DIALER\r\n} from '../../const';\r\n\r\nimport {\r\n    ACCESS_LIST_ACCOUNT_PRICE_DIALER_API,\r\n    ACCESS_LIST_DEFAULT_PRICE_DIALER_API,\r\n    ACCESS_LIST_OTP_ACCOUNT_PRICE_DIALER_API,\r\n    ACCESS_LIST_OTP_DEFAULT_PRICE_DIALER_API,\r\n    ALLOCATION_SUBDESTINATION_DIALER_API,\r\n} from \"../../const/apiMethods\";\r\n\r\nimport {api, getFileResponse} from '../../api/loginRoutes';\r\nimport {_setValue} from './defaults';\r\nimport {createUrl} from '../../utils/helpers';\r\n\r\nconst setAccessList = _setValue('SET_ITEMS_' + PREFIX);\r\nconst setLoading = _setValue('SET_LOADING_' + PREFIX);\r\nconst setUploadLoading = _setValue(SET_UPLOAD_LOADING_DIALER);\r\n\r\n\r\nexport const setAccessLoadingAllocatedNumbers = _setValue(SET_LOADING_ACCESS_ALLOCATED_NUMBERS_DIALER);\r\n\r\n\r\nexport const setLoadingData = (load) => (dispatch) => {\r\n    dispatch( setLoading(load) );\r\n};\r\n\r\n\r\nexport const getAccessList = (per_page = 12, filter = {sp_key: 1}, page = 1, isAuth = false, cancelToken) => (dispatch) => {\r\n    dispatch( setLoading(true) );\r\n    \r\n    const isTest = localStorage.getItem('userInfo') \r\n        ? JSON.parse(localStorage.getItem('userInfo')).session.account.is_test \r\n        : false;\r\n\r\n    const request = isAuth \r\n        ? !isTest ? ACCESS_LIST_OTP_ACCOUNT_PRICE_DIALER_API : ACCESS_LIST_OTP_DEFAULT_PRICE_DIALER_API\r\n        : !isTest ? ACCESS_LIST_ACCOUNT_PRICE_DIALER_API : ACCESS_LIST_DEFAULT_PRICE_DIALER_API;\r\n\r\n    const params = {filter, page, per_page, cancelToken};\r\n    if (isAuth) {\r\n        params.sort1 = 'time';\r\n        params.sort1_desc = true;\r\n    }\r\n        \r\n    api(request, params).then((response) => {\r\n        if (response !== undefined) {\r\n            dispatch( setAccessList({\r\n                count: response.access_list_count || 0,\r\n                access_list_list: response.access_list_list || [],\r\n                page,\r\n                per_page\r\n            }) );\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const downloadAccesses = (account_id = '', filter = {}, isAuth = false) => async (dispatch) => {\r\n    \r\n    const isTest = localStorage.getItem('userInfo') \r\n        ? JSON.parse(localStorage.getItem('userInfo')).session.account.is_test \r\n        : false;\r\n\r\n        const request = isAuth \r\n            ? !isTest ? ACCESS_LIST_OTP_ACCOUNT_PRICE_DIALER_API : ACCESS_LIST_OTP_DEFAULT_PRICE_DIALER_API\r\n            : !isTest ? ACCESS_LIST_ACCOUNT_PRICE_DIALER_API : ACCESS_LIST_DEFAULT_PRICE_DIALER_API;\r\n    \r\n    dispatch( setUploadLoading(true) );\r\n    await getFileResponse(request, {\r\n        filter,\r\n        csv_result_key: 1\r\n    })\r\n        .then((response) => createUrl(response, 'accesses_list.csv'))\r\n        .catch( e => e );\r\n    dispatch( setUploadLoading(false) );\r\n};\r\n\r\n\r\nexport const allocateByAccess = (trunk_id, sde_key, numbers, random_order) => async (dispatch) => {\r\n    try {\r\n        dispatch( setAccessLoadingAllocatedNumbers(true) );\r\n        const response = await api(ALLOCATION_SUBDESTINATION_DIALER_API, {\r\n            target: {trunk_id}, \r\n            random_number: random_order, \r\n            sde_key, numbers\r\n        });\r\n\r\n        dispatch( setAccessLoadingAllocatedNumbers(false) );\r\n\r\n        if (response.response && response.response.data.error) {\r\n            return response.response.data.error;\r\n        }\r\n        return response;\r\n    } catch {\r\n        dispatch( setAccessLoadingAllocatedNumbers(false) );\r\n    }\r\n};","import {\r\n    NUMBERS_DIALER as PREFIX,\r\n    SET_ALL_ALLOCATED_NUMBER_DIALER,\r\n    SET_ALLOCATED_NUMBER_DIALER,\r\n    SET_TRUNK_NUMBER_DIALER,\r\n    SET_TRUNK_NUMBER_ALLOCATED_LOADING_DIALER,\r\n    SET_TRUNK_NUMBER_LOADING_DIALER,\r\n    SET_LOADING_NUMBERS_ALLOCATED_NUMBERS_DIALER,\r\n    SET_UPLOAD_TRUNK_LOADING_DIALER\r\n} from '../../const';\r\n\r\nimport {\r\n    TEMPLATE_GET,\r\n    ALLOCATION_NUMBER_LIST_DIALER_API,\r\n    ALLOCATION_TEMPLATE_DIALER_API,\r\n    ALLOCATION_GOOGLE_OTP_DIALER_API\r\n} from \"../../const/apiMethods\";\r\n\r\n\r\nimport {api, getFileResponse, getCsvResponse} from '../../api/loginRoutes';\r\nimport {_setValue} from './defaults';\r\nimport {createUrl, getBlobContent, saveFileBlob} from '../../utils/helpers';\r\nimport {SET_TRUNK_NUMBER_TRANSACTION_DIALER} from '../../const';\r\n\r\nconst setViewNumberTrunk = _setValue(SET_TRUNK_NUMBER_DIALER);\r\nconst setNumberTrunkLoading = _setValue(SET_TRUNK_NUMBER_LOADING_DIALER);\r\nconst setViewNumberAllocatedLoading = _setValue(SET_TRUNK_NUMBER_ALLOCATED_LOADING_DIALER);\r\nconst setViewNumberAllocated = _setValue(SET_ALLOCATED_NUMBER_DIALER);\r\nconst setAllNumberAllocated = _setValue(SET_ALL_ALLOCATED_NUMBER_DIALER);\r\nexport const setLoadingAllocatedNumbers = _setValue(SET_LOADING_NUMBERS_ALLOCATED_NUMBERS_DIALER);\r\nconst uploadLoading = _setValue(SET_UPLOAD_TRUNK_LOADING_DIALER);\r\n\r\nexport const setAllocatedNumbersByNumberList = _setValue(ALLOCATION_NUMBER_LIST_DIALER_API);\r\nexport const setAllocatedNumbersByTemplate = _setValue(ALLOCATION_TEMPLATE_DIALER_API);\r\nexport const setAllocatedGoogleOTPNumbers = _setValue(ALLOCATION_GOOGLE_OTP_DIALER_API);\r\n\r\nconst trunkNumberTransaction = _setValue(SET_TRUNK_NUMBER_TRANSACTION_DIALER);\r\n\r\nexport const setTrunkNumberTransaction = (transactionObject) => (dispatch) => {\r\n    dispatch(trunkNumberTransaction(transactionObject))\r\n};\r\n\r\nexport const setUploadingLoading = (trunk_id, state) => (dispatch) => {\r\n    dispatch(uploadLoading({[trunk_id]: state}));\r\n};\r\n\r\nexport const getNumberTrunksList = () => (dispatch) => {\r\n\r\n    dispatch(setNumberTrunkLoading(true));\r\n    api('trunk:get_list', {}).then((response) => {\r\n        if (response !== undefined)\r\n            dispatch(setViewNumberTrunk(response.trunk_list || []));\r\n    });\r\n\r\n};\r\n\r\nexport const getTrunkNumbers = (trunk_id, per_page = 12, filter = {}, page = 1, group = \"trunk_number\") => (dispatch) => {\r\n    dispatch(setViewNumberAllocatedLoading(true));\r\n    api('trunk_number__get_list', {\r\n        target: {\r\n            trunk_id: trunk_id\r\n        },\r\n        // add: {},\r\n        page,\r\n        filter,\r\n        group,\r\n        per_page\r\n    })\r\n        .then((response) => {\r\n            if (response !== undefined) {\r\n                const {\r\n                    trunk_number_list,\r\n                    group_price_range_list,\r\n                    group_subdestination_list,\r\n                    trunk_number_count,\r\n                    group_price_range_number_count,\r\n                    group_subdestination_number_count,\r\n                    row_count,\r\n                    group_price_range_count,\r\n                    group_subdestination_count\r\n                } = response;\r\n\r\n                dispatch(setViewNumberAllocated({\r\n                    items: (trunk_number_list || group_price_range_list || group_subdestination_list || [])\r\n                        .map(x => {\r\n                            if(group_price_range_list) {\r\n                                x.pr_key = x.price_range.pr_key;\r\n                                x.sde_key = x.price_range.sde_key;\r\n                                x.sp_key = x.price_range.sp_key;\r\n                                x.subdestination_name = x.price_range.subdestination_name;\r\n                            }\r\n\r\n                            return x;\r\n                        }),\r\n                    trunk_number_count: trunk_number_count || group_price_range_number_count || group_subdestination_number_count || 0,\r\n                    row_count: row_count || group_price_range_count || group_subdestination_count || 0,\r\n                    page,\r\n                    per_page\r\n                }));\r\n            }\r\n        });\r\n};\r\n\r\nexport const getAllAllocatedNumbers = (trunk_id) => (dispatch) => {\r\n    api('trunk_number__get_list', {\r\n        target: {trunk_id: trunk_id},\r\n        // add: {price_range: {}},\r\n        page: 1,\r\n        filter: {},\r\n        per_page: 1000\r\n    }).then(\r\n        (response) => {\r\n            if (response !== undefined)\r\n                dispatch(setAllNumberAllocated({trunk_number_list: response.trunk_number_list || []}));\r\n        });\r\n};\r\n\r\n\r\nexport const downloadNumbers = (trunk_id) => async (dispatch) => {\r\n    dispatch(uploadLoading({[trunk_id]: true}));\r\n\r\n    await getFileResponse('trunk_number:get_list', {\r\n        target: {\r\n            trunk_id: trunk_id\r\n        }\r\n    })\r\n        .then((response) => {\r\n            const csvText = getBlobContent(response);\r\n\r\n            csvText.then(csvBody => {\r\n                console.log(\"csv22\", csvBody);\r\n                const csvHeaderList = csvBody.split('\\n')[0].split(';');\r\n                const csvDataList = csvBody.split('\\n').slice(1).map(line => {\r\n                    const items = line.split(';');\r\n                    return [items[0], ...items.slice(2)].join(';')\r\n                });\r\n                const csvHeaders = [csvHeaderList[0], ...csvHeaderList.slice(2)].join(';');\r\n                csvDataList.unshift(csvHeaders);\r\n                const csvData = csvDataList.join('\\n');\r\n\r\n                saveFileBlob(csvData, 'allocated_numbers.csv')\r\n            });\r\n        });\r\n    dispatch(uploadLoading({[trunk_id]: false}));\r\n};\r\n\r\nexport const downloadFilteredNumbers = (trunkId, filters) => async (dispatch) => {\r\n    dispatch(uploadLoading({[trunkId]: true}));\r\n    await getFileResponse('trunk_number__get_list', {\r\n        target: {\r\n            trunk_id: trunkId\r\n        },\r\n        filter: {...filters}\r\n    })\r\n        .then((response) => {\r\n            createUrl(response, 'allocated_numbers.csv')\r\n        });\r\n\r\n    dispatch(uploadLoading({[trunkId]: false}));\r\n};\r\n\r\n\r\n// thunk: Allocate by template\r\nexport const allocateTrunkNumbersByTemplate = (trunk_id, template, numbers, random_order) => async (dispatch) => {\r\n    try {\r\n        dispatch( setLoadingAllocatedNumbers(true) );\r\n        const response = await api(ALLOCATION_TEMPLATE_DIALER_API, {target: {trunk_id}, template, numbers, random_number: random_order});\r\n\r\n        dispatch( setLoadingAllocatedNumbers(false) );\r\n        if (response && response.response && response.response.data.error) {\r\n            return response.response.data.error;\r\n        }\r\n\r\n        return response;\r\n    } catch (e) {\r\n        dispatch( setLoadingAllocatedNumbers(false) );\r\n    }\r\n};\r\n\r\n\r\n// thunk: Allocate by number list\r\nexport const allocateTrunkNumbersByNumberList = (trunk_id, number_list) => async (dispatch) => {\r\n    try {\r\n        dispatch(setLoadingAllocatedNumbers(true));\r\n        const response = await api(ALLOCATION_NUMBER_LIST_DIALER_API, {target: {trunk_id}, number_list});\r\n\r\n        // if (response !== undefined && response.reason_code) {\r\n        // dispatch(setLoadingAllocatedNumbers(false));\r\n        // }\r\n\r\n        dispatch( setLoadingAllocatedNumbers(false) );\r\n        if (response && response.response && response.response.data.error) {\r\n            return response.response.data.error;\r\n        }\r\n\r\n        return response;\r\n    } catch {\r\n        dispatch(setLoadingAllocatedNumbers(false));\r\n    }\r\n};\r\n\r\n\r\n// trunk: Allocate Google OTP\r\nexport const allocateGoogleOTPTrunkNumbers = ({trunk_id, numbers, ...data}) => async (dispatch) => {\r\n\r\n    try {\r\n        dispatch( setLoadingAllocatedNumbers(true) );\r\n        const params = {\r\n            ...data,\r\n            target: {trunk_id},\r\n            numbers: +numbers\r\n        };\r\n\r\n        if (params.template) {\r\n            params.template_list = [params.template];\r\n            delete params.template;\r\n        }\r\n        const response = await api(ALLOCATION_GOOGLE_OTP_DIALER_API, params);\r\n\r\n        dispatch( setLoadingAllocatedNumbers(false) );\r\n        if (response && response.response && response.response.data.error) {\r\n            return response.response.data.error;\r\n        }\r\n\r\n        return response;\r\n    } catch (e) {\r\n        dispatch( setLoadingAllocatedNumbers(false) );\r\n    }\r\n};\r\n\r\nexport const getTemplate = (account_id, type, table_name) => async () => {\r\n    return await api(TEMPLATE_GET, {target: {account_id}, type, table_name});\r\n};","import React from 'react';\r\nimport {Schema, SelectPicker} from 'rsuite';\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport CustomField from '../../components/client/Form/CustomField/CustomField';\r\nimport {LOCAL_STORAGE_USER_INFO_DIALER} from '../../const';\r\nimport {debounce} from 'lodash'\r\nimport {CustomizableForm} from '../../components/client/Form/CustomizableForm';\r\nimport {injectIntl} from \"react-intl\";\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport {FlexGrid, FlexGridItem} from '../../components/base/FlexGrid';\r\nimport m from \"../../definedMessages\";\r\nimport {BaseInputField, BaseSelectPicker} from \"../../components/base/BaseForm\";\r\n\r\nconst {StringType} = Schema.Types;\r\nconst MAX_CHARACTERS = 40;\r\nconst filtersModel = Schema.Model({\r\n        str: StringType()\r\n            .maxLength(MAX_CHARACTERS, `The maximum of this field is ${MAX_CHARACTERS} characters`)\r\n    }\r\n);\r\n\r\n\r\nconst PriceFilters = FormHOC(({\r\n    loading,\r\n    onChangeFilter,\r\n    prices = [],\r\n    savedTableFilter,\r\n    currency_list,\r\n    intl\r\n}) => {\r\n\r\n    const {formatMessage} = intl;\r\n    const filtersModelInner = Schema.Model({\r\n            str: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS}))\r\n        }\r\n    );\r\n\r\n    // temporary crutch for SP key\r\n    const [spKey, setSpKey] = React.useState(1);\r\n    const windowWidth = useWindowWidth();\r\n\r\n    React.useEffect(() => {\r\n        const sp_key = (savedTableFilter && savedTableFilter.sp_key) || (prices && prices.length && prices[0].sp_key) || 1;\r\n        setSpKey(sp_key);\r\n    }, [savedTableFilter, prices]);\r\n\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    const accountInfo = localStorage.getItem(LOCAL_STORAGE_USER_INFO_DIALER);\r\n    const parsedAccountInfo = accountInfo !== null ? JSON.parse(accountInfo).session.account : {};\r\n    const accountInfoIsTest = parsedAccountInfo.hasOwnProperty('is_test') ? parsedAccountInfo.is_test : false;\r\n\r\n    let filteredPriceList;\r\n    let savedFilter;\r\n\r\n    const priceList = prices.map(({sp_key: value, name: label}) => ({value, label}));\r\n    const curList = currency_list.map(({cur_key: value, name: label}) => ({value, label}));\r\n\r\n    if (priceList && priceList.length && savedTableFilter) {\r\n        filteredPriceList = priceList.filter(price => {\r\n            return price.value === savedTableFilter.sp_key\r\n        });\r\n    }\r\n\r\n    if (filteredPriceList && filteredPriceList.length) {\r\n        savedFilter = {\r\n            ...savedTableFilter,\r\n            sp_key: filteredPriceList[0].value,\r\n            str: (savedTableFilter && savedTableFilter.str) || '',\r\n            cur_key: (savedTableFilter && savedTableFilter.cur_key) || 1\r\n        }\r\n    } else {\r\n        savedFilter = {\r\n            ...savedTableFilter,\r\n            sp_key: (prices && prices.length && prices[0].sp_key) || (savedTableFilter && savedTableFilter.sp_key) || 1,\r\n            str: (savedTableFilter && savedTableFilter.str) || '',\r\n            cur_key: (savedTableFilter && savedTableFilter.cur_key) || 1\r\n        }\r\n    }\r\n\r\n    const onSubmit = (data, checkedData) => {\r\n        const checker = Object.keys(checkedData).map(i => checkedData[i].hasError).every(value => value === false);\r\n\r\n        if (checker) {\r\n            onChangeFilter({...data, sp_key: data.sp_key || savedTableFilter.sp_key || 1});\r\n        }\r\n        return false\r\n    };\r\n\r\n    return (\r\n        <CustomizableForm\r\n            model={filtersModelInner}\r\n            formDefaultValue={savedFilter}\r\n            fluid\r\n            readOnly={loading}\r\n            onChange={debounce((data) => {\r\n                const checkedData = filtersModel.check(data);\r\n                onSubmit(data, checkedData);\r\n            }, 1000)}\r\n        >\r\n\r\n            <FlexGrid align=\"top\">\r\n                <FlexGridItem width={windowWidth > 767 ? \"180px\" : \"100%\"}>\r\n                    <CustomField\r\n                        data={priceList}\r\n                        value={spKey}\r\n                        searchable={false}\r\n                        accepter={BaseSelectPicker}\r\n                        name=\"sp_key\"\r\n                        cleanable={false}\r\n                        onChange={(value) => {\r\n                            setSpKey(value)\r\n                        }}\r\n                    />\r\n                </FlexGridItem>\r\n\r\n                { accountInfoIsTest&&\r\n                    <FlexGridItem>\r\n                        <CustomField\r\n                            data={curList}\r\n                            accepter={BaseSelectPicker}\r\n                            name=\"cur_key\"\r\n                            width={windowWidth > 767 ? \"320px\" : \"100%\"}\r\n                            cleanable={false}\r\n                            searchable={false}\r\n                        />\r\n                    </FlexGridItem>\r\n                }\r\n\r\n                <FlexGridItem width={windowWidth > 767 ? \"320px\" : \"100%\"}>\r\n                    <CustomField\r\n                        name=\"str\"\r\n                        accepter={BaseInputField}\r\n                        errorPlacement=\"topEnd\"\r\n                        placeholder={\r\n                            resizedWidth > 300 ? \r\n                                formatMessage(m.filterPerPrefixOrRangeName) \r\n                                : formatMessage(m.rangeName)\r\n                            }\r\n                    />\r\n                </FlexGridItem>\r\n            </FlexGrid>\r\n\r\n        </CustomizableForm>\r\n    );\r\n}, filtersModel, 500);\r\n\r\n\r\nexport default injectIntl(PriceFilters)","import React, {useContext} from 'react';\r\nimport {Icon, Table, Tooltip, Whisper} from 'rsuite';\r\nimport {useIntl} from \"react-intl\";\r\nimport {renderColumn} from \"../../utils/helpers\";\r\nimport CustomizableTable from '../../components/client/CustomizableTable/CustomizableTable';\r\nimport styled from 'styled-components';\r\nimport {ButtonRowClient, ButtonToolbar} from \"../../components/base/BaseButton\";\r\nimport m from \"../../definedMessages\";\r\nimport {RtlContext} from \"../../App\";\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\n\r\nexport default ({\r\n    data = [], \r\n    loading, \r\n    page, \r\n    count, \r\n    per_page, \r\n    savedPerPage, \r\n    onChangePerPage, \r\n    onChangePage, \r\n    onShowGetNumbersModal,\r\n    setShowGoogleOTPModal,\r\n    spAuth,\r\n    isGoogleOtp,\r\n    accountInfo,\r\n    isTest,\r\n    accountDialerState,\r\n}) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n    const rtl = useContext(RtlContext);\r\n\r\n    let actionShowFlag = null;\r\n\r\n    if (accountInfo.hasOwnProperty('permission_list')) {\r\n        if (accountInfo.permission_list !== null)\r\n            actionShowFlag = accountInfo.permission_list.includes('allocate_number');\r\n        if (accountInfo.permission_list !== null && isGoogleOtp)\r\n            actionShowFlag = accountInfo.permission_list.includes('google_otp_allocation');\r\n    }\r\n\r\n\r\n    const nonTestColumns = [\r\n        {\r\n            id: 'payout',\r\n            label: formatMessage(m.payout),\r\n            value: (({payment_terms_rate_list}) => {\r\n                if (!payment_terms_rate_list || !payment_terms_rate_list.length)\r\n                    return \"—\";\r\n                const obj = payment_terms_rate_list.find(value => {\r\n                    return value.payment_terms_name === (accountInfo.hasOwnProperty('payment_terms') ? accountInfo.payment_terms : '');\r\n                });\r\n                if (obj) {\r\n                    return `${Number(obj.rate).toFixed(4)} ${accountInfo.currency_name}`;\r\n                } else {\r\n                    return '—';\r\n                }\r\n            }),\r\n            flexGrow: 2,\r\n            minWidth: 120,\r\n            align: 'center'\r\n        }\r\n    ];\r\n\r\n\r\n    const columns = [\r\n        {\r\n            id: 'subdest',\r\n            label: formatMessage(m.subdestination),\r\n            value: ({subdestination_name, template}) => (\r\n                    `${subdestination_name ? subdestination_name : \"\"}${template ? ` (${template})` : \"\"}`\r\n            ),\r\n            align: 'center',\r\n            flexGrow: 3,\r\n            minWidth: 180,\r\n            spAuth: true\r\n        },\r\n        {\r\n            id: 'prefix',\r\n            label: formatMessage(m.prefix),\r\n            dataKey: 'prefix',\r\n            align: 'center',\r\n            flexGrow: 2,\r\n            minWidth: 120,\r\n            spAuth: false\r\n        },\r\n        {\r\n            id: 'range',\r\n            label: formatMessage(m.rangeName),\r\n            value: (({range_name}) => `${range_name}`),\r\n            flexGrow: 4,\r\n            minWidth: (actionShowFlag ? 210 : 200),\r\n            align: 'center',\r\n            spAuth: false\r\n        },\r\n        {\r\n            id: 'test_num',\r\n            label: formatMessage(m.testNumbers),\r\n            value: (({test_trunk_number_list}) => {\r\n                if (!test_trunk_number_list)\r\n                    return;\r\n\r\n                const firstElement = test_trunk_number_list[0];\r\n\r\n                return (\r\n                    firstElement\r\n                        ? <>\r\n                            <span>{firstElement}</span>\r\n                            <Whisper\r\n                                placement=\"auto\"\r\n                                speaker={\r\n                                    <Tooltip>{formatMessage(m.allTheTrafficMustBeClearedByTheCarrier)}</Tooltip>\r\n                                }\r\n                            >\r\n                                <StyledTooltipIcon icon='info'/>\r\n                            </Whisper>\r\n                        </>\r\n                        :\r\n                        <span>—</span>\r\n                );\r\n            }),\r\n            flexGrow: 2,\r\n            minWidth: 140,\r\n            align: 'center',\r\n            spAuth: false\r\n        },\r\n        {\r\n            id: 'avail_num',\r\n            label: formatMessage(m.availableNumbers),\r\n            value: ( ({available_numbers}) => (available_numbers ? available_numbers : '')),\r\n            flexGrow: 2,\r\n            minWidth: 130,\r\n            align: 'center',\r\n            spAuth: false\r\n        },\r\n        {\r\n            id: 'min_dur',\r\n            label: formatMessage(m.minDuration),\r\n            value: (() => <>\r\n                <span>25 sec</span>\r\n                <Whisper\r\n                    placement=\"auto\"\r\n                    speaker={\r\n                        <Tooltip>{formatMessage(m.allTheTrafficWillBePaidOnMonthlyBasis, {count: 25})}</Tooltip>\r\n                    }\r\n                >\r\n                    <StyledTooltipIcon icon='info'/>\r\n                </Whisper>\r\n            </>),\r\n            flexGrow: 2,\r\n            minWidth: 120,\r\n            align: 'center',\r\n            spAuth: false\r\n        }\r\n    ].filter(value => {\r\n        return value.spAuth === undefined || value.spAuth === spAuth\r\n    });\r\n\r\n\r\n    const testColumns = [];\r\n\r\n    if (!isTest) {\r\n        for (const column of nonTestColumns) {\r\n            columns.splice(2, 0, column);\r\n        }\r\n    }\r\n\r\n\r\n    const allTermList = [];\r\n\r\n    for (const priceRange of data) {\r\n        if (!priceRange.payment_terms_rate_list)\r\n            continue;\r\n\r\n        for (const term of priceRange.payment_terms_rate_list) {\r\n            allTermList.push(term.payment_terms_name);\r\n        }\r\n    }\r\n\r\n    const uniqueTermList = allTermList.filter((v, i, a) => a.indexOf(v) === i);\r\n    for (const term of uniqueTermList) {\r\n        testColumns.push(\r\n            {\r\n                id: 'payouts',\r\n                label: `${formatMessage(m.payout)} ${term}`,\r\n                value: (({payment_terms_rate_list}) => {\r\n                    const obj = payment_terms_rate_list.find(value => value.payment_terms_name === term);\r\n                    let currency = payment_terms_rate_list.find(value=> value.rate !== null);\r\n                    if (currency) {\r\n                        currency = currency.currency_name;\r\n                    }\r\n                    if (obj) {\r\n                        if (accountInfo.hasOwnProperty('currency_name')) {\r\n                            return `${Number(obj.rate).toFixed(4)} ${currency ? currency : ''}`;\r\n                        }\r\n                    } else {\r\n                        return '—';\r\n                    }\r\n                }),\r\n                flexGrow: 2,\r\n                minWidth: 140,\r\n                align: 'center'\r\n            });\r\n    }\r\n\r\n    if (isTest) {\r\n        for (const column of testColumns) {\r\n            columns.splice(2, 0, column);\r\n        }\r\n    }\r\n\r\n    const renderedColumns = columns.map(renderColumn);\r\n\r\n    return (\r\n        <>\r\n            <CustomizableTable\r\n                {...{\r\n                    rtl,\r\n                    data,\r\n                    count,\r\n                    page,\r\n                    per_page,\r\n                    loading,\r\n                    savedPerPage,\r\n                    onChangePage,\r\n                    onChangePerPage,\r\n                    renderedColumns\r\n                }}\r\n                actionColumn={() => {\r\n\r\n                    if (spAuth && isGoogleOtp && (\r\n                        !accountDialerState || \r\n                        !accountDialerState.permission_list ||\r\n                        accountDialerState.permission_list && !accountDialerState.permission_list.includes('google_otp_allocation')\r\n                    )) {\r\n                        return null;\r\n                    }\r\n\r\n                    return actionShowFlag &&\r\n                        <Column key=\"table_actions\" width={(rtl ? 160 : 130)} align='center'>\r\n                            <HeaderCell>{formatMessage(m.action)}</HeaderCell>\r\n                            <Cell>\r\n                                {\r\n                                    rowData => {\r\n\r\n                                        const data = {\r\n                                            range_name: rowData.range_name,\r\n                                            pr_key: rowData.pr_key,\r\n                                            sp_key: rowData.sp_key,\r\n                                            sde_key: rowData.sde_key,\r\n                                            subdestination_name: rowData.subdestination_name,\r\n                                            // available_numbers: (rowData.all_numbers - rowData.test_numbers - rowData.allocated_numbers),\r\n                                            available_numbers: rowData.available_numbers,\r\n                                            template: `${rowData.prefix}${'X'.repeat(rowData.digit)}`\r\n                                        };\r\n\r\n                                        return (\r\n                                            <ButtonToolbar>\r\n                                                <ButtonRowClient\r\n                                                    size=\"sm\"\r\n                                                    onClick={() => {\r\n                                                        if (isGoogleOtp) {\r\n                                                            setShowGoogleOTPModal(rowData)\r\n                                                        } else  {\r\n                                                            onShowGetNumbersModal(data)\r\n                                                        }\r\n                                                    }}\r\n                                                >\r\n                                                    <b>{formatMessage(m.getNumbers)}</b>\r\n                                                </ButtonRowClient>\r\n                                            </ButtonToolbar>\r\n                                        );\r\n                                    }\r\n                                }\r\n                            </Cell>\r\n                        </Column>;\r\n                }}\r\n                data={data}\r\n                isChangedColumns={false}\r\n                isPaginated={true}\r\n            />\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nconst StyledTooltipIcon = styled(Icon)`\r\n    margin-left: 5px;\r\n\r\n    .rtl & {\r\n        margin-left: 0;\r\n        margin-right: 5px;\r\n    }\r\n`;","import React from \"react\";\r\nimport {useIntl} from \"react-intl\";\r\nimport {SelectPicker} from \"rsuite\";\r\nimport m from \"../../definedMessages\";\r\nimport {BaseSelectPicker} from \"../base/BaseForm\";\r\n\r\n\r\nexport default ({\r\n    data = [],\r\n    onChange = () => {},\r\n    rtl = false,\r\n    intl,\r\n    ...props\r\n}) => {\r\n    const {formatMessage} = useIntl();\r\n    const renderTrunksListItem = (value, item) => <TrunksListItem item={item}/>;\r\n    \r\n    return (\r\n        <BaseSelectPicker\r\n            data={data}\r\n            onChange={onChange}\r\n            name=\"tr_key\"\r\n            valueKey=\"id\"\r\n            labelKey=\"name\"\r\n            placement={rtl ? \"bottomEnd\" : \"bottomStart\"}\r\n            placeholder={formatMessage(m.selectTrunk)}\r\n            renderMenuItem={renderTrunksListItem}\r\n            renderValue={renderTrunksListItem}\r\n            style={{width: '100%'}}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nconst TrunksListItem = ({item}) => {\r\n    const {formatMessage} = useIntl();\r\n\r\n    return (\r\n        <>\r\n            <b>{formatMessage(m.trunk)}: </b> {item.name}&#44;&nbsp;\r\n            <b>{formatMessage(m.price)}: </b> {item.service_plan_name}\r\n        </>\r\n    );\r\n};","import React, {useState} from 'react';\r\nimport {\r\n    ControlLabel,\r\n    Form,\r\n    FormControl,\r\n    FormGroup,\r\n    InputNumber,\r\n    Schema\r\n} from 'rsuite';\r\nimport Modal from '../../components/Modal';\r\nimport CustomField from '../../components/client/Form/CustomField/CustomField';\r\nimport {useIntl} from \"react-intl\";\r\nimport Checkbox from 'rsuite/es/Checkbox';\r\nimport {ALLOCATION_PRICE_RANGE_DIALER_API} from \"../../const/apiMethods\";\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport styled, {css} from 'styled-components';\r\nimport {SCREEN_MEDIA} from \"../../const\";\r\nimport TrunksList from '../../components/TrunksList/TrunksList';\r\nimport m from \"../../definedMessages\";\r\nimport {CustomModalClient} from \"../../components/base\";\r\nimport {BaseCheckboxField, BaseInputNumberField} from \"../../components/base/BaseForm\";\r\n\r\nconst {md} = SCREEN_MEDIA;\r\n\r\nconst {StringType, NumberType} = Schema.Types;\r\n\r\nexport default ({\r\n    show,\r\n    onClose,\r\n    onSend,\r\n    trunks,\r\n    priceData,\r\n    maxWidth = 640,\r\n    loading,\r\n    formValue,\r\n    randomNumber,\r\n    onChangeRandomNumber,\r\n    onChangeFormValue,\r\n    allocationLimit,\r\n    spAuth,\r\n    ...props\r\n}) => {\r\n\r\n    let form;\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    const [formError, onChangeFormError] = useState({});\r\n    const [trunkId, onChangeTrunkId] = useState(null);\r\n\r\n    let {formatMessage} = useIntl();\r\n\r\n    const MIN_NUMBER = 1;\r\n    const MAX_NUMBER = allocationLimit && allocationLimit.price_range \r\n        ? allocationLimit.price_range.once \r\n        : allocationLimit && allocationLimit.other && allocationLimit.other.once || 1000;\r\n\r\n    const formSchemaInner = Schema.Model({\r\n        trunk_id: StringType()\r\n            .isRequired(formatMessage(m.thisFieldIsRequired)),\r\n        numbers: NumberType( formatMessage(m.pleaseEnterValidNumber) )\r\n            .min(MIN_NUMBER, formatMessage(m.minNumber, {number: MIN_NUMBER}))\r\n            .max(MAX_NUMBER, formatMessage(m.maxNumber, {number: MAX_NUMBER}))\r\n            .isRequired(formatMessage(m.thisFieldIsRequired)),\r\n    });\r\n\r\n    const onSubmit = async () => {\r\n        const data = form.getFormValue();\r\n        const response = await onSend({...data, numbers: Number(data.numbers), random_order: randomNumber});\r\n\r\n        if (!response)\r\n            return;\r\n\r\n        if (response.status === 0) {\r\n            clearForm();\r\n        } else {\r\n            const trunk = trunks.filter( trunk => trunk.id === trunkId );\r\n            props.setReasonModalProps({\r\n                reasonCode: response.reason_code,\r\n                isRandom: randomNumber,\r\n                method: ALLOCATION_PRICE_RANGE_DIALER_API,\r\n                trunk: trunk[0],\r\n                range: priceData.range_name,\r\n                subdest: priceData.subdestination_name,\r\n                numbersAmount: formValue.numbers,\r\n                reasonHash: response.reason_hash\r\n            });\r\n        }\r\n    };\r\n\r\n    const clearForm = () => {\r\n        onChangeFormValue({trunk_id: null, numbers: 1});\r\n        onChangeRandomNumber(false);\r\n    };\r\n\r\n    const checkForm = (form, formSchema, formData, formError) => {\r\n        if (!form.check()) {\r\n            return true;\r\n        } else {\r\n            const checker = Object.keys(formSchema.check(formData)).map(i => formSchema.check(formData)[i].hasError).every(value => value === false) &&\r\n                !(formData.hasOwnProperty('name') && formData.hasOwnProperty('numbers'));\r\n            if (checker) {\r\n                onSubmit();\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const priceTrunks = trunks \r\n        ? trunks.filter(value => {\r\n            return value.sp_key === priceData.sp_key && !value.closed && !value.option_google_otp\r\n        })\r\n        : {};\r\n\r\n    const maxNumbersCalculated = priceData.available_numbers > MAX_NUMBER ? MAX_NUMBER : priceData.available_numbers;\r\n\r\n    return (\r\n        <ModalForm\r\n            show={show}\r\n            confirmButtonText={formatMessage(m.getNumbers)}\r\n            onConfirm={() => {\r\n                checkForm(form, formSchemaInner, formValue, formError);\r\n                //    onChangeFormValue({trunk_id: '', numbers: 1});\r\n            }}\r\n            onClose={() => {\r\n                onClose(false);\r\n                clearForm();\r\n            }}\r\n            title={!spAuth \r\n                ? `${formatMessage(m.getNumbersForRange)} ${priceData.range_name}`\r\n                : `${formatMessage(m.getNumbersForDestination, {name: priceData.subdestination_name})}`\r\n            }\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            showFooter={true}\r\n            whisper={priceData.range_name}\r\n            disabled={trunkId === null}\r\n            loading={loading}\r\n        >\r\n            <Form layout='horizontal'\r\n                  ref={ref => (form = ref)}\r\n                  model={formSchemaInner}\r\n                  onChange={formValue => {\r\n                      onChangeFormValue(formValue);\r\n                  }}\r\n                  onCheck={formError => {\r\n                      onChangeFormError(formError);\r\n                  }}\r\n                  formValue={formValue}\r\n            >\r\n                <FormParts>\r\n                    <FormPart>\r\n\r\n                        <FormGroup>\r\n                            <TrunkField>\r\n                                <CustomField\r\n                                    accepter={TrunksList}\r\n                                    name='trunk_id'\r\n                                    data={priceTrunks}\r\n                                    onChange={(value) => onChangeTrunkId(value)}\r\n                                />\r\n                            </TrunkField>\r\n                        </FormGroup>\r\n\r\n                    </FormPart>\r\n                    <FormPart>\r\n\r\n                        <FormGroup>\r\n                            <FlexBox>\r\n                                <FormLabel>{formatMessage(m.getNumbersModal, {count: MAX_NUMBER})}</FormLabel>\r\n                                <FormFieldWrapper width=\"80px\">\r\n                                    <FormControl\r\n                                        accepter={BaseInputNumberField}\r\n                                        max={maxNumbersCalculated}\r\n                                        min={1}\r\n                                        name='numbers'\r\n                                    />\r\n                                </FormFieldWrapper>\r\n                            </FlexBox>\r\n                        </FormGroup>\r\n\r\n                    </FormPart>\r\n                    <FormPart>\r\n                        <BaseCheckboxField\r\n                            // Форма не подхватывает значение чекбокса, как в реф так и в стейт\r\n                            onChange={(_, checked) => {\r\n                                onChangeRandomNumber(checked)\r\n                            }}\r\n                            defaultChecked={randomNumber}\r\n                            name=\"random_order\"\r\n                            value=\"random_order\"\r\n                        >\r\n                            {formatMessage(m.randomOrder)}\r\n                        </BaseCheckboxField>\r\n\r\n                    </FormPart>\r\n                </FormParts>\r\n            </Form>\r\n        </ModalForm>\r\n    );\r\n};\r\n\r\nconst FlexBox = styled.div`\r\n    align-items: center;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nconst FormParts = styled.div`\r\n    display: block;\r\n    margin-bottom: -20px;\r\n    @media (min-width: ${md.min}px) {\r\n        align-items: center;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        justify-content: space-between;\r\n    }\r\n`;\r\n\r\nconst FormPart = styled.div`\r\n    padding-bottom: 20px;\r\n\r\n    @media (min-width: ${md.min}px) {\r\n        padding-right: 10px;\r\n\r\n        &:last-child {\r\n            padding-right: 0;\r\n        }\r\n    }\r\n`;\r\n\r\nconst FormLabel = styled(ControlLabel)`\r\n    &&&& {\r\n        float: none;\r\n        margin: 0 0 10px 0;\r\n        padding: 0;\r\n        text-align: left;\r\n        word-wrap: none;\r\n        TrunkField\r\n            width: auto;\r\n        }\r\n    }\r\n`;\r\n\r\nconst FormFieldWrapper = styled.div`\r\n    width: 100%;\r\n\r\n    {${props => props.width && css`\r\n        @media (min-width: ${md.min}px) {\r\n            width: ${props.width}\r\n        }\r\n    `}\r\n`;\r\n\r\nconst TrunkField = styled.div`\r\n    width: 100%;\r\n\r\n    @media (min-width: ${md.min}px) {\r\n        width: 200px;\r\n    }\r\n`;\r\n\r\nexport const ModalForm = styled(CustomModalClient)`\r\n    .rs-modal-content {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .rs-modal-footer {\r\n        margin-top: auto;\r\n        padding-bottom: 20px;\r\n        padding-top: 20px;\r\n    }\r\n`;","import React, {useContext, useMemo} from 'react';\r\nimport {Alert, FlexboxGrid, Icon, List, Panel, Button} from 'rsuite';\r\nimport {\r\n    arrayToObject,\r\n    between,\r\n    getRangeByDigit,\r\n    renderColumn,\r\n    makeRangeFromPrefixesToCsv,\r\n    getCsvDataWithHeaders,\r\n    onDownloadCompleteNumbersCSV,\r\n    onDownloadCompletePrefixesCSV,\r\n    copyToClipboard,\r\n    makeNumbersFromPrefixesToCsv\r\n} from '../../../utils/helpers';\r\nimport {useIntl} from 'react-intl';\r\nimport {EOL} from './../../../const';\r\nimport {useWindowWidth} from '../../../hooks';\r\nimport styled, {css} from 'styled-components';\r\nimport {Spacer} from '../../../components/base/Spacer';\r\nimport ButtonToolbar from 'rsuite/es/ButtonToolbar';\r\nimport Dropdown from 'rsuite/es/Dropdown';\r\nimport Loader from 'rsuite/es/Loader';\r\nimport m from \"../../../definedMessages\";\r\nimport {CustomModalClient} from \"../../base\";\r\nimport BaseTable from \"../../base/BaseTable\";\r\nimport {RtlContext} from \"../../../App\";\r\n\r\n\r\nconst headerStyle = {\r\n    background: '#fff',\r\n    color: '#000'\r\n};\r\n\r\n\r\nexport default ({\r\n    maxWidth = 600, show, onClose, priceData = {}, extraColumns,\r\n    downloadNumbers, downloadNumbersTxt, loading, trunkId, uploadLoading, trunkAllocatedByOTP,\r\n    methodName, csvContent, allocatedNumbersCount, prefixViewNumbers,\r\n    notAllocatedNumbers, trunkNumberTransaction, setUploadingLoading,\r\n}) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n    const rtl = useContext(RtlContext);\r\n    \r\n    const statusLabels = useMemo(() => ({\r\n        1: formatMessage(m.numberIsUnavailable),\r\n        3: formatMessage(m.destinationDoesNotExist),\r\n        4: formatMessage(m.noRateForThisDestination),\r\n        7: formatMessage(m.numberIsQuarantined),\r\n        10: formatMessage(m.numbersFromRangeCannotBeAllocatedSingle),\r\n    }), []);\r\n\r\n    const resizedWidth = useWindowWidth();\r\n    const [isEnetered, setIsEntered] = React.useState(false);\r\n    const columns = [\r\n        {\r\n            id: 'Prefix',\r\n            dataKey: 'Prefix',\r\n            align: 'center',\r\n            className: 'number',\r\n            label: formatMessage(m.prefix),\r\n            headerStyle: headerStyle,\r\n            width: !trunkNumberTransaction || trunkNumberTransaction.method2 !== \"google_otp\" ? 170 : 230,\r\n        },\r\n        {\r\n            id: 'Range name',\r\n            dataKey: 'Range name',\r\n            align: 'left',\r\n            label: formatMessage(m.rangeName),\r\n            className: 'range-name',\r\n            headerStyle: headerStyle,\r\n            width: !trunkNumberTransaction || trunkNumberTransaction.method2 !== \"google_otp\" ? 230 : 260,\r\n        },\r\n        {\r\n            id: 'Payout',\r\n            dataKey: 'Payout',\r\n            align: 'center',\r\n            label: formatMessage(m.payout),\r\n            headerStyle: headerStyle,\r\n            width: 75,\r\n        },\r\n        {\r\n            id: 'Currency',\r\n            dataKey: 'Currency',\r\n            align: 'center',\r\n            label: formatMessage(m.currency),\r\n            headerStyle: headerStyle,\r\n            width: 75,\r\n        },\r\n        {\r\n            id: 'Billing increment',\r\n            dataKey: 'Billing increment',\r\n            align: 'center',\r\n            label: formatMessage(m.billingIncrement),\r\n            headerStyle: headerStyle,\r\n            width: 110,\r\n        },\r\n    ];\r\n\r\n\r\n    const compareCsvOnlyNumbersData = (list) => {\r\n        return list && list.length ? list.split().join(';') : [];\r\n    };\r\n\r\n\r\n    const getCsvBodyWithHeaders = (csvData) => {\r\n        return `data:text/csv;charset=utf-8,${getCsvDataWithHeaders(csvData).join(EOL)}`;\r\n    };\r\n\r\n\r\n    const getCsvBody = (csvData) => {\r\n        return `data:text/csv;charset=utf-8,${csvData}`;\r\n    };\r\n\r\n\r\n    const onlyNumbers = (csvData) => {\r\n        if (!csvData || !csvData.length)\r\n            return [];\r\n\r\n        const dataArr = csvData.slice(1).map(line => line.split(';')[0]);\r\n        if (trunkNumberTransaction.method2 === \"google_otp\") {\r\n\r\n            const chunksTotal = dataArr.length / 100;\r\n            const chunks = [];\r\n            for (let i = 0; i < chunksTotal; i++) {\r\n                const startItem = i * 100;\r\n                const endItem = startItem + 100;\r\n                const chunk = dataArr.slice(startItem, endItem);\r\n                chunk.sort(() => Math.random() - 0.5);\r\n                chunk.sort(() => Math.random() - 0.5);\r\n                chunks.push(chunk);\r\n            }\r\n\r\n            return chunks.reduce((sum, current) => {\r\n                return [...sum, ...current];\r\n            }, []).join(EOL);\r\n        }\r\n        return dataArr.join(EOL);\r\n    };\r\n\r\n\r\n    const csvOnlyNumbers = (csvData) => {\r\n        return getCsvBody( compareCsvOnlyNumbersData( onlyNumbers(csvData) ) );\r\n    };\r\n\r\n\r\n    const renderCsvDataToTableData = (data, headers) => {\r\n        const csvBody = data.length ? data.slice(1) : [];\r\n\r\n        return (\r\n            csvBody.map(line => {\r\n                const items = line.split(';');\r\n                const prefix = getRangeByDigit(items[0], items[1]);\r\n\r\n                const body = items.map((item, index) => {\r\n                    if (between(index, 2, 5)) {\r\n                        return {[headers[index]]: item}\r\n                    }\r\n                    return null;\r\n                }).filter(value => value);\r\n\r\n                return {\r\n                    [headers[0]]: prefix,\r\n                    ...(arrayToObject(body))\r\n                }\r\n            })\r\n                .filter(obj => Object.keys(obj).some(key => obj[key]))\r\n        );\r\n    };\r\n\r\n\r\n    const numberListNotAllocated = notAllocatedNumbers || [];\r\n    const uploadLoadSetting = uploadLoading[trunkId];\r\n\r\n    let combinedTitle = formatMessage(m.newAllocatedNumbers);\r\n\r\n    if (methodName === 'Trunks') {\r\n        combinedTitle = formatMessage(m.newAllocatedNumbers);\r\n    } else if (methodName === 'Ratecard') {\r\n        combinedTitle = priceData.range_name\r\n            ? `${formatMessage(m.getNumbersForRange)} ${priceData.range_name}`\r\n            : formatMessage(m.newAllocatedNumbers);\r\n    } else if (methodName === 'AccessList') {\r\n        combinedTitle = formatMessage(m.allocatedNumberList);\r\n    }\r\n\r\n    const csvDataList = csvContent ? csvContent.split('\\n') : [];\r\n    const csvHeaders = csvDataList.length ? csvDataList[0].split(';') : [];\r\n    const comparedData = renderCsvDataToTableData(csvDataList, csvHeaders);\r\n\r\n    const tableColumns = extraColumns ? extraColumns : columns;\r\n    const renderedColumns = tableColumns.map(renderColumn);\r\n\r\n    if ( rtl ) renderedColumns.reverse();\r\n\r\n\r\n    return (\r\n        <CustomModalClient\r\n            show={show}\r\n            successButton={formatMessage(m.getNumbers)}\r\n            title={combinedTitle}\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            height={800}\r\n            showCloseSuccessButtons={false}\r\n            onEntered={() => {\r\n                setTimeout( () => {\r\n                    setIsEntered(true);\r\n                }, 500 );\r\n            }}\r\n            onClose={() => {\r\n                setIsEntered(false);\r\n                onClose();\r\n            }}\r\n        >\r\n\r\n            <div>\r\n                <Icon icon=\"exclamation-triangle\"/> {formatMessage(m.payYourAttention)}\r\n            </div>\r\n\r\n            <Spacer/>\r\n\r\n            <div className=\"allocation-total\">{formatMessage(m.numbersWereAllocated, {count:allocatedNumbersCount})}</div>\r\n\r\n            <Spacer size={25}/>\r\n\r\n            <StyledGrid justify=\"space-between\">\r\n                <StyledButtonToolbar>\r\n                    <StyledDropdown\r\n                        title={<>{uploadLoadSetting && <StyledLoader/>} {formatMessage(m.copyList)}</>}\r\n                        disabled={uploadLoadSetting || !allocatedNumbersCount}\r\n                    >\r\n                        <Dropdown.Item\r\n                            onClick={ () => {\r\n                                const csvData = prefixViewNumbers ? makeNumbersFromPrefixesToCsv(csvContent) : csvContent;\r\n                                const csvDataList = csvData && csvData.length ? csvData.split('\\n') : [];\r\n                                if (!allocatedNumbersCount) {\r\n                                    Alert.warning( formatMessage(m.unableToCopyEmptyTable) )\r\n                                } else {\r\n                                    copyToClipboard( onlyNumbers(csvDataList) );\r\n                                    Alert.success( formatMessage(m.copied) )\r\n                                }\r\n                            }}\r\n                        >\r\n                            {formatMessage(m.copyJustNumbers)}\r\n                        </Dropdown.Item>\r\n\r\n                        {prefixViewNumbers &&\r\n                        <Dropdown.Item\r\n                            onClick={() => {\r\n                                const csvData = prefixViewNumbers\r\n                                    ? makeRangeFromPrefixesToCsv(csvContent)\r\n                                    : csvContent;\r\n\r\n                                const csvDataList = csvData && csvData.length\r\n                                    ? csvData.split('\\n')\r\n                                    : [];\r\n\r\n                                if (!allocatedNumbersCount) {\r\n                                    Alert.warning( formatMessage(m.unableToCopyEmptyTable) )\r\n                                } else {\r\n                                    copyToClipboard( getCsvDataWithHeaders(csvDataList).join(EOL) );\r\n                                    Alert.success( formatMessage(m.copied) )\r\n                                }\r\n                            }}\r\n                        >\r\n                            {formatMessage(m.copyListAllocatedByPrefix)}\r\n                        </Dropdown.Item>\r\n                        }\r\n\r\n                        <Dropdown.Item\r\n                            onClick={() => {\r\n                                const csvData = prefixViewNumbers ? makeNumbersFromPrefixesToCsv(csvContent) : csvContent;\r\n                                const csvDataList = csvData && csvData.length ? csvData.split('\\n') : [];\r\n                                if (!allocatedNumbersCount) {\r\n                                    Alert.warning( formatMessage(m.unableToCopyEmptyTable) )\r\n                                } else {\r\n                                    copyToClipboard( getCsvDataWithHeaders(csvDataList).join(EOL) );\r\n                                    Alert.success( formatMessage(m.copied) )\r\n                                }\r\n                            }}\r\n                        >\r\n                            {formatMessage(m.copyList)}\r\n                        </Dropdown.Item>\r\n                    </StyledDropdown>\r\n                </StyledButtonToolbar>\r\n\r\n                <StyledButtonToolbar>\r\n                    <StyledDropdown\r\n                        title={<>{uploadLoadSetting && <StyledLoader/>} {formatMessage(m.downloadList)}</>}\r\n                        disabled={uploadLoadSetting}\r\n                        onSelect={() => setUploadingLoading(trunkId, true)}\r\n                    >\r\n                        <Dropdown.Item\r\n                            onClick={() => onDownloadCompleteNumbersCSV(trunkId, setUploadingLoading)}>\r\n                            {resizedWidth > 400\r\n                                ? <span>{formatMessage(m.downloadCompleteList)}</span>\r\n                                : <span>{formatMessage(m.downloadAllNumbers)}</span>\r\n                            }\r\n                        </Dropdown.Item>\r\n\r\n\r\n                        {trunkAllocatedByOTP && <Dropdown.Item\r\n                            onClick={() => onDownloadCompletePrefixesCSV(trunkId, setUploadingLoading)}\r\n                        >\r\n                            {formatMessage(m.downloadCompletePrefixesListAs, {type: 'CSV'})}\r\n                        </Dropdown.Item>}\r\n\r\n                        <Dropdown.Item\r\n                            disabled={!allocatedNumbersCount}\r\n                            onClick={() => {\r\n                                const csvData = csvContent ? makeNumbersFromPrefixesToCsv(csvContent).split('\\n') : [];\r\n                                const csvBody = getCsvBodyWithHeaders(csvData);\r\n                                downloadNumbers(csvBody, trunkId, setUploadingLoading)\r\n                            }}\r\n                        >\r\n                            {formatMessage(m.downloadNewAllocatedNumbers)}\r\n                        </Dropdown.Item>\r\n\r\n                        {prefixViewNumbers && <Dropdown.Item\r\n                            disabled={!allocatedNumbersCount}\r\n                            onClick={() => {\r\n                                const csvDataPrefixes = csvContent ? makeRangeFromPrefixesToCsv(csvContent).split('\\n') : [];\r\n                                const csvBody = getCsvBodyWithHeaders(csvDataPrefixes);\r\n                                downloadNumbers(csvBody, trunkId, setUploadingLoading)\r\n                            }}\r\n                        >\r\n                            {formatMessage(m.downloadNewAllocatedNumbersAsRanges)}\r\n                        </Dropdown.Item>}\r\n\r\n                        <Dropdown.Item\r\n                            disabled={!allocatedNumbersCount}\r\n                            onClick={() => {\r\n                                const csvDataPrefixes = csvContent ? makeNumbersFromPrefixesToCsv(csvContent).split('\\n') : [];\r\n                                downloadNumbersTxt(csvOnlyNumbers(csvDataPrefixes), trunkId, setUploadingLoading)\r\n                            }}\r\n                        >\r\n                            {formatMessage(m.downloadOnlyNumbers)}\r\n                        </Dropdown.Item>\r\n\r\n                    </StyledDropdown>\r\n                </StyledButtonToolbar>\r\n\r\n                <StyledButton\r\n                    onClick={() => onClose(false)}\r\n                >\r\n                    <Icon icon='window-close-o'/> {formatMessage(m.close)}\r\n                </StyledButton>\r\n\r\n            </StyledGrid>\r\n\r\n            <FlexboxGrid justify='space-around'>\r\n\r\n                <StyledTable\r\n                    prefixViewNumbers={prefixViewNumbers}\r\n                    className=\"access-table\"\r\n                    virtualized={true}\r\n                    height={250}\r\n                    width={resizedWidth > maxWidth ? maxWidth - 100 : resizedWidth - 100}\r\n                    data={comparedData}\r\n                    rowHeight={35}\r\n                    wordWrap={resizedWidth > maxWidth}\r\n                    loading={loading || !isEnetered}\r\n                >\r\n                    {renderedColumns}\r\n                </StyledTable>\r\n\r\n            </FlexboxGrid>\r\n\r\n            {numberListNotAllocated.length !== 0 &&\r\n            <>\r\n                <Spacer size={30}/>\r\n                <Panel\r\n                    bordered\r\n                    collapsible\r\n                    header={formatMessage(m.numbersWereNotAllocated, {\r\n                        count: numberListNotAllocated.length\r\n                    })}\r\n                >\r\n                    <StyledList>\r\n                        {numberListNotAllocated.map( (item, index) => (\r\n                            <List.Item\r\n                                key={index}\r\n                                index={index}\r\n                            >\r\n                                {statusLabels[item.status]\r\n                                    ? `${item.number} ${statusLabels[item.status]}`\r\n                                    : formatMessage(m.cannotBeAllocated, {number: item.number})\r\n                                }\r\n                            </List.Item>\r\n                        ))}\r\n                    </StyledList>\r\n                </Panel>\r\n            </>\r\n            }\r\n\r\n        </CustomModalClient>\r\n    );\r\n};\r\n\r\n\r\nconst StyledGrid = styled(FlexboxGrid)`\r\n    padding: 0 20px 20px 20px;\r\n    width: 100%;\r\n`;\r\n\r\n\r\nconst StyledDropdown = styled(Dropdown).attrs(props => ({\r\n    appearance: \"ghost\",\r\n    color: \"violet\"\r\n}))`\r\n    width: 100%;\r\n    \r\n    & > a {\r\n        width: 100%;\r\n    }\r\n    \r\n    .rs-btn {\r\n        padding-right: 20px !important;\r\n    }\r\n    \r\n    ul.rs-dropdown-menu {\r\n        background-color: white;\r\n    }\r\n    \r\n    ul.rs-dropdown-menu li.rs-dropdown-item:hover, \r\n    ul.rs-dropdown-menu li.rs-dropdown-item:focus, \r\n    ul.rs-dropdown-menu li.rs-dropdown-item:active,\r\n    ul.rs-dropdown-menu li.rs-dropdown-item a.rs-dropdown-item-content:hover, \r\n    ul.rs-dropdown-menu li.rs-dropdown-item a.rs-dropdown-item-content:focus, \r\n    ul.rs-dropdown-menu li.rs-dropdown-item a.rs-dropdown-item-content:active {\r\n        background-color: #c5c5c5;\r\n    }\r\n`;\r\n\r\n\r\nconst StyledButtonToolbar = styled(ButtonToolbar)`\r\n    width: 30%;\r\n    display: inline-block; \r\n    ${props =>\r\n    props.width && css`\r\n            width: ${props.width};\r\n    `};\r\n\r\n    @media (max-width: 600px) {\r\n        width: 100%;\r\n        margin-bottom: 20px;\r\n    }\r\n`;\r\n\r\n\r\nconst StyledTable = styled(BaseTable)`\r\n    && {\r\n        box-shadow: none;\r\n    }\r\n\r\n    .rs-table-cell.range-name .rs-table-cell-content {\r\n        word-break: break-word;\r\n        overflow: visible;\r\n        font-size: 12px;\r\n        //margin-top: -5px;\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n    \r\n    .rs-table-cell.number .rs-table-cell-content {\r\n        ${props => !!props.prefixViewNumbers && css`\r\n            word-break: break-word;\r\n            overflow: visible;\r\n            font-size: 12px;\r\n            //margin-top: -5px;\r\n            display: flex;\r\n            align-items: center;\r\n        `\r\n}\r\n`;\r\n\r\n\r\nconst StyledButton = styled(Button).attrs(() => ({\r\n    appearance: \"ghost\",\r\n    color: \"violet\"\r\n}))`\r\n\r\n    && {\r\n        width: 30%\r\n    };\r\n    \r\n    @media (max-width: 600px) {\r\n        width: 100% !important;\r\n    }\r\n`;\r\n\r\n\r\nconst StyledList = styled(List).attrs(props => ({\r\n    size: 'sm',\r\n    hover: true\r\n}))`\r\n    width: 100%;\r\n`;\r\n\r\n\r\nconst StyledLoader = styled(Loader)`\r\n    & span.rs-loader-spin {\r\n        margin-top: 3px;\r\n        margin-right: 5px;\r\n    }\r\n`;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CustomField from '../Form/CustomField/CustomField';\r\nimport { SelectPicker } from 'rsuite';\r\nimport {useIntl} from \"react-intl\";\r\nimport m from \"../../../definedMessages\";\r\nimport {BaseSelectPicker} from \"../../base/BaseForm\";\r\n\r\nexport const SDE_Component = ({\r\n    subdestination_list,\r\n    ...props\r\n}) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n\r\n    return (\r\n        <CustomField\r\n            accepter={Select}\r\n            data={subdestination_list}\r\n            labelKey=\"name\"\r\n            valueKey=\"sde_key\"\r\n            placeholder={formatMessage(m.subdestination)}\r\n            name=\"sde_key\"\r\n            // classPrefix=\"allocated\"\r\n            {...props}\r\n        />\r\n    )\r\n};\r\n\r\nconst mapState = ( {references} )=> ({\r\n    subdestination_list: references.subdestination_list\r\n});\r\n\r\nexport const SDE = connect( mapState, {})(SDE_Component); \r\nexport default SDE;\r\n\r\n\r\nconst Select = ({onChange = (v) => v , ...props}) => {\r\n    return (\r\n        <BaseSelectPicker\r\n            onChange={(value) => onChange(value === null ? undefined : value)}\r\n            {...props}\r\n        />\r\n    )\r\n};","import styled, { css } from 'styled-components';\r\nimport {FormControl} from 'rsuite';\r\nimport CustomField from \"../../../components/client/Form/CustomField/CustomField\";\r\nimport Modal from '../../../components/Modal/Modal';\r\nimport {CustomModalClient} from \"../../../components/base\";\r\n\r\n\r\nexport const FormModal = styled(CustomModalClient)`\r\n    .rs-modal-content {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .rs-modal-footer {\r\n        margin-top: auto;\r\n        padding-bottom: 20px;\r\n        padding-top: 20px;\r\n    }\r\n`;\r\n\r\nexport const FormColumns = styled.div`\r\n    align-items: stretch;\r\n    display: flex;\r\n`;\r\n\r\nexport const FormColumn = styled.div`\r\n    flex: 0 0 auto;\r\n    position: relative;\r\n    width: 100%;\r\n\r\n    ${props => \r\n        props.flexGrow && css`\r\n            flex-grow: ${props.flexGrow};\r\n        `\r\n    }\r\n\r\n    @media (min-width: 768px) {\r\n        padding: 0 15px;\r\n        ${props => \r\n            props.width && css`\r\n                width: ${props.width};\r\n            `\r\n        }\r\n        \r\n        .rs-form-control-wrapper {\r\n            width: auto;\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport const Field = styled(FormControl)`\r\n\r\n    &&& {\r\n        min-width: 0;\r\n        width: 100%;\r\n\r\n        ${props => \r\n            props.componentClass === 'textarea' &&\r\n            css`\r\n                min-height: 200px;\r\n                background: #fff;\r\n                overflow-x: scroll;\r\n            `\r\n        }\r\n    }\r\n\r\n    ${props =>\r\n        props.disabled &&\r\n        css`\r\n            opacity: var(--value-disabled-opacity)\r\n        `\r\n    }\r\n`;\r\n\r\n\r\nexport const Fieldset = styled.fieldset`\r\n    border: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n\r\n    @media (min-width: 768px) {\r\n        width: auto;\r\n    }\r\n    \r\n    .rs-form-control-wrapper {\r\n        color: #888888;\r\n        opacity: 0.6;\r\n\r\n        input,\r\n        a {\r\n            cursor: not-allowed !important;\r\n        }\r\n    }\r\n    \r\n`;\r\n\r\nexport const NumbersField = styled(CustomField).attrs(() => ({\r\n    className: 'test6678'\r\n}))`\r\n    &&&& {\r\n        width: 100%;\r\n\r\n        @media (min-width: 768px) {\r\n            width: 100px;\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {Whisper, Tooltip} from 'rsuite';\r\nimport m from \"../../../definedMessages\";\r\n\r\nexport default ({onClick, ...props}) => {\r\n\r\n    // const computedStyle = getComputedStyle(document.documentElement);\r\n\r\n    return (\r\n        <Whisper\r\n            placement=\"top\"\r\n            trigger=\"hover\"\r\n            speaker={\r\n                <Tooltip>\r\n                    <FormattedMessage \r\n                        {...m.clickToEnable}\r\n                        values={{\r\n                            colored: str => {\r\n                                return (\r\n                                    <span \r\n                                        key=\"colored\" \r\n                                        style={{color: '#4ccc37'}}\r\n                                    >\r\n                                        {str}\r\n                                    </span>\r\n                                )\r\n                            }\r\n                        }}\r\n                    />\r\n                </Tooltip>\r\n            }\r\n        >\r\n\r\n            {props.children || <Content onClick={onClick} />}\r\n        </Whisper>\r\n    )\r\n}\r\n\r\nconst Content = styled.div`\r\n    cursor: not-allowed;\r\n    height: 100%;\r\n    margin-left: 0;\r\n    margin-top: 0;\r\n    position: absolute;\r\n    width: 100%;\r\n    z-index: 10000;\r\n    left: 0;\r\n    top: 0;\r\n`;","import React, {useEffect, useState} from 'react';\r\nimport {useWindowWidth} from '../../../hooks';\r\nimport {Form, FormControl, Input, InputNumber, Schema} from 'rsuite';\r\nimport SDE from '../../../components/client/SDE';\r\nimport {useIntl} from 'react-intl';\r\nimport {Spacer} from '../../../components/base/Spacer';\r\nimport CustomField from '../../../components/client/Form/CustomField/CustomField';\r\nimport {ALLOCATION_GOOGLE_OTP_DIALER_API} from '../../../const/apiMethods';\r\nimport TrunksList from '../../../components/TrunksList/TrunksList';\r\nimport * as S from './styled';\r\nimport FormWhisper from '../NumbersAllocateModal/FormWhisper';\r\nimport m from \"../../../definedMessages\";\r\nimport {BaseInputField, BaseInputNumberField} from \"../../../components/base/BaseForm\";\r\n\r\nconst {StringType, NumberType} = Schema.Types;\r\n\r\nconst MIN_CHARACTERS = 7;\r\nconst MAX_CHARACTERS = 15;\r\n\r\n\r\nconst MIN_NUMBER = 100;\r\n\r\n\r\nexport default ({\r\n    show,\r\n    onClose,\r\n    onAllocateGoogleOTP,\r\n    maxWidth = 600,\r\n    formValue,\r\n    onChangeFormValue,\r\n    trunks,\r\n    loading,\r\n    allocationLimit,\r\n    activeField = \"template\",\r\n    rtl,\r\n\r\n    ...props\r\n}) => {\r\n\r\n    const resizedWidth = useWindowWidth();\r\n    const [requestedField, setRequestedField] = useState(activeField);\r\n    const [removedField, setRemovedField] = useState(activeField === 'template' ? 'sde_key' : 'template');\r\n\r\n\r\n    useEffect( () => {\r\n        if (activeField && show) {\r\n            setRequestedField(activeField);\r\n            setRemovedField(activeField === 'template' ? 'sde_key' : 'template');\r\n        }\r\n    }, [show, activeField] );\r\n\r\n\r\n    const MAX_NUMBER = allocationLimit && allocationLimit.google_otp\r\n        ? allocationLimit.google_otp.once\r\n        : allocationLimit && allocationLimit.other && allocationLimit.other.once || 1000;\r\n\r\n\r\n    let formRef;\r\n    const {formatMessage} = useIntl();\r\n    const trunkSelectData = trunks.filter(trunk => trunk.sp_otp_type === 1 && !trunk.closed);\r\n    const errorPlacement = rtl ? 'bottomEnd' : 'bottomStart';\r\n\r\n    const clearForm = () => {\r\n        onChangeFormValue({\r\n            numbers: 100\r\n        });\r\n    };\r\n\r\n    const formModel = Schema.Model({\r\n        template: StringType()\r\n            .pattern(/^[1-9](?:\\d*[xX]*(\\[((\\d)|(\\d-\\d))((,\\d-\\d)?(,\\d)?)*\\])?)*$/, formatMessage(m.pleaseEnterValidNumbers))\r\n            .addRule((value) => {\r\n                let replacedValue = value.replace(/\\[[\\d\\,\\-]+\\]/g, 'X');\r\n                console.log(\"replacedValue2\", replacedValue);\r\n                if (replacedValue.length > MAX_CHARACTERS || replacedValue.length < MIN_CHARACTERS) {\r\n                    return false;\r\n                }\r\n            }, formatMessage(m.templateShouldBeSize, {minNumber: MIN_CHARACTERS, maxNumber: MAX_CHARACTERS}))\r\n            .isRequired(formatMessage(m.thisFieldIsRequired)),\r\n\r\n        sde_key: NumberType()\r\n            .isRequired(formatMessage(m.thisFieldIsRequired)),\r\n        \r\n\r\n        trunk_id: StringType()\r\n            .isRequired(formatMessage(m.thisFieldIsRequired)),\r\n\r\n        numbers: NumberType(formatMessage(m.pleaseEnterValidNumber))\r\n            .min(MIN_NUMBER, formatMessage(m.tooFewNumbers))\r\n            .max(MAX_NUMBER, formatMessage(m.tooMuchNumbers))\r\n            .addRule((value) => {\r\n                if (value % 100) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            }, formatMessage(m.theNumberMustBeAMultipleOf, {value: 100}))\r\n            .isRequired(formatMessage(m.thisFieldIsRequired))\r\n    });\r\n\r\n\r\n    const onSetRequestedField = (activeField) => {\r\n        const removedField = activeField === 'template' ? 'sde_key' : 'template';\r\n        setRequestedField(activeField);\r\n        setRemovedField(removedField);\r\n\r\n        const newFormValue = {...formValue};\r\n        delete newFormValue[removedField];\r\n        formRef.cleanErrorForFiled(removedField);\r\n        onChangeFormValue(newFormValue);\r\n    };\r\n\r\n\r\n    const onSubmit = async () => {\r\n\r\n        // custom fields checking\r\n        const fieldsToCheck = ['numbers', 'trunk_id'];\r\n        const fieldsValidity = [];\r\n        fieldsToCheck.push(requestedField);\r\n        formRef.cleanErrorForFiled(removedField);\r\n        for (const fieldName of fieldsToCheck) {\r\n            fieldsValidity.push( formRef.checkForField(fieldName) );\r\n        }\r\n        \r\n        if (fieldsValidity.includes(false))\r\n            return;\r\n\r\n        const formValue = formRef.getFormValue();\r\n        const data = {...formValue};\r\n\r\n        const response = await onAllocateGoogleOTP(data);\r\n\r\n        if (response === undefined) {\r\n            return;\r\n        }\r\n        \r\n        if (response.status === 0) {\r\n            clearForm();\r\n            return;\r\n        }\r\n\r\n        props.setReasonModalProps({\r\n            reasonCode: response.reason_code,\r\n            method: ALLOCATION_GOOGLE_OTP_DIALER_API,\r\n            trunk: trunks.find(trunk => trunk.id === data.trunk_id),\r\n            template: formValue.template,\r\n            sde_key: formValue.sde_key,\r\n            numbersAmount: formValue.numbers,\r\n            reasonHash: response.reason_hash,\r\n        });\r\n    };\r\n\r\n\r\n    const templateField = (\r\n        <S.Field\r\n            inline={resizedWidth > 767}\r\n            as={CustomField}\r\n            label={formatMessage(m.putTemplatePrefixForDestination)}\r\n            accepter={BaseInputField}\r\n            errorPlacement={errorPlacement}\r\n            name='template'\r\n            placeholder={'12356789XXXXXX'}\r\n        />\r\n    );\r\n\r\n\r\n    const sdeField = (\r\n        <S.Field\r\n            inline={resizedWidth > 767}\r\n            as={SDE}\r\n            label={formatMessage(m.orChooseItFromList)}\r\n            errorPlacement={errorPlacement}\r\n            name=\"sde_key\"\r\n            placeholder={formatMessage(m.subdestination)}\r\n            // placement={resizedWidth > maxWidth ? \"bottomStart\" : \"auto\"}\r\n        />\r\n    );\r\n\r\n    return (\r\n\r\n        <S.FormModal\r\n            show={show}\r\n            title={formatMessage(m.allocateNumbersForGoogleOTP)}\r\n            width={maxWidth}\r\n            showFooter={true}\r\n            confirmButtonText={formatMessage(m.allocate)}\r\n            loading={loading}\r\n            focusTarget=\"close\"\r\n            onConfirm={onSubmit}\r\n            onClose={() => {\r\n                clearForm();\r\n                onClose(false);\r\n            }}\r\n        >\r\n\r\n            <Form\r\n                formValue={formValue}\r\n                ref={ref => formRef = ref}\r\n                model={formModel}\r\n                onChange={formValue => {\r\n                    onChangeFormValue(formValue);\r\n                }}\r\n            >\r\n\r\n                <S.FormColumns>\r\n                    <S.FormColumn width=\"100%\">\r\n                        <FormControl\r\n                            accepter={TrunksList}\r\n                            data={trunkSelectData}\r\n                            name=\"trunk_id\"\r\n                            cleanable={false}\r\n                        />\r\n                    </S.FormColumn>\r\n                </S.FormColumns>\r\n\r\n                <Spacer size={30}/>\r\n\r\n                <S.FormColumns>\r\n                    <S.FormColumn width=\"100%\">\r\n                        {requestedField === 'template'\r\n                            ? templateField\r\n\r\n                            : <FormWhisper>\r\n                                <S.Fieldset\r\n                                    onClick={() => {\r\n                                        onSetRequestedField('template');\r\n                                    }}\r\n                                >\r\n                                    {templateField}\r\n                                </S.Fieldset>\r\n                            </FormWhisper>\r\n                        }\r\n                    </S.FormColumn>\r\n                </S.FormColumns>\r\n\r\n                <Spacer size={30}/>\r\n\r\n                <S.FormColumns>\r\n                    <S.FormColumn width=\"100%\">\r\n                        {requestedField === 'sde_key'\r\n                            ? sdeField\r\n\r\n                            : <FormWhisper>\r\n                                <S.Fieldset\r\n                                    onClick={() => {\r\n                                        onSetRequestedField('sde_key');\r\n                                    }}\r\n                                >\r\n                                    {sdeField}\r\n                                </S.Fieldset>\r\n                            </FormWhisper>\r\n                        }\r\n                    </S.FormColumn>\r\n                </S.FormColumns>\r\n\r\n                <Spacer size={30}/>\r\n\r\n                <S.FormColumns>\r\n                    <S.FormColumn className=\"formColumn\">\r\n                        <S.NumbersField \r\n                            label={formatMessage(m.numbers)}\r\n                            inline={resizedWidth > 767}\r\n                            step={100}\r\n                            accepter={BaseInputNumberField}\r\n                            name='numbers'\r\n                            errorPlacement={errorPlacement}\r\n                        />\r\n                    </S.FormColumn>\r\n                </S.FormColumns>\r\n\r\n            </Form>\r\n\r\n        </S.FormModal>\r\n    );\r\n\r\n};","import React from \"react\";\r\nimport {ButtonToolbar, FlexboxGrid} from \"rsuite\";\r\nimport {\r\n    ALLOCATION_TEMPLATE_DIALER_API,\r\n    ALLOCATION_SUBDESTINATION_DIALER_API,\r\n    ALLOCATION_PRICE_RANGE_DIALER_API\r\n} from \"../../../const/apiMethods\";\r\nimport {defineMessages, FormattedMessage, injectIntl, useIntl} from \"react-intl\";\r\nimport {useWindowWidth} from \"../../../hooks\";\r\nimport {BaseButton} from \"../../base/BaseButton\";\r\nimport styled from \"styled-components\";\r\nimport {CustomModalClient} from \"../../base\";\r\nimport m from \"definedMessages\";\r\n\r\n\r\n// Codes\r\nconst reasonCodes = {\r\n    not_found_rate: \"not_found_rate\",\r\n    not_found_free_numbers: \"not_found_free_numbers\",\r\n    account_trunk_range_mismatch: \"account_trunk_range_mismatch\",\r\n    self_allocation_limit_exceeded_once: \"self_allocation_limit_exceeded_once\",\r\n    self_allocation_limit_exceeded: \"self_allocation_limit_exceeded\",\r\n    self_allocation_for_sde_limit_exceeded: \"self_allocation_for_sde_limit_exceeded\",\r\n    not_defined_range: \"not_defined_range\",\r\n\r\n    prefix_in_quarantine: \"prefix_in_quarantine\",\r\n    non_google_otp_allocation: \"non_google_otp_allocation\",\r\n    max_numbers_per_range_value_exceeded: \"max_numbers_per_range_value_exceeded\",\r\n    allocation_to_test_trunk: \"allocation_to_test_trunk\",\r\n    non_google_otp_trunk: \"non_google_otp_trunk\",\r\n    non_multiple_100_number: \"non_multiple_100_number\",\r\n    not_allowed_self_google_otp_allocation: \"not_allowed_self_google_otp_allocation\",\r\n    non_power_of_10_number: \"non_power_of_10_number\",\r\n    non_power_of_10_number_start_1000: \"non_power_of_10_number_start_1000\",\r\n    illegal_template_length: \"illegal_template_length\",\r\n    illegal_template: \"illegal_template\",\r\n    too_much_operations: \"too_much_operations\",\r\n};\r\n\r\n\r\nexport default (\r\n    {\r\n        show,\r\n        onClose,\r\n        onSuccess,\r\n        changeRandom = () => {},\r\n        maxWidth = 600,\r\n        params = {},\r\n    }\r\n) => {\r\n\r\n    const {\r\n        trunk = {},\r\n        range = \"\",\r\n        subDest = \"\",\r\n        template,\r\n        reasonCode,\r\n        isRandom,\r\n        method,\r\n        numbersAmount,\r\n        reasonHash\r\n    } = params;\r\n\r\n    const {formatMessage} = useIntl();\r\n    const windowWidth = useWindowWidth();\r\n\r\n\r\n    const handleSuccess = () => {\r\n        onClose(false);\r\n        if (reasonCode === reasonCodes.not_found_free_numbers && !isRandom) {\r\n            changeRandom(true);\r\n        }\r\n        onSuccess(true);\r\n    };\r\n\r\n    \r\n    const getMessage = () => {\r\n\r\n        switch (reasonCode) {\r\n\r\n            case reasonCodes.non_google_otp_trunk:\r\n                return \"Trunk is not Gooogle OTP\";\r\n\r\n            case reasonCodes.non_google_otp_allocation:\r\n                return \"Incorrect allocation method\";\r\n\r\n            case reasonCodes.non_power_of_10_number:\r\n                return \"Incorrect number amount\";\r\n\r\n            case reasonCodes.non_power_of_10_number_start_1000:\r\n                return \"Incorrect number amount\";\r\n\r\n            case reasonCodes.too_much_operations:\r\n                return formatMessage(m.tooMuchSimultaneousOperations);\r\n            \r\n            case reasonCodes.prefix_in_quarantine:\r\n                return formatMessage(m.numbersAreTemporarilyUnavailable);\r\n\r\n            case reasonCodes.max_numbers_per_range_value_exceeded:\r\n                return formatMessage(m.tooMuchNumbersPerRange);\r\n\r\n            case reasonCodes.allocation_to_test_trunk:\r\n                return formatMessage(m.invalidOperation);\r\n                \r\n            case reasonCodes.non_multiple_100_number:\r\n                return formatMessage(m.incorrectNumberAmount);\r\n\r\n            case reasonCodes.illegal_template:\r\n            case reasonCodes.illegal_template_length:\r\n                return formatMessage(m.wrongTemplate);\r\n\r\n            case reasonCodes.not_allowed_self_google_otp_allocation:\r\n                return formatMessage(m.actionIsProhibited);\r\n\r\n            case reasonCodes.self_allocation_limit_exceeded_once:\r\n                return formatMessage(m.tooMuchNumbersPerOne);\r\n\r\n            case reasonCodes.self_allocation_limit_exceeded:\r\n                return formatMessage(m.youHaveExceededTheLimit);\r\n\r\n            case reasonCodes.self_allocation_for_sde_limit_exceeded:\r\n                return formatMessage(m.tooMuchNumbersPerSubdestination);\r\n\r\n            // ALLOCATION_TEMPLATE_DIALER_API, ALLOCATION_SUBDESTINATION_DIALER_API\r\n            case reasonCodes.not_found_rate:\r\n                return formatMessage(m.destinationIsNotAvailable);\r\n\r\n            // ALLOCATION_TEMPLATE_DIALER_API, ALLOCATION_PRICE_RANGE_DIALER_API\r\n            case reasonCodes.account_trunk_range_mismatch:\r\n                if (method === ALLOCATION_TEMPLATE_DIALER_API)\r\n                    return formatMessage(m.accountTrunkRangeMismatchTemplate, {\r\n                        template: template,\r\n                        trunkName: trunk.name\r\n                    });\r\n                if (method === ALLOCATION_PRICE_RANGE_DIALER_API)\r\n                    return formatMessage(m.accountTrunkRangeMismatchRange, {\r\n                        range: range,\r\n                        trunkName: trunk.name\r\n                    });\r\n                return formatMessage(m.numbersCannotBeAllocatedToTrunk, {trunkName: trunk.name});\r\n\r\n            // ALLOCATION_TEMPLATE_DIALER_API, ALLOCATION_PRICE_RANGE_DIALER_API\r\n            case reasonCodes.not_found_free_numbers:\r\n                if (method === ALLOCATION_TEMPLATE_DIALER_API)\r\n                    return !isRandom\r\n                        ? formatMessage(m.notFoundFreeNumbersTemplate, {\r\n                            numbersAmount: numbersAmount,\r\n                            template: template\r\n                        })\r\n                        : formatMessage(m.numbersFromTemplateCannotBeAllocated, {\r\n                            template: template\r\n                        });\r\n                if (method === ALLOCATION_PRICE_RANGE_DIALER_API)\r\n                    return !isRandom\r\n                        ? formatMessage(m.notFoundFreeNumbersRange, {\r\n                            numbersAmount: numbersAmount,\r\n                            range: range\r\n                        })\r\n                        : formatMessage(m.numbersFromRangeCannotBeAllocated, {range: range})\r\n                if (method === ALLOCATION_SUBDESTINATION_DIALER_API)\r\n                    return !isRandom\r\n                        ? formatMessage(m.notFoundFreeNumbersDestination, {\r\n                            numbersAmount: numbersAmount,\r\n                            subDest: subDest\r\n                        })\r\n                        : formatMessage(m.numbersForSubdestCannotBeAllocated, {\r\n                            subDest: subDest\r\n                        });\r\n                return formatMessage(m.numbersCannotBeAllocated);\r\n\r\n            // ALLOCATION_TEMPLATE_DIALER_API, ALLOCATION_PRICE_RANGE_DIALER_API, ALLOCATION_SUBDESTINATION_DIALER_API\r\n            default:\r\n                if (template)\r\n                    return formatMessage(m.numbersFromTemplateCannotBeAllocated, {template: template});\r\n        }\r\n\r\n        return formatMessage(m.numbersCannotBeAllocated)\r\n    };\r\n\r\n    return (\r\n        <CustomModalClient\r\n            {...{show, onClose}}\r\n            onClose={handleSuccess}\r\n            onSuccess={handleSuccess}\r\n            showCloseSuccessButtons={false}\r\n            width={windowWidth > maxWidth ? maxWidth : windowWidth}\r\n        >\r\n\r\n            <FlexboxGrid justify=\"end\">\r\n                <FlexboxGrid.Item colspan={23}>\r\n                    <span>{getMessage()}{reasonHash ? ` (${formatMessage(m.operationCode)}: ${reasonHash})` : \"\"}</span>\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n\r\n            <ModalButtonToolbar>\r\n                <BaseButton\r\n                    buttonStyle=\"default\"\r\n                    onClick={handleSuccess}\r\n                    autoFocus\r\n                >\r\n                    <FormattedMessage id=\"common.close\" defaultMessage=\"Close\" />\r\n                </BaseButton>\r\n            </ModalButtonToolbar>\r\n\r\n        </CustomModalClient>\r\n    )\r\n};\r\n\r\nconst ModalButtonToolbar = styled(ButtonToolbar)`\r\n    float: right;\r\n    margin-right: 20px;\r\n    margin-top: 40px;\r\n    right: 0;\r\n`;","import React from 'react';\r\nimport PageHeader from '../../components/base/PageHeader';\r\nimport PriceFilters from './PriceFilters';\r\nimport PriceTable from './PriceTable';\r\nimport {\r\n    LOCAL_STORAGE_PRICE_FILTERS_DIALER,\r\n    LOCAL_STORAGE_PRICE_PER_PAGE_DIALER,\r\n    MAX_PER_PAGE_DIALER,\r\n    MIN_PER_PAGE_DIALER,\r\n    SP_OTP_TYPE\r\n} from '../../const';\r\nimport {\r\n    RATECARD_LIST_ACCOUNT_DIALER,\r\n    RATECARD_LIST_OTP_DEFAULT_DIALER,\r\n    RATECARD_LIST_OTP_ACCOUNT_DIALER,\r\n    RATECARD_LIST_DEFAULT_DIALER\r\n} from '../../const/apiMethods';\r\nimport {savePdfByTemplate, getBlobContent} from '../../utils/helpers';\r\nimport {injectIntl} from \"react-intl\";\r\nimport {FlexGrid, FlexGridItem} from '../../components/base/FlexGrid';\r\nimport {Spacer} from '../../components/base/Spacer';\r\nimport styled, {css} from \"styled-components\";\r\nimport {getFileResponse} from '../../api/loginRoutes';\r\nimport {ButtonToolbar, Dropdown, Loader, Icon} from 'rsuite';\r\nimport {SCREEN_MEDIA} from '../../const';\r\nimport m from \"../../definedMessages\";\r\nimport PriceGetNumbersModal from './PriceGetNumbersModal';\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\n\r\nimport ModalAllocationResult from '../../components/client/Modal/ModalAllocationResult';\r\nimport GoogleOTPAllocateModal from '../Numbers/GoogleOTPAllocateModal/GoogleOTPAllocateModal';\r\nimport ModalResponseHandler from \"../../components/client/Modal/ModalResponseHandler\";\r\n\r\nconst {md} = SCREEN_MEDIA;\r\nconst widthDesktopMin = md.min;\r\n\r\n\r\nclass Price extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.currentPerPage = null;\r\n        this.defaultFilter = {str: '', sp_key: 1};\r\n        this.savedTableFilter = JSON.parse( localStorage.getItem(LOCAL_STORAGE_PRICE_FILTERS_DIALER) );\r\n        this.formatMessage = this.props.intl.formatMessage.bind(this.props.intl);\r\n        console.log(\"props.account\", props);\r\n        const {account} = props.account.session || {};\r\n        const currencyKey = ( (this.savedTableFilter && this.savedTableFilter.cur_key) || {} ).cur_key || account.cur_key;\r\n        const isTest = account.hasOwnProperty('is_test') ? account.is_test : false;\r\n\r\n        const filter = {\r\n            ...this.defaultFilter,\r\n            ...(this.savedTableFilter || {}),\r\n            ...(isTest ? {cur_key: currencyKey} : {}),\r\n        };\r\n\r\n        if (!isTest && filter.cur_key) {\r\n            delete filter.cur_key;\r\n        }\r\n\r\n        if ( props.service_plan_list\r\n            && props.service_plan_list.length\r\n            && !props.service_plan_list.find(item => item.sp_key === filter.sp_key)\r\n        ) {\r\n            filter.sp_key = props.service_plan_list[0].sp_key;\r\n        }\r\n\r\n        this.state = {\r\n            currencyKey: currencyKey,\r\n            isTest: isTest,\r\n            filter: {...filter},\r\n            selectedData: {id: null, range_name: null, av_numbers: null, pr_key: null, sp_key: null},\r\n            accountInfo: account,\r\n            spAuth: false,\r\n            isGoogleOtp: false,\r\n\r\n            savedPerPage: JSON.parse(localStorage.getItem(LOCAL_STORAGE_PRICE_PER_PAGE_DIALER)),\r\n            searchLoading: false,\r\n            showGetNumbersModal: false,\r\n            showAllocatedNumbersModal: false,\r\n            resizedWidth: window.innerWidth,\r\n            trunkId: null,\r\n            formValue: {trunk_id: null, numbers: 1},\r\n            showModalResponseHandler: null,\r\n            randomNumber: false,\r\n            reasonModalProps: {},\r\n\r\n            csvContent: null,\r\n            csvContentLoading: true,\r\n\r\n            transactionId: null,\r\n            notAllocatedNumbers: null,\r\n            allocatedNumbersCount: 0,\r\n\r\n            showGoogleOTPModal: false,\r\n            googleOTPFormValue: {numbers: 100},\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        const {filter, savedPerPage} = this.state;\r\n        const {getTrunkList, service_plan_list, getPriceList, per_page} = this.props;\r\n        \r\n        getTrunkList();\r\n\r\n        if (service_plan_list.length && filter.sp_key) {\r\n            const currentServicePlan = service_plan_list.find( item => item.sp_key === filter.sp_key );\r\n            this.setState({\r\n                spAuth: currentServicePlan.auth,\r\n                isGoogleOtp: currentServicePlan.otp_type === SP_OTP_TYPE\r\n            });\r\n            getPriceList(savedPerPage || per_page, filter, 1, currentServicePlan.auth);\r\n        }\r\n\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const {filter, savedPerPage} = this.state;\r\n        const {service_plan_list, getPriceList, per_page} = this.props;\r\n\r\n        if (service_plan_list.length && filter.sp_key) {\r\n            if ( prevState.filter !== filter || prevProps.service_plan_list !== service_plan_list) {\r\n                const currentServicePlan = service_plan_list.find(item => item.sp_key === +filter.sp_key);\r\n                if (currentServicePlan) {\r\n                    this.setState({\r\n                        spAuth: currentServicePlan.auth,\r\n                        isGoogleOtp: currentServicePlan.otp_type === SP_OTP_TYPE\r\n                    });\r\n                    getPriceList(savedPerPage || this.currentPerPage || per_page, filter, 1, currentServicePlan.auth);\r\n                } else {\r\n                    this.setState({\r\n                        filter: {...filter, sp_key: service_plan_list[0].sp_key}\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize);\r\n    }\r\n\r\n\r\n    handleResize = () => {\r\n        this.setState({resizedWidth: window.innerWidth});\r\n    };\r\n\r\n\r\n    setShowGetNumbersModal = (value) => {\r\n        this.setState({showGetNumbersModal: value});\r\n    };\r\n\r\n\r\n    onShowGetNumbersModal = (data) => {\r\n        this.setShowGetNumbersModal(true);\r\n        this.setState({selectedData: data});\r\n    };\r\n\r\n\r\n    setShowAllocatedNumbersModal = (value) => {\r\n        this.setState({showAllocatedNumbersModal: value});\r\n    };\r\n\r\n\r\n    filterIsNotNull = (filter, filter_param) => {\r\n        return filter.hasOwnProperty(filter_param) && filter[filter_param];\r\n    };\r\n\r\n\r\n    onChangeFilters = (filtersObj) => {\r\n        const {filter} = this.state;\r\n        const newFilter = {...filter, ...filtersObj}\r\n        this.setState({filter: newFilter});\r\n        localStorage.setItem(LOCAL_STORAGE_PRICE_FILTERS_DIALER, JSON.stringify(newFilter));\r\n    };\r\n\r\n\r\n    onChangePerPage = (perPage) => {\r\n        const {filter} = this.state;\r\n        const {getPriceList, service_plan_list} = this.props;\r\n\r\n        this.setState({savedPerPage: perPage ? null : this.currentPerPage});\r\n        const per_page = Number(perPage) || this.currentPerPage;\r\n        this.currentPerPage = per_page <= 0 \r\n            ? MIN_PER_PAGE_DIALER\r\n            : per_page > MAX_PER_PAGE_DIALER ? MAX_PER_PAGE_DIALER : per_page;\r\n        localStorage.setItem(LOCAL_STORAGE_PRICE_PER_PAGE_DIALER, JSON.stringify(this.currentPerPage));\r\n\r\n        const currentServicePlan = service_plan_list.find(item => item.sp_key === +filter.sp_key);\r\n\r\n        getPriceList(this.currentPerPage, filter, 1, currentServicePlan.auth);\r\n    };\r\n\r\n\r\n    onChangePage = (pageNumber) => {\r\n        const {savedPerPage, filter} = this.state;\r\n        const {getPriceList, per_page, service_plan_list} = this.props;\r\n\r\n        const currentServicePlan = service_plan_list.find(item => item.sp_key === +filter.sp_key);\r\n        getPriceList(savedPerPage || this.currentPerPage || per_page, filter, pageNumber, currentServicePlan.auth);\r\n    };\r\n\r\n\r\n    exportPrice = () => {\r\n        const {filter} = this.state;\r\n        const {service_plan_list} = this.props;\r\n\r\n        const currentServicePlan = service_plan_list.find(item => item.sp_key === +filter.sp_key);\r\n        this.props.exportPrice({...filter}, currentServicePlan.auth);\r\n    };\r\n\r\n\r\n    exportPricePdf = () => {\r\n        const {isTest, filter} = this.state;\r\n        const {account, setUploadingPriceLoading, service_plan_list, getTemplate} = this.props;\r\n\r\n        const currentServicePlan = service_plan_list.find( item => item.sp_key == filter.sp_key );\r\n\r\n        const requestMethod = currentServicePlan.auth \r\n            ? !isTest ? RATECARD_LIST_OTP_ACCOUNT_DIALER: RATECARD_LIST_OTP_DEFAULT_DIALER\r\n            : !isTest ? RATECARD_LIST_ACCOUNT_DIALER : RATECARD_LIST_DEFAULT_DIALER;\r\n        \r\n        setUploadingPriceLoading(true);\r\n        getTemplate(account.id, 0, 'allocated_numbers').then(({template = {}}) => {\r\n            getFileResponse(requestMethod, {filter: filter}, true)\r\n                .then((response) => {\r\n                    const csvText = getBlobContent(response);\r\n                    csvText.then((csvContent) => {\r\n                        const csvStringsArray = csvContent ? csvContent.split('\\n') : [];\r\n                        const csvDataArrayData = csvStringsArray.filter(value => !!value);\r\n                        const csvHeaders = csvDataArrayData.length && csvDataArrayData[0].split(';');\r\n                        const csvBody = csvDataArrayData.length && csvDataArrayData.slice(1, csvDataArrayData.length).map(line => line.split(';'));\r\n\r\n                        savePdfByTemplate(\r\n                            csvBody,\r\n                            [csvHeaders],\r\n                            'prices',\r\n                            template,\r\n                            {},\r\n                            account\r\n                        );\r\n                        setUploadingPriceLoading(false);\r\n                    });\r\n                }).catch(() => {\r\n                setUploadingPriceLoading(false)\r\n            });\r\n        })\r\n    };\r\n\r\n    getNumbers = async (data) => {\r\n        const {selectedData, spAuth} = this.state;\r\n        const {allocateByPriceRange, allocateByAccess} = this.props;\r\n\r\n        let response;\r\n        \r\n        if (!spAuth) {\r\n            response = await allocateByPriceRange(data.trunk_id, selectedData.pr_key, data.numbers, data.random_order);\r\n        } else {\r\n            response = await allocateByAccess(data.trunk_id, selectedData.sde_key, data.numbers, data.random_order);\r\n        }\r\n\r\n        if (response === undefined || (response.code && !response.reason_code))\r\n            return;\r\n\r\n        this.setShowGetNumbersModal(false);\r\n\r\n        // reason_code recieved in an error message or with no numbers\r\n        if ( response.reason_code && (!response.trunk_number_transaction || !response.trunk_number_transaction.numbers) ) {\r\n            this.setModalResponseHandler(true);\r\n            return {\r\n                status: 1,\r\n                reason_code: response.reason_code,\r\n                reason_hash: response.hash,\r\n            };\r\n        }\r\n\r\n        this.onAllocationGetResult(response);\r\n\r\n        // update table after succesful numbers allocation (with new total numbers value)\r\n        this.onChangePage(this.props.page || 1);\r\n\r\n        this.setState({\r\n            showAllocatedNumbersModal: true,\r\n            trunkId: data.trunk_id\r\n        });\r\n        return {status: 0};\r\n    };\r\n\r\n\r\n    onAllocateGoogleOTP = async (formValue) => {\r\n        const {allocateGoogleOTPTrunkNumbers} = this.props;\r\n\r\n        const response = await allocateGoogleOTPTrunkNumbers(formValue);\r\n        if (response === undefined || (response.code && !response.reason_code))\r\n            return;\r\n\r\n        this.setState({\r\n            showGoogleOTPModal: false,\r\n            trunkId: formValue.trunk_id\r\n        });\r\n\r\n        // reason_code recieved in an error message or with no numbers\r\n        if (response.reason_code && \r\n            (!response.trunk_number_transaction || !response.trunk_number_transaction.numbers) \r\n        ) {\r\n            this.setModalResponseHandler(true);\r\n            return {\r\n                status: 1,\r\n                reason_code: response.reason_code,\r\n                reason_hash: response.hash,\r\n            };\r\n        }\r\n\r\n        this.onAllocationGetResult(response);\r\n        this.setShowAllocatedNumbersModal(true);\r\n        return {status: 0};\r\n    };\r\n\r\n\r\n    onAllocationGetResult = (response) => {\r\n        const {spAuth} = this.state;\r\n        const {setTrunkNumberTransaction, setLoadingAllocatedNumbersDialer, setAccessLoadingAllocatedNumbers} = this.props;\r\n\r\n        const notAllocatedNumbers = response.not_allocated_numbers;\r\n        notAllocatedNumbers && this.setState({notAllocatedNumbers});\r\n        \r\n        const trunkNumberTransaction = response.trunk_number_transaction;\r\n        setTrunkNumberTransaction(trunkNumberTransaction || {});\r\n\r\n        if (trunkNumberTransaction) {\r\n            const transactionId = trunkNumberTransaction.id;\r\n            const allocatedNumbersCount = trunkNumberTransaction.numbers;\r\n            this.setState({transactionId, allocatedNumbersCount});\r\n\r\n            getFileResponse('trunk_number:get_list', {\r\n                target: {\r\n                    trunk_number_transaction_id: transactionId\r\n                }\r\n            }, true)\r\n                .then((response) => {\r\n                    if (spAuth) {\r\n                        setAccessLoadingAllocatedNumbers(false);\r\n                    } else {\r\n                        setLoadingAllocatedNumbersDialer(false);\r\n                    }\r\n                    const csvText = getBlobContent(response);\r\n                    csvText.then((text) => {\r\n                        this.setState({\r\n                            csvContent: text,\r\n                            csvContentLoading: false,\r\n                        })\r\n                    });\r\n                })\r\n        }\r\n    };\r\n\r\n\r\n    onResponseHandlerSuccess = (value) => {\r\n        const {isGoogleOtp} = this.state;\r\n        if (isGoogleOtp) {\r\n            this.setState({showGoogleOTPModal: true});\r\n            return;\r\n        }\r\n        this.setShowGetNumbersModal(true);\r\n    };\r\n\r\n\r\n    onDownloadNumbers = (trunk_id) => this.props.downloadNumbers(trunk_id);\r\n\r\n    \r\n    downloadNumbers = (csvNumberList, trunkId, setUploadingLoading) => {\r\n        const encodedUri = encodeURI(csvNumberList);\r\n        const link = document.createElement('a');\r\n\r\n        link.setAttribute('href', encodedUri);\r\n        link.setAttribute('download', 'allocated_numbers.csv');\r\n\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        setUploadingLoading(trunkId, false);\r\n    };\r\n\r\n    downloadNumbersTxt = (csvNumberList, trunkId, setUploadingLoading) => {\r\n        const encodedUri = encodeURI(csvNumberList);\r\n        const link = document.createElement('a');\r\n\r\n        link.setAttribute('href', encodedUri);\r\n        link.setAttribute('download', 'allocated_numbers.txt');\r\n\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        setUploadingLoading(trunkId, false);\r\n    };\r\n\r\n    \r\n    setModalResponseHandler = (value) => {\r\n        this.setState({showModalResponseHandler: value});\r\n    };\r\n\r\n    \r\n    setRandomNumber = (value) => {\r\n        this.setState({\r\n            randomNumber: value\r\n        });\r\n    };\r\n\r\n    \r\n    setFormValue = (value) => {\r\n        this.setState({\r\n            formValue: value\r\n        });\r\n    };\r\n\r\n    \r\n    setReasonModalProps = (props) => {\r\n        this.setState({\r\n            reasonModalProps: {...props}\r\n        });\r\n    };\r\n\r\n    \r\n    clearAllocatedData = () => {\r\n        this.setState({\r\n            csvContent: null,\r\n            allocatedNumbersCount: 0\r\n        })\r\n    };\r\n\r\n\r\n    setGoogleOTPFormValue = (value) => {\r\n        this.setState({\r\n            googleOTPFormValue: {...value}\r\n        });\r\n    };\r\n    \r\n    \r\n    setShowGoogleOTPModal = (data) => {\r\n        const {googleOTPFormValue} = this.state;\r\n\r\n        this.setState({showGoogleOTPModal: true});\r\n        if (data)\r\n            this.setState({\r\n                selectedData: data,\r\n                googleOTPFormValue: {\r\n                    ...googleOTPFormValue, \r\n                    template: data.template\r\n                }\r\n            })\r\n    };\r\n    \r\n    \r\n    exportPriceDropdown = () => {\r\n        const {uploadLoading} = this.props;\r\n        return (\r\n            <StyledButtonToolbar>\r\n                <StyledDropdown\r\n                    color=\"violet\"\r\n                    appearance=\"default\"\r\n                    placement={this.state.resizedWidth < widthDesktopMin ? 'topStart' : 'bottomEnd'}\r\n                    title={<>{uploadLoading ? <StyledLoader/> : <><Icon icon=\"upload2\"/>{this.formatMessage(m.download)}</>}</>}\r\n                    disabled={uploadLoading}\r\n                >\r\n                    <Dropdown.Item onClick={() => this.exportPrice()}>{this.formatMessage(m.exportPriceList)}</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => this.exportPricePdf()}>{this.formatMessage(m.exportPriceListAs, {type: \"pdf\"})}</Dropdown.Item>\r\n                </StyledDropdown>\r\n            </StyledButtonToolbar>\r\n        )\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        const {\r\n            searchLoading, showGetNumbersModal, showAllocatedNumbersModal, showModalResponseHandler,savedPerPage,\r\n            trunkId, csvContent, allocatedNumbersCount, notAllocatedNumbers, selectedData, filter, spAuth,\r\n            isGoogleOtp, accountInfo, isTest, googleOTPFormValue, showGoogleOTPModal, reasonModalProps, csvContentLoading\r\n        } = this.state;\r\n\r\n        const {\r\n            priceList, priceLoading, page, count, per_page, service_plan_list, account,\r\n            trunk_number_transaction, setUploadingLoading, trunk_list, loadingGoogleOTPAllocation, accountDialerState\r\n        } = this.props;\r\n\r\n        const {currency_list, loadingAllocation, loadingAccessAllocation, uploadLoadingSetting, allocation_limit} = this.props;\r\n\r\n        const onChangePage = this.onChangePage;\r\n        const onChangePerPage = this.onChangePerPage;\r\n        const onShowGetNumbersModal = this.onShowGetNumbersModal;\r\n        const setShowGetNumbersModal = this.setShowGetNumbersModal;\r\n        const setShowAllocatedNumbersModal = this.setShowAllocatedNumbersModal;\r\n        const getNumbers = this.getNumbers;\r\n        const downloadNumbers = this.downloadNumbers;\r\n        const downloadNumbersTxt = this.downloadNumbersTxt;\r\n        const onDownloadNumbers = this.onDownloadNumbers;\r\n        const setGoogleOTPFormValue = this.setGoogleOTPFormValue;\r\n        const setShowGoogleOTPModal = this.setShowGoogleOTPModal;\r\n        const onAllocateGoogleOTP = this.onAllocateGoogleOTP;\r\n\r\n        return (\r\n            <PanelLayout>\r\n                <PageHeader title={this.formatMessage(m.ratecard)}/>\r\n\r\n                <FlexGrid justify=\"space-between\">\r\n                    <FlexGridItem>\r\n                        <PriceFilters\r\n                            onChangeFilter={this.onChangeFilters}\r\n                            loading={priceLoading || searchLoading}\r\n                            prices={service_plan_list}\r\n                            savedTableFilter={filter}\r\n                            {...{\r\n                                currency_list\r\n                            }}\r\n                        />\r\n                    </FlexGridItem>\r\n                    {this.state.resizedWidth >= widthDesktopMin &&\r\n                        this.exportPriceDropdown()\r\n                    }\r\n                </FlexGrid>\r\n\r\n                <Spacer/>\r\n\r\n                <PriceTable\r\n                    data={priceList}\r\n                    loading={priceLoading || searchLoading}\r\n                    filters={filter}\r\n                    spAuth={spAuth}\r\n                    isGoogleOtp={isGoogleOtp}\r\n                    {...{\r\n                        accountInfo,\r\n                        isTest,\r\n                        onChangePage,\r\n                        onChangePerPage,\r\n                        onShowGetNumbersModal,\r\n                        setShowGoogleOTPModal,\r\n                        page,\r\n                        count,\r\n                        per_page,\r\n                        savedPerPage,\r\n                        accountDialerState\r\n                    }}\r\n                />\r\n\r\n                {this.state.resizedWidth < widthDesktopMin &&\r\n                    this.exportPriceDropdown()\r\n                }\r\n\r\n\r\n                <PriceGetNumbersModal\r\n                    show={showGetNumbersModal}\r\n                    onClose={setShowGetNumbersModal}\r\n                    onSend={getNumbers}\r\n                    spAuth={spAuth}\r\n                    randomNumber={this.state.randomNumber}\r\n                    onChangeRandomNumber={this.setRandomNumber}\r\n\r\n                    formValue={this.state.formValue}\r\n                    onChangeFormValue={this.setFormValue}\r\n\r\n                    setReasonModalProps={this.setReasonModalProps}\r\n                    loading={loadingAllocation || loadingAccessAllocation}\r\n                    trunks={trunk_list}\r\n                    priceData={selectedData}\r\n                    allocationLimit={allocation_limit}\r\n                />\r\n\r\n\r\n                <GoogleOTPAllocateModal\r\n                    show={showGoogleOTPModal}\r\n                    trunks={trunk_list}\r\n                    formValue={googleOTPFormValue}\r\n                    onChangeFormValue={setGoogleOTPFormValue}\r\n                    loading={loadingGoogleOTPAllocation}\r\n                    allocationLimit={allocation_limit}\r\n                    onClose={() => this.setState({showGoogleOTPModal: false})}\r\n                    setReasonModalProps={this.setReasonModalProps}\r\n                    {...{\r\n                        onAllocateGoogleOTP,\r\n                    }}\r\n                />\r\n                <ModalAllocationResult\r\n                    account={account}\r\n                    show={showAllocatedNumbersModal}\r\n                    maxWidth={isGoogleOtp ? 850 : 760}\r\n                    onClose={() => {\r\n                        this.clearAllocatedData();\r\n                        this.setState({\r\n                            notAllocatedNumbers: null,\r\n                            csvContentLoading: true,\r\n                        });\r\n                        setShowAllocatedNumbersModal(false);\r\n                    }}\r\n                    priceData={selectedData}\r\n                    downloadNumbers={downloadNumbers}\r\n                    downloadNumbersTxt={downloadNumbersTxt}\r\n                    onDownloadNumbers={onDownloadNumbers}\r\n                    trunkId={trunkId}\r\n                    methodName={'Ratecard'}\r\n                    csvContent={csvContent}\r\n                    notAllocatedNumbers={notAllocatedNumbers}\r\n                    trunkNumberTransaction={trunk_number_transaction}\r\n                    allocatedNumbersCount={allocatedNumbersCount}\r\n\r\n                    loading={csvContentLoading}\r\n                    uploadLoading={uploadLoadingSetting}\r\n                    setUploadingLoading={setUploadingLoading}\r\n                />\r\n\r\n                <ModalResponseHandler\r\n                    show={showModalResponseHandler}\r\n                    onClose={this.setModalResponseHandler}\r\n                    onSuccess={this.onResponseHandlerSuccess}\r\n                    changeRandom={this.setRandomNumber}\r\n                    params={reasonModalProps}\r\n                />\r\n\r\n            </PanelLayout>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default injectIntl(Price)\r\n\r\n\r\nconst StyledButtonToolbar = styled(ButtonToolbar)`\r\n    width: 140px;\r\n    display: inline-block; \r\n    margin-right: 10px;\r\n    height: 36px;\r\n    margin-bottom: 20px;\r\n    ${props => props.width && css`\r\n        width: ${props.width};\r\n    `\r\n    }\r\n    .rtl & {\r\n        margin-right: 0;\r\n        margin-left: 10px;\r\n    }\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n        margin-top: 10px;\r\n        text-align: center;\r\n    }\r\n`;\r\n\r\n\r\nconst StyledDropdown = styled(Dropdown)`\r\n    width: 100%;\r\n    height: 36px;\r\n    \r\n    &&&&& {\r\n        .rs-btn {\r\n            background-color: var(--color-brand2);\r\n            width: 100%;\r\n            color: white;\r\n            height: 36px;\r\n            padding: 8px 20px 8px 12px;\r\n            \r\n            &:hover {\r\n                background-color: #5f2bb3;\r\n                color: white;\r\n            }\r\n            \r\n            .rtl & {\r\n                padding: 8px 12px 8px 32px;\r\n            }\r\n        }\r\n        \r\n        .rs-dropdown-menu {\r\n            background-color: #fdfdfd !important;\r\n        }\r\n        \r\n        & > .rs-dropdown-item > .rs-dropdown-item-content:hover {\r\n            background-color: #cfcfcf !important;\r\n            color: #5c5c5c !important;\r\n        }\r\n        \r\n        &.rs-dropdown-disabled > a.rs-dropdown-toggle.rs-btn {\r\n            background-color: #D5D4D4 !important;\r\n            color: white;\r\n        }\r\n        \r\n        &.rs-dropdown-disabled > a.rs-dropdown-toggle.rs-btn {\r\n            background-color: #D5D4D4 !important;\r\n            color: white;\r\n        }\r\n        \r\n        @media (max-width: 768px) {\r\n            width: 140px;\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nconst StyledLoader = styled(Loader)`\r\n  & span.rs-loader-spin {\r\n    margin-top: 3px;\r\n    margin-right: 5px;\r\n  }\r\n`;","import {connect} from 'react-redux';\r\nimport {\r\n    setUploadingPriceLoadingDialer,\r\n    allocateByPriceRangeDialer,\r\n    exportPriceDialer,\r\n    getPriceListDialer,\r\n    getTrunkListDialer,\r\n    setLoadingDataDialer,\r\n    setLoadingAllocatedNumbersDialer\r\n} from '../../actions/client/price';\r\nimport {allocateByAccess, setAccessLoadingAllocatedNumbers} from '../../actions/client/accesses';\r\nimport {downloadNumbers, setTrunkNumberTransaction, getTemplate, setUploadingLoading, allocateGoogleOTPTrunkNumbers} from '../../actions/client/numbers'\r\n\r\n\r\nimport Price from './Price';\r\nimport client_price from \"../../reducers/client/price\";\r\n\r\nconst mapState = ({auth, client_price, client_numbers, client_accesses, auth_dialer, references}) => ({\r\n    account: auth.authInfo,\r\n    accountDialerState: auth_dialer.dialerInfo,\r\n\r\n    priceList: client_price.items,\r\n    count: client_price.count,\r\n    priceLoading: client_price.loading,\r\n    page: client_price.page,\r\n    per_page: client_price.per_page,\r\n    trunk_list: client_price.trunk_list,\r\n    allocated_numbers: client_price.allocated_numbers,\r\n    loadingAllocation: client_price.loadingAllocatedNumbers,\r\n    loadingGoogleOTPAllocation: client_numbers.loadingAllocatedNumbers,\r\n    loadingAccessAllocation: client_accesses.loadingAllocatedNumbers,\r\n    \r\n    service_plan_list: references.service_plan_list,\r\n    worldzone_list: references.worldzone_list,\r\n    destination_list: references.destination_list,\r\n    subdestination_list: references.subdestination_list,\r\n    currency_list: references.currency_list,\r\n    payment_terms_list: references.payment_terms_list,\r\n    uploadLoading: references.uploadLoadingDialer,\r\n    \r\n    uploadLoadingSetting: client_numbers.uploadTrunkLoading,\r\n    trunk_number_transaction: client_numbers.trunk_number_transaction,\r\n    allocation_limit: {\r\n        ...references.client_allocation_limit, \r\n        ...auth.allocation_limit\r\n    }\r\n});\r\n\r\nexport default connect(mapState,\r\n    {\r\n        getPriceList: getPriceListDialer,\r\n        exportPrice: exportPriceDialer,\r\n        setLoadingData: setLoadingDataDialer,\r\n        getTrunkList: getTrunkListDialer,\r\n        allocateByPriceRange: allocateByPriceRangeDialer,\r\n        setLoadingAllocatedNumbersDialer,\r\n        setUploadingPriceLoading: setUploadingPriceLoadingDialer,\r\n        allocateByAccess,\r\n        setAccessLoadingAllocatedNumbers,\r\n\r\n        allocateGoogleOTPTrunkNumbers,\r\n        setUploadingLoading,\r\n        getTemplate,\r\n        setTrunkNumberTransaction,\r\n        downloadNumbers,\r\n    })(Price);","import React, {useState} from 'react';\r\nimport {Schema, SelectPicker} from 'rsuite';\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport CustomField from '../../components/client/Form/CustomField/CustomField';\r\nimport {debounce} from 'lodash';\r\nimport {CustomizableForm} from '../../components/client/Form/CustomizableForm';\r\nimport {LOCAL_STORAGE_USER_INFO_DIALER} from '../../const';\r\nimport {useIntl} from \"react-intl\";\r\nimport {FlexGrid, FlexGridItem} from '../../components/base/FlexGrid';\r\nimport m from \"../../definedMessages\";\r\nimport {BaseInputField, BaseSelectPicker} from \"../../components/base/BaseForm\";\r\nimport {useWindowWidth} from \"../../hooks\";\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\nconst MAX_LENGTH = 40;\r\n\r\nconst filtersModel = Schema.Model({\r\n        str: StringType().maxLength(MAX_LENGTH, `The maximum of this field is ${MAX_LENGTH} characters`),\r\n    }\r\n);\r\n\r\n\r\nexport default  FormHOC(({\r\n    loading,\r\n    onChangeFilter,\r\n    prices = [],\r\n    savedTableFilter,\r\n    currency_list,\r\n    spAuth\r\n}) => {\r\n    const {formatMessage} = useIntl();\r\n    const windowWidth = useWindowWidth();\r\n\r\n    const filtersModelInner = Schema.Model({\r\n            str: StringType().maxLength(MAX_LENGTH, formatMessage(m.maxLength, {count: MAX_LENGTH})),\r\n        }\r\n    );\r\n\r\n    // temporary crutch for SP key\r\n    const [spKey, setSpKey] = React.useState(1);\r\n    React.useEffect(() => {\r\n        \r\n        const sp_key = (savedTableFilter && savedTableFilter.sp_key) || (prices && prices.length && prices[0].sp_key) || 1;\r\n        setSpKey(sp_key);\r\n\r\n    }, [savedTableFilter, prices]);\r\n\r\n    const accountInfo = localStorage.getItem(LOCAL_STORAGE_USER_INFO_DIALER);\r\n    const parsedAccountInfo = accountInfo !== null ? JSON.parse(accountInfo).session.account : {};\r\n    const accountInfoIsTest = parsedAccountInfo.hasOwnProperty('is_test') ? parsedAccountInfo.is_test : false;\r\n\r\n    let filteredPriceList;\r\n    let savedFilter;\r\n    const priceList = prices.map(({sp_key: value, name: label}) => ({value, label}));\r\n    const curList = currency_list.map(({cur_key: value, name: label}) => ({value, label}));\r\n\r\n    if (priceList && priceList.length && savedTableFilter) {\r\n        filteredPriceList = priceList.filter(price=>price.value===savedTableFilter.sp_key);\r\n    }\r\n    if (filteredPriceList && filteredPriceList.length) {\r\n        savedFilter = {\r\n            ...savedTableFilter,\r\n            sp_key: filteredPriceList[0].value,\r\n            cur_key: savedTableFilter && savedTableFilter.cur_key ? savedTableFilter.cur_key : 1\r\n        }\r\n    } else {\r\n        savedFilter = {\r\n            ...savedTableFilter,\r\n            sp_key: (prices && prices.length && prices[0].sp_key) || (savedTableFilter && savedTableFilter.sp_key) || 1,\r\n            cur_key: savedTableFilter && savedTableFilter.cur_key ? savedTableFilter.cur_key : 1\r\n        }\r\n    }\r\n\r\n    const [changedSpKey, onChangeSpKey] = useState(savedFilter.sp_key);\r\n\r\n    const onSubmit = (data, checkedData) => {\r\n        const checker = Object.keys(checkedData).map(i => checkedData[i].hasError).every(value => value === false);\r\n\r\n        if (checker) {\r\n            onChangeFilter({...data, sp_key: data.sp_key || savedTableFilter.sp_key || 1});\r\n        }\r\n        return false;\r\n    };\r\n\r\n    return (\r\n        <CustomizableForm\r\n            model={filtersModelInner}\r\n            onChange={debounce((data) => {\r\n                const checkedData = filtersModel.check(data);\r\n                if (data.sp_key) onChangeSpKey(data.sp_key);\r\n                onSubmit(data, checkedData);\r\n            }, 1000)}\r\n            formDefaultValue={savedFilter}\r\n            fluid\r\n            readOnly={loading}\r\n        >\r\n            <FlexGrid align=\"top\">\r\n                <FlexGridItem width={windowWidth > 767 ? \"180px\" : \"100%\"}>\r\n                    <CustomField\r\n                        data={priceList}\r\n                        value={spKey}\r\n                        onChange={(value) => {\r\n                            setSpKey(value)\r\n                        }}\r\n                        searchable={false}\r\n                        accepter={BaseSelectPicker}\r\n                        name=\"sp_key\"\r\n                        cleanable={false}\r\n                    />\r\n                </FlexGridItem>\r\n                { accountInfoIsTest &&\r\n                    <FlexGridItem>\r\n                        <CustomField\r\n                            data={curList}\r\n                            accepter={BaseSelectPicker}\r\n                            name=\"cur_key\"\r\n                            width={windowWidth > 767 ? \"320px\" : \"100%\"}\r\n                            cleanable={false}\r\n                            searchable={false}\r\n                        />\r\n                    </FlexGridItem>\r\n                }\r\n                <FlexGridItem width={windowWidth > 767 ? \"320px\" : \"100%\"}>\r\n                    <CustomField\r\n                        name=\"str\"\r\n                        accepter={BaseInputField}\r\n                        errorPlacement=\"topEnd\"\r\n                        placeholder={!spAuth ?\r\n                            formatMessage(m.destinationFilter)\r\n                            : formatMessage(m.destinationOrService)}\r\n                    />\r\n                </FlexGridItem>\r\n            </FlexGrid>\r\n        </CustomizableForm>\r\n    );\r\n}, filtersModel, 500);","import React, {useContext} from 'react';\r\nimport {Table} from 'rsuite';\r\nimport {renderColumn} from '../../utils/helpers';\r\nimport {useIntl} from \"react-intl\";\r\nimport CustomizableTable from '../../components/client/CustomizableTable/CustomizableTable';\r\nimport {ButtonRowClient, ButtonToolbar} from \"../../components/base/BaseButton\";\r\nimport m from \"../../definedMessages\";\r\nimport {RtlContext} from \"../../App\";\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\nexport default (\r\n    {\r\n        data = [],\r\n        loading,\r\n        page,\r\n        count,\r\n        per_page,\r\n        savedPerPage,\r\n        onChangePerPage,\r\n        onChangePage,\r\n        onShowGetNumbersModal,\r\n        onShowGoogleOTPModal,\r\n        filter,\r\n        spAuth,\r\n        isGoogleOtp,\r\n        accountInfo,\r\n        isTest,\r\n        accountDialerState,\r\n        ...props\r\n    }\r\n) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n    const rtl = useContext(RtlContext);\r\n\r\n    let actionShowFlag = null;\r\n    if (accountInfo.hasOwnProperty('permission_list')) {\r\n        if (accountInfo.permission_list !== null)\r\n            actionShowFlag = accountInfo.permission_list.includes('allocate_number');\r\n        if (accountInfo.permission_list !== null && isGoogleOtp)\r\n            actionShowFlag = accountInfo.permission_list.includes('google_otp_allocation');\r\n    }\r\n\r\n\r\n    const columns = [\r\n        {\r\n            id: 'a_sub', \r\n            label: formatMessage(m.accessOrigin), \r\n            dataKey: 'a_subdestination_name',\r\n            flexGrow: 5,\r\n            minWidth: 200,\r\n            align: 'center',\r\n            spAuth: false,\r\n        },\r\n        {\r\n            id: 'a_number',\r\n            label: formatMessage(m.cli),\r\n            dataKey: 'a_number', \r\n            flexGrow: 3,\r\n            minWidth: 130,\r\n            align: 'center',\r\n            spAuth: false,\r\n        },\r\n        {\r\n            id: 'origin',\r\n            label: formatMessage(m.service),\r\n            value: ({a_service, a_number}) => (\r\n                a_service || a_number\r\n                    ? `${a_service} (${a_number})`\r\n                    : \"\"\r\n            ), \r\n            flexGrow: 3,\r\n            minWidth: 130,\r\n            align: 'center',\r\n            spAuth: true,\r\n        },\r\n        {\r\n            id: 'destination',\r\n            label: formatMessage(m.destination),\r\n            value: ({b_subdestination_name, b_template}) => (\r\n                    `${b_subdestination_name ? b_subdestination_name : \"\"}${b_template ? ` (${b_template})` : \"\"}`\r\n            ),\r\n            flexGrow: 3,\r\n            minWidth: 130,\r\n            align: 'center',\r\n            spAuth: true,\r\n        },\r\n        {\r\n            id: 'b_sub', \r\n            label: formatMessage(m.accessDestination),\r\n            dataKey: 'b_subdestination_name', \r\n            flexGrow: 5,\r\n            minWidth: 200,\r\n            align: 'center',\r\n            spAuth: false,\r\n        },\r\n        {\r\n            id: 'b_number', \r\n            label: formatMessage(m.testNumber), \r\n            dataKey: 'b_number', \r\n            flexGrow: 3,\r\n            minWidth: 130,\r\n            align: 'center',\r\n            spAuth: false,\r\n        },\r\n    ].filter(value => value.spAuth === undefined || value.spAuth === spAuth);\r\n\r\n\r\n    const nonTestColumns = [\r\n        {\r\n            id: 'payout',\r\n            label: formatMessage(m.payout),\r\n            value: (({payment_terms_rate_list}) => {\r\n                const obj = payment_terms_rate_list ? payment_terms_rate_list.find(value => {\r\n                    return value.payment_terms_name === (accountInfo.hasOwnProperty('payment_terms') ? accountInfo.payment_terms : '');\r\n                }) : null;\r\n                if (obj) {\r\n                    return `${Number(obj.rate).toFixed(4)} ${accountInfo.currency_name}`;\r\n                } else {\r\n                    return '—';\r\n                }\r\n            }),\r\n            width: 120,\r\n            align: 'center'\r\n        }\r\n    ];\r\n\r\n\r\n    if (!isTest) {\r\n        for (const column of nonTestColumns) {\r\n            columns.push(column);\r\n        }\r\n    }\r\n\r\n    \r\n    const testColumns = [];\r\n    const allTermList = [];\r\n\r\n    for (const priceRange of data) {\r\n        if (priceRange && priceRange.payment_terms_rate_list) {\r\n            for (const term of priceRange.payment_terms_rate_list)\r\n                allTermList.push(term.payment_terms_name);\r\n        }\r\n    }\r\n\r\n    \r\n    const uniqueTermList = allTermList.filter((v, i, a) => a.indexOf(v) === i);\r\n    for (const term of uniqueTermList) {\r\n        testColumns.push(\r\n            {\r\n                id: 'payouts',\r\n                label: `${formatMessage(m.payout)} ${term}`,\r\n                value: (({payment_terms_rate_list}) => {\r\n                    if (payment_terms_rate_list) {\r\n                        const obj = payment_terms_rate_list.find(value => value.payment_terms_name === term);\r\n                        let currency = payment_terms_rate_list.find(value=> value.rate !== null);\r\n                        if (currency) {\r\n                            currency = currency.currency_name;\r\n                        }\r\n                        if (obj && obj.rate && currency) {\r\n                            if (accountInfo.hasOwnProperty('currency_name')) {\r\n                                return `${Number(obj.rate).toFixed(4)} ${currency ? currency : ''}`;\r\n                            }\r\n                        } else {\r\n                            return '—';\r\n                        }\r\n                    } else {\r\n                        return '—';\r\n                    }\r\n                }),\r\n                width: 120,\r\n                align: 'center'\r\n            });\r\n    }\r\n\r\n    \r\n    if (isTest) {\r\n        for (const column of testColumns) {\r\n            columns.push(column);\r\n        }\r\n    }\r\n    \r\n    const renderedColumns = columns.map(renderColumn);\r\n    \r\n    return (\r\n        <>\r\n            <CustomizableTable\r\n                data={data.filter(item => !!item)}\r\n                isChangedColumns={false}\r\n                isPaginated={true}\r\n                {...{\r\n                    rtl,\r\n                    count,\r\n                    page,\r\n                    per_page,\r\n                    loading,\r\n                    savedPerPage,\r\n                    onChangePage,\r\n                    onChangePerPage,\r\n                    renderedColumns,\r\n                    ...props\r\n                }}\r\n                actionColumn={() => {\r\n                    \r\n                    if (spAuth && isGoogleOtp && (\r\n                        !accountDialerState || \r\n                        !accountDialerState.permission_list ||\r\n                        accountDialerState.permission_list && !accountDialerState.permission_list.includes('google_otp_allocation')\r\n                    )) {\r\n                        return null;\r\n                    }\r\n\r\n                    return actionShowFlag && \r\n                        <Column \r\n                            key=\"table_actions\" \r\n                            width={rtl ? 160 : 130}\r\n                            align='center'\r\n                        >\r\n                            <HeaderCell>{formatMessage(m.action)}</HeaderCell>\r\n                            <Cell>\r\n                                {\r\n                                    rowData => {\r\n                                        \r\n                                        const data = {\r\n                                            id: rowData.id,\r\n                                            a_subdestination_name: rowData.a_subdestination_name,\r\n                                            b_subdestination_name: rowData.b_subdestination_name,\r\n                                            sp_key: rowData.sp_key,\r\n                                            a_number: rowData.a_number,\r\n                                            b_number: rowData.b_number,\r\n                                            a_sde_key: rowData.a_sde_key,\r\n                                            b_sde_key: rowData.b_sde_key\r\n                                        };\r\n\r\n                                        return (\r\n                                            <ButtonToolbar>\r\n                                                <ButtonRowClient\r\n                                                    size=\"sm\"\r\n                                                    onClick={() => {\r\n                                                        if (isGoogleOtp) {\r\n                                                            onShowGoogleOTPModal(true, data);\r\n                                                            return;\r\n                                                        }\r\n                                                        onShowGetNumbersModal(true, data);\r\n                                                    }}\r\n                                                >\r\n                                                    <b>{formatMessage(m.getNumbers)}</b>\r\n                                                </ButtonRowClient>\r\n                                            </ButtonToolbar>\r\n                                        );\r\n                                    }\r\n                                }\r\n                            </Cell>\r\n                        </Column>\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n};","import React, {useState} from 'react';\r\nimport {\r\n    ControlLabel,\r\n    Form,\r\n    FormControl,\r\n    FormGroup,\r\n    InputNumber,\r\n    Schema\r\n} from 'rsuite';\r\nimport Modal from '../../components/Modal';\r\nimport CustomField from '../../components/client/Form/CustomField/CustomField';\r\nimport {useIntl} from \"react-intl\";\r\nimport Checkbox from 'rsuite/es/Checkbox';\r\nimport {ALLOCATION_SUBDESTINATION_DIALER_API} from \"../../const/apiMethods\";\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport styled, {css} from 'styled-components';\r\nimport {SCREEN_MEDIA} from \"../../const\";\r\nimport TrunksList from '../../components/TrunksList/TrunksList';\r\nimport m from \"../../definedMessages\";\r\nimport {CustomModalClient} from \"../../components/base\";\r\nimport {BaseCheckboxField, BaseInputNumberField} from \"../../components/base/BaseForm\";\r\n\r\nconst {md} = SCREEN_MEDIA;\r\nconst {StringType, NumberType} = Schema.Types;\r\n\r\n\r\nexport default (\r\n    {\r\n        show,\r\n        onClose,\r\n        onSend,\r\n        trunks,\r\n        selectedData,\r\n        maxWidth = 600,\r\n        loading,\r\n\r\n        randomNumber = false,\r\n        onChangeRandomNumber,\r\n\r\n        formValue,\r\n        onChangeFormValue,\r\n        allocationLimit,\r\n        ...props\r\n    }\r\n) => {\r\n    const {formatMessage} = useIntl();\r\n\r\n    const MIN_NUMBER = 1;\r\n    const MAX_NUMBER = allocationLimit && allocationLimit.subdestination ? allocationLimit.subdestination.once : allocationLimit && allocationLimit.other && allocationLimit.other.once || 1000;\r\n\r\n    const formSchema = Schema.Model({\r\n        trunk_id: StringType()\r\n            .isRequired(formatMessage(m.thisFieldIsRequired)),\r\n        numbers: NumberType(formatMessage(m.pleaseEnterValidNumber))\r\n            .min(MIN_NUMBER, formatMessage(m.minNumber, {number: MIN_NUMBER}))\r\n            .max(MAX_NUMBER, formatMessage(m.maxNumber, {number: MAX_NUMBER}))\r\n            .isRequired(formatMessage(m.thisFieldIsRequired)),\r\n    });\r\n\r\n    let form;\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    const [formError, onChangeFormError] = useState({});\r\n    // const [formValue, onChangeFormValue] = useState({trunk_id: null, numbers: 1});\r\n    // const [randomNumber, onChangeRandomNumber] = useState(false);\r\n    const [trunkId, onChangeTrunkId] = useState(null);\r\n\r\n    const onSubmit = async () => {\r\n        const data = form.getFormValue();\r\n        const response = await onSend({...data,  numbers: Number(data.numbers), random_order: randomNumber});\r\n\r\n        if (!response)\r\n            return;\r\n\r\n        if (response && response.status === 0) {\r\n            clearForm();\r\n        } else {\r\n            const trunk = trunks.filter( trunk => trunk.id === trunkId );\r\n            props.setReasonModalProps({\r\n                reasonCode: response.reason_code,\r\n                isRandom: randomNumber,\r\n                method: ALLOCATION_SUBDESTINATION_DIALER_API,\r\n                subDest: selectedData.b_subdestination_name,\r\n                trunk: trunk[0],\r\n                changeRandom: onChangeRandomNumber,\r\n                numbersAmount: formValue.numbers,\r\n                reasonHash: response.reason_hash,\r\n            });\r\n        }\r\n    };\r\n\r\n    const checkForm = (form, formSchema, formData, formError) => {\r\n        if (!form.check()) {\r\n            return true;\r\n        } else {\r\n            const checker = Object.keys(formSchema.check(formData)).map(i => formSchema.check(formData)[i].hasError).every(value => value === false) &&\r\n                !(formData.hasOwnProperty('name') && formData.hasOwnProperty('numbers'));\r\n            if (checker) {\r\n                onSubmit();\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const trunkList = trunks \r\n        ? trunks.filter(value => value.sp_key === selectedData.sp_key && !value.closed && !value.option_google_otp)\r\n        : {};\r\n\r\n    const clearForm = () => {\r\n        onChangeFormValue({trunk_id: null, numbers: 1});\r\n        onChangeRandomNumber(false);\r\n    };\r\n\r\n    return (\r\n        <ModalForm\r\n            show={show}\r\n            confirmButtonText={formatMessage(m.getNumbers)}\r\n            onConfirm={() => {\r\n                checkForm(form, formSchema, formValue, formError);\r\n                //    onChangeFormValue({trunk_id: '', numbers: 1});\r\n            }}\r\n            onClose={() => {\r\n                onClose(false);\r\n                clearForm();\r\n            }}\r\n            title={formatMessage(m.getNumbersForDestination, {name: selectedData.b_subdestination_name})}\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            showFooter={true}\r\n            disabled={trunkId === null}\r\n            loading={loading}\r\n        >\r\n            <Form\r\n                layout=\"horizontal\"\r\n                ref={ref => (form = ref)}\r\n                model={formSchema}\r\n                onChange={formValue => {\r\n                    onChangeFormValue(formValue);\r\n                }}\r\n                onCheck={formError => {\r\n                    onChangeFormError(formError);\r\n                }}\r\n                formValue={formValue}\r\n            >\r\n                <FormParts>\r\n                    <FormPart>\r\n\r\n                        <FormGroup>\r\n                            <StyledTrunkField>\r\n                                <CustomField\r\n                                    accepter={TrunksList}\r\n                                    name='trunk_id'\r\n                                    data={trunkList}\r\n                                    onChange={(value) => onChangeTrunkId(value)}\r\n                                />\r\n                            </StyledTrunkField>\r\n                        </FormGroup>\r\n\r\n                    </FormPart>\r\n                    <FormPart>\r\n\r\n                        <FormGroup>\r\n                            <FlexBox>\r\n                                <FormLabel>{formatMessage(m.numbers)}</FormLabel>\r\n                                <FormFieldWrapper width=\"80px\">\r\n                                    <FormControl\r\n                                        accepter={BaseInputNumberField}\r\n                                        max={MAX_NUMBER}\r\n                                        min={MIN_NUMBER}\r\n                                        name='numbers'\r\n                                    />\r\n                                </FormFieldWrapper>\r\n                            </FlexBox>\r\n                        </FormGroup>\r\n\r\n                    </FormPart>\r\n\r\n                    <FormPart>\r\n\r\n                        <BaseCheckboxField\r\n                            // Форма не подхватывает значение чекбокса, как в реф так и в стейт\r\n                            onChange={(_, checked) => {\r\n                                onChangeRandomNumber(checked)\r\n                            }}\r\n                            defaultChecked={randomNumber}\r\n                            name=\"random_order\"\r\n                            value=\"random_order\"\r\n                        >\r\n                            {formatMessage(m.randomOrder)}\r\n                        </BaseCheckboxField>\r\n\r\n                    </FormPart>\r\n                </FormParts>\r\n            </Form>\r\n        </ModalForm>\r\n    );\r\n};\r\n\r\n\r\nconst FlexBox = styled.div`\r\n    align-items: center;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nconst FormParts = styled.div`\r\n    display: block;\r\n    margin-bottom: -20px;\r\n    @media (min-width: ${md.min}px) {\r\n        align-items: center;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        justify-content: space-between;\r\n    }\r\n`;\r\n\r\nconst FormPart = styled.div`\r\n    padding-bottom: 20px;\r\n\r\n    @media (min-width: ${md.min}px) {\r\n        padding-right: 10px;\r\n\r\n        &:last-child {\r\n            padding-right: 0;\r\n        }\r\n    }\r\n`;\r\n\r\nconst FormLabel = styled(ControlLabel)`\r\n    &&&& {\r\n        float: none;\r\n        margin: 0 0 10px 0;\r\n        padding: 0;\r\n        text-align: left;\r\n        word-wrap: none;\r\n\r\n        @media (min-width: ${md.min}px) {\r\n            margin: 0 10px 0 0;\r\n            max-width: 130px;\r\n            width: auto;\r\n        }\r\n    }\r\n`;\r\n\r\nconst FormFieldWrapper = styled.div`\r\n    width: 100%;\r\n\r\n    {${props => \r\n        props.width &&\r\n        css`\r\n            @media (min-width: ${md.min}px) {\r\n                width: ${props.width}\r\n            }\r\n        `\r\n    }\r\n`;\r\n\r\nconst StyledTrunkField = styled.div`\r\n    width: 100%;\r\n\r\n    @media (min-width: ${md.min}px) {\r\n        width: 200px;\r\n    }\r\n`;\r\n\r\nexport const ModalForm = styled(CustomModalClient)`\r\n    .rs-modal-content {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .rs-modal-footer {\r\n        margin-top: auto;\r\n        padding-bottom: 20px;\r\n        padding-top: 20px;\r\n    }\r\n`;","import React from 'react';\r\nimport PageHeader from '../../components/base/PageHeader';\r\nimport AccessesFilters from './AccessesFilters';\r\nimport AccessesTable from './AccessesTable';\r\nimport ButtonDownload from '../../components/client/ButtonDownload';\r\nimport {\r\n    LOCAL_STORAGE_ACCESSES_FILTERS_DIALER,\r\n    LOCAL_STORAGE_ACCESSES_PER_PAGE_DIALER,\r\n    MAX_PER_PAGE_DIALER,\r\n    MIN_PER_PAGE_DIALER\r\n} from '../../const';\r\nimport {getBlobContent} from '../../utils/helpers';\r\nimport {defineMessages, injectIntl} from 'react-intl';\r\nimport {FlexGrid, FlexGridItem} from \"../../components/base/FlexGrid\";\r\nimport {Spacer} from '../../components/base/Spacer';\r\nimport {SCREEN_MEDIA} from '../../const';\r\nimport styled from \"styled-components\";\r\nimport {getFileResponse} from '../../api/loginRoutes';\r\nimport {SP_OTP_TYPE} from \"../../const/index\";\r\nimport AccessGetNumbersModal from './AccessGetNumbersModal';\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\n\r\nimport ModalResponseHandler from \"../../components/client/Modal/ModalResponseHandler\";\r\nimport ModalAllocationResult from '../../components/client/Modal/ModalAllocationResult';\r\nimport GoogleOTPAllocateModal from '../Numbers/GoogleOTPAllocateModal/GoogleOTPAllocateModal';\r\nimport axios from \"axios\";\r\nimport m from \"../../definedMessages\";\r\n\r\n\r\nconst {md} = SCREEN_MEDIA;\r\nconst widthDesktopMin = md.min;\r\n\r\n\r\nclass Accesses extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.currentPerPage = null;\r\n        this.defaultFilter = {str: '', sp_key: 1};\r\n        this.savedTableFilter = JSON.parse( localStorage.getItem(LOCAL_STORAGE_ACCESSES_FILTERS_DIALER) );\r\n        this.formatMessage = this.props.intl.formatMessage.bind(this.props.intl);\r\n        this.cancelTokenAccessesList = axios.CancelToken.source();\r\n\r\n        const {account} = props.account.session || {};\r\n        const currencyKey = ( (this.savedTableFilter && this.savedTableFilter.cur_key) || {} ).cur_key || account.cur_key;\r\n        const isTest = account.hasOwnProperty('is_test') ? account.is_test : false;\r\n\r\n        const filter = {\r\n            ...this.defaultFilter,\r\n            ...(this.savedTableFilter || {}),\r\n            ...(isTest ? {cur_key: currencyKey} : {}),\r\n        };\r\n\r\n        if (!isTest && filter.cur_key) {\r\n            delete filter.cur_key;\r\n        }\r\n\r\n        if ( props.service_plan_list\r\n            && props.service_plan_list.length\r\n            && !props.service_plan_list.find(item => item.sp_key == filter.sp_key)\r\n        ) {\r\n            filter.sp_key = props.service_plan_list[0].sp_key;\r\n        }\r\n\r\n        this.state = {\r\n            currencyKey: currencyKey,\r\n            isTest: isTest,\r\n            filter: {...filter},\r\n            selectedData: {},\r\n            accountInfo: account,\r\n            accountId: account.id,\r\n            spAuth: false,\r\n            isGoogleOtp: false,\r\n\r\n            savedPerPage: JSON.parse( localStorage.getItem(LOCAL_STORAGE_ACCESSES_PER_PAGE_DIALER) ),\r\n            searchLoading: false,\r\n            trunkId: null,\r\n            formValue: {trunk_id: null, numbers: 1},\r\n            randomNumber: false,\r\n            csvContent: null,\r\n            transactionId: null,\r\n            notAllocatedNumbers: null,\r\n            allocatedNumbersCount: 0,\r\n            googleOTPFormValue: {numbers: 100},\r\n            showGoogleOTPModal: false,\r\n            \r\n            showGetNumbersModal: false,\r\n            showNewNumbersModal: false,\r\n            showModalResponseHandler: false,\r\n            reasonModalProps: {},\r\n\r\n            resizedWidth: window.innerWidth,\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        const {savedPerPage, filter} = this.state;\r\n        const {getTrunkList, getAccessList, per_page, service_plan_list} = this.props;\r\n        this.currentPerPage = savedPerPage;\r\n\r\n        getTrunkList();\r\n\r\n        if (service_plan_list.length && filter.sp_key) {\r\n            const currentServicePlan = service_plan_list.find( item => item.sp_key === filter.sp_key );\r\n            this.setState({\r\n                spAuth: currentServicePlan.auth,\r\n                isGoogleOtp: currentServicePlan.otp_type === SP_OTP_TYPE\r\n            });\r\n            getAccessList(savedPerPage || per_page, filter, 1, currentServicePlan.auth);\r\n        }\r\n\r\n        // resize listener\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    \r\n    componentDidUpdate(prevProps, prevState) {\r\n        const {savedPerPage, filter} = this.state;\r\n        const {getAccessList, per_page, service_plan_list} = this.props;\r\n\r\n        if (service_plan_list.length && filter.sp_key) {\r\n            if (prevState.filter !== filter || prevProps.service_plan_list !== service_plan_list) {\r\n                const currentServicePlan = service_plan_list.find( item => item.sp_key === filter.sp_key );\r\n                if (currentServicePlan) {\r\n                    this.setState({\r\n                        spAuth: currentServicePlan.auth,\r\n                        isGoogleOtp: currentServicePlan.otp_type === SP_OTP_TYPE\r\n                    });\r\n                    if (typeof this.cancelTokenAccessesList !== typeof undefined) {\r\n                        this.cancelTokenAccessesList.cancel(\"Operation canceled due to new request.\");\r\n                    }\r\n                    this.cancelTokenAccessesList = axios.CancelToken.source();\r\n                    getAccessList(savedPerPage || this.currentPerPage || per_page, filter, 1, currentServicePlan.auth, this.cancelTokenAccessesList);\r\n                } else {\r\n                    this.setState({\r\n                        filter: {...filter, sp_key: service_plan_list[0].sp_key}\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize);\r\n    }\r\n\r\n\r\n    onChangeFilters = (filtersObj) => {\r\n        const {filter} = this.state;\r\n        const newFilter = {...filter, ...filtersObj}\r\n        this.setState({filter: newFilter});\r\n        localStorage.setItem(LOCAL_STORAGE_ACCESSES_FILTERS_DIALER, JSON.stringify(newFilter));\r\n    };\r\n\r\n    \r\n    onChangePerPage = (perPage) => {\r\n        const {filter} = this.state;\r\n        const {getAccessList, service_plan_list} = this.props;\r\n\r\n        this.setState({savedPerPage: perPage ? null : this.currentPerPage});\r\n        const per_page = Number(perPage) || this.currentPerPage;\r\n        this.currentPerPage = per_page <= 0\r\n            ? MIN_PER_PAGE_DIALER\r\n            : per_page > MAX_PER_PAGE_DIALER ? MAX_PER_PAGE_DIALER : per_page;\r\n        localStorage.setItem(LOCAL_STORAGE_ACCESSES_PER_PAGE_DIALER, JSON.stringify(this.currentPerPage));\r\n\r\n        const currentServicePlan = service_plan_list.find( item => item.sp_key == filter.sp_key );\r\n        getAccessList(this.currentPerPage, filter, 1, currentServicePlan.auth);\r\n    };\r\n\r\n    \r\n    onChangePage = (pageNumber) => {\r\n        const {savedPerPage, filter} = this.state;\r\n        const {getAccessList, per_page, service_plan_list} = this.props;\r\n\r\n        const currentServicePlan = service_plan_list.find( item => item.sp_key == filter.sp_key );\r\n        getAccessList(savedPerPage || this.currentPerPage || per_page, filter, pageNumber, currentServicePlan.auth);\r\n    };\r\n\r\n    \r\n    onDownloadNumbers = (trunk_id) => this.props.downloadNumbers(trunk_id);\r\n\r\n    \r\n    downloadAccesses = () => {\r\n        const {accountId, filter} = this.state;\r\n        const {downloadAccesses, service_plan_list} = this.props;\r\n\r\n        const currentServicePlan = service_plan_list.find( item => item.sp_key == filter.sp_key );\r\n        downloadAccesses(accountId, filter, currentServicePlan.auth);\r\n    };\r\n\r\n    \r\n    getNumbers = async (data) => {\r\n        const {allocateByAccess, setTrunkNumberTransaction, setAccessLoadingAllocatedNumbers} = this.props;\r\n        const {selectedData} = this.state;\r\n        const response = await allocateByAccess(data.trunk_id, selectedData.b_sde_key, data.numbers, data.random_order);\r\n        \r\n        if (response === undefined || (response.code && !response.reason_code))\r\n            return;\r\n        \r\n        this.onShowGetNumbersModal(false);\r\n\r\n        // reason_code recieved in an error message or with no numbers\r\n        if (response.reason_code && \r\n            (!response.trunk_number_transaction || !response.trunk_number_transaction.numbers) \r\n        ) {\r\n            this.setModalResponseHandler(true);\r\n            setAccessLoadingAllocatedNumbers(false);\r\n            return {\r\n                status: 1,\r\n                reason_code: response.reason_code,\r\n                reason_hash: response.hash,\r\n            };\r\n        }\r\n\r\n        this.onAllocationGetResult(response);\r\n        \r\n        this.setState({showNewNumbersModal: true, trunkId: data.trunk_id, });\r\n        return {status: 0};\r\n    };\r\n\r\n\r\n    onShowGoogleOTPModal = (value, data) => {\r\n        const {googleOTPFormValue} = this.state;\r\n\r\n        this.setState({showGoogleOTPModal: value});\r\n        if (value)\r\n            this.setState({\r\n                selectedData: data,\r\n                googleOTPFormValue: {\r\n                    ...googleOTPFormValue, \r\n                    sde_key: data.b_sde_key\r\n                }\r\n            })\r\n    };\r\n\r\n\r\n    onAllocateGoogleOTP = async (formValue) => {\r\n        const {allocateGoogleOTPTrunkNumbers} = this.props;\r\n\r\n        const response = await allocateGoogleOTPTrunkNumbers(formValue);\r\n        if (response === undefined || (response.code && !response.reason_code))\r\n            return;\r\n\r\n        this.onShowGoogleOTPModal(false);\r\n        this.setState({\r\n            trunkId: formValue.trunk_id\r\n        });\r\n\r\n        // reason_code recieved in an error message or with no numbers\r\n        if ( response.reason_code && (!response.trunk_number_transaction || !response.trunk_number_transaction.numbers) ) {\r\n            this.setModalResponseHandler(true);\r\n            return {\r\n                status: 1,\r\n                reason_code: response.reason_code,\r\n                reason_hash: response.hash,\r\n            };\r\n        }\r\n\r\n        this.onAllocationGetResult(response);\r\n        this.onShowNewNumbersModal(true);\r\n        return {status: 0};\r\n    };\r\n\r\n\r\n    onAllocationGetResult = (response) => {\r\n        const {setTrunkNumberTransaction, setAccessLoadingAllocatedNumbers} = this.props;\r\n\r\n        const notAllocatedNumbers = response.not_allocated_numbers;\r\n        notAllocatedNumbers && this.setState({notAllocatedNumbers});\r\n\r\n        const trunkNumberTransaction = response.trunk_number_transaction;\r\n        setTrunkNumberTransaction(trunkNumberTransaction || {});\r\n\r\n        if (trunkNumberTransaction) {\r\n            const transactionId = trunkNumberTransaction.id;\r\n            const allocatedNumbersCount = trunkNumberTransaction.numbers;\r\n            this.setState({transactionId, allocatedNumbersCount});\r\n\r\n            getFileResponse('trunk_number:get_list', {\r\n                target: {\r\n                    trunk_number_transaction_id: transactionId\r\n                }\r\n            }, true)\r\n                .then((response) => {\r\n                    setAccessLoadingAllocatedNumbers(false);\r\n                    const csvText = getBlobContent(response);\r\n                    csvText.then((text) => {\r\n                        this.setState({\r\n                            csvContent: text,\r\n                        })\r\n                    });\r\n                })\r\n        }\r\n    };\r\n\r\n\r\n    onResponseHandlerSuccess = (value) => {\r\n        const {isGoogleOtp} = this.state;\r\n        if (isGoogleOtp) {\r\n            this.setState({showGoogleOTPModal: true});\r\n            return;\r\n        }\r\n        this.onShowGetNumbersModal(value, this.state.selectedData);\r\n    };\r\n\r\n\r\n    downloadNumbers = (csvNumberList, trunkId, setUploadingLoading) => {\r\n        const encodedUri = encodeURI(csvNumberList);\r\n        const link = document.createElement('a');\r\n        link.setAttribute('href', encodedUri);\r\n        link.setAttribute('download', 'allocated_numbers.csv');\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        setUploadingLoading(trunkId, false);\r\n    };\r\n\r\n    downloadNumbersTxt = (csvNumberList, trunkId, setUploadingLoading) => {\r\n        const encodedUri = encodeURI(csvNumberList);\r\n        const link = document.createElement('a');\r\n        link.setAttribute('href', encodedUri);\r\n        link.setAttribute('download', 'allocated_numbers.txt');\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        setUploadingLoading(trunkId, false);\r\n    };\r\n\r\n    \r\n    handleResize = () => this.setState({resizedWidth: window.innerWidth});\r\n    \r\n    setFormValue = (value) => this.setState({formValue: value});    \r\n    \r\n    setRandomNumber = (value) => this.setState({randomNumber: value});    \r\n    \r\n    setReasonModalProps = (props) => this.setState({reasonModalProps: props});\r\n    \r\n    setModalResponseHandler = (value) => this.setState({showModalResponseHandler: value});\r\n    \r\n    onShowNewNumbersModal = (state) => this.setState({showNewNumbersModal: state});\r\n    \r\n    onShowGetNumbersModal = (state, data = {}) => {\r\n        this.setState({showGetNumbersModal: state});\r\n        if (state)\r\n            this.setState({selectedData: data})\r\n    };\r\n\r\n    setGoogleOTPFormValue = (value) => {\r\n        this.setState({\r\n            googleOTPFormValue: {...value}\r\n        });\r\n    };\r\n    \r\n    clearAllocatedData = () => this.setState({\r\n        csvContent: null,\r\n        allocatedNumbersCount: 0\r\n    });\r\n\r\n\r\n    render() {\r\n        \r\n        const {\r\n            searchLoading, savedPerPage, showModalResponseHandler, showGetNumbersModal,\r\n            showNewNumbersModal, trunkId, csvContent, allocatedNumbersCount, notAllocatedNumbers,\r\n            selectedData, filter, spAuth, accountInfo, isTest, googleOTPFormValue, showGoogleOTPModal,\r\n            isGoogleOtp, activeField\r\n        } = this.state;\r\n\r\n        const {\r\n            account, accessesList, accessesLoading, page, count, service_plan_list, per_page, currency_list, \r\n            trunkList, loadingAllocation, loadingGoogleOTPAllocation, uploadLoading, uploadLoadingSetting, trunk_number_transaction, \r\n            allocation_limit, setUploadingLoading, accountDialerState\r\n        } = this.props;\r\n\r\n        const getNumbers = this.getNumbers;\r\n        const onChangePage = this.onChangePage;\r\n        const onChangePerPage = this.onChangePerPage;\r\n        const downloadAccesses = this.downloadAccesses;\r\n        const onShowGetNumbersModal = this.onShowGetNumbersModal;\r\n        const onShowNewNumbersModal = this.onShowNewNumbersModal;\r\n        const downloadNumbers = this.downloadNumbers;\r\n        const downloadNumbersTxt = this.downloadNumbersTxt;\r\n        const onDownloadNumbers = this.onDownloadNumbers;\r\n        const onShowGoogleOTPModal = this.onShowGoogleOTPModal;\r\n        const setGoogleOTPFormValue = this.setGoogleOTPFormValue;\r\n        const onAllocateGoogleOTP = this.onAllocateGoogleOTP;\r\n\r\n\r\n        return (\r\n            <PanelLayout>\r\n                <PageHeader title={this.formatMessage(m.accessList)}/>\r\n\r\n                <FlexGrid justify=\"space-between\">\r\n                    <FlexGridItem grow={1}>\r\n                        <AccessesFilters\r\n                            spAuth={spAuth}\r\n                            onChangeFilter={this.onChangeFilters}             \r\n                            loading={accessesLoading || searchLoading}\r\n                            prices={service_plan_list}\r\n                            savedTableFilter={this.savedTableFilter}\r\n                            {...{currency_list}}\r\n                        />\r\n                    </FlexGridItem>\r\n                    {this.state.resizedWidth >= widthDesktopMin &&\r\n                        <FlexGridItem>\r\n                            <ButtonDownload\r\n                                disabled={!service_plan_list || (service_plan_list && !service_plan_list.length)}\r\n                                onDownload={downloadAccesses}\r\n                                limitWidth={widthDesktopMin}\r\n                                buttonText={this.formatMessage(m.download)}\r\n                                loading={uploadLoading}\r\n                            />\r\n                        </FlexGridItem>\r\n                    }\r\n                </FlexGrid>\r\n\r\n                <Spacer/>\r\n\r\n                <AccessesTable\r\n                    data={accessesList}\r\n                    spAuth={spAuth}\r\n                    isGoogleOtp={isGoogleOtp}\r\n                    loading={accessesLoading || searchLoading}\r\n                    filter={filter}\r\n                    servicePlanList={service_plan_list}\r\n                    {...{\r\n                        accountInfo,\r\n                        isTest,\r\n                        onShowGoogleOTPModal,\r\n                        onShowGetNumbersModal,\r\n                        onShowNewNumbersModal,\r\n                        onChangePage,\r\n                        onChangePerPage,\r\n                        page,\r\n                        count,\r\n                        per_page,\r\n                        savedPerPage,\r\n                        accountDialerState,\r\n                    }}\r\n                />\r\n\r\n                {this.state.resizedWidth < widthDesktopMin &&\r\n                    <StyledActionButtonWrapper>\r\n                        <ButtonDownload\r\n                            disabled={!service_plan_list || (service_plan_list && !service_plan_list.length)}\r\n                            onDownload={downloadAccesses}\r\n                            limitWidth={widthDesktopMin}\r\n                            buttonText={this.formatMessage(m.download)}\r\n                            loading={uploadLoading}\r\n                        />\r\n                    </StyledActionButtonWrapper>\r\n                }\r\n\r\n                <AccessGetNumbersModal\r\n                    show={showGetNumbersModal}\r\n                    onSend={getNumbers}\r\n                    onClose={() => onShowGetNumbersModal(false)}\r\n                    loading={loadingAllocation}\r\n                    allocationLimit={allocation_limit}\r\n                    formValue={this.state.formValue}\r\n                    onChangeFormValue={this.setFormValue}\r\n\r\n                    randomNumber={this.state.randomNumber}\r\n                    onChangeRandomNumber={this.setRandomNumber}\r\n\r\n                    setReasonModalProps={this.setReasonModalProps}\r\n                    selectedData={selectedData}\r\n                    trunks={trunkList}\r\n                />\r\n\r\n\r\n                <GoogleOTPAllocateModal\r\n                    show={showGoogleOTPModal}\r\n                    trunks={trunkList}\r\n                    formValue={googleOTPFormValue}\r\n                    onChangeFormValue={setGoogleOTPFormValue}\r\n                    loading={loadingGoogleOTPAllocation}\r\n                    allocationLimit={allocation_limit}\r\n                    onClose={onShowGoogleOTPModal}\r\n                    activeField={googleOTPFormValue.sde_key ? \"sde_key\" : \"template\"}\r\n                    setReasonModalProps={this.setReasonModalProps}\r\n                    {...{\r\n                        onAllocateGoogleOTP,\r\n                    }}\r\n                />\r\n\r\n                <ModalAllocationResult\r\n                    show={showNewNumbersModal}\r\n                    maxWidth={!trunk_number_transaction || trunk_number_transaction.method2 !== \"google_otp\" ? 760 : 850}\r\n                    account={account}\r\n                    trunkId={trunkId}\r\n                    csvContent={csvContent}\r\n                    methodName={'AccessList'}\r\n                    loading={loadingAllocation}\r\n                    downloadNumbers={downloadNumbers}\r\n                    downloadNumbersTxt={downloadNumbersTxt}\r\n                    uploadLoading={uploadLoadingSetting}\r\n                    onDownloadNumbers={onDownloadNumbers}\r\n                    allocatedNumbersCount={allocatedNumbersCount}\r\n                    notAllocatedNumbers={notAllocatedNumbers}\r\n                    trunkNumberTransaction={trunk_number_transaction}\r\n                    setUploadingLoading={setUploadingLoading}\r\n                    onClose={() => {\r\n                        this.clearAllocatedData();\r\n                        this.setState({notAllocatedNumbers: null});\r\n                        onShowNewNumbersModal(false);\r\n                    }}\r\n                />\r\n\r\n                <ModalResponseHandler\r\n                    show={showModalResponseHandler}\r\n                    onClose={this.setModalResponseHandler}\r\n                    onSuccess={this.onResponseHandlerSuccess}\r\n                    changeRandom={this.setRandomNumber}\r\n                    params={this.state.reasonModalProps}\r\n                />\r\n\r\n\r\n            </PanelLayout>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default injectIntl(Accesses);\r\n\r\n\r\nconst StyledActionButtonWrapper = styled.div`\r\n    padding-top: 15px;\r\n    text-align: center;\r\n    \r\n    @media (min-width: ${widthDesktopMin}px) {\r\n        text-align: right;\r\n    }\r\n`;","import {connect} from 'react-redux';\r\nimport {\r\n    downloadAccesses,\r\n    getAccessList,\r\n    setLoadingData,\r\n    allocateByAccess,\r\n    setAccessLoadingAllocatedNumbers\r\n} from '../../actions/client/accesses';\r\n\r\nimport {\r\n    downloadNumbers,\r\n    setTrunkNumberTransaction,\r\n    setUploadingLoading,\r\n    allocateGoogleOTPTrunkNumbers\r\n} from '../../actions/client/numbers'\r\n\r\nimport Accesses from './Accesses';\r\nimport {getTrunkListDialer} from '../../actions/client/price';\r\n\r\n\r\nconst mapState = ({client_accesses, auth, auth_dialer, client_numbers, references, client_price}) => ({\r\n    account: auth.authInfo,\r\n    accountDialerState: auth_dialer.dialerInfo,\r\n\r\n    accessesList: client_accesses.items,\r\n    count: client_accesses.count,\r\n    accessesLoading: client_accesses.loading,\r\n    loadingAllocation: client_accesses.loadingAllocatedNumbers,\r\n    page: client_accesses.page,\r\n    per_page: client_accesses.per_page,\r\n    trunkList: client_price.trunk_list,\r\n\r\n    service_plan_list: references.service_plan_list,\r\n\r\n    currency_list: references.currency_list,\r\n    uploadLoading: references.uploadLoadingDialer,\r\n\r\n    uploadLoadingSetting: client_numbers.uploadTrunkLoading,\r\n    loadingGoogleOTPAllocation: client_numbers.loadingAllocatedNumbers,\r\n    trunk_number_transaction: client_numbers.trunk_number_transaction,\r\n    \r\n    allocation_limit: {\r\n        ...references.client_allocation_limit, \r\n        ...auth.allocation_limit\r\n    }\r\n});\r\n\r\n\r\nexport default connect(mapState, {\r\n    getTrunkList: getTrunkListDialer,\r\n    setAccessLoadingAllocatedNumbers,\r\n\r\n    downloadNumbers,\r\n    setTrunkNumberTransaction,\r\n    setUploadingLoading,\r\n    allocateGoogleOTPTrunkNumbers,\r\n\r\n    getAccessList,\r\n    downloadAccesses,\r\n    allocateByAccess,\r\n    setLoadingData,\r\n})(Accesses);","import {CLI_DIALER as PREFIX} from '../../const';\r\nimport {CLI_LIST_DIALER_API, CLI_LIST_OTP_DIALER_API} from '../../const/apiMethods';\r\nimport {api} from '../../api/loginRoutes';\r\nimport {_setValue} from './defaults';\r\n\r\nconst setCLIList = _setValue('SET_ITEMS_' + PREFIX);\r\nconst setLoading = _setValue('SET_LOADING_' + PREFIX);\r\n\r\nexport const getCLIList = (filter = {}, isAuth = false) => (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    const request = isAuth ? CLI_LIST_OTP_DIALER_API : CLI_LIST_DIALER_API;\r\n    console.log(\"request\", request);\r\n    api(request, {filter, add: {}}).then((response) => {\r\n        if (response !== undefined) {\r\n            dispatch(setCLIList({\r\n                cli_lookup: response.cli_lookup || []\r\n            }));\r\n        }\r\n    });\r\n};\r\n\r\nexport const loadingData = (load) => (dispatch) => {\r\n    dispatch(setLoading(load));\r\n};\r\n","import React from 'react';\r\nimport {FormControl, Schema} from 'rsuite';\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport {debounce} from 'lodash';\r\nimport {CustomizableForm} from '../../components/client/Form/CustomizableForm';\r\nimport {useIntl} from \"react-intl\";\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport {FlexGrid, FlexGridItem} from '../../components/base/FlexGrid';\r\nimport m from \"../../definedMessages\";\r\nimport {BaseInputField} from \"../../components/base/BaseForm\";\r\n\r\nconst MIN_LENGTH = 6;\r\nconst MAX_LENGTH = 17;\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\nconst filtersModel = Schema.Model({\r\n        str: StringType(\"Please enter a valid string\")\r\n            .minLength(MIN_LENGTH, `The minimum of this field is ${MIN_LENGTH} digits`)\r\n            .maxLength(MAX_LENGTH, `The maximum of this field is ${MAX_LENGTH} digits`)\r\n            .isRequired( \"This field is required\" )\r\n    }\r\n);\r\n\r\nexport default FormHOC( ({loading, onChangeFilter, savedTableFilter, ...props}) => {\r\n    const {formatMessage} = useIntl();\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    const filtersModelInner = Schema.Model({\r\n            str: StringType(formatMessage(m.pleaseEnterValidString))\r\n                .minLength(MIN_LENGTH, formatMessage(m.minLengthDigits, {count: MIN_LENGTH}))\r\n                .maxLength(MAX_LENGTH, formatMessage(m.maxLengthDigits, {count: MAX_LENGTH}))\r\n                .isRequired( formatMessage(m.thisFieldIsRequired) )\r\n        }\r\n    );\r\n\r\n    const onSubmit = (data, checkedData) => {\r\n        const checker = Object.keys(checkedData).map(i => checkedData[i].hasError).every(value => value === false);\r\n\r\n        if (checker) {\r\n            onChangeFilter(data);\r\n        }\r\n        return false;\r\n    };\r\n\r\n    return (\r\n        <CustomizableForm\r\n            model={filtersModelInner}\r\n            onChange={debounce((data) => {\r\n                const checkedData = filtersModel.check(data);\r\n                onSubmit(data, checkedData);\r\n            }, 1000)}\r\n            formDefaultValue={savedTableFilter || {str: ''}}\r\n            fluid\r\n            readOnly={loading}\r\n        >\r\n            <FlexGrid align=\"top\">\r\n                <FlexGridItem width=\"320px\">\r\n                    <FormControl\r\n                        name=\"str\"\r\n                        accepter={BaseInputField}\r\n                        errorPlacement=\"topEnd\"\r\n                        placeholder={resizedWidth > 300 ? formatMessage(m.putYourCliMin, {count: 6}) : formatMessage(m.putYourCli)}\r\n                    />\r\n                </FlexGridItem>\r\n            </FlexGrid>\r\n        </CustomizableForm>\r\n    );\r\n}, filtersModel, 500);","import React, {useContext} from 'react';\r\nimport {Table} from 'rsuite';\r\nimport {renderColumn} from \"../../utils/helpers\";\r\nimport {DEFAULT_PER_PAGE_DIALER} from '../../const';\r\nimport {useIntl} from \"react-intl\";\r\nimport m from \"../../definedMessages\";\r\nimport BaseTable from \"../../components/base/BaseTable\";\r\nimport {RtlContext} from \"../../App\";\r\n\r\nexport default ({\r\n    data = [], \r\n    loading, \r\n    count,\r\n    spAuth = false,\r\n}) => {\r\n    const {formatMessage} = useIntl();\r\n    const rtl = useContext(RtlContext);\r\n\r\n    window.testData = data;\r\n\r\n    const columns = [\r\n        {\r\n            id: 'otp_service',\r\n            label: formatMessage(m.service),\r\n            value: ({a_service, a_number}) => (\r\n                a_service && a_number\r\n                    ? `${a_service} (${a_number})`\r\n                    : \"\"\r\n            ),\r\n            minWidth: 120,\r\n            flexGrow: 4,\r\n            align: 'center',\r\n            spAuth: true\r\n        },\r\n        {\r\n            id: 'otp_subdest',\r\n            label: formatMessage(m.subdestination),\r\n            value: ({b_subdestination_name, b_template}) => (\r\n                b_subdestination_name && b_template\r\n                    ? `${b_subdestination_name} (${b_template})`\r\n                    : \"\"\r\n            ),\r\n            minWidth: 120,\r\n            flexGrow: 4,\r\n            align: 'center',\r\n            spAuth: true\r\n        },\r\n        {\r\n            id: 'a_cntr_name',\r\n            label: formatMessage(m.origin),\r\n            dataKey: 'a_cntr_name',\r\n            minWidth: 120,\r\n            flexGrow: 4,\r\n            align: 'center',\r\n            spAuth: false\r\n        },\r\n        {\r\n            id: 'a_number',\r\n            label: formatMessage(m.cli),\r\n            dataKey: 'a_number',\r\n            minWidth: 120,\r\n            flexGrow: 2,\r\n            align: 'center',\r\n            spAuth: false\r\n        },\r\n        {\r\n            id: 'b_cntr_name',\r\n            label: formatMessage(m.destination),\r\n            dataKey: 'b_cntr_name',\r\n            minWidth: 120,\r\n            flexGrow: 4,\r\n            align: 'center',\r\n            spAuth: false\r\n        },\r\n        {\r\n            id: 'b_number',\r\n            label: formatMessage(m.phone),\r\n            dataKey: 'b_number',\r\n            minWidth: 120,\r\n            flexGrow: 2,\r\n            align: 'center',\r\n            spAuth: false\r\n        },\r\n        {\r\n            id: 'date',\r\n            label: formatMessage(m.date),\r\n            dataKey: 'date',\r\n            minWidth: 120,\r\n            flexGrow: 2,\r\n            align: 'center',\r\n            spAuth: false\r\n        }\r\n    ].filter(value => value.spAuth === undefined || value.spAuth === spAuth);;\r\n\r\n    const renderedColumns = columns.map(renderColumn);\r\n    // reverse columns for RTL. Haven't found good solutions for CSS yet\r\n    if (rtl) renderedColumns.reverse();\r\n\r\n    const clearData = (dataList) => {\r\n        return dataList.map(number => {\r\n\r\n            const newNumber = {...number};\r\n\r\n            Object.keys(newNumber).forEach(key => {\r\n                if (newNumber[key] === null)\r\n                    newNumber[key] = '—';\r\n            });\r\n\r\n            return newNumber;\r\n        });\r\n    };\r\n\r\n    const clearedData = clearData(data);\r\n\r\n    const calculatedTableHeight = window.innerHeight - 365;\r\n    const calculatedTableRows = Math.round(calculatedTableHeight / 35);\r\n    const defaultTableRowsHeight = DEFAULT_PER_PAGE_DIALER * 35 + 35;\r\n\r\n    return (\r\n        <BaseTable\r\n            height={calculatedTableHeight < defaultTableRowsHeight ? defaultTableRowsHeight : calculatedTableHeight}\r\n            autoHeight={data.length === calculatedTableRows}\r\n            data={clearedData}\r\n            loading={loading}\r\n            rowHeight={35}\r\n            headerHeight={35}\r\n            style={{overflowY: 'hidden'}}\r\n\r\n        >\r\n            {renderedColumns}\r\n        </BaseTable>\r\n    );\r\n}","import React from 'react';\r\nimport PageHeader from '../../components/base/PageHeader';\r\nimport CLIFilters from './CLIFilters';\r\nimport CLITable from './CLITable';\r\nimport {LOCAL_STORAGE_CLI_FILTERS_DIALER} from '../../const';\r\nimport {injectIntl} from \"react-intl\";\r\nimport {Spacer} from '../../components/base/Spacer';\r\nimport {Toggle} from 'rsuite';\r\nimport m from \"../../definedMessages\";\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\nimport {BaseToggle} from \"../../components/base/BaseToggle\";\r\n\r\nclass CLI extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        const {account} = props.account.session || {};\r\n        const savedTableFilter = JSON.parse(localStorage.getItem(LOCAL_STORAGE_CLI_FILTERS_DIALER));\r\n        \r\n        this.isTest = account.hasOwnProperty('is_test') ? account.is_test : false;\r\n        this.formatMessage = props.intl.formatMessage.bind(props.intl);\r\n\r\n        this.state = {\r\n            filter: {\r\n                ...(savedTableFilter || {})\r\n            },\r\n            isAuth: false,\r\n            searchLoading: false,\r\n            resizedWidth: window.innerWidth\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        const {filter, isAuth} = this.state;\r\n        const {getCLIList} = this.props;\r\n\r\n        if (filter && filter.str) \r\n            getCLIList(filter, isAuth);\r\n\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const {filter, isAuth} = this.state;\r\n        const {getCLIList} = this.props;\r\n        if (isAuth !== prevState.isAuth && filter.str) {\r\n            getCLIList(filter, isAuth);\r\n        }\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize);\r\n    }\r\n\r\n\r\n    onChangeFilters = (filtersObj) => {\r\n        const {isAuth} = this.state;\r\n        const {getCLIList} = this.props;\r\n\r\n        localStorage.setItem(LOCAL_STORAGE_CLI_FILTERS_DIALER, JSON.stringify(filtersObj));\r\n        this.setState({\r\n            filter: {...filtersObj}\r\n        });\r\n\r\n        getCLIList(filtersObj, isAuth);\r\n    };\r\n\r\n\r\n    changeTab = (value) => {\r\n        this.setState({isAuth: value});\r\n    }\r\n\r\n\r\n    handleResize = () => {\r\n        this.setState({resizedWidth: window.innerWidth})\r\n    };\r\n\r\n\r\n    render() {\r\n        const {searchLoading, filter, isAuth} = this.state;\r\n        const {CLIList, CLILoading, count} = this.props;\r\n\r\n        const onChangeFilters = this.onChangeFilters;\r\n\r\n        return (\r\n            <PanelLayout>\r\n                <PageHeader title={this.formatMessage(m.cliLookup)}/>\r\n                \r\n                <BaseToggle\r\n                    size=\"lg\"\r\n                    unCheckedChildren={this.formatMessage(m.dialerTraffic)}\r\n                    checkedChildren=\"OTP\"\r\n                    defaultChecked={isAuth}\r\n                    onChange={value => this.changeTab(value)}\r\n                />\r\n                \r\n                <Spacer size={30}/>\r\n                \r\n                <CLIFilters\r\n                    onChangeFilter={onChangeFilters}\r\n                    loading={CLILoading || searchLoading}\r\n                    savedTableFilter={filter}\r\n                />\r\n                \r\n                <Spacer/>\r\n                \r\n                <CLITable\r\n                    spAuth={isAuth}\r\n                    data={CLIList} \r\n                    loading={CLILoading || searchLoading} \r\n                    count={count}\r\n                />\r\n            </PanelLayout>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default injectIntl(CLI)","import {connect} from 'react-redux';\r\n\r\nimport {getCLIList, loadingData} from '../../actions/client/cli';\r\n\r\nimport CLI from './CLI';\r\n\r\nconst mapState = ({auth, client_cli}) => ({\r\n    account: auth.authInfo,\r\n    \r\n    CLIList: client_cli.items,\r\n    count: client_cli.count,\r\n    CLILoading: client_cli.loading,\r\n    page: client_cli.page,\r\n    per_page: client_cli.per_page,\r\n});\r\n\r\nexport default connect(mapState, {\r\n    getCLIList,\r\n    loadingData\r\n})(CLI);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport AudioPlayer from 'react-h5-audio-player';\r\nimport {Message} from 'rsuite';\r\nimport './audio-player-style.css';\r\nimport {useIntl} from \"react-intl\";\r\nimport {compose} from \"redux\";\r\nimport m from \"../../definedMessages\";\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\n\r\n\r\nconst IVR = (props) => {\r\n    const {formatMessage} = useIntl();\r\n    return (\r\n        <PanelLayout>\r\n            <Message\r\n                style={{\r\n                    marginTop: '40px',\r\n                    borderRadius: '5px',\r\n                    background: '#85d9ef'\r\n                }}\r\n                showIcon\r\n                type=\"info\"\r\n                title={formatMessage(m.listenToIvr)}\r\n            />\r\n            <AudioPlayer\r\n                style={{\r\n                    marginTop: '20px'\r\n                }}\r\n                src={`/${process.env.PUBLIC_URL}Complete_once_Premiumy_IVR.mp3`}\r\n                autoPlay={false}\r\n            />\r\n        </PanelLayout>\r\n    );\r\n};\r\n\r\nexport default compose(\r\n    connect(),\r\n)(IVR);","import {\r\n    API_PAGE_DIALER as PREFIX,\r\n    LOCAL_STORAGE_API_KEY_DIALER,\r\n} from '../../const';\r\nimport {\r\n    API_PAGE_LIST_DIALER_API,\r\n    API_GENERATE_NEW_DIALER_API\r\n} from \"../../const/apiMethods\";\r\nimport {api} from '../../api/loginRoutes';\r\nimport {_setValue} from './defaults';\r\nimport {Alert} from 'rsuite';\r\n\r\n\r\nconst setKeyList = _setValue('SET_ITEMS_' + PREFIX);\r\nconst setGeneratedApiKey = _setValue(API_GENERATE_NEW_DIALER_API);\r\nconst setKeyListLoading = _setValue('SET_LOADING_' + PREFIX);\r\n\r\nexport const getKeyList = () => (dispatch) => {\r\n    dispatch(setKeyListLoading(true));\r\n\r\n    api(API_PAGE_LIST_DIALER_API, ).then((response) => {\r\n        if (response !== undefined) {\r\n            dispatch(setKeyList({\r\n                keyList: response.account_apikey_list || []\r\n            }));\r\n        }\r\n    });\r\n};\r\n\r\nexport const generateNewApiKey = (api_key) => (dispatch) => {\r\n    api(API_GENERATE_NEW_DIALER_API, {target: {api_key}}).then((response) => {\r\n        if (response !== undefined) {\r\n            const res_api_key = response.account_apikey.api_key;\r\n\r\n            api(API_PAGE_LIST_DIALER_API).then((response) => {\r\n                if (response !== undefined) {\r\n                    dispatch(setGeneratedApiKey({\r\n                        apiKey: res_api_key\r\n                    }));\r\n                    dispatch(setKeyList({\r\n                        keyList: response.account_apikey_list || []\r\n                    }));\r\n                }\r\n            });\r\n            localStorage.setItem(LOCAL_STORAGE_API_KEY_DIALER, res_api_key);\r\n            Alert.success(`New api key ${res_api_key}`);\r\n        }\r\n    });\r\n};\r\n","import React from 'react';\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport {Tooltip, Icon, InputGroup, Input, Whisper} from 'rsuite';\r\nimport styled from 'styled-components';\r\n\r\nimport {SCREEN_MEDIA} from '../../const';\r\nconst {md} = SCREEN_MEDIA;\r\n\r\nexport default FormHOC(({apiKey}) => {\r\n\r\n    return (\r\n        <CurrentApiKey>\r\n            <InputGroup>\r\n                <InputGroup.Addon className=\"currentApiHeader__header\">Current API key:</InputGroup.Addon>\r\n                <Input className=\"currentApiHeader__value\" value={apiKey}/>\r\n                <InputGroup.Addon>\r\n                    <Whisper \r\n                        placement=\"bottom\" \r\n                        trigger=\"click\"\r\n                        speaker={<Tooltip>This api key can be changed at \"Keys page\". That will be pasted to all api links</Tooltip>}\r\n                    >\r\n                        <Icon icon=\"info\"/>\r\n                    </Whisper>\r\n                </InputGroup.Addon>\r\n            </InputGroup>\r\n        </CurrentApiKey>\r\n    )\r\n});\r\n\r\n\r\nconst CurrentApiKey = styled.div`\r\n    margin-top: 20px; \r\n\r\n    @media (min-width: ${md.min}px) {\r\n        display: inline-block;\r\n        margin-left: 40px;\r\n        margin-top: 0;\r\n        position: absolute;\r\n        top: -5px;\r\n    }\r\n    \r\n    .currentApiHeader__header {\r\n        font-size: 13px;\r\n        user-select: none;\r\n    }\r\n    .currentApiHeader__value {\r\n        margin-right: 30px;\r\n    }\r\n`;","import React, {useRef, useState} from 'react';\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport ReactJson from 'react-json-view';\r\nimport {List, Alert, FlexboxGrid, Message, Icon, Divider, Affix} from 'rsuite';\r\nimport {NavHashLink as NavLink} from 'react-router-hash-link';\r\nimport ApiCurrentApiKey from './ApiCurrentApiKey';\r\nimport styled from 'styled-components';\r\n\r\nimport {SCREEN_MEDIA} from '../../const';\r\n\r\nconst {md} = SCREEN_MEDIA;\r\n\r\nexport default FormHOC(({pickedApiKey, newItem, methods = []}) => {\r\n    const refTextAreaObj = {};\r\n\r\n    const api_key = pickedApiKey || newItem || '{YOUR_API_KEY}';\r\n\r\n    const [topAnchorVisible, onChangeFixedTopAnchor] = useState(false);\r\n    return (\r\n        <>\r\n            <div className=\"top-mark\" id=\"top\"/>\r\n            <span className=\"api_documentation\">API Documentation</span>\r\n            <ApiCurrentApiKey apiKey={api_key}/>\r\n            <Affix\r\n                onChange={(fixed) => {\r\n                    onChangeFixedTopAnchor(fixed)\r\n                }}\r\n                className=\"api_documentation-anchor\"\r\n            >\r\n                {topAnchorVisible && <NavLink className=\"api_documentation_anchor-link\" to=\"#top\">To the top <Icon icon=\"sequence-up\"/></NavLink>}\r\n            </Affix>\r\n\r\n            <BriefList bordered>\r\n                {methods.map(method => {\r\n                    return (\r\n                        <List.Item className=\"briefList__item\">\r\n                            <NavLink\r\n                                className=\"briefList__method\"\r\n                                to={`#${method.method_api}`}\r\n                                scroll={el => el.scrollIntoView({\r\n                                    behaviour: 'smooth',\r\n                                    block: 'start',\r\n                                    inline: 'center'\r\n                                })}\r\n                            >\r\n                                {method.method_api}\r\n                            </NavLink>\r\n                            <Divider vertical className=\"briefList__divider\"/>\r\n                            <p className=\"briefList__desc\">{method.description}</p>\r\n                        </List.Item>\r\n                    )\r\n                })}\r\n            </BriefList>\r\n            \r\n            <List className=\"api_documentation_list\">\r\n                {\r\n                    methods.map(method => {\r\n                        const baseURL = process.env.REACT_APP_API_URL;\r\n                        console.log('baseURL', baseURL)\r\n                        const api_link = `${baseURL}${method.csv ? '/csv' : ''}`;\r\n                        const copy_link = `${api_link}?method=${method.method_api}&api_key=${api_key}`;\r\n\r\n                        refTextAreaObj[copy_link] = useRef(null);\r\n                        const group = method['group'];\r\n\r\n                        return <List.Item className=\"api_documentation_list-item\" id={method.method_api}>\r\n                            \r\n                            <FlexboxGrid justify=\"center\">\r\n                                <FlexboxGrid.Item>\r\n                                    <span className=\"api_documentation_list-group\" id={`${method.id ? method.id : ''}`}>{group}</span>\r\n                                </FlexboxGrid.Item>\r\n                            </FlexboxGrid>\r\n\r\n                            <FlexboxGrid className=\"api_documentation_list-method_http\">\r\n                                <FlexboxGrid.Item>\r\n                                    <span>{method.method_http}</span>\r\n                                </FlexboxGrid.Item>\r\n                            </FlexboxGrid>\r\n\r\n                            <FlexboxGrid className=\"api_documentation_list-method_api\">\r\n                                <FlexboxGrid.Item>\r\n                                    <span className=\"api_documentation_list-method_api_header\">METHOD:</span><span\r\n                                    className=\"api_documentation_list-method_api_src\">{method.method_api} {method.csv ? 'CSV' : ''}</span>\r\n                                </FlexboxGrid.Item>\r\n                            </FlexboxGrid>\r\n                            \r\n                            <FlexboxGrid className=\"api_documentation_list-method_api_link\">\r\n                                <FlexboxGrid.Item>\r\n                                    <Message\r\n                                        className=\"api_documentation_list-method_api_link_wrapper\"\r\n                                        appereace=\"ghost\"\r\n                                        title={\r\n                                            <>\r\n                                                <span className=\"api_documentation_list-method_api_link_wrapper_header\">\r\n                                                    API Link\r\n                                                </span>\r\n                                                <Icon\r\n                                                    className=\"api_documentation_list-method_api_link_wrapper_icon\"\r\n                                                    onClick={() => {\r\n                                                        refTextAreaObj[copy_link].current.select();\r\n                                                        document.execCommand('copy');\r\n                                                        Alert.info('URL has been copied');\r\n                                                    }}\r\n                                                    icon=\"clone\"\r\n                                                />\r\n                                            </>\r\n                                        }\r\n                                        description={<div>{api_link}?method=<span style={{\r\n                                            fontStyle: 'oblique',\r\n                                            fontWeight: 600\r\n                                        }}>{method.method_api}</span>&api_key={api_key}</div>}\r\n                                    />\r\n                                    <textarea\r\n                                        ref={refTextAreaObj[copy_link]}\r\n                                        value={copy_link}\r\n                                        style={{\r\n                                            width: '0',\r\n                                            height: '0',\r\n                                            resize: 'none',\r\n                                            border: '0',\r\n                                            position: 'absolute',\r\n                                            opacity: 0\r\n                                        }}\r\n                                        readOnly\r\n                                    />\r\n                                </FlexboxGrid.Item>\r\n                            </FlexboxGrid>\r\n                            <span className=\"api_documentation_list-description_header\">Description:</span>\r\n                            <FlexboxGrid className=\"api_documentation_list-description\">\r\n                                <FlexboxGrid.Item>\r\n                                    <span>{method.description}</span>\r\n                                </FlexboxGrid.Item>\r\n                            </FlexboxGrid>\r\n                            <span className=\"api_documentation_list-parameters_header\">Parameters:</span>\r\n                            <FlexboxGrid className=\"api_documentation_list-parameters\">\r\n                                <FlexboxGrid.Item className=\"api_documentation_list-parameters_item\">\r\n                                    {\r\n                                        method.params && Array.isArray(method.params)\r\n                                            ? <List className=\"api_documentation_list-parameters_list\" bordered>\r\n                                                {\r\n                                                    method.params.map(param => {\r\n                                                        const key = Object.keys(param).length !== 0 ? Object.keys(param)[0] : null;\r\n                                                        const paramProps = param && key && param.hasOwnProperty(key) ? param[key] : {};\r\n                                                        const cloneParams = Object.assign({}, paramProps);\r\n                                                        const description = paramProps['description'];\r\n                                                        const required = (method.required ? method.required.includes(key) : false).toString();\r\n                                                        delete cloneParams.description;\r\n\r\n                                                        return <List.Item\r\n                                                            className=\"api_documentation_list-parameters_list_item\">\r\n                                                            <FlexboxGrid align=\"middle\" className=\"api_documentation_list-parameters_list_item_wrapper\">\r\n                                                                <FlexboxGrid.Item\r\n                                                                    className=\"api_documentation_list-parameters_list_item_wrapper_item header\">Name:</FlexboxGrid.Item>\r\n                                                                <FlexboxGrid.Item\r\n                                                                    className=\"api_documentation_list-parameters_list_item_wrapper_item\">{key}</FlexboxGrid.Item>\r\n                                                            </FlexboxGrid>\r\n                                                            <FlexboxGrid align=\"middle\" className=\"api_documentation_list-parameters_list_item_wrapper\">\r\n                                                                <FlexboxGrid.Item\r\n                                                                    className=\"api_documentation_list-parameters_list_item_wrapper_item header\">Description:</FlexboxGrid.Item>\r\n                                                                <FlexboxGrid.Item\r\n                                                                    className=\"api_documentation_list-parameters_list_item_wrapper_item\">{description}</FlexboxGrid.Item>\r\n                                                            </FlexboxGrid>\r\n                                                            <FlexboxGrid align=\"middle\" className=\"api_documentation_list-parameters_list_item_wrapper\">\r\n                                                                <FlexboxGrid.Item\r\n                                                                    className=\"api_documentation_list-parameters_list_item_wrapper_item header\">Type:</FlexboxGrid.Item>\r\n                                                                <FlexboxGrid.Item\r\n                                                                    className=\"api_documentation_list-parameters_list_item_wrapper_item\">\r\n                                                                    {!cloneParams.type ? 'Object' : cloneParams.type}\r\n                                                                </FlexboxGrid.Item>\r\n                                                            </FlexboxGrid>\r\n                                                            <FlexboxGrid align=\"middle\" className=\"api_documentation_list-parameters_list_item_wrapper\">\r\n                                                                <FlexboxGrid.Item\r\n                                                                    className=\"api_documentation_list-parameters_list_item_wrapper_item header\">Required:</FlexboxGrid.Item>\r\n                                                                <FlexboxGrid.Item\r\n                                                                    className=\"api_documentation_list-parameters_list_item_wrapper_item\">{required}</FlexboxGrid.Item>\r\n                                                            </FlexboxGrid>\r\n                                                            <div className=\"api_documentation_list-parameters_list_item_wrapper\">\r\n                                                                <div className=\"api_documentation_list-parameters_list_item_wrapper_item header\">Structure:\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <ReactJson\r\n                                                                src={cloneParams}\r\n                                                                name={key}\r\n                                                                displayDataTypes={false}\r\n                                                                displayObjectSize={false}\r\n                                                            />\r\n\r\n                                                        </List.Item>;\r\n                                                    })\r\n                                                }\r\n                                            </List>\r\n                                            : <span style={{color: 'var(--cancel-bg)'}}>\r\n                                                {method.params ? method.params : 'Additional parameters are not available'}\r\n                                            </span>\r\n                                    }\r\n                                </FlexboxGrid.Item>\r\n                            </FlexboxGrid>\r\n                        </List.Item>;\r\n                    })\r\n                }\r\n            </List>\r\n        </>\r\n    );\r\n});\r\n\r\n\r\nconst BriefList = styled(List)`\r\n    margin-top: 20px;\r\n\r\n    & .briefList__item {\r\n        padding-top: 7px;\r\n        padding-bottom: 7px;\r\n\r\n        @media (min-width: ${md.min}px) {\r\n            padding-top: 0;\r\n            padding-bottom: 0;\r\n        }\r\n    }\r\n    \r\n    .rs-list-item-content {\r\n        min-height: 40px;\r\n        \r\n        @media (min-width: ${md.min}px) {\r\n            align-items: center;\r\n            display: flex;\r\n        }\r\n    }\r\n\r\n    .briefList__method {\r\n        color: var(--activate-bg) !important;\r\n        display: block;\r\n        flex-grow: 0;\r\n        flex-shrink: 0;\r\n        padding-bottom: 4px;\r\n        padding-top: 4px;\r\n        word-break: break-word;\r\n\r\n        @media (min-width: ${md.min}px) {\r\n            min-width: 300px;\r\n        }\r\n    }\r\n\r\n    .briefList__desc {\r\n        padding-bottom: 4px;\r\n        padding-top: 4px;\r\n        padding-left: 20px;\r\n\r\n        .rtl & {\r\n            padding-left: 0;\r\n            padding-right: 20px;\r\n        }\r\n    }\r\n\r\n    .briefList__divider {\r\n        display: none;\r\n        align-self: stretch;\r\n        flex-shrink: 0;\r\n        height: auto;\r\n\r\n        @media (min-width: ${md.min}px) {\r\n            display: block;\r\n        }\r\n    }\r\n`;","import React, {useEffect, useRef, useState} from 'react';\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport {Tooltip, List, FlexboxGrid, Button, Icon, Whisper, Message} from 'rsuite';\r\nimport Modal from '../../components/Modal';\r\nimport {useWindowWidth} from '../../hooks';\r\nimport {CustomModalClient} from \"../../components/base\";\r\n\r\n\r\nexport default FormHOC(({keyList, pickApiKey, pickedApiKey, generateNewApiKey, newItem, maxWidth = 600}) => {\r\n    const activeKeyList = keyList.filter(key => key.active);\r\n    const refTextAreaDict = {};\r\n    const [generateModal, onGenerateModal] = useState(null);\r\n    const [activeKey, onChangeActiveKey] = useState(pickedApiKey || newItem);\r\n\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    useEffect(() => {\r\n        const updatedActiveKeyList = keyList.filter(key => key.active).map(key => key.api_key);\r\n\r\n        if (newItem && pickedApiKey) {\r\n            if (newItem && newItem !== activeKey && !updatedActiveKeyList.includes(newItem)) {\r\n                onChangeActiveKey(newItem);\r\n                pickApiKey(newItem);\r\n            }\r\n            else if (pickedApiKey !== activeKey && updatedActiveKeyList.includes(activeKey)) {\r\n                onChangeActiveKey(pickedApiKey);\r\n            }\r\n        }\r\n    }, [newItem, pickedApiKey, keyList]);\r\n\r\n    return (\r\n        <>\r\n            <span className=\"api_documentation\">API Keys\r\n                <Whisper placement=\"bottom\" trigger=\"hover\" speaker={<Tooltip>Click on the api key from list to make it picked for documentation</Tooltip>}>\r\n                    <Icon className=\"api_documentation-tooltip\" icon=\"info\"/>\r\n                </Whisper>\r\n            </span>\r\n            <FlexboxGrid className=\"api_keys\">\r\n                {activeKeyList\r\n                    ? <>\r\n                        <FlexboxGrid.Item>\r\n                            <List bordered className=\"api_keys-list\">\r\n                                {\r\n                                    activeKeyList.map(key => {\r\n                                        return <List.Item\r\n                                            className={`api_keys-list_item ${activeKey === key.api_key ? 'active' : ''}`}\r\n                                            onClick={() =>{\r\n                                                pickApiKey(key.api_key);\r\n                                            }}>\r\n                                            <span>{key.api_key}</span>\r\n                                            <Icon\r\n                                                icon={activeKey === key.api_key ? 'check-square' : 'square-o'}\r\n                                                className={`api_keys-list_item_icon ${activeKey === key.api_key ? 'active' : ''}`}\r\n                                            />\r\n                                        </List.Item>\r\n                                    })\r\n                                }\r\n                            </List>\r\n                        </FlexboxGrid.Item>\r\n                        <FlexboxGrid.Item>\r\n                            {\r\n                                activeKeyList.map(key => {\r\n                                    refTextAreaDict[key.key] = useRef(null);\r\n                                    return <div className=\"api_keys-panel\">\r\n                                        <Button\r\n                                            className=\"api_keys-panel_button_copy\"\r\n                                            appearance=\"primary\"\r\n                                            onClick={() => {\r\n                                                refTextAreaDict[key.key] && refTextAreaDict[key.key].current.select();\r\n                                                document.execCommand('copy');\r\n                                            }}\r\n                                        >\r\n                                            Copy\r\n                                            <Icon\r\n                                                inverse\r\n                                                className=\"api_keys-panel_button_icon\"\r\n                                                icon=\"copy-o\"\r\n                                            />\r\n                                        </Button>\r\n                                        <textarea\r\n                                            ref={refTextAreaDict[key.key]}\r\n                                            value={key.api_key}\r\n                                            style={{width: '0', height: '0', resize: 'none', border: '0', visibility: false}}\r\n                                        />\r\n                                        <Button\r\n                                            className=\"api_keys-panel_button_generate\"\r\n                                            appearance=\"primary\"\r\n                                            onClick={() => {\r\n                                                onGenerateModal(key.api_key);\r\n                                            }}\r\n                                        >\r\n                                            Generate new\r\n                                            <Icon\r\n                                                reverse\r\n                                                className=\"api_keys-panel_button_icon\"\r\n                                                icon=\"exclamation-triangle\"\r\n                                            />\r\n                                        </Button>\r\n                                        {generateModal &&\r\n                                            <CustomModalClient\r\n                                                show={generateModal}\r\n                                                title=\"Warning\"\r\n                                                showFooter={true}\r\n                                                width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n                                                onClose={() => onGenerateModal(null)}\r\n                                                onConfirm={() => {\r\n                                                    generateNewApiKey(generateModal);\r\n                                                    onGenerateModal(null);\r\n                                                }}\r\n                                            >\r\n                                                This api key will be changed. Requests with old api key will not work\r\n                                            </CustomModalClient>\r\n                                        }\r\n                                    </div>\r\n                                })\r\n                            }\r\n                        </FlexboxGrid.Item>\r\n                    </> :\r\n                    <FlexboxGrid.Item>\r\n                        <Message\r\n                            description=\"You don't have any api key\"\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                }\r\n            </FlexboxGrid>\r\n        </>\r\n    )\r\n});","const pythonExample = {\r\n    options: {\r\n        code: `\r\n    import requests\r\n    import json\r\n    \r\n    ADDRESS = '{your_url}'\r\n    API_KEY = '{your_api_key}'\r\n    URL = \"{address}?api_key={api_key}\".format(address=ADDRESS, api_key=API_KEY)\r\n    CSV_URL = \"{address}/csv?api_key={api_key}\".format(address=ADDRESS, api_key=API_KEY)\r\n\r\n    print(URL)\r\n    print(CSV_URL)\r\n        `,\r\n        result: `\r\n            {your_url}?api_key={your_api_key}\\n\r\n            {your_url}/csv?api_key={your_api_key}\\n\r\n        `\r\n    },\r\n    'live_call:get_list_by_account_user': {\r\n        code: `\r\n    #  Method - live_call:get_list_by_account_user\r\n    response = requests.post(\r\n        url=URL,\r\n        json={\r\n            'jsonrpc': '2.0',\r\n                'method': 'live_call:get_list_by_account_user',\r\n                'params': {},\r\n                'id': None\r\n            })\r\n        \r\n    print(json.dumps(response))\r\n        `,\r\n        result: `\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"result\": {\r\n            \"live_call_list\": []\r\n        },\r\n        \"id\": null,\r\n        \"hash\": \"5H4QAG1V\"\r\n    }\r\n        `\r\n    },\r\n    'cdr_full:get_list': {\r\n        code: `\r\n    #  Method - cdr_full:get_list\r\n    response = requests.post(\r\n        url=URL,\r\n        json={\r\n            'jsonrpc': '2.0',\r\n            'method': 'cdr_full:get_list',\r\n            'params': {\r\n                'page': 1,\r\n                'per_page': 1\r\n            },\r\n            'id': None\r\n        })\r\n    \r\n    print(json.dumps(response.json()))\r\n        `,\r\n        result: `\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"result\": {\r\n        \"cdr_full_list\": [\r\n            {\r\n                \"ip\": \"207.180.220.127\",\r\n                \"port\": 5060,\r\n                \"range\": \"Eritrea - Mobile 2917671XXX\",\r\n                \"a_number\": \"966570925692\",\r\n                \"b_number\": \"2917671063\",\r\n                \"datetime\": \"2020-03-26 07:41:15.568\",\r\n                \"duration\": \"00:00:02\",\r\n                \"a_sde_key\": 3982,\r\n                \"b_sde_key\": 2119,\r\n                \"sip_cause\": 16,\r\n                \"cost_dialer\": 0.00333,\r\n                \"rate_dialer\": 0.1,\r\n                \"tprefix_dialer\": \"\",\r\n                \"a_subdestination_name\": \"Saudi Arabia - Mobile - Virgin\",\r\n                \"b_subdestination_name\": \"Eritrea - Mobile\"\r\n            }\r\n        ],\r\n            \"cdr_full_count\": 608637\r\n    },\r\n        \"id\": null,\r\n        \"hash\": \"XKAVAHOU\"\r\n    }\r\n        `\r\n    },\r\n    'cdr_full:group_get_list': {\r\n        code: `\r\n    #  Method - cdr_full:group_get_list\r\n    response = requests.post(\r\n        url=URL,\r\n        json={\r\n            'jsonrpc': '2.0',\r\n            'method': 'cdr_full:group_get_list',\r\n            'params': {\r\n                'page': 1,\r\n                'per_page': 10\r\n            },\r\n            'id': None\r\n        })\r\n    \r\n    print(json.dumps(response.json()))\r\n        `,\r\n        result: `\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"result\": {\r\n        \"group_list\": [\r\n            {\r\n                \"group\": null,\r\n                \"range\": null,\r\n                \"b_number\": null,\r\n                \"sum_duration\": 629287.48,\r\n                \"sum_cost_dialer\": 18554.0797,\r\n                \"count_cost_dialer\": 573460\r\n            }\r\n        ],\r\n            \"group_count\": 1\r\n    },\r\n        \"id\": null,\r\n        \"hash\": \"95FKJUTT\"\r\n    }\r\n        `\r\n    },\r\n    'allocation:price_range': {\r\n        code: `\r\n    #  Method - allocation:price_range\r\n    response = requests.post(\r\n        url=URL,\r\n        json={\r\n            'jsonrpc': '2.0',\r\n            'method': 'allocation:price_range',\r\n            'params': {\r\n                'target': {\r\n                    'trunk_id': 'PyxfnLdLSn2FXXXXXXXXX'\r\n                },\r\n                'pr_key': 208086,\r\n                'numbers': 1\r\n            },\r\n            'id': None\r\n        })\r\n    \r\n    print(json.dumps(response.json()))\r\n        `,\r\n        result: `\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"result\": {\r\n        \"price_range_numbers\": 5,\r\n            \"price_range_number_list\": [\r\n            {\r\n                \"rate\": 0.1,\r\n                \"number\": \"79402214012\",\r\n                \"status\": 0,\r\n                \"prn_key\": 14413116,\r\n                \"trn_name\": \"Abkhazia - Mobile 79402214XXX\",\r\n                \"trunk_name\": \"Hi Class (ATX)/STD_NEW 0.10000 USD\",\r\n                \"account_name\": \"Hi Class (ATX)\",\r\n                \"currency_name\": \"USD\",\r\n                \"numbers_count\": 1\r\n            }\r\n        ]\r\n    },\r\n        \"id\": null,\r\n        \"hash\": \"0LX9H8D9\"\r\n    }\r\n        `\r\n    },\r\n    'allocation:number_list_by_account_user': {\r\n        code: `\r\n    #  Method - allocation:number_list_by_account_user\r\n    response = requests.post(\r\n        url=URL,\r\n        json={\r\n            'jsonrpc': '2.0',\r\n            'method': 'allocation:number_list_by_account_user',\r\n            'params': {\r\n                'target': {\r\n                    'trunk_id': '6VeukrKKRgXXXXXXXXX'\r\n                },\r\n                'number_list': [\r\n                    '3978563432'\r\n                ]\r\n            },\r\n            'id': None\r\n        })\r\n    \r\n    print(json.dumps(response.json()))\r\n        `,\r\n        result: `\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"result\": {\r\n        \"price_range_numbers\": 1,\r\n            \"price_range_number_list\": [\r\n            {\r\n                \"rate\": 0.1,\r\n                \"number\": \"79402214012\",\r\n                \"status\": 0,\r\n                \"prn_key\": 14413116,\r\n                \"trn_name\": \"Abkhazia - Mobile 79402214XXX\",\r\n                \"trunk_name\": \"Hi Class (ATX)/STD_NEW 0.10000 USD\",\r\n                \"account_name\": \"Hi Class (ATX)\",\r\n                \"currency_name\": \"USD\",\r\n                \"numbers_count\": 1\r\n            }\r\n        ]\r\n    },\r\n        \"id\": null,\r\n        \"hash\": \"0LX9H8D9\"\r\n    }\r\n        `\r\n    },\r\n    'allocation:template_by_account_user': {\r\n        code: `\r\n    #  Method - allocation:template_by_account_user\r\n    response = requests.post(\r\n        url=URL,\r\n        json={\r\n            'jsonrpc': '2.0',\r\n            'method': 'allocation:template_by_account_user',\r\n            'params': {\r\n                'target': {\r\n                    'trunk_id': 'PyxfnLdLSn2XXXXXXXXX'\r\n                },\r\n                'template': '39453453X',\r\n                'numbers': 1\r\n            },\r\n            'id': None\r\n        })\r\n    \r\n    print(json.dumps(response.json()))\r\n        `,\r\n        result: `\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"result\": {\r\n        \"price_range_numbers\": 1,\r\n            \"price_range_number_list\": [\r\n            {\r\n                \"rate\": 0.001,\r\n                \"number\": \"394534259\",\r\n                \"status\": 0,\r\n                \"prn_key\": 18024995,\r\n                \"trn_name\": \"Italy - Fixed 394534XXX\",\r\n                \"trunk_name\": \"Hi Class (ATX)/STD_NEW 0.00100 USD\",\r\n                \"account_name\": \"Hi Class (ATX)\",\r\n                \"currency_name\": \"USD\",\r\n                \"numbers_count\": 1\r\n            }\r\n        ]\r\n    },\r\n        \"id\": null,\r\n        \"hash\": \"NOEKBDZU\"\r\n    }\r\n        `\r\n    },\r\n    'allocation:subdestination_by_account_user': {\r\n        code: `\r\n    #  Method - allocation:subdestination_by_account_user\r\n    response = requests.post(\r\n        url=URL,\r\n        json={\r\n            'jsonrpc': '2.0',\r\n            'method': 'allocation:subdestination_by_account_user',\r\n            'params': {\r\n                'target': {\r\n                    'trunk_id': 'pZlHKPtgRj2XXXXXXXX'\r\n                },\r\n                'sde_key': 2119,\r\n                'numbers': 1,\r\n            },\r\n            'id': None\r\n        })\r\n    \r\n    print(json.dumps(response.json()))\r\n        `,\r\n        result: `\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"result\": {\r\n        \"price_range_numbers\": 1,\r\n            \"price_range_number_list\": [\r\n            {\r\n                \"rate\": 0.09,\r\n                \"number\": \"2917910050\",\r\n                \"prn_key\": 18025786,\r\n                \"trn_name\": \"Eritrea - Mobile 2917910XXX\",\r\n                \"trunk_name\": \"Hi Class (ATX)/test 1 0.09000 USD\",\r\n                \"account_name\": \"Hi Class (ATX)\",\r\n                \"currency_name\": \"USD\",\r\n                \"numbers_count\": 1\r\n            }\r\n        ]\r\n    },\r\n        \"id\": null,\r\n        \"hash\": \"YZ25QAO7\"\r\n    }\r\n        `\r\n    },\r\n    'allocation:google_otp_by_account_user': {\r\n        code: `\r\n    # Method - allocation:google_otp_by_account_user\r\n    response = requests.post(\r\n        url=CSV_URL,\r\n        json={\r\n            'jsonrpc': '2.0',\r\n            'method': 'allocation:google_otp_by_account_user',\r\n            'params': {\r\n                'page': 1,\r\n                'per_page': 10\r\n            },\r\n            'id': None\r\n        })\r\n    \r\n    print(response.text)\r\n        `,\r\n        result: `\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"result\": {\r\n        \"price_range_numbers\": 1,\r\n            \"price_range_number_list\": [\r\n            {\r\n                \"rate\": 0.09,\r\n                \"number\": \"2917910050\",\r\n                \"prn_key\": 18025786,\r\n                \"trn_name\": \"Eritrea - Mobile 2917910XXX\",\r\n                \"trunk_name\": \"Hi Class (ATX)/test 1 0.09000 USD\",\r\n                \"account_name\": \"Hi Class (ATX)\",\r\n                \"currency_name\": \"USD\",\r\n                \"numbers_count\": 1\r\n            }\r\n        ]\r\n    },\r\n        \"id\": null,\r\n        \"hash\": \"YZ25QAO7\"\r\n    }\r\n        `\r\n    },\r\n    'access_list__get_list:account_price': {\r\n        code: `\r\n    # CSV Method - access_list__get_list:account_price\r\n    response = requests.post(\r\n        url=CSV_URL,\r\n        json={\r\n            'jsonrpc': '2.0',\r\n            'method': 'access_list__get_list:account_price',\r\n            'params': {\r\n                'page': 1,\r\n                'per_page': 10\r\n            },\r\n            'id': None\r\n        })\r\n    \r\n    print(response.text)\r\n        `,\r\n        result: `\r\n    Service plan;Access origin;CLI;Access destination;Test number;Rate\r\n    High price;United States - OnNet;1786915XXXX;Cuba - Mobile;5358181170;\r\n    Standard;United States - OnNet;1786915XXXX;Cuba - Mobile;5356192974;\r\n    High price;United States - OnNet;1925240XXXX;Cuba - Mobile;5358012567;\r\n    Standard;United States - OnNet;1925240XXXX;Cuba - Mobile;5356192974;\r\n        `\r\n    }\r\n};\r\n\r\nconst jsExample = {\r\n    options: {\r\n        code: `\r\n    const address = '{your_url}';\r\n    const apiKey = '{your_api_key}';\r\n    const url = \\`\\${address}?api_key=\\${apiKey}\\`;\r\n    const csvUrl = \\`\\${address}/csv?api_key=\\${apiKey}\\`;\r\n    \r\n    console.log(url);\r\n    console.log(csvUrl);\r\n        `,\r\n        result: `\r\n            {your_url}?api_key={your_api_key}\\n\r\n            {your_url}/csv?api_key={your_api_key}\\n\r\n        `\r\n    },\r\n    'live_call:get_list_by_account_user': {\r\n        code: `\r\n    const xhr = new XMLHttpRequest();\r\n    const params = {\r\n        jsonrpc: '2.0',\r\n        method: 'live_call:get_list_by_account_user',\r\n        params: {},\r\n        id: null\r\n    };\r\n    \r\n    xhr.open('POST', url, false);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.send(JSON.stringify(params));\r\n    \r\n    console.log(xhr.responseText);\r\n        `,\r\n        result: `\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"result\": {\r\n            \"live_call_list\": []\r\n        },\r\n        \"id\": null,\r\n        \"hash\": \"5H4QAG1V\"\r\n    }\r\n        `\r\n    },\r\n    'cdr_full:get_list': {\r\n        code: `\r\n    const xhr = new XMLHttpRequest();\r\n    const params = {\r\n        jsonrpc: '2.0',\r\n        method: 'cdr_full:get_list',\r\n        params: {\r\n            page: 1,\r\n            per_page: 1\r\n        },\r\n        id: null\r\n    };\r\n    \r\n    xhr.open('POST', url, false);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.send(JSON.stringify(params));\r\n    \r\n    console.log(xhr.responseText);\r\n        `,\r\n        result: `\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"result\": {\r\n        \"cdr_full_list\": [\r\n            {\r\n                \"ip\": \"207.180.220.127\",\r\n                \"port\": 5060,\r\n                \"range\": \"Eritrea - Mobile 2917671XXX\",\r\n                \"a_number\": \"966570925692\",\r\n                \"b_number\": \"2917671063\",\r\n                \"datetime\": \"2020-03-26 07:41:15.568\",\r\n                \"duration\": \"00:00:02\",\r\n                \"a_sde_key\": 3982,\r\n                \"b_sde_key\": 2119,\r\n                \"sip_cause\": 16,\r\n                \"cost_dialer\": 0.00333,\r\n                \"rate_dialer\": 0.1,\r\n                \"tprefix_dialer\": \"\",\r\n                \"a_subdestination_name\": \"Saudi Arabia - Mobile - Virgin\",\r\n                \"b_subdestination_name\": \"Eritrea - Mobile\"\r\n            }\r\n        ],\r\n            \"cdr_full_count\": 608637\r\n    },\r\n        \"id\": null,\r\n        \"hash\": \"XKAVAHOU\"\r\n    }\r\n        `\r\n    },\r\n    'cdr_full:group_get_list': {\r\n        code: `\r\n    const xhr = new XMLHttpRequest();\r\n    const params = {\r\n        jsonrpc: '2.0',\r\n        method: 'cdr_full:group_get_list',\r\n        params: {\r\n            page: 1,\r\n            per_page: 1\r\n        },\r\n        id: null\r\n    };\r\n    \r\n    xhr.open('POST', url, false);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.send(JSON.stringify(params));\r\n    \r\n    console.log(xhr.responseText);\r\n        `,\r\n        result: `\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"result\": {\r\n        \"group_list\": [\r\n            {\r\n                \"group\": null,\r\n                \"range\": null,\r\n                \"b_number\": null,\r\n                \"sum_duration\": 629287.48,\r\n                \"sum_cost_dialer\": 18554.0797,\r\n                \"count_cost_dialer\": 573460\r\n            }\r\n        ],\r\n            \"group_count\": 1\r\n    },\r\n        \"id\": null,\r\n        \"hash\": \"95FKJUTT\"\r\n    }\r\n        `\r\n    },\r\n    'allocation:price_range': {\r\n        code: `\r\n    const xhr = new XMLHttpRequest();\r\n    const params = {\r\n        jsonrpc: '2.0',\r\n        method: 'allocation:price_range',\r\n        params: {\r\n            page: 1,\r\n            per_page: 1\r\n        },\r\n        id: null\r\n    };\r\n    \r\n    xhr.open('POST', url, false);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.send(JSON.stringify(params));\r\n    \r\n    console.log(xhr.responseText);\r\n        `,\r\n        result: `\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"result\": {\r\n        \"price_range_numbers\": 5,\r\n            \"price_range_number_list\": [\r\n            {\r\n                \"rate\": 0.1,\r\n                \"number\": \"79402214012\",\r\n                \"status\": 0,\r\n                \"prn_key\": 14413116,\r\n                \"trn_name\": \"Abkhazia - Mobile 79402214XXX\",\r\n                \"trunk_name\": \"Hi Class (ATX)/STD_NEW 0.10000 USD\",\r\n                \"account_name\": \"Hi Class (ATX)\",\r\n                \"currency_name\": \"USD\",\r\n                \"numbers_count\": 1\r\n            }\r\n        ]\r\n    },\r\n        \"id\": null,\r\n        \"hash\": \"0LX9H8D9\"\r\n    }\r\n        `\r\n    },\r\n    'allocation:number_list_by_account_user': {\r\n        code: `\r\n    const xhr = new XMLHttpRequest();\r\n    const params = {\r\n        jsonrpc: '2.0',\r\n        method: 'allocation:number_list_by_account_user',\r\n        params: {\r\n            page: 1,\r\n            per_page: 1\r\n        },\r\n        id: null\r\n    };\r\n    \r\n    xhr.open('POST', url, false);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.send(JSON.stringify(params));\r\n    \r\n    console.log(xhr.responseText);\r\n        `,\r\n        result: `\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"result\": {\r\n        \"price_range_numbers\": 1,\r\n            \"price_range_number_list\": [\r\n            {\r\n                \"rate\": 0.1,\r\n                \"number\": \"79402214012\",\r\n                \"status\": 0,\r\n                \"prn_key\": 14413116,\r\n                \"trn_name\": \"Abkhazia - Mobile 79402214XXX\",\r\n                \"trunk_name\": \"Hi Class (ATX)/STD_NEW 0.10000 USD\",\r\n                \"account_name\": \"Hi Class (ATX)\",\r\n                \"currency_name\": \"USD\",\r\n                \"numbers_count\": 1\r\n            }\r\n        ]\r\n    },\r\n        \"id\": null,\r\n        \"hash\": \"0LX9H8D9\"\r\n    }\r\n        `\r\n    },\r\n    'allocation:template_by_account_user': {\r\n        code: `\r\n    const xhr = new XMLHttpRequest();\r\n    const params = {\r\n        jsonrpc: '2.0',\r\n        method: 'allocation:template_by_account_user',\r\n        params: {\r\n            page: 1,\r\n            per_page: 1\r\n        },\r\n        id: null\r\n    };\r\n    \r\n    xhr.open('POST', url, false);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.send(JSON.stringify(params));\r\n    \r\n    console.log(xhr.responseText);\r\n        `,\r\n        result: `\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"result\": {\r\n        \"price_range_numbers\": 1,\r\n            \"price_range_number_list\": [\r\n            {\r\n                \"rate\": 0.001,\r\n                \"number\": \"394534259\",\r\n                \"status\": 0,\r\n                \"prn_key\": 18024995,\r\n                \"trn_name\": \"Italy - Fixed 394534XXX\",\r\n                \"trunk_name\": \"Hi Class (ATX)/STD_NEW 0.00100 USD\",\r\n                \"account_name\": \"Hi Class (ATX)\",\r\n                \"currency_name\": \"USD\",\r\n                \"numbers_count\": 1\r\n            }\r\n        ]\r\n    },\r\n        \"id\": null,\r\n        \"hash\": \"NOEKBDZU\"\r\n    }\r\n        `\r\n    },\r\n    'allocation:subdestination_by_account_user': {\r\n        code: `\r\n    const xhr = new XMLHttpRequest();\r\n    const params = {\r\n        jsonrpc: '2.0',\r\n        method: 'allocation:subdestination_by_account_user',\r\n        params: {\r\n            page: 1,\r\n            per_page: 1\r\n        },\r\n        id: null\r\n    };\r\n    \r\n    xhr.open('POST', url, false);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.send(JSON.stringify(params));\r\n    \r\n    console.log(xhr.responseText);\r\n        `,\r\n        result: `\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"result\": {\r\n        \"price_range_numbers\": 1,\r\n            \"price_range_number_list\": [\r\n            {\r\n                \"rate\": 0.09,\r\n                \"number\": \"2917910050\",\r\n                \"prn_key\": 18025786,\r\n                \"trn_name\": \"Eritrea - Mobile 2917910XXX\",\r\n                \"trunk_name\": \"Hi Class (ATX)/test 1 0.09000 USD\",\r\n                \"account_name\": \"Hi Class (ATX)\",\r\n                \"currency_name\": \"USD\",\r\n                \"numbers_count\": 1\r\n            }\r\n        ]\r\n    },\r\n        \"id\": null,\r\n        \"hash\": \"YZ25QAO7\"\r\n    }\r\n        `\r\n    },\r\n    'allocation:google_otp_by_account_user': {\r\n        code: `\r\n    const xhr = new XMLHttpRequest();\r\n    const params = {\r\n        jsonrpc: '2.0',\r\n        method: 'allocation:google_otp_by_account_user',\r\n        params: {\r\n            page: 1,\r\n            per_page: 1\r\n        },\r\n        id: null\r\n    };\r\n    \r\n    xhr.open('POST', url, false);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.send(JSON.stringify(params));\r\n    \r\n    console.log(xhr.responseText);\r\n        `,\r\n        result: `\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"result\": {\r\n        \"price_range_numbers\": 1,\r\n            \"price_range_number_list\": [\r\n            {\r\n                \"rate\": 0.09,\r\n                \"number\": \"2917910050\",\r\n                \"prn_key\": 18025786,\r\n                \"trn_name\": \"Eritrea - Mobile 2917910XXX\",\r\n                \"trunk_name\": \"Hi Class (ATX)/test 1 0.09000 USD\",\r\n                \"account_name\": \"Hi Class (ATX)\",\r\n                \"currency_name\": \"USD\",\r\n                \"numbers_count\": 1\r\n            }\r\n        ]\r\n    },\r\n        \"id\": null,\r\n        \"hash\": \"YZ25QAO7\"\r\n    }\r\n        `\r\n    },\r\n    'access_list__get_list:account_price': {\r\n        code: `\r\n    const xhr = new XMLHttpRequest();\r\n    const params = {\r\n        jsonrpc: '2.0',\r\n        method: 'access_list__get_list:account_price',\r\n        params: {\r\n            page: 1,\r\n            per_page: 1\r\n        },\r\n        id: null\r\n    };\r\n    \r\n    xhr.open('POST', csvUrl, false);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.send(JSON.stringify(params));\r\n    \r\n    console.log(xhr.responseText);\r\n        `,\r\n        result: `\r\n    Service plan;Access origin;CLI;Access destination;Test number;Rate\r\n    High price;United States - OnNet;1786915XXXX;Cuba - Mobile;5358181170;\r\n    Standard;United States - OnNet;1786915XXXX;Cuba - Mobile;5356192974;\r\n    High price;United States - OnNet;1925240XXXX;Cuba - Mobile;5358012567;\r\n    Standard;United States - OnNet;1925240XXXX;Cuba - Mobile;5356192974;\r\n        `\r\n    }\r\n};\r\nexport {pythonExample, jsExample};","import React from 'react';\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport {pythonExample, jsExample} from './apiExamples.js';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport {colorBrewer}  from 'react-syntax-highlighter/dist/cjs/styles/hljs';\r\nimport ApiCurrentApiKey from './ApiCurrentApiKey';\r\n\r\nexport default FormHOC(({selectedPage, newItem, apiKey, methods = []}) => {\r\n    const url = process.env.REACT_APP_API_URL;\r\n    const api_key = apiKey || newItem || '{YOUR_API_KEY}';\r\n    console.log('URL:::', api_key, methods)\r\n    const examples = [\r\n        {\r\n            examples_python: pythonExample\r\n        },\r\n        {\r\n            examples_js: jsExample\r\n        }\r\n    ];\r\n    const langProperty = {\r\n        examples_python: {\r\n            title: 'Python example',\r\n            language: 'python',\r\n            style: colorBrewer\r\n        },\r\n        examples_js: {\r\n            title: 'Javascript example',\r\n            language: 'javascript',\r\n            style: colorBrewer // atelierSavannaLight\r\n        }\r\n    };\r\n\r\n    return (\r\n        examples.map(example => {\r\n            const optionsCode =  example[selectedPage] && example[selectedPage].options.code.replace('{your_api_key}', api_key).replace(/{your_url}/g, url);\r\n            const optionsResultList =   example[selectedPage] && example[selectedPage].options.result.replace(/{your_api_key}/g, api_key).replace(/{your_url}/g, url).split('\\n').filter(row => row && row.length);\r\n            return (\r\n                example[selectedPage]\r\n                    && <>\r\n                        <span className=\"api_documentation\">{langProperty[selectedPage].title}</span>\r\n                        <ApiCurrentApiKey apiKey={api_key}/>\r\n                        <div className=\"api_examples-python api_examples-python_header\">\r\n                            Options\r\n                        </div>\r\n                        <div className=\"api_examples-python_options_description\">\r\n                            At first you should make your setup to get ready to use api methods. You have to declare api key and compile your url addresses.\r\n                            <br/>\r\n                            The following examples use this setup\r\n                        </div>\r\n                        <div className=\"api_examples-python_header\">\r\n                            Code:\r\n                        </div>\r\n                        <SyntaxHighlighter language={langProperty[selectedPage].language} style={langProperty[selectedPage].style} className=\"api_examples-python_options_code\">\r\n                            {optionsCode}\r\n                        </SyntaxHighlighter>\r\n                        <div className=\"api_examples-python_header\">\r\n                            Result:\r\n                        </div>\r\n                        <div className=\"simple_code api_examples-python_options_result\">\r\n                            {\r\n                                optionsResultList.map(resultRow => {\r\n                                    return <><span>{resultRow}</span><br /></>\r\n                                })\r\n                            }\r\n                        </div>\r\n                        <div className=\"api_examples-python api_examples-python_header\">\r\n                            Methods\r\n                        </div>\r\n                        {\r\n                            methods.map(method => {\r\n                                return example[selectedPage].hasOwnProperty(method.method_api) && <>\r\n                                    <div className=\"api_examples-python_header\">\r\n                                        Name: <span className=\"api_examples-python_header_method\">{method.method_api}</span>\r\n                                    </div>\r\n                                    <div className=\"api_examples-python_header\">\r\n                                        Description:\r\n                                    </div>\r\n                                    <div className=\"api_examples-python_header_method_description\">\r\n                                        {method.description}\r\n                                    </div>\r\n                                    <div className=\"api_examples-python_header\">\r\n                                        Code:\r\n                                    </div>\r\n                                    <SyntaxHighlighter language={langProperty[selectedPage].language} style={langProperty[selectedPage].style}>\r\n                                        {example[selectedPage][method.method_api].code}\r\n                                    </SyntaxHighlighter>\r\n                                    <div className=\"api_examples-python_header\">\r\n                                        Response:\r\n                                    </div>\r\n                                    <SyntaxHighlighter language='javascript' style={langProperty[selectedPage].style}>\r\n                                        {example[selectedPage][method.method_api].result}\r\n                                    </SyntaxHighlighter>\r\n                                </>\r\n                            })\r\n                        }\r\n                    </>\r\n            )\r\n        }))\r\n});","import React, {useState} from 'react';\r\nimport apiNavigation from './apiNavigation.json';\r\nimport {Tree, List, Icon} from 'rsuite';\r\nimport {NavHashLink as NavLink} from 'react-router-hash-link';\r\nimport styled from 'styled-components';\r\n\r\nexport default ({keyList, loading, onSelect: handleSelect, ...props}) => {\r\n\r\n    const [apiTurn, setApiTurn] = useState('docs');\r\n    \r\n    return (\r\n        <Tree\r\n            className=\"api_menu\"\r\n            defaultExpandAll={true}\r\n            defaultValue={'docs'}\r\n            data={apiNavigation}\r\n            style={{\r\n                maxWidth: '200px',\r\n                height: '360px',\r\n                overflowX: 'hidden'\r\n            }}\r\n            renderTreeNode={(node) => {\r\n                const activeKeyList = keyList.length && keyList.filter(key => key.active);\r\n                const keysHaveLoading = (loading || !activeKeyList.length) && node.value === \"keys\";\r\n\r\n                return (\r\n                    !keysHaveLoading ?\r\n                        <span\r\n                            className=\"api_menu_item\"\r\n                            onClick={() => {\r\n                                // console.log(\"node.value\", node.value);\r\n                                setApiTurn(node.value);\r\n                                handleSelect(node.value);\r\n                            }}\r\n                        >\r\n                            {node.label}\r\n\r\n                            {node.anchors && apiTurn === node.value &&\r\n                                <List className=\"api_menu_item-anchor\">\r\n                                    {node.anchors.map(anchor => {\r\n                                        return (\r\n                                            <List.Item className=\"api_menu_item_anchor-item\">\r\n                                                <NavLink className=\"api_menu_item_anchor_item-link\" to={anchor.to}>\r\n                                                    {anchor.icon && \r\n                                                        <StyledIcon icon={anchor.icon}/>\r\n                                                    }\r\n                                                    {anchor.label}\r\n                                                </NavLink>\r\n                                            </List.Item>\r\n                                        )\r\n                                    })}\r\n                                </List>\r\n                            }\r\n                        </span>\r\n\r\n                    : <></>\r\n                )\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nconst StyledIcon = styled(Icon)`\r\n    margin-right: 5px;\r\n\r\n    .rtl & {\r\n        margin-left: 5px;\r\n        margin-right: 0;\r\n    }\r\n`;","import React from 'react';\r\nimport {Divider, Drawer, IconButton, FlexboxGrid} from 'rsuite';\r\nimport apiMethods from './apiMethods.json';\r\nimport ApiPageDocumentation from './ApiPageDocumentation';\r\nimport ApiPageKeys from './ApiPageKeys';\r\nimport ApiPageExamples from './ApiPageExamples';\r\nimport './ApiPage.css';\r\nimport {LOCAL_STORAGE_API_KEY_DIALER} from '../../const';\r\nimport Affix from 'rsuite/es/Affix';\r\nimport Icon from 'rsuite/es/Icon';\r\nimport {Spacer} from '../../components/base/Spacer';\r\nimport ApiPageSidebar from './ApiPageSidebar';\r\nimport styled from 'styled-components';\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\n\r\n\r\nexport default class extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            apiTurn: 'docs',\r\n            pickedApiKey: localStorage.getItem(LOCAL_STORAGE_API_KEY_DIALER),\r\n            resizedWidth: window.innerWidth,\r\n            mobileSidebarShow: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', this.handleResize);\r\n        // get keys\r\n        const {getKeyList, account_id} = this.props;\r\n\r\n        getKeyList(account_id);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const {keyList, newItem} = this.props;\r\n        const {apiTurn, pickedApiKey, resizedWidth, mobileSidebarShow} = this.state;\r\n\r\n        const activeKeyList = nextProps.keyList.filter(key => key.active).map(key => key.api_key);\r\n\r\n        if (activeKeyList.length && !activeKeyList.includes(pickedApiKey)) {\r\n            this.setState({pickedApiKey: activeKeyList[0]});\r\n            localStorage.setItem(LOCAL_STORAGE_API_KEY_DIALER, activeKeyList[0])\r\n        }\r\n        return apiTurn !== nextState.apiTurn\r\n            || mobileSidebarShow !== nextState.mobileSidebarShow\r\n            || resizedWidth !== nextState.resizedWidth\r\n            || keyList !== nextProps.keyList\r\n            || pickedApiKey !== nextState.pickedApiKey\r\n            || newItem !== nextProps.newItem\r\n            || pickedApiKey && !activeKeyList.includes(pickedApiKey);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    handleResize = () => {\r\n        this.setState({\r\n            resizedWidth: window.innerWidth\r\n        });\r\n    };\r\n\r\n    pickApiKey = (key) => {\r\n        this.setState({pickedApiKey: key});\r\n\r\n        if (key)\r\n            localStorage.setItem(LOCAL_STORAGE_API_KEY_DIALER, key);\r\n        else\r\n            localStorage.removeItem(LOCAL_STORAGE_API_KEY_DIALER);\r\n    };\r\n\r\n    toggleMobileSidebarShow = (val = false) => {\r\n        this.setState({\r\n            mobileSidebarShow: val\r\n        })\r\n    };\r\n\r\n    render() {\r\n\r\n        const {keyList, generateNewApiKey, newItem, loading} = this.props;\r\n        const {apiTurn, pickedApiKey, resizedWidth, mobileSidebarShow} = this.state;\r\n\r\n        const isMobile = resizedWidth < 768;\r\n\r\n        return (\r\n            <PanelLayout>\r\n                <div>\r\n                    {!isMobile &&\r\n                        <>\r\n                            <Spacer/>\r\n                            <Divider />\r\n                        </>\r\n                    }\r\n                    {isMobile &&\r\n                        <>\r\n                            <SidebarMenuToggle>\r\n                                <IconButton\r\n                                    onClick={() => this.toggleMobileSidebarShow(true)}\r\n                                    circle={true}\r\n                                    appearance=\"primary\"\r\n                                    icon={<Icon icon=\"list\" />}\r\n                                />\r\n                            </SidebarMenuToggle>\r\n                            <SidebarMenuDrawer \r\n                                size=\"xs\" \r\n                                placement={this.props.rtl ? \"right\" : \"left\"}\r\n                                show={mobileSidebarShow}\r\n                                onHide={() => this.toggleMobileSidebarShow(false)}\r\n                            >\r\n                                <Drawer.Header>\r\n                                    <Drawer.Title>API Navigation</Drawer.Title>\r\n                                </Drawer.Header>\r\n                                <Drawer.Body>\r\n                                <ApiPageSidebar \r\n                                    {...{keyList, loading}}\r\n                                    onSelect={(value) => {\r\n                                    this.setState({apiTurn: value})\r\n                                    }}\r\n                                />        \r\n                                </Drawer.Body>\r\n                            </SidebarMenuDrawer>\r\n                        </>\r\n                    }\r\n                    <FlexboxGrid align=\"top\">\r\n                        <Column width=\"25%\">\r\n                            { !isMobile &&\r\n                                <Affix top={20}>\r\n\r\n                                    <ApiPageSidebar \r\n                                        {...{keyList, loading}}\r\n                                        onSelect={(value) => {\r\n                                            this.setState({apiTurn: value})\r\n                                        }}\r\n                                    />   \r\n                                    \r\n                                </Affix>\r\n                            }\r\n                        </Column>\r\n                        <Column main width=\"75%\">\r\n                                {(() => {\r\n                                    switch (apiTurn) {\r\n                                        case 'docs':\r\n                                            return <ApiPageDocumentation\r\n                                                methods={apiMethods}\r\n                                                {...{pickedApiKey, newItem}}\r\n                                            />;\r\n                                        case 'keys':\r\n                                            return <ApiPageKeys\r\n                                                pickApiKey={this.pickApiKey}\r\n                                                {...{keyList, generateNewApiKey, pickedApiKey, newItem}}/>;\r\n                                        case 'examples_python':\r\n                                        case 'examples_js':\r\n                                            return <ApiPageExamples\r\n                                                newItem={newItem}\r\n                                                apiKey={pickedApiKey}\r\n                                                methods={apiMethods}\r\n                                                selectedPage={apiTurn}\r\n                                            />;\r\n                                        default:\r\n                                            return null;\r\n                                    }\r\n                                })()}\r\n                        </Column>\r\n                    </FlexboxGrid>\r\n                </div>\r\n            </PanelLayout>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nconst SidebarMenuToggle = styled.div`\r\n    bottom: 35px;\r\n    left: 25px;\r\n    position: fixed;\r\n    z-index: 99\r\n\r\n    .rtl & {\r\n        left: auto;\r\n        right: 25px;\r\n    }\r\n`;\r\n\r\nconst SidebarMenuDrawer = styled(Drawer)`\r\n    &&& {\r\n        width: 240px !important;\r\n        z-index: 999999;\r\n    }\r\n`;\r\n\r\nconst Column = styled(FlexboxGrid.Item)`\r\n    \r\n    position: relative;\r\n    display: block;\r\n    min-height: 1px;\r\n    width: 100%;\r\n    \r\n    @media (min-width: 768px) {\r\n        width: ${props => props.width || 'auto'};\r\n        // padding-left: ${props => props.main ? '20px' : '0'}\r\n    }\r\n`;","import {connect} from 'react-redux';\r\n\r\nimport {getKeyList, generateNewApiKey} from '../../actions/client/apiPage';\r\n\r\nimport ApiPage from './ApiPage';\r\nimport {LOCAL_STORAGE_USER_INFO_DIALER} from '../../const';\r\n\r\nconst mapState = ({client_api_page, auth}) => ({\r\n    keyList: client_api_page.items,\r\n    count: client_api_page.count,\r\n    newItem: client_api_page.newItem,\r\n    loading: client_api_page.loading,\r\n    account_id: localStorage.getItem(LOCAL_STORAGE_USER_INFO_DIALER) ? JSON.parse(localStorage.getItem(LOCAL_STORAGE_USER_INFO_DIALER)).session.account.id :\r\n        auth.info ? auth.info.session.account.id : auth.accountInfo ? auth.accountInfo.session.account.id : null\r\n});\r\n\r\nexport default connect(mapState,\r\n    {\r\n        getKeyList,\r\n        generateNewApiKey\r\n    })(ApiPage);","import React, {useContext} from \"react\";\r\nimport CustomizableTable from \"../../components/client/CustomizableTable/CustomizableTable\";\r\nimport {renderColumn} from \"../../utils/helpers\";\r\nimport {useIntl} from \"react-intl\";\r\nimport {Table, Icon} from 'rsuite';\r\nimport {ButtonRowClient, ButtonToolbar} from \"../../components/base/BaseButton\";\r\nimport m from \"../../definedMessages\";\r\nimport {RtlContext} from \"../../App\";\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\nconst PaymentDetailsTable = ({\r\n    data, \r\n    loading, \r\n    loadingEditButtonsSet,\r\n    handleRemovePaymentDetails,\r\n    handleEditPaymentDetails,\r\n    ...props\r\n}) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n    const rtl = useContext(RtlContext);\r\n\r\n    const statuses = [\r\n        formatMessage(m.pending),\r\n        formatMessage(m.confirmed),\r\n        formatMessage(m.declined),\r\n    ];\r\n\r\n    const columns = [\r\n        {\r\n            id: 'details',\r\n            label: formatMessage(m.details),\r\n            dataKey: \"payment_detail_info\",\r\n            flexGrow: 5,\r\n            minWidth: 200,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'created',\r\n            label: formatMessage(m.created),\r\n            value: ({start_date, customer_name, customer_last_name}) => {\r\n                const name = customer_name\r\n                    ? customer_name + (customer_last_name !== null ? (' ' + customer_last_name) : '' )\r\n                    : null;\r\n                return `${start_date}${name ? ' ' + formatMessage(m.byName, {name: name}) : ''}`;\r\n            },\r\n            flexGrow: 2,\r\n            minWidth: 200,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'status',\r\n            label: formatMessage(m.status),\r\n            value: ({status}) => {\r\n                return statuses[status]\r\n            },\r\n            flexGrow: 2,\r\n            minWidth: 200,\r\n            align: 'center'\r\n        }\r\n    ];\r\n    const confirmedColumn = (\r\n        <Column align=\"center\" key=\"confirm__column\">\r\n            <HeaderCell>{formatMessage(m.confirmed)}</HeaderCell>\r\n            <Cell dataKey=\"confirmed\" className=\"confirm__cell\">\r\n                {rowData => {\r\n                    return (\r\n                        <div>\r\n                            {rowData['confirmed'] && <Icon icon=\"check-square\"/>}\r\n                            {!rowData['confirmed'] && <Icon icon=\"collasped\"/>}\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Cell>\r\n        </Column>\r\n    );\r\n    const tableActions = (\r\n        <Column key=\"table__actions\">\r\n            <HeaderCell> </HeaderCell>\r\n            <Cell>\r\n                {rowData => {\r\n\r\n                    return (\r\n                        <ButtonToolbar>\r\n\r\n                            <ButtonRowClient\r\n                                disabled={loadingEditButtonsSet.size && !loadingEditButtonsSet.has(rowData.id)}\r\n                                loading={loadingEditButtonsSet.has(rowData.id)}\r\n                                onClick={() => handleEditPaymentDetails(rowData)}\r\n                            >\r\n                                <Icon icon=\"edit2\"/>\r\n                            </ButtonRowClient>\r\n                            \r\n                            <ButtonRowClient\r\n                                onClick={() => handleRemovePaymentDetails(rowData)}\r\n                            >\r\n                                <Icon icon=\"trash2\"/>\r\n                            </ButtonRowClient>\r\n                            \r\n                        </ButtonToolbar>\r\n                    );\r\n                }}\r\n            </Cell>\r\n        </Column>\r\n    );\r\n\r\n    const renderedColumns = columns.map(renderColumn);\r\n    // renderedColumns.push(confirmedColumn);\r\n    renderedColumns.push(tableActions);\r\n\r\n    return (\r\n        <CustomizableTable\r\n            data={data}\r\n            loading={loading}\r\n            {...{\r\n                rtl,\r\n                renderedColumns\r\n            }}\r\n        />\r\n    )\r\n};\r\n\r\nexport default PaymentDetailsTable;","import styled, { css } from \"styled-components\";\r\nimport { FormGroup, ControlLabel, FormControl } from \"rsuite\";\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport {CustomModalClient} from \"../../../components/base\";\r\n\r\nexport const FormModal = styled(CustomModalClient)`\r\n    &&& {\r\n        margin-bottom: 40px !important;\r\n        \r\n        @media (min-width: 768px) {\r\n            margin-bottom: 0 !important;\r\n            margin-top: 5vh !important;\r\n            \r\n            .rs-modal-content {\r\n                max-height: 90vh;\r\n            }\r\n        }        \r\n    }\r\n\r\n    .rs-modal-content {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .rs-modal-footer {\r\n        margin-top: auto;\r\n        padding-bottom: 20px;\r\n        padding-top: 20px;\r\n    }\r\n`;\r\n\r\nexport const FileUploader = styled(FormControl).attrs(props => ({\r\n    listType: \"picture-text\",\r\n    autoUpload: false,\r\n    multiple: true,\r\n    accept: \"image/jpeg,image/gif,image/png,image/x-eps,application/pdf,application/zip,application/x-zip,application/x-zip-compressed\",\r\n}))`\r\n    &&& {\r\n        .rs-uploader-file-item-size {\r\n            display: none;\r\n        }\r\n    }\r\n\r\n    .rtl &&& {\r\n        \r\n        .rs-uploader-file-item {\r\n            padding-left: 30px;\r\n            padding-right: 50px;\r\n        }\r\n\r\n        .rs-uploader-file-item-preview {\r\n            left: auto;\r\n            right: 0;\r\n        }\r\n\r\n        .rs-uploader-file-item-progress {\r\n            padding-left: 0;\r\n            padding-right: 50px;\r\n        }\r\n\r\n        .rs-uploader-file-item-btn-remove {\r\n            left: 12px;\r\n            right: auto;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Group = styled(FormGroup)`\r\n    margin-bottom: 15px;\r\n    \r\n    @media (min-width: 768px) {\r\n        align-items: center;\r\n        display: flex;\r\n    }\r\n`;\r\n\r\nexport const Label = styled(ControlLabel)`\r\n    flex-shrink: 0;\r\n    font-weight: 600;\r\n    padding-right: 20px;\r\n    text-align: left;\r\n    width: auto;\r\n\r\n    .rtl & {\r\n        padding-left: 20px;\r\n        padding-right: 0;\r\n        text-align: right;\r\n    }\r\n    \r\n    && {\r\n        \r\n        @media (min-width: 768px) {\r\n            margin-bottom: 0;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Field = styled(FormControl)`\r\n    &&& {\r\n        min-width: 100%;\r\n        width: 100%;\r\n    } \r\n`;\r\nexport const FieldTextAreaAutoResize = styled(TextareaAutosize)`\r\n    &&& {\r\n        min-width: 100%;\r\n        width: 100%;\r\n        overflow: hidden;\r\n        resize: none;\r\n    } \r\n`;\r\n\r\nexport const LabelWrapper = styled.div`\r\n    flex-shrink: 0;\r\n    width: 160px;\r\n    \r\n    ${props => props.vAlign &&\r\n        css`\r\n            align-self: ${props.vAlign};\r\n        `\r\n    }\r\n\r\n    ${props => props.top &&\r\n        css`\r\n            margin-top: ${props.top}px;\r\n        `\r\n    }\r\n`;\r\n\r\nexport const FormColumns = styled.div`\r\n    align-items: stretch;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const FormColumn = styled.div`\r\n    flex: 0 0 auto;\r\n    padding: 0 20px;\r\n    position: relative;\r\n    width: 100%;\r\n\r\n    ${props => \r\n        props.flexGrow && css`\r\n            flex-grow: ${props.flexGrow};\r\n        `\r\n    }\r\n\r\n    @media (min-width: 600px) {\r\n        flex-grow: 1;\r\n        width: 1px;\r\n        \r\n        &&& {\r\n            .rs-form-control-wrapper {\r\n                max-width: 450px;\r\n                min-width: 1px;\r\n                width: 100%;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const FlexBlock = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const FlexChild = styled.div`\r\n    padding-left: 20px;\r\n    padding-right: 20px;\r\n`;","import React from \"react\";\r\nimport {SelectPicker, Uploader, Icon, FormControl} from \"rsuite\";\r\nimport * as S from \"./styled\";\r\n\r\n\r\nexport const FieldInput = ({name, label, type, ...props}) => (\r\n    <S.Group>\r\n        {label &&\r\n            <S.LabelWrapper>\r\n                <S.Label>{label}</S.Label>\r\n            </S.LabelWrapper>\r\n        }\r\n        <S.Field name={name} {...props}/>\r\n    </S.Group>\r\n);\r\n\r\n\r\nexport const FieldTextArea = ({name, label, type, data, ...props}) => (\r\n    <S.Group>\r\n        {label &&\r\n            <S.LabelWrapper>\r\n                <S.Label>{label}</S.Label>\r\n            </S.LabelWrapper>\r\n        }\r\n        <div className=\"rs-form-control-wrapper\">\r\n            <S.FieldTextAreaAutoResize\r\n                className=\"rs-input\"\r\n                name={name}\r\n                {...props}\r\n            />\r\n        </div>\r\n    </S.Group>\r\n);\r\n\r\n\r\nexport const FieldSelectCountry = ({name, label, type, data, ...props}) => (\r\n    <S.Group>\r\n        {label &&\r\n            <S.LabelWrapper>\r\n                <S.Label>{label}</S.Label>\r\n            </S.LabelWrapper>\r\n        }\r\n        <S.Field\r\n            name={name}\r\n            accepter={SelectPicker}\r\n            cleanable={false}\r\n            data={data}\r\n            valueKey=\"cntr_code\"\r\n            labelKey=\"name\"\r\n            {...props}\r\n        />\r\n    </S.Group>\r\n);\r\n\r\n\r\nexport const FieldFile = ({name, label, type, defaultFileList, ...props}) => (\r\n    <S.Group>\r\n        {label &&    \r\n            <S.LabelWrapper \r\n                vAlign=\"flex-start\" \r\n                top={18}\r\n            >\r\n                <S.Label>{label}</S.Label>\r\n            </S.LabelWrapper>\r\n        }\r\n\r\n        <S.FileUploader \r\n            name={name}\r\n            defaultFileList={defaultFileList || []}\r\n            accepter={Uploader}\r\n            {...props}\r\n        >\r\n            <button>\r\n                <Icon icon='file-image-o' size=\"2x\" />\r\n            </button>\r\n        </S.FileUploader>\r\n    </S.Group>\r\n);\r\n\r\n\r\nexport const FieldOrganizationType = ({label, data = [], ...props}) => (\r\n    <S.Group>\r\n        {label &&\r\n            <S.Label>{label}</S.Label>\r\n        }\r\n        <FormControl\r\n            name=\"ot_key\"\r\n            accepter={SelectPicker}\r\n            data={data}\r\n            labelKey=\"name\"\r\n            valueKey=\"ot_key\"\r\n            cleanable={false}\r\n            searchable={false}\r\n            {...props}\r\n        />\r\n    </S.Group>\r\n);\r\n\r\n\r\nexport const FieldPaymentMethod = ({label, data = [], ...props}) => (\r\n    <S.Group>\r\n        {label &&\r\n            <S.Label>{label}</S.Label>\r\n        }\r\n        <FormControl\r\n            name=\"pm_key\"\r\n            accepter={SelectPicker}\r\n            data={data}\r\n            labelKey=\"name\"\r\n            valueKey=\"pm_key\"\r\n            cleanable={false}\r\n            searchable={false}\r\n            {...props}\r\n        />\r\n    </S.Group>\r\n);\r\n\r\n\r\nexport default FieldInput","export default {\r\n\r\n    // customer fields\r\n    customer_name: {\r\n        name: 'customer_name',\r\n        label: 'Name',\r\n        labelId: 'name'\r\n    },\r\n    customer_last_name: {\r\n        name: 'customer_last_name',\r\n        label: 'Last name',\r\n        labelId: 'lastName'\r\n    },\r\n    customer_phone: {\r\n        name: 'customer_phone',\r\n        label: 'Phone',\r\n        labelId: 'phone'\r\n    },\r\n    tax_vat_number: {\r\n        name: 'tax_vat_number',\r\n        label: 'Tax/VAT number',\r\n        labelId: 'taxVATNumber'\r\n    },\r\n    ext_files: {\r\n        name: 'ext_files',\r\n        type: 'file',\r\n        label: 'Attachments',\r\n        labelId: 'attachments'\r\n    },\r\n    customer_cntr_code: {\r\n        name: 'customer_cntr_code',\r\n        type: 'select_country',\r\n        label: 'Country',\r\n        labelId: 'country'\r\n    },\r\n    customer_cntr_name: {\r\n        name: 'customer_cntr_name',\r\n        label: 'Country',\r\n        labelId: 'country'\r\n    },\r\n    'customer_address.region': {\r\n        name: 'customer_address.region',\r\n        label: 'Region',\r\n        labelId: 'region'\r\n    },\r\n    'customer_address.city': {\r\n        name: 'customer_address.city',\r\n        label: 'City',\r\n        labelId: 'city'\r\n    },\r\n    'customer_address.address': {\r\n        name: 'customer_address.address',\r\n        label: 'Address',\r\n        labelId: 'address'\r\n    },\r\n    'customer_address.postal_code': {\r\n        name: 'customer_address.postal_code',\r\n        label: 'Postal code',\r\n        labelId: 'postalCode'\r\n    },\r\n\r\n    // bank fields\r\n    bank_name: {\r\n        name: 'bank_name',\r\n        label: 'Bank name',\r\n        labelId: 'bankName'\r\n    },\r\n    account_iban_number: {\r\n        name: 'account_iban_number',\r\n        label: 'Account number/IBAN',\r\n        labelId: 'accountIbanNumber'\r\n    },\r\n    swift_number: {\r\n        name: 'swift_number',\r\n        label: 'SWIFT',\r\n        labelId: 'swift'\r\n    },\r\n    intermediate_bank_details: {\r\n        name: 'intermediate_bank_details',\r\n        label: 'Intermediate bank details',\r\n        labelId: 'intermediateBankDetails',\r\n        componentClass: 'textarea'\r\n    },\r\n    bank_cntr_code: {\r\n        name: 'bank_cntr_code',\r\n        type: 'select_country',\r\n        label: 'Bank country',\r\n        labelId: 'bankCountry'\r\n    },\r\n    bank_cntr_name: {\r\n        name: 'bank_cntr_name',\r\n        label: 'Bank country',\r\n        labelId: 'bankCountry'\r\n    },\r\n    'bank_address.region': {\r\n        name: 'bank_address.region',\r\n        label: 'Bank region',\r\n        labelId: 'bankRegion'\r\n    },\r\n    'bank_address.city': {\r\n        name: 'bank_address.city',\r\n        label: 'Bank city',\r\n        labelId: 'bankCity'\r\n    },\r\n    'bank_address.address': {\r\n        name: 'bank_address.address',\r\n        label: 'Bank address',\r\n        labelId: 'bankAddress'\r\n    },\r\n    'bank_address.postal_code': {\r\n        name: 'bank_address.postal_code',\r\n        label: 'Bank postal code',\r\n        labelId: 'bankPostalCode'\r\n    },\r\n\r\n    // beneficiary fields\r\n    beneficiary_name: {\r\n        name: 'beneficiary_name',\r\n        label: 'Beneficiary name',\r\n        labelId: 'beneficiaryName'\r\n    },\r\n    beneficiary_last_name: {\r\n        name: 'beneficiary_last_name',\r\n        label: 'Beneficiary last name',\r\n        labelId: 'beneficiaryLastName',\r\n        hideOn: [{ot_key: 2, pm_key: 1}]\r\n    },\r\n    beneficiary_cntr_code: {\r\n        name: 'beneficiary_cntr_code',\r\n        type: 'select_country',\r\n        label: 'Country',\r\n        labelId: 'country'\r\n    },\r\n    beneficiary_cntr_name: {\r\n        name: 'beneficiary_cntr_name', \r\n        label: 'Country',\r\n        labelId: 'country'\r\n    },\r\n    'beneficiary_address.region': {\r\n        name: 'beneficiary_address.region',\r\n        label: 'Region',\r\n        labelId: 'region'\r\n    },\r\n    'beneficiary_address.city': {\r\n        name: 'beneficiary_address.city',\r\n        label: 'City',\r\n        labelId: 'city'\r\n    },\r\n    'beneficiary_address.address': {\r\n        name: 'beneficiary_address.address',\r\n        label: 'Address',\r\n        labelId: 'address'\r\n    },\r\n    'beneficiary_address.postal_code': {\r\n        name: 'beneficiary_address.postal_code',\r\n        label: 'Postal code',\r\n        labelId: 'postalCode'\r\n    },\r\n\r\n    // other fields\r\n    paypal_id: {\r\n        name: 'paypal_id',\r\n        label: 'Paypal ID',\r\n        labelId: 'paypalId'\r\n    },\r\n    btc_wallet_number: {\r\n        name: 'btc_wallet_number',\r\n        label: 'Wallet number',\r\n        labelId: 'walletNumber'\r\n    },\r\n    hawala_description: {\r\n        name: 'hawala_description',\r\n        label: 'Message',\r\n        labelId: 'message',\r\n        componentClass: 'textarea'\r\n    }\r\n}\r\n\r\n\r\nexport const customerFields = [\r\n    'customer_name',\r\n    'customer_last_name',\r\n    'customer_cntr_code',\r\n    'customer_address.region',\r\n    'customer_address.city',\r\n    'customer_address.address',\r\n    'customer_address.postal_code',\r\n    'customer_phone',\r\n    'ext_files',\r\n];\r\n\r\n\r\nexport const customerConfirmFields = [\r\n    'customer_name',\r\n    'customer_last_name',\r\n    'customer_cntr_name',\r\n    'customer_address.region',\r\n    'customer_address.city',\r\n    'customer_address.address',\r\n    'customer_address.postal_code',\r\n    'customer_phone',\r\n    'ext_files',\r\n];\r\n\r\n\r\nexport const companyFields = [\r\n    'customer_name',\r\n    'tax_vat_number',\r\n    'customer_cntr_code',\r\n    'customer_address.region',\r\n    'customer_address.city',\r\n    'customer_address.address',\r\n    'customer_address.postal_code',\r\n    'customer_phone',\r\n    'ext_files',\r\n];\r\n\r\nexport const companyConfirmFields = [\r\n    'customer_name',\r\n    'tax_vat_number',\r\n    'customer_cntr_name',\r\n    'customer_address.region',\r\n    'customer_address.city',\r\n    'customer_address.address',\r\n    'customer_address.postal_code',\r\n    'customer_phone',\r\n    'ext_files',\r\n];\r\n\r\nexport const bankTransferFields = [\r\n    'beneficiary_name',\r\n    'beneficiary_last_name',\r\n    'beneficiary_cntr_code',\r\n    'beneficiary_address.region',\r\n    'beneficiary_address.city',\r\n    'beneficiary_address.address',\r\n    'beneficiary_address.postal_code',\r\n    'bank_name',\r\n    'bank_cntr_code',\r\n    'bank_address.region',\r\n    'bank_address.city',\r\n    'bank_address.address',\r\n    'bank_address.postal_code',\r\n    'account_iban_number',\r\n    'swift_number',\r\n    'intermediate_bank_details',\r\n];\r\n\r\nexport const bankTransferConfirmFields = [\r\n    'beneficiary_name',\r\n    'beneficiary_last_name',\r\n    'beneficiary_cntr_name',\r\n    'beneficiary_address.region',\r\n    'beneficiary_address.city',\r\n    'beneficiary_address.address',\r\n    'beneficiary_address.postal_code',\r\n    'bank_name',\r\n    'bank_cntr_name',\r\n    'bank_address.region',\r\n    'bank_address.city',\r\n    'bank_address.address',\r\n    'bank_address.postal_code',\r\n    'account_iban_number',\r\n    'swift_number',\r\n    'intermediate_bank_details',\r\n];\r\n\r\n\r\nexport const paypalFields = [\r\n    'paypal_id',\r\n];\r\n\r\n\r\nexport const bitcoinFields = [\r\n    'btc_wallet_number',\r\n];\r\n\r\n\r\nexport const hawalaFields = [\r\n    'hawala_description',\r\n];\r\n\r\n\r\nexport const otherTransferSystemsFields = [\r\n    'beneficiary_name',\r\n    'beneficiary_last_name',\r\n    'beneficiary_cntr_code',\r\n    'beneficiary_address.city',\r\n];\r\n\r\n\r\nexport const otherTransferSystemsConfirmFields = [\r\n    'beneficiary_name',\r\n    'beneficiary_last_name',\r\n    'beneficiary_cntr_name',\r\n    'beneficiary_address.city',\r\n];","import React, {useState, useEffect} from \"react\";\r\nimport {useWindowWidth} from \"../../../hooks\";\r\nimport {useIntl} from \"react-intl\";\r\nimport {parse} from 'object-flaser';\r\nimport {toBase64} from \"../../../utils/helpers\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\nimport {Form, Schema, Divider, Alert} from \"rsuite\";\r\nimport * as S from \"./styled\";\r\nimport m from \"../../../definedMessages\";\r\n\r\nimport {\r\n    FieldInput, \r\n    FieldSelectCountry, \r\n    FieldFile, \r\n    FieldOrganizationType, \r\n    FieldPaymentMethod\r\n} from \"./Field\";\r\n\r\nimport fields, {\r\n    customerFields,\r\n    companyFields,\r\n    bankTransferFields, \r\n    paypalFields, \r\n    bitcoinFields, \r\n    hawalaFields, \r\n    otherTransferSystemsFields\r\n} from \"./fields\";\r\n\r\nconst MAX_CHARACTERS = 255;\r\n\r\nconst methodFields = [\r\n    bankTransferFields, \r\n    paypalFields, \r\n    otherTransferSystemsFields, \r\n    otherTransferSystemsFields, \r\n    hawalaFields,\r\n    bitcoinFields\r\n];\r\n\r\nconst {StringType, NumberType, ArrayType} = Schema.Types;\r\n\r\n\r\nconst maxFileSize = 5; // MB\r\nconst maxFiles = 5;\r\n\r\nexport default ({\r\n    show,\r\n    onClose,\r\n    maxWidth = 1000,\r\n    modify = false,\r\n    organizationTypeList,\r\n    countryList,\r\n    paymentMethodList,\r\n    createPaymentDetails,\r\n    modifyPaymentDetails,\r\n    getPaymentDetailsList,\r\n    defaultFormValue = false,\r\n}) => {\r\n    \r\n    const {formatMessage} = useIntl();\r\n\r\n    const formModel = Schema.Model({\r\n        // type fields\r\n        ot_key: NumberType().isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        pm_key: NumberType()\r\n            .isRequired( formatMessage(m.thisFieldIsRequired) )\r\n            .addRule((value, data) => {\r\n                if (data.ot_key === 2 && value === 5)\r\n                    return false;\r\n            }, 'This method is not allowed with the \"company\" option'),\r\n\r\n        // customer fields\r\n        customer_name: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        customer_last_name: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        tax_vat_number: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        customer_cntr_code: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        'customer_address.city': StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        'customer_address.region': StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})),\r\n        'customer_address.address': StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        'customer_address.postal_code': StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        'customer_phone': StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        ext_files: ArrayType()\r\n            .addRule( (value, data) => {\r\n                return (data.ot_key === 2 || (value && value.length > 0)) ? true : false;\r\n            }, formatMessage(m.thisFieldIsRequired), true )\r\n            .addRule( (value) => value.length > maxFiles ? false : true, `Maximum number of files is ${maxFiles}` )\r\n            .addRule( (value) => {\r\n                const names = [];\r\n                for (const file of value) {\r\n                    if (file.blobFile && file.blobFile.size > (1024 * 1024 * maxFileSize))\r\n                        names.push(file.name);\r\n                }\r\n                return !names.length\r\n            }, formatMessage(m.fileSizeShouldNotExceed, {size: maxFileSize}) ),\r\n\r\n        // beneficiary fields\r\n        beneficiary_name: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        beneficiary_last_name: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS}))\r\n            .addRule( (value, data) => {\r\n                if ( !value ) {\r\n                    if (data.ot_key === 2 && data.pm_key === 1)\r\n                        return true;\r\n    \r\n                    return false\r\n                }\r\n            }, formatMessage(m.thisFieldIsRequired), true ),\r\n        beneficiary_cntr_code: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        'beneficiary_address.region': StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})),\r\n        'beneficiary_address.city': StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        'beneficiary_address.address': StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        'beneficiary_address.postal_code': StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n\r\n        // bank transfer fields\r\n        bank_name: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        bank_cntr_code: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        'bank_address.region': StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})),\r\n        'bank_address.city': StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        'bank_address.address': StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})),\r\n        'bank_address.postal_code': StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})),\r\n        account_iban_number: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        swift_number: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        intermediate_bank_details: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n\r\n        // paypal fields\r\n        paypal_id: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        \r\n        // btc fields\r\n        btc_wallet_number: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n        \r\n        // hawala fields\r\n        hawala_description: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})).isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n    });\r\n\r\n\r\n    let formRef = null;\r\n\r\n    const [formValue, setFormValue] = useState(defaultFormValue || {ot_key: 1, pm_key: 1});\r\n    const [activeFields, setActiveFields] = useState([]);\r\n    const resizedWidth = useWindowWidth();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n\r\n    // effect: change form data by defaults\r\n    useEffect(() => {\r\n        if (defaultFormValue) {\r\n            setFormValue({...defaultFormValue});\r\n        }\r\n    }, [defaultFormValue]);\r\n\r\n\r\n    // effect: set active fields\r\n    useEffect( () => {\r\n        const [personal, beneficiary] = setFormFields(formValue.ot_key, formValue.pm_key);\r\n        setActiveFields([...personal, ...beneficiary]);\r\n    }, [formValue.ot_key, formValue.pm_key] );\r\n\r\n\r\n    // effect: prevent \"hawala\" && \"company\" option\r\n    useEffect( () => {\r\n        if (formValue.ot_key === 2 && formValue.pm_key === 5) {\r\n            setFormValue({...formValue, pm_key: 1});\r\n        }\r\n    }, [formValue.ot_key, formValue.pm_key] );\r\n\r\n\r\n    // submit data\r\n    const handleFormSubmit = async () => {\r\n\r\n        const fieldsValidity = [];\r\n        for (const fieldName of activeFields) {\r\n            fieldsValidity.push( formRef.checkForField(fieldName) );\r\n        }\r\n        if (fieldsValidity.includes(false))\r\n            return;\r\n\r\n        setLoading(true);\r\n        const formValue = formRef.getFormValue();\r\n        const data = {\r\n            ot_key: formValue.ot_key,\r\n            pm_key: formValue.pm_key\r\n        };\r\n        if (modify && formValue.id) {\r\n            delete data.ot_key;\r\n            delete data.pm_key;\r\n            data.target = {\r\n                payment_detail_id: formValue.id\r\n            }\r\n        }\r\n\r\n        for (const field of activeFields) {\r\n            \r\n            if (formValue[field] === undefined || formValue[field] === null)\r\n                continue;\r\n           \r\n            if (field === \"ext_files\") {\r\n                const files = [];\r\n                for (const file of formValue[field]) {\r\n                    const fileBase64 = file.blobFile \r\n                        ? await toBase64(file.blobFile)\r\n                        : file.url;\r\n                    const [type, content] = fileBase64.split(',');\r\n    \r\n                    files.push( {\r\n                        file: content,\r\n                        type: type.split(';')[0].split(':')[1],\r\n                        fileKey: file.fileKey,\r\n                        name: file.name,\r\n                        status: file.status\r\n                    } );\r\n                }\r\n                data[field] = files;\r\n                continue;\r\n            }\r\n\r\n            data[field] = formValue[field];\r\n        }\r\n\r\n        const response = !modify\r\n            ? await createPaymentDetails( parse(data) ) \r\n            : await modifyPaymentDetails( parse(data) );\r\n\r\n        if (response) {\r\n            if (response instanceof Error) {\r\n                Alert.error(\"No permissions\");\r\n            } else {\r\n                getPaymentDetailsList();\r\n                onClose(response);\r\n            }\r\n        }\r\n        \r\n        setLoading(false);\r\n    };\r\n\r\n\r\n    const setFormFields = (organizationType, paymentMethod) => {\r\n        // company + hawala\r\n        if (organizationType === 2 && paymentMethod === 5) {\r\n            return [[], []];\r\n        }\r\n        // private person + hawala\r\n        if (organizationType === 1 && paymentMethod === 5) {\r\n            return [[], ['hawala_description']];\r\n        }\r\n        // default\r\n        const organizationFields = organizationType === 1 ? customerFields : companyFields;\r\n        return [organizationFields, methodFields[paymentMethod - 1]]\r\n    };\r\n\r\n\r\n    const renderFields = (fieldNames = [], formValue) => (\r\n\r\n        fieldNames.map((fieldName) => {\r\n\r\n            const {type, name, label: defaultLabel, labelId, hideOn, ...props} = fields[fieldName];\r\n\r\n            // hide on option\r\n            if (hideOn && Array.isArray(hideOn)) {\r\n                for (const conditionItem of hideOn) {\r\n                    const keys = Object.keys(conditionItem || {});\r\n                    const status = keys.map(key => {\r\n                        return formValue[key] && formValue[key] === conditionItem[key];\r\n                    });\r\n                    \r\n                    if (!status.includes(false))\r\n                        return null;\r\n                }\r\n            }\r\n\r\n            // get label\r\n            const label = labelId && m[labelId] ? formatMessage(m[labelId]) : defaultLabel;\r\n\r\n            switch (type) {\r\n                case 'select_country':\r\n                    return <FieldSelectCountry key={name} name={name} label={label} data={countryList} {...props} />;\r\n\r\n                case 'file':\r\n                    const label_ = formValue.ot_key === 1 \r\n                        ? formatMessage(m.passportScans)\r\n                        : formatMessage(m.certificateOfIncorporation);\r\n                    return <FieldFile key={name} name={name} defaultFileList={formValue[name]} label={label_} {...props} />;\r\n\r\n                default:\r\n                    return <FieldInput key={name} name={name} label={label} {...props} />\r\n            }\r\n        })\r\n    );\r\n\r\n\r\n    const clearForm = () => {\r\n        setFormValue({ot_key: 1, pm_key: 1});\r\n    };\r\n\r\n\r\n    const cleanErrors = () => {\r\n        formRef.cleanErrors();\r\n    };\r\n\r\n    return (\r\n        <S.FormModal\r\n            show={show}\r\n            title={modify \r\n                ? formatMessage(m.modifyPaymentDetails)\r\n                : formatMessage(m.addNewPaymentDetails)\r\n            }\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            showFooter={true}\r\n            confirmButtonText={formatMessage(m.saveChanges)}\r\n            loading={loading}\r\n            keyboard={false}\r\n            onConfirm={handleFormSubmit}\r\n            onClose={() => {\r\n                onClose(false);\r\n            }}\r\n            onExited={() => {\r\n                clearForm();\r\n            }}\r\n        >\r\n\r\n                <Form\r\n                    ref={ref => formRef = ref}\r\n                    model={formModel}\r\n                    formValue={formValue}\r\n                    onChange={setFormValue}\r\n                >\r\n                    <S.FlexBlock>\r\n                        <S.FlexChild>\r\n                            <FieldOrganizationType\r\n                                data={organizationTypeList}\r\n                                label={formatMessage(m.chooseOrganizationType)}\r\n                                disabled={modify}\r\n                                onChange={cleanErrors}\r\n                            />\r\n                        </S.FlexChild>\r\n\r\n                        <S.FlexChild>\r\n                            <FieldPaymentMethod\r\n                                data={paymentMethodList}\r\n                                label={formatMessage(m.paymentMethod)}\r\n                                disabledItemValues={formValue.ot_key === 2 ? [5] : []}\r\n                                disabled={modify}\r\n                                onChange={cleanErrors}\r\n                            />\r\n                        </S.FlexChild>\r\n\r\n                    </S.FlexBlock>\r\n\r\n                    <Spacer size={30}/>\r\n\r\n                    <S.FormColumns>\r\n                        {setFormFields(formValue.ot_key, formValue.pm_key).map((fieldsGroup, index, arr) => {\r\n                            if (!fieldsGroup.length)\r\n                                return null;\r\n                            \r\n                            return (\r\n                                <>\r\n                                    {index > 0 && arr[0].length > 0 && \r\n                                        <Divider style={{width: 0}} vertical />\r\n                                    }\r\n                                    <S.FormColumn colWidth=\"50%\">\r\n                                        {renderFields(fieldsGroup, formValue)}\r\n                                    </S.FormColumn>\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </S.FormColumns>\r\n                </Form>\r\n        </S.FormModal>\r\n    )\r\n};","import React, {useState} from \"react\";\r\nimport Modal from '../../components/Modal';\r\nimport {useIntl} from \"react-intl\";\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport m from \"../../definedMessages\";\r\nimport {CustomModalClient} from \"../../components/base\";\r\n\r\nexport default ({\r\n    show,\r\n    onClose,\r\n    maxWidth = 600,\r\n    selectedItem,\r\n    removePaymentDetails,\r\n    getPaymentDetailsList,\r\n}) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n\r\n    const resizedWidth = useWindowWidth();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleSuccess = async () => {\r\n        setLoading(true);\r\n\r\n        const data = {\r\n            target: {\r\n                payment_detail_id: (selectedItem || {})['id']\r\n            },\r\n        }\r\n\r\n        await removePaymentDetails(data);\r\n\r\n        getPaymentDetailsList();\r\n        setLoading(false);\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <CustomModalClient\r\n            show={show}\r\n            onClose={() => onClose(false)}\r\n            title={formatMessage(m.removePaymentDetail)}\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            showFooter={true}\r\n            loading={loading}\r\n            confirmButtonText={formatMessage(m.yes)}\r\n            focusTarget=\"close\"\r\n            onConfirm={handleSuccess}\r\n        >\r\n            {formatMessage(m.areYouSure)}\r\n        </CustomModalClient>\r\n    )\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport PageHeader from \"../../components/base/PageHeader\";\r\nimport {FormattedMessage} from \"react-intl\";\r\nimport PaymentDetailsTable from \"./PaymentDetailsTable\";\r\nimport {FlexGrid, FlexGridItem} from \"../../components/base/FlexGrid\";\r\nimport styled from \"styled-components\";\r\nimport {Icon} from \"rsuite\";\r\nimport {Spacer} from \"../../components/base/Spacer\";\r\nimport ModalAddPayment from \"./ModalAddPaymentDetail\";\r\nimport {LOCAL_STORAGE_USER_INFO_DIALER} from \"../../const\";\r\nimport ModalRemovePaymentDetail from \"./ModalRemovePaymentDetail\";\r\nimport flaser from \"object-flaser/lib/flaser\";\r\nimport {ButtonPrimary} from \"../../components/base/BaseButton\";\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\nimport { PAYMENT_DETAIL_LIST_API } from \"const/apiMethods\";\r\nimport { checkPermissionsFor } from \"store/storeHelpers\";\r\n\r\n\r\nconst PaymentDetails = ({\r\n    data, \r\n    loading,\r\n    organizationTypeList,\r\n    countryList,\r\n    paymentMethodList, \r\n    getPaymentDetailsList,\r\n    getPaymentDetailsSingle,\r\n    createPaymentDetails,\r\n    modifyPaymentDetails,\r\n    removePaymentDetails,\r\n    permissions,\r\n}) => {\r\n\r\n    const [showModalAddPaymentDetail, setShowModalAddPaymentDetail] = useState(false);\r\n    const [showModalRemovePaymentDetail, setShowModalRemovePaymentDetail] = useState(false);\r\n    const [selectedItem, setSelectedItem] = useState(null);\r\n    const [isModify, setIsModify] = useState(false);\r\n    const [addPaymentDefaultValue, setAddPaymentDefaultValue] = useState(false);\r\n    const [loadingEditElementsSet, setLoadingEditElementsSet] = useState(new Set());\r\n\r\n    const accountInfoStorage = localStorage.getItem(LOCAL_STORAGE_USER_INFO_DIALER);\r\n    const parsedAccountInfo = accountInfoStorage !== null ? JSON.parse(accountInfoStorage) : {\r\n        session: false\r\n    };\r\n    const accountId = parsedAccountInfo && parsedAccountInfo.session ? parsedAccountInfo.session.account.id : null;\r\n\r\n    \r\n    useEffect(() => {\r\n        if (checkPermissionsFor(PAYMENT_DETAIL_LIST_API)) {\r\n            getPaymentDetailsList();\r\n        }\r\n    }, [permissions]);\r\n\r\n    const onShowModalAddPaymentDetail = () => {\r\n        setShowModalAddPaymentDetail(true);\r\n    };\r\n\r\n    const closeModalAddPaymentDetail = () => {\r\n        setIsModify(false);\r\n        setAddPaymentDefaultValue(false);\r\n        setShowModalAddPaymentDetail(false);\r\n    };\r\n\r\n    const handleEditPaymentDetails = async (value) => {\r\n        const {id} = value;\r\n\r\n        // set elements loading status\r\n        const editElements = new Set(loadingEditElementsSet);\r\n        setLoadingEditElementsSet( editElements.add(id) );\r\n\r\n        const response = await getPaymentDetailsSingle({target: {payment_detail_id: id}});\r\n\r\n        // remove elements loading status\r\n        if (editElements.has(id)) {\r\n            editElements.delete(id);\r\n            setLoadingEditElementsSet(editElements);\r\n        }\r\n\r\n        if (!response && response.payment_detail) {\r\n            return;\r\n        }\r\n\r\n        const fetchedData = response.payment_detail;\r\n\r\n        let files = null;\r\n        if (fetchedData.ext_files) {\r\n            files = [];\r\n            for (const file of fetchedData.ext_files) {\r\n                files.push({\r\n                    url: `data:${file.type};base64,${file.file}`,\r\n                    fileKey: file.file_id,\r\n                    name: file.name,\r\n                });\r\n            }\r\n        }\r\n\r\n        const defaultValue = {\r\n            ...fetchedData,\r\n            ext_files: files\r\n        }\r\n\r\n        setIsModify(true);\r\n        setAddPaymentDefaultValue( flaser(defaultValue) );\r\n        setShowModalAddPaymentDetail(true);\r\n    };\r\n\r\n    const handleRemovePaymentDetails = (value) => {\r\n        setSelectedItem(value);\r\n        setShowModalRemovePaymentDetail(true);\r\n    };\r\n\r\n\r\n    return (\r\n        <PanelLayout>\r\n            <PageHeader title={<FormattedMessage id=\"common.paymentDetails\" defaultMessage=\"Payment details\" />}/>\r\n\r\n            <FlexGrid>\r\n                <FlexGridItem grow={1}>\r\n                    <StyledActionButtonWrapper>\r\n                        <ButtonPrimary\r\n                            onClick={onShowModalAddPaymentDetail}\r\n                        >\r\n                            + <FormattedMessage id=\"paymentDetails.addNew\" defaultMessage=\"Add new\"/>\r\n                        </ButtonPrimary>\r\n                    </StyledActionButtonWrapper>\r\n                </FlexGridItem>\r\n            </FlexGrid>\r\n\r\n            <Spacer/>\r\n\r\n            <PaymentDetailsTable\r\n                data={data}\r\n                loading={loading}\r\n                loadingEditButtonsSet={loadingEditElementsSet}\r\n                {...{\r\n                    handleRemovePaymentDetails,\r\n                    handleEditPaymentDetails\r\n                }}\r\n            />\r\n\r\n            <ModalAddPayment\r\n                show={showModalAddPaymentDetail}\r\n                onClose={closeModalAddPaymentDetail}\r\n                defaultFormValue={isModify ? addPaymentDefaultValue : false }\r\n                modify={isModify}\r\n                {...{\r\n                    organizationTypeList,\r\n                    countryList,\r\n                    paymentMethodList,\r\n                    createPaymentDetails,\r\n                    modifyPaymentDetails,\r\n                    getPaymentDetailsList\r\n                }}\r\n            />\r\n\r\n            <ModalRemovePaymentDetail\r\n                show={showModalRemovePaymentDetail}\r\n                onClose={() => {\r\n                    setShowModalRemovePaymentDetail(false)\r\n                }}\r\n                {...{\r\n                    accountId,\r\n                    selectedItem,\r\n                    getPaymentDetailsList,\r\n                    removePaymentDetails\r\n                }}\r\n            />\r\n        </PanelLayout>\r\n    )\r\n};\r\n\r\nexport default PaymentDetails;\r\n\r\nconst StyledActionButtonWrapper = styled.div`\r\n    text-align: center;\r\n    \r\n    @media (min-width: 768px) {\r\n        text-align: right;\r\n    }\r\n`;\r\n\r\nconst StyledActionButtonIcon = styled(Icon)`\r\n    margin-right: 5px;\r\n`;","import { connect } from \"react-redux\";\r\nimport {\r\n    getPaymentDetailsList,\r\n    getPaymentDetailsSingle,\r\n    createPaymentDetails,\r\n    modifyPaymentDetails,\r\n    removePaymentDetails\r\n} from \"../../actions/paymentDetails\";\r\nimport PaymentDetails from \"./PaymentDetails\";\r\n\r\nconst mapState = ({paymentDetails, references, auth}) => ({\r\n    permissions: auth.permissions,\r\n    organizationTypeList: references.organization_type_list,\r\n    countryList: references.country_list,\r\n    paymentMethodList: references.payment_method_list,\r\n    data: paymentDetails.items,\r\n    loading: paymentDetails.loading\r\n});\r\n\r\nexport default connect(mapState, {\r\n    getPaymentDetailsList,\r\n    getPaymentDetailsSingle,\r\n    createPaymentDetails,\r\n    modifyPaymentDetails,\r\n    removePaymentDetails\r\n})(PaymentDetails);","import styled, { css } from \"styled-components\";\r\nimport {Table as Table_, FormControl, ControlLabel, FormGroup as FormGroup_} from \"rsuite\";\r\nimport Modal from \"../../components/Modal/Modal\";\r\nimport {ButtonRowClient, ButtonToolbar} from \"../../components/base/BaseButton\";\r\nimport BaseTable from \"../../components/base/BaseTable\";\r\nimport {CustomModalClient} from \"../../components/base\";\r\n\r\nexport const Table = styled(BaseTable).attrs(props => ({\r\n    height: 150,\r\n    rowHeight: 30,\r\n    headerHeight: 30\r\n}))``;\r\n\r\nexport const FlexBlock = styled.div`\r\n    align-items: center;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n    flex-grow: 1;\r\n    font-size: 1.3rem;\r\n    font-weight: 600;\r\n    line-height: 1.2em;\r\n    margin: 0;\r\n    width: auto;\r\n    color: var(--color-brand1);\r\n    \r\n    @media (min-width: 768px) {\r\n        max-width: 200px;\r\n    }\r\n`;\r\n\r\nexport const ActionButtonWrapper = styled.div`\r\n    \r\n    @media (min-width: 768px) {\r\n        text-align: right;\r\n    }\r\n`;\r\n\r\nexport const FormModal = styled(CustomModalClient)`\r\n    .rs-modal-content {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .rs-modal-footer {\r\n        margin-top: auto;\r\n        padding-bottom: 20px;\r\n        padding-top: 20px;\r\n    }\r\n`;\r\n\r\nexport const Label = styled(ControlLabel)`\r\n    flex-shrink: 0;\r\n    font-size: 18px;\r\n    padding: 0;   \r\n    text-align: left;\r\n    \r\n    @media (min-width: 768px) {\r\n        font-size: 14px;\r\n    }\r\n\r\n    && {\r\n        margin: 0 10px 0 0;\r\n    }\r\n\r\n    .rtl & {\r\n        text-align: right;\r\n        margin: 0 0 0 10px;\r\n    }\r\n    \r\n    ${props =>\r\n        props.disabled &&\r\n        css`\r\n            color: var(--color-disabled)\r\n        `\r\n    }\r\n`;\r\n\r\nexport const Field = styled(FormControl)`\r\n\r\n    &&& {\r\n        min-width: 0;\r\n        width: 100%;\r\n\r\n        ${props => \r\n            props.componentClass === 'textarea' &&\r\n            css`\r\n                min-height: 120px;\r\n                background: #fff;\r\n                // overflow-x: scroll;\r\n            `\r\n        }\r\n    }\r\n\r\n    ${props =>\r\n        props.disabled &&\r\n        css`\r\n            opacity: var(--value-disabled-opacity)\r\n        `\r\n    }\r\n`;\r\n\r\nexport const FieldAmountWrapper = styled.div`\r\n    width: 80px;\r\n`;\r\n\r\nexport const FormRow = styled.div`\r\n    margin-bottom: -20px;\r\n    \r\n    @media (min-width: 600px) {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n    }\r\n`;\r\n\r\nexport const FormItem = styled.div`\r\n    padding-bottom: 20px;\r\n    padding-right: 20px;\r\n\r\n    .rtl & {\r\n        padding-right: 0;\r\n        padding-left: 20px;\r\n    }\r\n\r\n    &:last-child {\r\n        padding-right: 0;\r\n    }\r\n\r\n    .rs-form-control-wrapper {\r\n        vertical-align: top;\r\n    }\r\n\r\n    ${props =>\r\n        props.grow && \r\n        css`\r\n            flex-grow: 1;\r\n        `\r\n    }\r\n`;\r\n\r\nexport const FormGroup = styled(FormGroup_)`\r\n    display: block;\r\n    align-items: center;\r\n    display: flex;\r\n`;\r\n\r\nexport const Currency = styled.span`\r\n    display: block;\r\n    margin-left: 10px;\r\n\r\n    .rtl & {\r\n        margin-left: 0;\r\n        margin-right: 10px;\r\n    }\r\n`;\r\n\r\n\r\nexport const StyledTableActions = styled(ButtonToolbar)``;\r\n\r\n\r\nexport const StyledTableButton = styled(ButtonRowClient)`\r\n    && {\r\n        padding: 0 7px;\r\n        width: auto;\r\n    }\r\n`;","import React from \"react\";\r\nimport * as S from \"./styled\";\r\nimport { Button, Icon } from \"rsuite\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nexport default ({title = null, show = false, callback = null, ...props}) => {\r\n\r\n    const handleClick = (e) => {\r\n        if (callback) \r\n            callback(e);\r\n\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <S.FlexBlock align=\"middle\">\r\n            {title &&\r\n                <S.SectionTitle>{title}</S.SectionTitle>\r\n            }\r\n            <Button size=\"sm\" appearance=\"link\" onClick={handleClick}>\r\n                {show\r\n                    ? <>\r\n                        <Icon icon=\"angle-up\"/>&nbsp;\r\n                        <FormattedMessage id=\"common.hide\" defaultMessage=\"Hide\"/>\r\n                    </>\r\n                    : <>\r\n                        <Icon icon=\"angle-down\"/>&nbsp;\r\n                        <FormattedMessage id=\"common.show\" defaultMessage=\"Show\"/>\r\n                    </>\r\n                }\r\n            </Button>\r\n        </S.FlexBlock>\r\n    )\r\n};","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {renderColumn} from \"../../utils/helpers\";\r\nimport {Table} from 'rsuite';\r\nimport {SCREEN_MEDIA} from '../../const';\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport * as S from \"./styled.js\";\r\nimport {RtlContext} from \"../../App\";\r\n\r\nconst {sm} = SCREEN_MEDIA;\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\nexport default ({\r\n    data = [], \r\n    loading = false,\r\n    columns,\r\n    tableActions\r\n}) => {\r\n\r\n\r\n    const rtl = useContext(RtlContext);\r\n    const resizedWidth = useWindowWidth();\r\n    const [currentTop, setCurrentTop] = useState(0);\r\n\r\n    let tableRef = null;\r\n\r\n    useEffect(() => {\r\n        if (!tableRef)\r\n            return;\r\n        tableRef.scrollTop( Math.abs(currentTop) );\r\n    }, [data, loading, tableRef]);\r\n\r\n    // push table actions\r\n    const renderedColumns = columns.map(renderColumn);\r\n    if (tableActions) {\r\n        renderedColumns.push(tableActions);\r\n    }\r\n\r\n    // add fixing column to fix horizontal scroll\r\n    const columnMobileFix = <Column key=\"table_scrollfix\" width={0} fixed><HeaderCell/><Cell/></Column>;\r\n    renderedColumns.push(columnMobileFix);\r\n\r\n    if ( rtl ) renderedColumns.reverse();\r\n\r\n    return (\r\n        <S.Table\r\n            virtualized\r\n            ref={ref => tableRef = ref}\r\n            data={data}\r\n            loading={loading}\r\n            autoHeight={resizedWidth <= sm.max}\r\n            onScroll={(scrollX, scrollY) => {\r\n                setCurrentTop(scrollY);\r\n            }}\r\n        >\r\n            {renderedColumns}\r\n        </S.Table>\r\n    )\r\n};","import React from \"react\";\r\nimport {getFormattedTime} from \"../../../utils/helpers\";\r\nimport {useIntl} from \"react-intl\";\r\nimport {Table} from \"rsuite\";\r\nimport CommonTable from './../CommonTable';\r\nimport * as S from \"../styled.js\";\r\nimport m from \"../../../definedMessages\";\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\n\r\nexport default ({\r\n    data = [], \r\n    loading = false, \r\n    handleCancelPaymentRequest,\r\n    currencyName,\r\n}) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n\r\n    const statusLabels = [\r\n        formatMessage(m.active),\r\n        formatMessage(m.canceled),\r\n        formatMessage(m.passed),\r\n        formatMessage(m.rejected),\r\n        formatMessage(m.completed)\r\n    ];\r\n\r\n    const columns = [\r\n        {\r\n            id: 'amount',\r\n            label: formatMessage(m.amount),\r\n            value: ({amount}) => `${amount}${currencyName ? ' ' + currencyName : ''}`,\r\n            flexGrow: 2,\r\n            minWidth: 150,\r\n            width: 287,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'date',\r\n            label: formatMessage(m.date),\r\n            value: ({date}) => getFormattedTime(date),\r\n            flexGrow: 2,\r\n            minWidth: 150,\r\n            width: 287,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'paymentInfo',\r\n            label: formatMessage(m.paymentInfo),\r\n            value: ({payment_detail_info, move_to_account_name}) => {\r\n                if (payment_detail_info)\r\n                    return payment_detail_info;\r\n\r\n                if (move_to_account_name)\r\n                    return <>\r\n                        {formatMessage(m.transferToAccountName, {\r\n                            account_name: <b>{move_to_account_name}</b>\r\n                        })}\r\n                    </>;\r\n\r\n                return '-';\r\n            },\r\n            flexGrow: 5,\r\n            minWidth: 150,\r\n            width: 718,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'status',\r\n            label: formatMessage(m.status),\r\n            value: ({status}) => statusLabels[status],\r\n            flexGrow: 2,\r\n            minWidth: 150,\r\n            width: 287,\r\n            align: 'center'\r\n        },\r\n    ];\r\n\r\n    const tableActions = (\r\n        <Column key=\"table__actions\">\r\n            <HeaderCell> </HeaderCell>\r\n            <Cell>\r\n                {rowData => {\r\n\r\n                    if (rowData.status !== 0)\r\n                        return null;\r\n\r\n                    return (\r\n                        <S.StyledTableActions>\r\n\r\n                            <S.StyledTableButton\r\n                                onClick={() => {\r\n                                    handleCancelPaymentRequest(rowData)\r\n                                }}\r\n                            >\r\n                                {formatMessage(m.cancel)}\r\n                            </S.StyledTableButton>\r\n                            \r\n                        </S.StyledTableActions>\r\n                    );\r\n                }}\r\n            </Cell>\r\n        </Column>\r\n    );  \r\n\r\n    return (\r\n        <CommonTable\r\n            data={data}\r\n            loading={loading}\r\n            columns={columns}\r\n            tableActions={tableActions}\r\n        />\r\n    )\r\n};","import React, {useState} from \"react\";\r\nimport {useIntl} from \"react-intl\";\r\nimport {useWindowWidth} from \"../../../hooks\";\r\nimport m from \"../../../definedMessages\";\r\nimport {CustomModalClient} from \"../../../components/base\";\r\n\r\nexport default ({\r\n    show,\r\n    onClose,\r\n    maxWidth = 600,\r\n    selectedRequest,\r\n    accountId,\r\n    cancelPaymentRequest,\r\n    getPaymentRequestList,\r\n    onSuccess,\r\n}) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n\r\n    const resizedWidth = useWindowWidth();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleSuccess = async () => {\r\n        setLoading(true);\r\n\r\n        const data = {\r\n            target: {\r\n                // account_id: accountId,\r\n                payment_request_id: (selectedRequest || {})['id']\r\n            },\r\n        }\r\n        \r\n        await cancelPaymentRequest(data);\r\n\r\n        getPaymentRequestList({accountId});\r\n        setLoading(false);\r\n        onSuccess(selectedRequest.amount);\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <CustomModalClient\r\n            show={show}\r\n            onClose={() => onClose(false)}\r\n            title={formatMessage(m.cancelPaymentRequest)}\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            showFooter={true}\r\n            loading={loading}\r\n            confirmButtonText={formatMessage(m.yes)}\r\n            focusTarget=\"close\"\r\n            onConfirm={handleSuccess}\r\n        >\r\n            {formatMessage(m.areYouSure)}\r\n        </CustomModalClient>\r\n    )\r\n}","import React, {useState, useEffect, useContext} from \"react\";\r\nimport {useIntl} from \"react-intl\";\r\nimport PaymentsSectionHeader from \"../PaymentsSectionHeader\";\r\nimport PaymentsRequestTable from \"./PaymentsRequestTable\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\nimport {Link} from \"react-router-dom\";\r\nimport ModalCancelPaymentRequest from \"./../ModalCancelPaymentRequest\";\r\nimport {Collapse} from \"react-collapse\";\r\nimport {ButtonPrimary, ButtonWrapper} from \"../../../components/base/BaseButton\";\r\nimport m from \"../../../definedMessages\";\r\nimport {RtlContext} from \"../../../App\";\r\nimport { PAYMENT_REQUEST_LIST_API } from \"const/apiMethods\";\r\nimport { checkPermissionsFor } from \"store/storeHelpers\";\r\n\r\n\r\nexport default ({\r\n    paymentRequestItems,\r\n    paymentRequestLoading,\r\n    accountId,\r\n    cancelPaymentRequest,\r\n    getPaymentRequestList,\r\n    openModalRequestPayment,\r\n    currencyName,\r\n    readyForPayment,\r\n    setReadyForPayment,\r\n    permissions,\r\n}) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n    \r\n    const [showTable, setShowTable] = useState(false);\r\n    const [selectedRequest, setSelectedRequest] = useState(null);\r\n    const [showModalCancelPaymentRequest, setShowModalCancelPaymentRequest] = useState(false);\r\n\r\n    useEffect( () => {\r\n        if ( !checkPermissionsFor(PAYMENT_REQUEST_LIST_API) ) {\r\n            return;\r\n        }\r\n        getPaymentRequestList();\r\n    }, [permissions] );\r\n\r\n    const handleCancelPaymentRequest = (value) => {\r\n        setSelectedRequest(value);\r\n        setShowModalCancelPaymentRequest(true);\r\n    };\r\n\r\n    const changeReadyForPayment = (amount) => {\r\n        setReadyForPayment(+readyForPayment + amount);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <PaymentsSectionHeader\r\n                title={formatMessage(m.paymentRequest)}\r\n                show={showTable}\r\n                callback={() => {\r\n                    setShowTable(!showTable);\r\n                }}\r\n            />\r\n\r\n            <Collapse isOpened={showTable}>\r\n                <div>\r\n                    <Spacer />\r\n                    <ButtonWrapper justify={\"end\"}>\r\n                        <ButtonPrimary componentClass={Link} to=\"/payment-details\">\r\n                            {formatMessage(m.managePaymentDetails)}\r\n                        </ButtonPrimary>\r\n                        <ButtonPrimary onClick={openModalRequestPayment}>\r\n                            {formatMessage(m.requestPayment)}\r\n                        </ButtonPrimary>\r\n                    </ButtonWrapper>\r\n\r\n                    <Spacer/>\r\n                    <PaymentsRequestTable\r\n                        data={paymentRequestItems}\r\n                        loading={paymentRequestLoading}\r\n                        {...{\r\n                            handleCancelPaymentRequest,\r\n                            currencyName,\r\n                        }}\r\n                    />\r\n                </div>\r\n            </Collapse>\r\n\r\n            <ModalCancelPaymentRequest \r\n                show={showModalCancelPaymentRequest}\r\n                onSuccess={changeReadyForPayment}\r\n                onClose={() => {\r\n                    setShowModalCancelPaymentRequest(false)\r\n                }}\r\n                {...{\r\n                    accountId,\r\n                    selectedRequest,\r\n                    cancelPaymentRequest,\r\n                    getPaymentRequestList\r\n                }}\r\n            />\r\n        </>\r\n    )\r\n};","import React from \"react\";\r\nimport {useIntl} from \"react-intl\";\r\nimport CommonTable from \"../CommonTable\";\r\nimport m from \"../../../definedMessages\";\r\n\r\nexport default ({\r\n    data = [], \r\n    loading = false,\r\n    currencyName,\r\n}) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n\r\n    const columns = [\r\n        {\r\n            id: 'amount',\r\n            label: formatMessage(m.amount),\r\n            value: ({sum}) => `${sum}${currencyName ? ' ' + currencyName : ''}`,\r\n            flexGrow: 2,\r\n            minWidth: 200,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'date',\r\n            label: formatMessage(m.date),\r\n            dataKey: \"date\",\r\n            flexGrow: 2,\r\n            minWidth: 200,\r\n            align: 'center'\r\n        },\r\n        {\r\n            id: 'paymentDetails',\r\n            label: formatMessage(m.paymentDetails),\r\n            dataKey: \"bank_detail\",\r\n            flexGrow: 2,\r\n            minWidth: 200,\r\n            align: 'center'\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <CommonTable\r\n            data={data}\r\n            loading={loading}\r\n            columns={columns}\r\n        />\r\n    )\r\n}","import React from \"react\";\r\nimport {useIntl} from \"react-intl\";\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport {Form} from \"rsuite\";\r\nimport {FlexGrid, FlexGridItem} from \"../../components/base/FlexGrid\";\r\nimport FieldDataRange from \"../../components/Form/FieldDataRange\";\r\nimport m from \"../../definedMessages\";\r\nimport {BaseDateRangePicker} from \"../../components/base/BaseForm\";\r\n\r\n\r\nexport default ({filters, onChangeFilters}) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    return (\r\n        <Form\r\n            formDefaultValue={filters}\r\n            onChange={(value) => {\r\n                onChangeFilters(value);\r\n            }}\r\n        >\r\n            <FlexGrid align=\"middle\">\r\n                {(resizedWidth > 1005) && \r\n                    <FlexGridItem>{formatMessage(m.dateFrom)}</FlexGridItem>\r\n                }\r\n\r\n                <FlexGridItem>\r\n                    <FieldDataRange\r\n                        name=\"start_end_date\"\r\n                        accepter={BaseDateRangePicker}\r\n                    />\r\n                </FlexGridItem>\r\n            </FlexGrid>\r\n        </Form>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {injectIntl, defineMessages} from \"react-intl\";\r\nimport PaymentsSectionHeader from \"../PaymentsSectionHeader\";\r\nimport PaymentsListTable from \"./PaymentsListTable\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\nimport {getISOTime} from \"../../../utils/helpers\";\r\nimport {Collapse} from \"react-collapse\";\r\nimport CommonDateFilter from \"../CommonDateFilter\";\r\nimport { PAYMENT_LIST_DIALER_API } from \"const/apiMethods\";\r\nimport { checkPermissionsFor } from \"store/storeHelpers\";\r\n\r\nconst m = defineMessages({\r\n    paymentList: {id: \"payments.paymentList\", defaultMessage: \"Payment list\", description: 'Payments: Payment list'},\r\n});\r\n\r\nexport default injectIntl( ({\r\n    paymentItems, \r\n    paymentItemsLoading,\r\n    currencyName,\r\n    getPaymentList,\r\n    accountId,\r\n    permissions,\r\n    \r\n    intl\r\n}) => {\r\n\r\n    const {formatMessage} = intl;\r\n\r\n    const dateStart = new Date();\r\n    dateStart.setDate(1);\r\n    dateStart.setHours(0, 0, 0, 0);\r\n    dateStart.setMonth(dateStart.getMonth() - 1);\r\n    const dateEnd = new Date(new Date().setHours(23, 59, 59, 999));\r\n\r\n    const [showTable, setShowTable] = useState(true);\r\n\r\n    useEffect( () => {\r\n        if ( !checkPermissionsFor(PAYMENT_LIST_DIALER_API) ) {\r\n            return;\r\n        }\r\n        const data = {target: {account_id: accountId}};\r\n        data.filter = {\r\n            start_date: getISOTime(dateStart),\r\n            end_date: getISOTime(dateEnd)\r\n        }\r\n        getPaymentList(data);\r\n    }, [permissions] );\r\n\r\n    const handleChangeFilters = (value) => {\r\n        if (!value)\r\n            return;\r\n\r\n        const start_date = new Date(value.start_end_date[0].setHours(0, 0, 0, 0));\r\n        const end_date = new Date(value.start_end_date[1].setHours(23, 59, 59, 999));\r\n\r\n        const filterData = {\r\n            start_date: getISOTime(start_date),\r\n            end_date: getISOTime(end_date),\r\n            start_end_date: value.start_end_date\r\n        }\r\n\r\n        getPaymentList({\r\n            target: {\r\n                account_id: accountId\r\n            },\r\n            filter: filterData\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <PaymentsSectionHeader\r\n                title={formatMessage(m.paymentList)}\r\n                show={showTable}\r\n                callback={() => {\r\n                    setShowTable(!showTable);\r\n                }}\r\n            />\r\n\r\n            <Collapse isOpened={showTable}>\r\n                <div>\r\n                    <Spacer/>\r\n\r\n                    <CommonDateFilter\r\n                        filters={{start_end_date: [dateStart, dateEnd]}}\r\n                        onChangeFilters={handleChangeFilters}\r\n                    />\r\n                    \r\n                    <Spacer/>\r\n\r\n                    <PaymentsListTable\r\n                        data={paymentItems}\r\n                        loading={paymentItemsLoading}\r\n                        {...{currencyName}}\r\n                    />\r\n                </div>\r\n            </Collapse>\r\n        </>\r\n    )\r\n} );","import React, {useCallback, useMemo} from \"react\";\r\nimport {\r\n    getFormattedTime,\r\n    getISOTime,\r\n    getAllowedRangesByIntervalMonth\r\n} from \"../../../utils/helpers\";\r\nimport {useIntl} from \"react-intl\";\r\nimport {LOCAL_STORAGE_TRAFFIC_STAT_FILTERS_DIALER} from '../../../const';\r\nimport {Table, Tooltip, Whisper} from \"rsuite\";\r\nimport * as S from \"../styled.js\";\r\nimport CommonTable from \"../CommonTable\";\r\nimport m from \"../../../definedMessages\";\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\nexport default ({\r\n    data = [], \r\n    loading = false, \r\n    openModalRequestPayment,\r\n    currencyName,\r\n    globalSettings,\r\n\r\n    intl\r\n}) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n\r\n    const columns = useMemo(() => {\r\n\r\n        const statusLabels = [\r\n            formatMessage(m.pending),\r\n            formatMessage(m.readyForPayment),\r\n            formatMessage(m.paid),\r\n        ];\r\n\r\n        return [\r\n            {\r\n                id: 'trafficPeriod',\r\n                label: formatMessage(m.trafficPeriod),\r\n                value: ({date_from, date_to}) => `${ getFormattedTime(date_from) } - ${ getFormattedTime(date_to)}`,\r\n                flexGrow: 2,\r\n                minWidth: 200,\r\n                align: 'center'\r\n            },\r\n            {\r\n                id: 'date',\r\n                label: formatMessage(m.date),\r\n                dataKey: \"date2\",\r\n                flexGrow: 2,\r\n                minWidth: 200,\r\n                align: 'center'\r\n            },\r\n            {\r\n                id: 'amount',\r\n                label: formatMessage(m.amount),\r\n                value: ({agr_send}) => `${agr_send}${currencyName ? ' ' + currencyName : ''}`,\r\n                flexGrow: 2,\r\n                minWidth: 200,\r\n                align: 'center'\r\n            },\r\n            {\r\n                id: 'status',\r\n                label: formatMessage(m.status),\r\n                value: ({status}) => statusLabels[status],\r\n                flexGrow: 2,\r\n                minWidth: 200,\r\n                align: 'center'\r\n            },\r\n        ]\r\n\r\n    }, [currencyName]);\r\n\r\n    const showDetails = useCallback((rowData) => {\r\n        const dateFrom = new Date(rowData.date_from);\r\n        const dateTo = new Date(rowData.date_to);\r\n\r\n        const filtersDefaultValue = {\r\n            group: \"range/a_number/b_number\",\r\n            checkbox: [\"range\", \"a_number\", \"b_number\"],\r\n            start_date: getISOTime(dateFrom),\r\n            end_date: getISOTime(dateTo),\r\n            start_end_date: [dateFrom, dateTo]\r\n        }\r\n        localStorage.setItem(LOCAL_STORAGE_TRAFFIC_STAT_FILTERS_DIALER, JSON.stringify(filtersDefaultValue));\r\n        window.open('/traffic/?start_tab=traffic_reports');\r\n    }, []);\r\n\r\n\r\n    const tableActions = (\r\n        <Column width={210} key=\"table__actions\">\r\n            <HeaderCell> </HeaderCell>\r\n            <Cell>\r\n                {rowData => {\r\n\r\n                    const dateFrom = new Date(rowData.date_from);\r\n                    const allowedRanges = getAllowedRangesByIntervalMonth(globalSettings.cdr_full__interval_month);\r\n                    const startDateYmd = `${dateFrom.getFullYear()}${('0' + (dateFrom.getMonth() + 1)).slice(-2)}${('0' + dateFrom.getDate()).slice(-2)}`;\r\n\r\n                    return (\r\n                        <S.StyledTableActions alignEnd>\r\n\r\n                            {rowData.status === 1 &&\r\n                                <S.StyledTableButton\r\n                                    onClick={openModalRequestPayment}\r\n                                >\r\n                                    {formatMessage(m.requestPayment)}\r\n                                </S.StyledTableButton>\r\n                            }\r\n\r\n                            {startDateYmd < allowedRanges[0]\r\n                                ?\r\n                                <Whisper\r\n                                    preventOverflow\r\n                                    trigger=\"hover\"\r\n                                    speaker={<Tooltip>{formatMessage(m.cdrHistoryPeriodIs, {count: globalSettings && globalSettings.cdr_full__interval_month})}</Tooltip>}\r\n                                    placement=\"auto\"\r\n                                >\r\n                                    <S.StyledTableButton\r\n                                        className=\"rs-btn-disabled\"\r\n                                    >\r\n                                        {formatMessage(m.details)}\r\n                                    </S.StyledTableButton>\r\n                                </Whisper>\r\n                                : <S.StyledTableButton\r\n                                    onClick={(e) => showDetails(rowData)}\r\n                                >\r\n                                    {formatMessage(m.details)}\r\n                                </S.StyledTableButton>\r\n                            }\r\n\r\n                        </S.StyledTableActions>\r\n                    );\r\n                }}\r\n            </Cell>\r\n        </Column>\r\n    );  \r\n\r\n    return (\r\n        <CommonTable\r\n            data={data}\r\n            loading={loading}\r\n            columns={columns}\r\n            tableActions={tableActions}\r\n        />\r\n    )\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport {injectIntl, defineMessages} from \"react-intl\";\r\nimport PaymentsSectionHeader from \"../PaymentsSectionHeader\";\r\nimport PaymentsTrafficReportsTable from \"./PaymentsTrafficReportsTable\";\r\nimport { Spacer } from \"../../../components/base/Spacer\";\r\nimport { getISOTime } from \"../../../utils/helpers\";\r\nimport { Collapse } from \"react-collapse\";\r\nimport CommonDateFilter from \"../CommonDateFilter\";\r\nimport { checkPermissionsFor } from \"store/storeHelpers\";\r\nimport { INVOICE_LIST_DIALER_API } from \"const/apiMethods\";\r\n\r\nconst m = defineMessages({\r\n    trafficReports: {id: \"payments.trafficReports\", defaultMessage: \"Traffic reports\", description: 'Payments: Traffic reports'}\r\n});\r\n\r\nexport default injectIntl( ({\r\n    paymentTrafficReportsItems, \r\n    paymentTrafficReportsLoading,\r\n    openModalRequestPayment,\r\n    currencyName,\r\n    getTrafficReportsList,\r\n    globalSettings,\r\n    accountId,\r\n    permissions,\r\n    \r\n    intl\r\n}) => {\r\n\r\n    const {formatMessage} = intl;\r\n\r\n    const dateStart = new Date();\r\n    dateStart.setDate(1);\r\n    dateStart.setHours(0, 0, 0, 0);\r\n    dateStart.setMonth(dateStart.getMonth() - 1);\r\n    const dateEnd = new Date(new Date().setHours(23, 59, 59, 999));\r\n\r\n    const [showTable, setShowTable] = useState(true);\r\n\r\n    useEffect( () => {\r\n        if ( !checkPermissionsFor(INVOICE_LIST_DIALER_API) ) {\r\n            return;\r\n        }\r\n        const data = {\r\n            target: {account_id: accountId},\r\n            filter: {\r\n                start_date: getISOTime(dateStart),\r\n                end_date: getISOTime(dateEnd)\r\n            }\r\n        };\r\n        getTrafficReportsList(data);\r\n    }, [permissions] );\r\n\r\n    const handleChangeFilters = (value) => {\r\n        if (!value)\r\n            return;\r\n\r\n        const start_date = new Date(value.start_end_date[0].setHours(0, 0, 0, 0));\r\n        const end_date = new Date(value.start_end_date[1].setHours(23, 59, 59, 999));\r\n\r\n        const filterData = {\r\n            start_date: getISOTime(start_date),\r\n            end_date: getISOTime(end_date),\r\n            start_end_date: value.start_end_date\r\n        }\r\n\r\n        getTrafficReportsList({\r\n            target: {\r\n                account_id: accountId\r\n            },\r\n            filter: filterData\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <PaymentsSectionHeader\r\n                title={formatMessage(m.trafficReports)}\r\n                show={showTable}\r\n                callback={() => {\r\n                    setShowTable(!showTable);\r\n                }}\r\n            />\r\n\r\n            <Collapse isOpened={showTable}>\r\n                <div>\r\n                    <Spacer/>\r\n                    <CommonDateFilter \r\n                        filters={{start_end_date: [dateStart, dateEnd]}}\r\n                        onChangeFilters={handleChangeFilters}\r\n                    />\r\n                    \r\n                    <Spacer/>\r\n                    <PaymentsTrafficReportsTable\r\n                        data={paymentTrafficReportsItems}\r\n                        loading={paymentTrafficReportsLoading}\r\n                        {...{\r\n                            globalSettings,\r\n                            openModalRequestPayment,\r\n                            currencyName\r\n                        }}\r\n                    />\r\n                </div>\r\n            </Collapse>\r\n        </>\r\n    )\r\n} );","import React, {useEffect, useState} from \"react\";\r\nimport {FormattedMessage, useIntl} from \"react-intl\";\r\nimport { useWindowWidth } from \"../../../hooks\";\r\nimport { Form, InputNumber, SelectPicker, Button, Input, Schema } from \"rsuite\";\r\nimport {Spacer} from \"../../../components/base/Spacer\";\r\nimport * as S from \"../styled\";\r\nimport {SCREEN_MEDIA} from '../../../const';\r\nimport m from \"../../../definedMessages\";\r\nimport {BaseInputField, BaseInputNumberField, BaseSelectPicker} from \"../../../components/base/BaseForm\";\r\n\r\nconst {sm} = SCREEN_MEDIA;\r\nconst {StringType, NumberType} = Schema.Types;\r\n\r\nexport default ({\r\n    show,\r\n    onClose,\r\n    maxWidth = 700,\r\n    paymentDetailsItems,\r\n    currencyName,\r\n    requestPayment,\r\n    getPaymentRequestList,\r\n    handleShowModalAddPaymentDetail,\r\n    accountId,\r\n    dropdownVisibility,\r\n    amountLimitMin = 0.01,\r\n    amountLimit,\r\n    onSuccess,\r\n\r\n    formValue,\r\n    setFormValue,\r\n}) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n    let formRef = null;\r\n\r\n    const formModel = Schema.Model({\r\n        amount: NumberType()\r\n            .isRequired( formatMessage(m.thisFieldIsRequired) )\r\n            .min(amountLimitMin, formatMessage(m.minNumber, {number: amountLimitMin}))\r\n            .max(amountLimit, formatMessage(m.maxNumber, {number: amountLimit})),\r\n        payment_detail_id: StringType()\r\n            .isRequired( formatMessage(m.thisFieldIsRequired) ),\r\n    });\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const resizedWidth = useWindowWidth();\r\n\r\n\r\n    // clean Amount error on limit change\r\n    useEffect( () => {\r\n        if (formRef)\r\n            formRef.cleanErrorForFiled('amount');\r\n    }, [amountLimitMin] );\r\n\r\n\r\n    const handleSubmit = async () => {\r\n        \r\n        if (!formRef.check() )\r\n            return null;\r\n\r\n        setLoading(true);\r\n\r\n        const value = formRef.getFormValue();\r\n        const data = {\r\n            ...value,\r\n            amount: +value.amount,\r\n            target: {\r\n                payment_detail_id: value.payment_detail_id,\r\n            },\r\n        };\r\n\r\n        delete data.payment_detail_id;\r\n\r\n        await requestPayment(data);\r\n        \r\n        getPaymentRequestList({accountId});\r\n        setLoading(false);\r\n        onSuccess(+value.amount);\r\n        onClose();\r\n    };\r\n\r\n\r\n    const renderMenuItem = (label, item) => {\r\n        return item.status === 1 ? label : <span style={{color: 'var(--color-disabled)'}}>{label}</span>;\r\n    };\r\n\r\n    return (\r\n        <S.FormModal\r\n            show={show}\r\n            title={formatMessage(m.paymentRequest)}\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            showFooter={true}\r\n            confirmButtonText={formatMessage(m.confirm)}\r\n            loading={loading}\r\n            focusTarget=\"close\"\r\n            onConfirm={handleSubmit}\r\n            onClose={() => {\r\n                onClose(false);\r\n            }}\r\n            onExited={() => {\r\n                setFormValue({amount: 0});\r\n            }}\r\n        >\r\n            <Form\r\n                ref={ref => formRef = ref}\r\n                model={formModel}\r\n                formValue={formValue}\r\n                onChange={setFormValue}\r\n            >\r\n\r\n                <p>{formatMessage(m.readyForPaymentInfo, {count: `${amountLimit} ${currencyName}`})}</p>\r\n\r\n                <Spacer/>\r\n\r\n                <S.FormRow>\r\n                    <S.FormItem>\r\n\r\n                        <S.FormGroup>\r\n                            <S.Label>{formatMessage(m.amount)}</S.Label>\r\n                            <S.FieldAmountWrapper>\r\n                                <S.Field\r\n                                    accepter={BaseInputNumberField}\r\n                                    name='amount'\r\n                                />\r\n                            </S.FieldAmountWrapper>\r\n                            {currencyName && <S.Currency>{currencyName}</S.Currency>}\r\n                        </S.FormGroup>\r\n\r\n                    </S.FormItem>\r\n                    <S.FormItem grow>\r\n\r\n                        <S.FormGroup>\r\n                            <S.Label>{formatMessage(m.paymentInfo)}</S.Label>\r\n                            <S.Field\r\n                                accepter={BaseSelectPicker}\r\n                                data={paymentDetailsItems}\r\n                                cleanable={false}\r\n                                name='payment_detail_id'\r\n                                valueKey=\"id\"\r\n                                block={true}\r\n                                placement={resizedWidth <= sm ? \"auto\" : \"bottomStart\"}\r\n                                labelKey=\"payment_detail_info\"\r\n                                menuClassName={dropdownVisibility ? \"\" : \"hide-dropdown\"}\r\n                                renderMenuItem={renderMenuItem}\r\n                                renderExtraFooter={() => {\r\n                                    return (\r\n                                        <Button \r\n                                            appearance=\"link\"\r\n                                            onClick={() => {\r\n                                                handleShowModalAddPaymentDetail();\r\n                                            }}\r\n                                        >\r\n                                            + <FormattedMessage id=\"paymentDetails.addNew\" defaultMessage=\"Add new\"/>\r\n                                        </Button>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </S.FormGroup>\r\n                    </S.FormItem>\r\n                \r\n                </S.FormRow>\r\n\r\n                <Spacer/>\r\n\r\n                <S.Field\r\n                    name=\"comment\"\r\n                    accepter={BaseInputField}\r\n                    componentClass=\"textarea\"\r\n                    placeholder={formatMessage(m.comment)}\r\n                />\r\n                \r\n            </Form>\r\n        </S.FormModal>\r\n    )\r\n};","import {\r\n    SET_ACCOUNT_DIALER_INFO,\r\n    REFERENCES_ALLOCATION_LIMIT_LIST,\r\n    SET_ACCOUNT_READY_FOR_PAYMENT\r\n} from '../const';\r\nimport {\r\n    ACCOUNT_GET_DIALER_API,\r\n    ACCOUNT_GET_TEST_DIALER_API\r\n} from \"../const/apiMethods\";\r\nimport {createAction} from  './defaults';\r\nimport {api} from \"../api/loginRoutes\";\r\n\r\n\r\nconst setDialerInfo = createAction(SET_ACCOUNT_DIALER_INFO);\r\nconst setAllocationLimit = createAction(REFERENCES_ALLOCATION_LIMIT_LIST);\r\nconst setAccountReadyForPaymentAction = createAction(SET_ACCOUNT_READY_FOR_PAYMENT);\r\n\r\nexport const setReadyForPayment = (value) => (dispatch) => {\r\n    dispatch( setAccountReadyForPaymentAction(value.toFixed(2)) );\r\n};\r\n\r\nexport const getAccountDialerInfo = () => (dispatch) => {\r\n    const authInfo = localStorage.getItem('userInfo');\r\n    const isTest = authInfo ? JSON.parse(authInfo).session.account.is_test : false;\r\n    const request = !isTest ? ACCOUNT_GET_DIALER_API : ACCOUNT_GET_TEST_DIALER_API;\r\n\r\n    api(request)\r\n        .then(response => {\r\n            if (response !== undefined && response.account !== undefined) {\r\n                dispatch( setDialerInfo(response.account) );\r\n                dispatch( setAllocationLimit( response.account.allocation_limit) )\r\n            }\r\n        });\r\n};","import {connect} from \"react-redux\";\r\nimport Payments from \"./Payments\";\r\nimport {\r\n    getPaymentList,\r\n    getPaymentRequestList,\r\n    getTrafficReportsList,\r\n    requestPayment,\r\n    cancelPaymentRequest\r\n} from \"../../actions/payments\";\r\nimport {\r\n    getPaymentDetailsList, \r\n    createPaymentDetails, \r\n    modifyPaymentDetails\r\n} from \"../../actions/paymentDetails\"\r\nimport {setReadyForPayment} from \"../../actions/auth_dialer\";\r\n\r\nconst mapStateToProps = ({payments, paymentDetails, auth, auth_dialer, references}) => ({\r\n    permissions: auth.permissions,\r\n    \r\n    paymentItems: payments.paymentItems,\r\n    paymentItemsLoading: payments.paymentItemsLoading,\r\n\r\n    paymentRequestItems: payments.paymentRequestItems,\r\n    paymentRequestLoading: payments.paymentRequestLoading,\r\n    \r\n    paymentTrafficReportsItems: payments.paymentTrafficReportsItems,\r\n    paymentTrafficReportsLoading: payments.paymentTrafficReportsLoading,\r\n    \r\n    paymentDetailsItems: paymentDetails.items,\r\n    \r\n    accountInfo: auth_dialer.dialerInfo,\r\n    readyForPayment: auth_dialer.readyForPayment,\r\n    \r\n    organizationTypeList: references.organization_type_list,\r\n    countryList: references.country_list,\r\n    paymentMethodList: references.payment_method_list,\r\n\r\n    globalSettings: references.global_setting,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getPaymentList,\r\n    getPaymentRequestList,\r\n    getTrafficReportsList,\r\n    getPaymentDetailsList,\r\n    requestPayment,\r\n    cancelPaymentRequest,\r\n\r\n    createPaymentDetails,\r\n    modifyPaymentDetails,\r\n    setReadyForPayment,\r\n})(Payments);","import React, {useEffect, useState} from \"react\";\r\nimport PaymentsRequestSection from \"./PaymentsRequestSection\";\r\nimport PaymentsListSection from \"./PaymentsListSection\";\r\nimport PaymentsTrafficReportsSection from \"./PaymentsTrafficReportsSection\";\r\nimport {Spacer} from \"../../components/base/Spacer\";\r\nimport {LOCAL_STORAGE_USER_INFO_DIALER} from \"../../const\";\r\nimport ModalRequestPayment from \"./ModalRequestPayment\";\r\nimport ModalAddPayment from \"../PaymentDetails/ModalAddPaymentDetail\";\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\nimport { PAYMENT_DETAIL_LIST_API } from \"const/apiMethods\";\r\nimport { checkPermissionsFor } from \"store/storeHelpers\";\r\n\r\nexport default ({\r\n    permissions,\r\n\r\n    paymentItems,\r\n    paymentItemsLoading,\r\n\r\n    paymentRequestItems,\r\n    paymentRequestLoading,\r\n    \r\n    paymentTrafficReportsItems,\r\n    paymentTrafficReportsLoading,\r\n\r\n    paymentDetailsItems,\r\n    accountInfo,\r\n    readyForPayment,\r\n\r\n    organizationTypeList,\r\n    countryList,\r\n    paymentMethodList,\r\n    globalSettings,\r\n\r\n    // API methods\r\n    getPaymentRequestList,\r\n    requestPayment,\r\n    cancelPaymentRequest,\r\n    getPaymentList,\r\n    getTrafficReportsList,\r\n    getPaymentDetailsList,\r\n    createPaymentDetails,\r\n    modifyPaymentDetails,\r\n    setReadyForPayment,\r\n}) => {\r\n\r\n    // why do we store an account_id information only in the LocalStorage??\r\n    const accountInfoStorage = localStorage.getItem(LOCAL_STORAGE_USER_INFO_DIALER);\r\n    const parsedAccountInfo = accountInfoStorage !== null ? JSON.parse(accountInfoStorage) : {\r\n        session: false\r\n    };\r\n    const accountId = parsedAccountInfo && parsedAccountInfo.session \r\n        ? parsedAccountInfo.session.account.id \r\n        : null;\r\n\r\n    const [showModalRequestPayment, setShowModalRequestPayment] = useState(false);\r\n    const [requestPaymentFormValue, setRequestPaymentFormValue] = useState({amount: 0});\r\n    const [showModalAddPaymentDetail, setShowModalAddPaymentDetail] = useState(false);\r\n    const [dropdownVisibility, setDropdownVisibility] = useState(true);\r\n    const [amountLimitMin, setAmountLimitMin] = useState(0.01);\r\n\r\n\r\n    // effect: get list on component mount\r\n    useEffect( () => {\r\n        if (checkPermissionsFor(PAYMENT_DETAIL_LIST_API)) {\r\n            const data = {target: {account_id: accountId}};\r\n            getPaymentDetailsList(data);\r\n        }\r\n    }, [permissions] );\r\n\r\n\r\n    // set payment detail amount min limit\r\n    useEffect( () => {\r\n        if (!requestPaymentFormValue.payment_detail_id || !paymentMethodList.length || !paymentDetailsItems.length) {\r\n            setAmountLimitMin(0.01);\r\n            return;\r\n        }\r\n        const currentPaymentDetail = paymentDetailsItems.find(item => item.id === requestPaymentFormValue.payment_detail_id);\r\n        if (!currentPaymentDetail) {\r\n            setAmountLimitMin(0.01);\r\n            return;\r\n        }\r\n        const currentPaymentMethod = paymentMethodList.find(item => item.pm_key === currentPaymentDetail.pm_key);\r\n        const currentPaymentMethodLimit = currentPaymentMethod && currentPaymentMethod.limit\r\n            ? currentPaymentMethod.limit\r\n            : 0.01;\r\n        setAmountLimitMin(currentPaymentMethodLimit);\r\n    }, [requestPaymentFormValue, paymentMethodList, paymentDetailsItems] );\r\n\r\n    const openModalRequestPayment = () => {\r\n        setShowModalRequestPayment(true);\r\n    };\r\n\r\n    const closeModalRequestPayment = () => {\r\n        setShowModalRequestPayment(false);\r\n    };\r\n\r\n    const handleShowModalAddPaymentDetail = () => {\r\n        setShowModalAddPaymentDetail(true);\r\n        setDropdownVisibility(false);\r\n    };\r\n\r\n    const closeModalAddPaymentDetail = (value) => {\r\n        if (value) {\r\n            setRequestPaymentFormValue({\r\n                ...requestPaymentFormValue,\r\n                payment_detail_id: value.payment_detail.id\r\n            });\r\n        }\r\n        setShowModalAddPaymentDetail(false);\r\n        setDropdownVisibility(true);\r\n    };\r\n\r\n    const changeReadyForPayment = (amount) => {\r\n        setReadyForPayment(+readyForPayment - amount);\r\n    };\r\n\r\n    const {currency_name: currencyName} = accountInfo || {};\r\n\r\n    return (\r\n        <PanelLayout>\r\n            <PaymentsRequestSection\r\n                {...{\r\n                    permissions,\r\n                    paymentRequestItems, \r\n                    paymentRequestLoading, \r\n                    cancelPaymentRequest,\r\n                    getPaymentRequestList,\r\n                    openModalRequestPayment,\r\n                    accountId,\r\n                    currencyName,\r\n                    readyForPayment,\r\n                    setReadyForPayment\r\n                }}\r\n            />\r\n            \r\n            <Spacer size={30}/>\r\n            <PaymentsListSection\r\n                {...{\r\n                    permissions,\r\n                    paymentItems,\r\n                    paymentItemsLoading,\r\n                    currencyName,\r\n                    getPaymentList,\r\n                    accountId,\r\n                }}\r\n            />\r\n\r\n            <Spacer size={30}/>\r\n            <PaymentsTrafficReportsSection\r\n                {...{\r\n                    permissions,\r\n                    paymentTrafficReportsItems, \r\n                    paymentTrafficReportsLoading,\r\n                    openModalRequestPayment,\r\n                    currencyName,\r\n                    globalSettings,\r\n                    getTrafficReportsList,\r\n                    accountId,\r\n                }}\r\n            />\r\n\r\n\r\n            <ModalRequestPayment\r\n                show={showModalRequestPayment}\r\n                onClose={closeModalRequestPayment}\r\n                formValue={requestPaymentFormValue}\r\n                setFormValue={setRequestPaymentFormValue}\r\n                amountLimit={readyForPayment}\r\n                amountLimitMin={amountLimitMin}\r\n                onSuccess={changeReadyForPayment}\r\n                {...{\r\n                    accountId,\r\n                    currencyName,\r\n                    readyForPayment,\r\n                    requestPayment,\r\n                    paymentDetailsItems, \r\n                    getPaymentRequestList,\r\n                    dropdownVisibility,\r\n                    handleShowModalAddPaymentDetail\r\n                }}\r\n            />\r\n\r\n            <ModalAddPayment\r\n                show={showModalAddPaymentDetail}\r\n                onClose={closeModalAddPaymentDetail}\r\n                {...{\r\n                    organizationTypeList,\r\n                    countryList,\r\n                    paymentMethodList,\r\n                    createPaymentDetails,\r\n                    modifyPaymentDetails,\r\n                    getPaymentDetailsList\r\n                }}\r\n            />\r\n\r\n        </PanelLayout>\r\n    )\r\n};","import React, {useContext, useEffect, useState} from 'react';\r\nimport {Icon, Table, Tooltip, Whisper} from 'rsuite';\r\nimport FormHOC from '../../hoc/FilltersForm';\r\nimport {renderColumn} from '../../utils/helpers';\r\nimport {compose} from 'redux';\r\nimport {useIntl} from 'react-intl';\r\nimport {useWindowWidth} from '../../hooks';\r\nimport {SCREEN_MEDIA, SP_OTP_TYPE} from '../../const';\r\nimport m from \"../../definedMessages\";\r\nimport BaseTable from \"../../components/base/BaseTable\";\r\nimport {ButtonRowClient, ButtonToolbar} from '../../components/base/BaseButton';\r\nimport styled from \"styled-components\";\r\nimport {RtlContext} from \"../../App\";\r\n\r\nconst {sm} = SCREEN_MEDIA;\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\nconst TrunkTable = (\r\n    {\r\n        data = [],\r\n        loading,\r\n        onClickTrunk,\r\n        onDownloadNumbers,\r\n        onShowNumbersModal,\r\n        onShowGoogleOTPModal,\r\n        permissionList,\r\n        uploadLoading,\r\n        accountDialerState,\r\n\r\n        onChangeActiveTrunk,\r\n        activeTrunk,\r\n    }) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n    const rtl = useContext(RtlContext);\r\n\r\n    const resizedWidth = useWindowWidth();\r\n    const isMobile = resizedWidth <= sm.max;\r\n\r\n    useEffect(() => {\r\n        if (filteredData.length > 0 && activeTrunk === null) {\r\n            onChangeActiveTrunk(filteredData[0].id);\r\n        }\r\n    });\r\n\r\n    const [currentTop, setCurrentTop] = useState(0);\r\n    // const [activeTrunk, onChangeActiveTrunk] = useState(null);\r\n\r\n    const handleClickRow = (id, sp_auth) => {\r\n\r\n        onClickTrunk(id, sp_auth);\r\n\r\n        const top = isScrolled ? scrollTop : currentTop;\r\n        setCurrentTop(top);\r\n\r\n        if (isScrolled)\r\n            isScrolled = false;\r\n    };\r\n\r\n    const filteredData = data.filter(value => !value.closed);\r\n\r\n    let scrollTop = 0;\r\n    let isScrolled = false;\r\n    let tableRef = null;\r\n\r\n    useEffect(() => {\r\n        const top = Math.abs(currentTop);\r\n        tableRef.scrollTop(top);\r\n    }, [activeTrunk, data, loading, uploadLoading]);\r\n\r\n    const columns = [\r\n        {\r\n            id: 'name',\r\n            label: formatMessage(m.name),\r\n            dataKey: 'name',\r\n            align: 'center',\r\n            minWidth: 170,\r\n            flexGrow: 4\r\n        },\r\n        {\r\n            id: 'range',\r\n            label: formatMessage(m.type),\r\n            value: (({tprefix, ip, port, is_default_term_point}) => {\r\n                return !is_default_term_point\r\n                    ? `${ip}:${port} ${tprefix}`\r\n                    : `Default IVR`;\r\n            }),\r\n            align: 'center',\r\n            minWidth: 120,\r\n            flexGrow: 3\r\n        },\r\n        {\r\n            id: 'price',\r\n            label: formatMessage(m.price),\r\n            dataKey: 'service_plan_name',\r\n            // value: (({service_plan_name, sp_otp_type}) => sp_otp_type === SP_OTP_TYPE  ? `${service_plan_name} (Google special)` : service_plan_name),\r\n            align: 'center',\r\n            minWidth: 120,\r\n            flexGrow: 2\r\n        },\r\n        {\r\n            id: 'allocated_numbers',\r\n            label: formatMessage(m.allocatedNumbersTrunkTable),\r\n            value: (({allocated_numbers, numbers_with_traffic}) => `${allocated_numbers || 0}/${numbers_with_traffic || 0}`),\r\n            align: 'center',\r\n            minWidth: 100,\r\n            flexGrow: 2\r\n        }\r\n    ];\r\n\r\n    const fixedColumnPlacement = rtl ? '' : 'right';\r\n\r\n    const tableActions = (\r\n        <Column\r\n            fixed={fixedColumnPlacement}\r\n            key=\"table__actions\"\r\n            width={resizedWidth >= 768 ? 120 : 75}\r\n        >\r\n            <HeaderCell> </HeaderCell>\r\n            <Cell>\r\n\r\n                {rowData => (\r\n\r\n                    <ButtonToolbar>\r\n                        <StyledButtonRowClient\r\n                            onClick={() => onDownloadNumbers(rowData.id)}\r\n                            loading={uploadLoading[rowData.id]}\r\n                        >\r\n                            <Icon icon=\"cloud-download\"/>\r\n                        </StyledButtonRowClient>\r\n\r\n                        {(!rowData.sp_otp_type || rowData.sp_otp_type !== SP_OTP_TYPE) &&\r\n                        permissionList && \r\n                        permissionList.includes('allocate_pattern') &&\r\n                            <>\r\n                                {!rowData.active\r\n\r\n                                    ? <Whisper\r\n                                        preventOverflow\r\n                                        trigger=\"hover\"\r\n                                        speaker={<Tooltip>{formatMessage(m.trunkIsNotActive)}</Tooltip>}\r\n                                        placement=\"auto\"\r\n                                    >\r\n                                        <StyledButtonRowClient\r\n                                            // use className instead of prop to avoid Tooltip issue on Chrome\r\n                                            className=\"rs-btn-disabled\"\r\n                                        >\r\n                                            <Icon icon=\"lock\"/>\r\n                                        </StyledButtonRowClient>\r\n                                    </Whisper>\r\n\r\n                                    : <StyledButtonRowClient onClick={() => onShowNumbersModal(rowData.id)}>\r\n                                        <b>A</b>\r\n                                    </StyledButtonRowClient>\r\n                                }\r\n                            </>\r\n                        }\r\n\r\n                        {rowData.sp_auth && \r\n                        rowData.sp_otp_type === SP_OTP_TYPE &&\r\n                        (\r\n                            accountDialerState && \r\n                            accountDialerState.permission_list && \r\n                            accountDialerState.permission_list.includes('google_otp_allocation')\r\n                        ) &&\r\n                            <>\r\n                                {!isMobile\r\n                                    ? <Whisper\r\n                                        preventOverflow\r\n                                        trigger=\"hover\"\r\n                                        speaker={<Tooltip>\r\n                                            {rowData.active\r\n                                                ? formatMessage(m.googleOTPAllocation)\r\n                                                : formatMessage(m.trunkIsNotActive)\r\n                                            }\r\n                                        </Tooltip>}\r\n                                        placement=\"auto\"\r\n                                    >\r\n                                        {rowData.active\r\n\r\n                                            ? <StyledButtonRowClient onClick={() => onShowGoogleOTPModal(rowData.id)}>\r\n                                                <b>A</b>\r\n                                            </StyledButtonRowClient>\r\n\r\n                                            : <StyledButtonRowClient className=\"rs-btn-disabled\">\r\n                                                <b>A</b>\r\n                                            </StyledButtonRowClient>\r\n                                        }\r\n                                    </Whisper>\r\n                                    : <>\r\n                                        {rowData.active\r\n\r\n                                            ? <StyledButtonRowClient onClick={() => onShowGoogleOTPModal(rowData.id)}>\r\n                                                <b>A</b>\r\n                                            </StyledButtonRowClient>\r\n\r\n                                            : <Whisper\r\n                                                preventOverflow\r\n                                                trigger=\"hover\"\r\n                                                speaker={<Tooltip>{formatMessage(m.trunkIsNotActive)}</Tooltip>}\r\n                                                placement=\"auto\"\r\n                                            >\r\n                                                <StyledButtonRowClient className=\"rs-btn-disabled\">\r\n                                                    <b>A</b>\r\n                                                </StyledButtonRowClient>\r\n                                            </Whisper>\r\n                                        }\r\n                                    </>\r\n                                }\r\n                            </>\r\n                        }\r\n                    </ButtonToolbar>\r\n                )}\r\n            </Cell>\r\n        </Column>\r\n    );\r\n\r\n    const columnMobileFix = (\r\n        <Column key=\"table_scrollfix\" width={0} fixed>\r\n            <HeaderCell></HeaderCell>\r\n            <Cell></Cell>\r\n        </Column>\r\n    );\r\n\r\n    const renderedColumns = columns.map(renderColumn);\r\n\r\n    renderedColumns.push(tableActions);\r\n    renderedColumns.push(columnMobileFix);\r\n\r\n    // reverse columns for RTL. Haven't found good solutions for CSS yet\r\n    if (rtl) renderedColumns.reverse();\r\n\r\n    return (\r\n        <BaseTable\r\n            data={filteredData}\r\n            onRowClick={({id, sp_auth}) => handleClickRow(id, sp_auth)}\r\n            ref={ref => tableRef = ref}\r\n            loading={loading}\r\n            className={'trunk-table'}\r\n            height={120}\r\n            autoHeight={isMobile}\r\n            rowHeight={30}\r\n            headerHeight={31}\r\n            onScroll={(scrollX, scrollY) => {\r\n                if (!isScrolled)\r\n                    isScrolled = true;\r\n\r\n                scrollTop = scrollY;\r\n            }}\r\n            rowClassName={(rowData) => {\r\n                if (rowData !== undefined) {\r\n                    if (rowData.id === activeTrunk) {\r\n                        return 'row-active';\r\n                    }\r\n                    if (!rowData.active) {\r\n                        return 'row-closed';\r\n                    }\r\n                }\r\n                return 'row-table';\r\n            }}\r\n        >\r\n            {renderedColumns}\r\n        </BaseTable>\r\n    );\r\n};\r\n\r\nexport default compose(\r\n    FormHOC\r\n)(TrunkTable);\r\n\r\n\r\nconst StyledButtonRowClient = styled(ButtonRowClient)`\r\n    &&&& {\r\n        height: 25px;\r\n        line-height: 25px;\r\n        padding: 0px;\r\n        min-width: 25px;\r\n    }\r\n`;","import React from \"react\";\r\nimport {Button, Input, Icon} from \"rsuite\";\r\n\r\nconst InputButton = ({onChange, children, ...props}) => {\r\n    return (\r\n        <Button\r\n            size=\"xs\"\r\n            appearance=\"subtle\"\r\n            className=\"rs-input-number-touchspin-up\"\r\n            {...props}\r\n        >\r\n            {children}\r\n        </Button>\r\n    )\r\n};\r\n\r\nconst validCharsRegex = /^[0-9,\\-,.]*$/;\r\n\r\nconst CustomNumber = ({min, max, step = 1, defaultValue = 0, onChange, ...props}) => {\r\n\r\n    let [value, setValue] = React.useState(defaultValue);\r\n\r\n    return (\r\n        <div className=\"rs-input-group rs-input-number custom-form-control\">\r\n            <Input\r\n                value={value}\r\n                onChange={(val) => {\r\n\r\n                    if ( !val.match(validCharsRegex) && val )\r\n                        return;\r\n\r\n                    let newValue = val;\r\n\r\n                    if (onChange)\r\n                        onChange(newValue);\r\n                    setValue(newValue);\r\n                }}\r\n            />\r\n            <span className=\"rs-input-number-btn-group-vertical\">\r\n                <InputButton\r\n                    disabled={!isNaN(max) && value >= max}\r\n                    onClick={() => {\r\n\r\n                        let floatedValue = parseFloat(value);\r\n                        let currentValue = !isNaN(floatedValue) ? floatedValue : 0;\r\n\r\n                        const stepRange = step && (step % 1 !== 0) ? step.toString().split('.')[1].length : 0;\r\n                        const fixedValue = stepRange ? parseFloat( (currentValue + step).toFixed(stepRange) ) : currentValue + step;\r\n\r\n                        const newValue = (!isNaN(min) && currentValue < min) ? min : fixedValue;\r\n                        if (onChange)\r\n                            onChange(newValue);\r\n                        setValue(newValue)\r\n                    }}\r\n                >\r\n                    <Icon icon='arrow-up-line' />\r\n                </InputButton>\r\n                <InputButton\r\n                    disabled={!isNaN(min) && value <= min}\r\n                    onClick={() => {\r\n\r\n                        let floatedValue = parseFloat(value);\r\n                        let currentValue = !isNaN(floatedValue) ? floatedValue : 0;\r\n\r\n                        const stepRange = step && (step % 1 !== 0) ? step.toString().split('.')[1].length : 0;\r\n                        const fixedValue = stepRange ? parseFloat( (currentValue - step).toFixed(stepRange) ) : currentValue - step;\r\n\r\n                        const newValue = (!isNaN(max) && currentValue > max) ? max : fixedValue;\r\n                        if (onChange)\r\n                            onChange(newValue);\r\n                        setValue(newValue)\r\n                    }}\r\n                >\r\n                    <Icon icon='arrow-down-line' />\r\n                </InputButton>\r\n            </span>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CustomNumber","import React, {useState} from 'react';\r\nimport {Input, Schema, FlexboxGrid, RadioGroup, Radio} from 'rsuite';\r\nimport CustomField from '../../../components/client/Form/CustomField/CustomField';\r\nimport {debounce} from 'lodash';\r\n\r\nimport {MAX_RATE_DIALER, MIN_RATE_DIALER} from '../../../const';\r\nimport {CustomizableForm} from '../../../components/client/Form/CustomizableForm';\r\nimport {useIntl} from \"react-intl\";\r\nimport CustomNumber from \"../../../components/client/Form/CustomNumber\";\r\nimport styled from 'styled-components';\r\nimport m from \"../../../definedMessages\";\r\nimport {BaseInputField} from \"../../../components/base/BaseForm\";\r\n\r\nconst {StringType, NumberType} = Schema.Types;\r\n\r\n\r\nconst MAX_CHARACTERS = 40;\r\n\r\n\r\nexport default ({onChangeFilters, onChangeGroup, savedTableFilter, allocatedNumbersLoading, currentDisplay}) => {\r\n    const {formatMessage} = useIntl();\r\n\r\n    const [formValue, setFormValue] = useState(savedTableFilter || {\r\n        str: '',\r\n        rate_min: MIN_RATE_DIALER,\r\n        rate_max: MAX_RATE_DIALER\r\n    });\r\n\r\n    // let form;\r\n\r\n    const numbersFiltersModel = Schema.Model({\r\n        str: StringType().maxLength(MAX_CHARACTERS, formatMessage(m.maxLength, {count: MAX_CHARACTERS})),\r\n        rate_min: NumberType( formatMessage(m.pleaseEnterValidNumber) )\r\n            .min(0, formatMessage(m.minNumber, {number: 0}))\r\n            .max(9.9999, formatMessage(m.maxNumber, {number: 9.9999})),\r\n        rate_max: NumberType( formatMessage(m.pleaseEnterValidNumber) )\r\n            .min(0, formatMessage(m.minNumber, {number: 0}))\r\n            .max(9.9999, formatMessage(m.maxNumber, {number: 9.9999})),\r\n    });\r\n\r\n\r\n    const onSubmit = (data, checkedData) => {\r\n        const checker = Object.keys(checkedData).map(i => checkedData[i].hasError).every(value => value === false);\r\n\r\n        if (checker) {\r\n            onChangeFilters({\r\n                ...data,\r\n                rate_min: parseFloat(data.rate_min) || MIN_RATE_DIALER,\r\n                rate_max: parseFloat(data.rate_max) || MAX_RATE_DIALER\r\n            });\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    let handleChange = (data) => {\r\n        const checkedData = numbersFiltersModel.check(data);\r\n        onSubmit(data, checkedData);\r\n        setFormValue(data);\r\n    };\r\n\r\n    handleChange = debounce(handleChange, 1000);\r\n\r\n    return (\r\n        <StyledGrid align=\"middle\">\r\n            <StyledGridItem>\r\n                <CustomizableForm\r\n                    // ref={ref => (form = ref)}\r\n                    model={numbersFiltersModel}\r\n                    onChange={handleChange}\r\n                    formDefaultValue={savedTableFilter || {\r\n                        str: '',\r\n                        rate_min: MIN_RATE_DIALER,\r\n                        rate_max: MAX_RATE_DIALER\r\n                    }}\r\n                    fluid\r\n                    readOnly={allocatedNumbersLoading}\r\n                >\r\n                    <StyledGrid align=\"middle\">\r\n\r\n                        <StyledGridItem width=\"300px\">\r\n                            <CustomField\r\n                                accepter={BaseInputField}\r\n                                name=\"str\"\r\n                                errorPlacement=\"topEnd\"\r\n                                placeholder={formatMessage(m.rangeNumberSearch)}\r\n                            />\r\n                        </StyledGridItem>\r\n\r\n                        <StyledGridItem classPrefix=\"flex-item\">\r\n\r\n                            <StyledGrid align=\"middle\">\r\n\r\n                                <StyledGridItem>\r\n                                    <span>{formatMessage(m.rateRange)}</span>\r\n                                </StyledGridItem>\r\n\r\n\r\n                                <StyledGridItem>\r\n                                    <StyledGrid\r\n                                        align=\"middle\" \r\n                                        wrap=\"nowrap\"\r\n                                    >\r\n\r\n                                        <StyledGridItem>\r\n                                            <NumberFieldWrapper>\r\n                                                <CustomField\r\n                                                    accepter={CustomNumber}\r\n                                                    errorPlacement=\"topStart\"\r\n                                                    inline\r\n                                                    label={formatMessage(m.from)}\r\n                                                    max={formValue.rate_max ? formValue.rate_max : MAX_RATE_DIALER}\r\n                                                    min={MIN_RATE_DIALER}\r\n                                                    name=\"rate_min\"\r\n                                                    step={0.0001}\r\n                                                />\r\n                                            </NumberFieldWrapper>\r\n                                        </StyledGridItem>\r\n\r\n                                        <StyledGridItem>\r\n                                            <NumberFieldWrapper>\r\n                                                <CustomField\r\n                                                    accepter={CustomNumber}\r\n                                                    errorPlacement=\"bottomEnd\"\r\n                                                    inline\r\n                                                    label={formatMessage(m.to)}\r\n                                                    max={MAX_RATE_DIALER}\r\n                                                    min={formValue.rate_min ? formValue.rate_min : MIN_RATE_DIALER}\r\n                                                    name=\"rate_max\"\r\n                                                    step={0.0001}\r\n                                                />\r\n                                            </NumberFieldWrapper>\r\n                                        </StyledGridItem>\r\n\r\n                                    </StyledGrid>\r\n                                </StyledGridItem>\r\n\r\n                            </StyledGrid>\r\n                        </StyledGridItem>\r\n                    </StyledGrid>\r\n                </CustomizableForm>\r\n            </StyledGridItem>\r\n\r\n            <StyledGridItem>\r\n                <RadioGroup \r\n                    onChange={onChangeGroup} \r\n                    defaultValue={currentDisplay} \r\n                    name=\"radioList\" \r\n                    inline\r\n                >\r\n                    <Radio value=\"trunk_number\" disabled={false}>{formatMessage(m.numbers)}</Radio>\r\n                    <Radio value=\"price_range\" disabled={false}>{formatMessage(m.ranges)}</Radio>\r\n                    <Radio value=\"subdestination\" disabled={false}>{formatMessage(m.subdestination)}</Radio>\r\n                </RadioGroup>\r\n            </StyledGridItem>\r\n\r\n        </StyledGrid>\r\n    );\r\n};\r\n\r\nconst StyledGrid = styled(FlexboxGrid)`\r\n    && {\r\n        flex-wrap: ${props => props.wrap || 'wrap'};\r\n        margin-bottom: ${props => props.vSpace || '-20px'};\r\n    }\r\n`;\r\n\r\nconst StyledGridItem = styled(FlexboxGrid.Item)`\r\n    padding-bottom: ${props => props.vSpace || '20px'};\r\n    padding-right: ${props => props.hSpace || '20px'};\r\n    position: relative;\r\n\r\n    &&:last-child {\r\n        padding-right: 0;\r\n    }\r\n    \r\n    && {\r\n        flex-shrink: 1;\r\n    }\r\n\r\n    .rtl & {\r\n        padding-left: ${props => props.hSpace || '20px'};\r\n        padding-right: 0;\r\n\r\n        &&:last-child {\r\n            padding-left: 0;\r\n        }\r\n    }\r\n`;\r\n\r\nconst NumberFieldWrapper = styled.div`\r\n    &&& {\r\n        .rs-input-number {\r\n            width: 100%;\r\n            border: 1px solid var(--color-grey);\r\n        }\r\n        .rs-form-control-wrapper {\r\n            max-width: 112px;\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport {Drawer, IconButton, Icon} from 'rsuite';\r\nimport NumbersFiltersForm from './NumbersFiltersForm';\r\nimport styled from 'styled-components';\r\n\r\nexport default ({\r\n    onChangeFilters, \r\n    onChangeGroup, \r\n    savedTableFilter, \r\n    allocatedNumbersLoading, \r\n    showMobileFilters, \r\n    isMobile = false, \r\n    activeFiltersCount = 0,\r\n    currentDisplay, \r\n    ...props\r\n}) => {\r\n\r\n    const [showFiltersDrawer, setShowFiltersDrawer] = React.useState(false);\r\n\r\n    const showFilters = () => {\r\n        setShowFiltersDrawer(true);\r\n    };\r\n\r\n    const hideFilters = () => {\r\n        setShowFiltersDrawer(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isMobile\r\n                ? <>\r\n                    <Toggler\r\n                        icon={<Icon icon=\"filter\"/>}\r\n                        onClick={showFilters}\r\n                    >\r\n                        {activeFiltersCount}\r\n                    </Toggler>\r\n                    <Drawer\r\n                        size=\"xs\"\r\n                        placement=\"bottom\"\r\n                        style={{height: '240px'}}\r\n                        show={showFiltersDrawer}\r\n                        onHide={hideFilters}\r\n                    >\r\n                        <Drawer.Header>\r\n                        </Drawer.Header>\r\n                        <Drawer.Body>\r\n                            <NumbersFiltersForm \r\n                                {...{\r\n                                    onChangeFilters, \r\n                                    onChangeGroup, \r\n                                    savedTableFilter, \r\n                                    allocatedNumbersLoading,\r\n                                    currentDisplay\r\n                                }}\r\n                            />                                \r\n                        </Drawer.Body>\r\n                    </Drawer>\r\n                    {/*<p>{props.testCount}</p>*/}\r\n                </>\r\n\r\n                : <NumbersFiltersForm \r\n                    {...{\r\n                        onChangeFilters, \r\n                        onChangeGroup, \r\n                        savedTableFilter, \r\n                        allocatedNumbersLoading,\r\n                        currentDisplay\r\n                    }}\r\n                />\r\n            }\r\n        </>    \r\n    )\r\n}\r\n\r\nconst Toggler = styled(IconButton)`\r\n    && {\r\n        color: #363434;\r\n    }\r\n`;","import React, {useContext} from 'react';\r\nimport {useIntl} from \"react-intl\";\r\nimport {renderColumn, getRangeByNumber} from '../../utils/helpers';\r\nimport {LOCAL_STORAGE_USER_INFO_DIALER} from '../../const';\r\nimport CustomizableTable from '../../components/client/CustomizableTable/CustomizableTable';\r\nimport {useWindowWidth} from '../../hooks';\r\nimport {SCREEN_MEDIA} from '../../const'\r\nimport m from \"../../definedMessages\";\r\nimport {RtlContext} from \"../../App\";\r\n\r\nconst {md} = SCREEN_MEDIA;\r\n\r\nexport default ({\r\n        data = [],\r\n        loading,\r\n        page,\r\n        count,\r\n        per_page,\r\n        savedPerPage,\r\n        onChangePerPage,\r\n        onChangePage,\r\n        setSelectedData,\r\n        currentDisplay,\r\n        getRowKey,\r\n        useSelectedData,\r\n        ...props\r\n    }) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n\r\n    const windowWidth = useWindowWidth();\r\n    const rtl = useContext(RtlContext);\r\n    const isMobile = windowWidth < md.min;\r\n\r\n    const accountInfo = localStorage.getItem(LOCAL_STORAGE_USER_INFO_DIALER);\r\n    const parsedAccountInfo = accountInfo !== null ? JSON.parse(accountInfo) : null;\r\n\r\n    const columns = [\r\n        {\r\n            id: 'zone',\r\n            label: formatMessage(m.zone),\r\n            value: (({worldzone_name}) => worldzone_name || 'None'),\r\n            minWidth: 110,\r\n            flexGrow: 4,\r\n            align: 'center',\r\n            displayWhen: ['trunk_number'],\r\n        },\r\n        {\r\n            id: 'range',\r\n            label: formatMessage(m.range),\r\n            value: (({name, price_range}) => price_range\r\n                ? price_range.name || ''\r\n                : name || '0'),\r\n            minWidth: 200,\r\n            flexGrow: 4,\r\n            align: 'center',\r\n            displayWhen: ['trunk_number', 'price_range'],\r\n        },\r\n        {\r\n            id: 'number', \r\n            label: formatMessage(m.number), \r\n            value: (({number, numbers_count}) => getRangeByNumber(number, numbers_count)), \r\n            minWidth: 130,\r\n            flexGrow: 3,\r\n            align: 'center',\r\n            displayWhen: ['trunk_number'],\r\n        },\r\n        {\r\n            id: 'bill_increment', \r\n            label: formatMessage(m.billingIncrement), \r\n            value: '1/1', \r\n            minWidth: 90,\r\n            flexGrow: 2,\r\n            align: 'center',\r\n            displayWhen: ['trunk_number'],\r\n        },\r\n        {\r\n            id: 'start_date', \r\n            label: formatMessage(m.start_date), \r\n            dataKey: 'start_date', \r\n            minWidth: 130,\r\n            flexGrow: 3,\r\n            align: 'center',\r\n            displayWhen: ['trunk_number'],\r\n        },\r\n        {\r\n            id: 'rate', \r\n            label: formatMessage(m.rate), \r\n            value: (({rate}) => {\r\n                if (!rate && rate !== 0)\r\n                    return \"\";\r\n\r\n                return `${Number.parseFloat(rate.toFixed(3))} ${parsedAccountInfo && parsedAccountInfo.session ? parsedAccountInfo.session.account.currency_name : ''}`;\r\n            }), \r\n            minWidth: 90,\r\n            flexGrow: 2,\r\n            align: 'center',\r\n            displayWhen: ['trunk_number', 'price_range', 'subdestination'],\r\n        },\r\n        {\r\n            label: formatMessage(m.allocatedNumbers),\r\n            dataKey: 'trunk_numbers', \r\n            minWidth: 90,\r\n            flexGrow: 2,\r\n            displayWhen: ['price_range'], \r\n            align: !rtl ? 'right' : 'left'\r\n        },\r\n        {\r\n            label: formatMessage(m.subdestination),\r\n            dataKey: 'subdestination_name', \r\n            minWidth: 200,\r\n            flexGrow: 4,\r\n            align: !rtl ? 'left' : 'right',\r\n            displayWhen: ['subdestination']\r\n        },\r\n        {\r\n            label: formatMessage(m.allocatedNumbersAndRanges),\r\n            // dataKey: 'allocated_numbers_and_ranges',\r\n            value: ({trunk_numbers, price_ranges}) => `${trunk_numbers || 0}/${price_ranges || 0}`,\r\n            minWidth: 90,\r\n            flexGrow: 2,\r\n            displayWhen: ['subdestination'], \r\n            align: !rtl ? 'right' : 'left'\r\n        },\r\n    ];\r\n\r\n    const mobileColumns = [\r\n        {\r\n            id: 'zone_range',\r\n            label: `${formatMessage(m.zone)} / ${formatMessage(m.range)}`,\r\n            value: (({worldzone_name, name}) => {\r\n                return (\r\n                    <div className=\"table-two-staged__cell\">\r\n                        <div className=\"table-two-staged__cell-first\">{worldzone_name || 'None'}</div>\r\n                        <div className=\"table-two-staged__cell-second\">\r\n                            {name || '0'}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }),\r\n            minWidth: 180,\r\n            flexGrow: 4,\r\n            align: 'center',\r\n            displayWhen: ['trunk_number'],\r\n        },\r\n        {\r\n            id: 'range',\r\n            label: formatMessage(m.range),\r\n            value: (({name, price_range}) => price_range\r\n                ? price_range.name || ''\r\n                : name || '0'),\r\n            minWidth: 200,\r\n            flexGrow: 4,\r\n            align: 'center',\r\n            displayWhen: ['price_range'],\r\n        },\r\n        {\r\n            id: 'number',\r\n            label: formatMessage(m.number),\r\n            value: (({number, numbers_count}) => getRangeByNumber(number, numbers_count)),\r\n            minWidth: 140,\r\n            flexGrow: 3,\r\n            align: 'center',\r\n            displayWhen: ['trunk_number'],\r\n        },\r\n        {\r\n            id: 'bill_increment_rate', \r\n            label: `${formatMessage(m.billingIncrement)} / ${formatMessage(m.rate)}`, \r\n            value: (({rate}) => {\r\n                return (\r\n                    <div className=\"table-two-staged__cell\">\r\n                        <div className=\"table-two-staged__cell-first\">1/1</div>\r\n                        {(rate || rate === 0) && (\r\n                            <div className=\"table-two-staged__cell-second\">\r\n                                {`${Number.parseFloat(rate.toFixed(3))} ${parsedAccountInfo && parsedAccountInfo.session ? parsedAccountInfo.session.account.currency_name : ''}`}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )\r\n            }),\r\n            minWidth: 90,\r\n            flexGrow: 2,\r\n            align: 'center',\r\n            displayWhen: ['trunk_number'],\r\n        },\r\n        {\r\n            id: 'start_date',\r\n            label: formatMessage(m.start_date),\r\n            dataKey: 'start_date',\r\n            minWidth: 130,\r\n            flexGrow: 3,\r\n            align: 'center',\r\n            displayWhen: ['trunk_number'],\r\n        },\r\n        {\r\n            id: 'rate', \r\n            label: formatMessage(m.rate), \r\n            value: (({rate}) => (rate || rate === 0) \r\n                ? `${Number.parseFloat(rate.toFixed(3))} ${parsedAccountInfo && parsedAccountInfo.session ? parsedAccountInfo.session.account.currency_name : ''}` \r\n                : \"\"), \r\n            minWidth: 90,\r\n            flexGrow: 2,\r\n            align: 'center',\r\n            displayWhen: ['price_range', 'subdestination'],\r\n        },\r\n        {\r\n            label: formatMessage(m.allocatedNumbers), \r\n            dataKey: 'trunk_numbers', \r\n            minWidth: 90,\r\n            flexGrow: 2,\r\n            displayWhen: ['price_range'], \r\n            align: !rtl ? 'right' : 'left'\r\n        },\r\n        {\r\n            label: formatMessage(m.subdestination), \r\n            dataKey: 'subdestination_name', \r\n            minWidth: 200,\r\n            flexGrow: 4,\r\n            displayWhen: ['subdestination'],\r\n            align: !rtl ? 'left' : 'right',\r\n        },\r\n        {\r\n            label: formatMessage(m.allocatedNumbersAndRanges),\r\n            value: ({trunk_numbers, price_ranges}) => `${trunk_numbers || 0}/${price_ranges || 0}`,\r\n            minWidth: 90,\r\n            flexGrow: 2,\r\n            displayWhen: ['subdestination'], \r\n            align: !rtl ? 'right' : 'left'\r\n        },\r\n    ];\r\n\r\n    const renderedColumns = !isMobile \r\n        ? columns.filter(el => el.displayWhen.indexOf(currentDisplay) !== -1).map(renderColumn) \r\n        : mobileColumns.filter(el => el.displayWhen.indexOf(currentDisplay) !== -1).map(renderColumn);\r\n\r\n\r\n    return (\r\n        <>\r\n            <CustomizableTable\r\n                {...{\r\n                    rtl,\r\n                    data,\r\n                    count,\r\n                    page,\r\n                    per_page,\r\n                    loading,\r\n                    savedPerPage,\r\n                    onChangePage,\r\n                    onChangePerPage,\r\n                    renderedColumns,\r\n                    useSelectedData\r\n                }}\r\n                ref={ref => props.setRef(ref)}\r\n                setSelected={setSelectedData}\r\n                data={data}\r\n                row_key={getRowKey()}\r\n                isSelect={true}\r\n                isSelectedAll={true}\r\n                isChangedColumns={false}\r\n                isPaginated={true}\r\n                defaultPerPage={10}\r\n                calculatedOuterHeight={601}\r\n                isMobile={isMobile}\r\n            />\r\n        </>\r\n    );\r\n};","import React from 'react';\r\nimport {FlexboxGrid} from 'rsuite';\r\nimport Modal from '../../components/Modal';\r\nimport {useIntl} from \"react-intl\";\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport m from \"../../definedMessages\";\r\nimport {CustomModalClient} from \"../../components/base\";\r\n\r\nexport default ({maxWidth = 600, show, onClose, loading, ...props}) => {\r\n\r\n    const {formatMessage} = useIntl();\r\n\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    return (\r\n        <CustomModalClient\r\n            show={show}\r\n            onClose={() => onClose(false)}\r\n            title={formatMessage(m.revokeNumbers)}\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            showFooter={true}\r\n            confirmButtonText={formatMessage(m.yes)}\r\n            focusTarget=\"close\"\r\n            loading={loading}\r\n            onConfirm={props.onSuccess}\r\n        >\r\n            <FlexboxGrid justify=\"end\">\r\n                <FlexboxGrid.Item colspan={23}>\r\n                    <span>{formatMessage(m.numbersWillBeRevoked, {count: props.getCount()})} </span>\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n\r\n        </CustomModalClient>\r\n    );\r\n};","import styled, { css } from 'styled-components';\r\nimport { ControlLabel, FormControl, Toggle } from 'rsuite';\r\nimport {CustomModalClient} from \"../../../components/base\";\r\nimport {BaseToggle} from \"../../../components/base/BaseToggle\";\r\n\r\n\r\nexport const FormModal = styled(CustomModalClient)`\r\n    .rs-modal-content {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .rs-modal-footer {\r\n        margin-top: auto;\r\n        padding-bottom: 20px;\r\n        padding-top: 20px;\r\n    }\r\n`;\r\n\r\nexport const FormColumns = styled.div`\r\n    align-items: stretch;\r\n    display: flex;\r\n`;\r\n\r\nexport const FormColumn = styled.div`\r\n    flex: 1 1 30%;\r\n    position: relative;\r\n    \r\n    ${props => \r\n        props.divider &&\r\n        css`\r\n            flex: 0 0 auto;\r\n        `\r\n    }\r\n\r\n    @media (min-width: 768px) {\r\n        padding: 0 15px;\r\n    }\r\n`;\r\n\r\nexport const FormDivider = styled.div`\r\n    align-items: center;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: stretch;\r\n    height: 100%;\r\n\r\n    .divider__text {\r\n        text-transform: uppercase;\r\n    }\r\n\r\n    .divider {\r\n        flex-grow: 1;\r\n        margin: 0;\r\n    }\r\n`;\r\n\r\nexport const FormTitle = styled.div`\r\n    &&& {\r\n        font-size: 18px;\r\n        width: 100%;\r\n        margin-top: 40px;\r\n        margin-bottom: 20px;\r\n        color: ${props => props.disabled\r\n            ? \"var(--color-grey)\"\r\n            : \"var(--color-secondary)\"\r\n        };\r\n\r\n        @media (min-width: 768px) {\r\n            font-size: 14px;\r\n            width: 150px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Label = styled(ControlLabel)`\r\n    font-size: 18px;\r\n    padding: 0;   \r\n    text-align: left;\r\n    \r\n    @media (min-width: 768px) {\r\n        font-size: 14px;\r\n    }\r\n\r\n    .rtl & {\r\n        text-align: right;\r\n    }\r\n    \r\n    ${props =>\r\n        props.disabled &&\r\n        css`\r\n            color: var(--color-disabled)\r\n        `\r\n    }\r\n`;\r\n\r\nexport const Field = styled(FormControl)`\r\n\r\n    &&& {\r\n        min-width: 0;\r\n        width: 100%;\r\n\r\n        ${props => \r\n            props.componentClass === 'textarea' &&\r\n            css`\r\n                min-height: 200px;\r\n                background: #fff;\r\n                overflow-x: auto;\r\n            `\r\n        }\r\n    }\r\n\r\n    ${props =>\r\n        props.disabled &&\r\n        css`\r\n            opacity: var(--value-disabled-opacity)\r\n        `\r\n    }\r\n`;\r\n\r\nexport const FormToggle = styled(BaseToggle)`\r\n    margin: 0;\r\n`;","import React, {useEffect, useState} from 'react';\r\nimport {\r\n    ControlLabel,\r\n    Divider,\r\n    Form,\r\n    FormGroup,\r\n    Schema,\r\n    Tooltip,\r\n    Whisper,\r\n} from 'rsuite';\r\nimport {useIntl} from \"react-intl\";\r\nimport {\r\n    ALLOCATION_TEMPLATE_DIALER_API,\r\n    ALLOCATION_NUMBER_LIST_DIALER_API\r\n} from \"../../../const/apiMethods\";\r\nimport {useWindowWidth} from \"../../../hooks\";\r\nimport FormWhisper from './FormWhisper';\r\nimport '../colors.css';\r\nimport {Spacer} from '../../../components/base/Spacer';\r\nimport TrunksList from '../../../components/TrunksList/TrunksList';\r\nimport * as S from './styled';\r\nimport m from \"../../../definedMessages\";\r\nimport {BaseCheckboxField, BaseInputField, BaseInputNumberField} from \"../../../components/base/BaseForm\";\r\n\r\nconst {StringType, NumberType} = Schema.Types;\r\nconst MIN_CHARACTERS = 7;\r\nconst MAX_CHARACTERS = 15;\r\n\r\n\r\nexport default ({\r\n    maxWidth = 600,\r\n    show,\r\n    onClose,\r\n    trunks,\r\n    onAllocateNumberList,\r\n    onAllocateNumbersTemplate,\r\n    selectedTrunkId,\r\n    loading,\r\n\r\n    leftFormValue = {},\r\n    onChangeLeftFormValue,\r\n\r\n    rightFormValue = {},\r\n    onChangeRightFormValue,\r\n\r\n    randomNumber = false,\r\n    onChangeRandomNumber,\r\n    allocationLimit,\r\n    ...props\r\n}) => {\r\n\r\n    const [formDisableState, onChangeFocusForm] = useState('form_right');\r\n    const [formResponse, onChangeFocusResponseForm] = useState('form_left');\r\n\r\n    const [leftFormError, onChangeLeftFormError] = useState({});\r\n    const [rightFormError, onChangeRightFormError] = useState({});\r\n    const [trunkId, onChangeTrunkId] = useState(selectedTrunkId);\r\n    const [allocatedMethodChecked, onChangeAllocatedMethod] = useState(true);\r\n    const [isTableReady, setIsTableReady] = useState(false);\r\n\r\n    const resizedWidth = useWindowWidth();\r\n\r\n    const MIN_NUMBER = 1;\r\n\r\n    \r\n    const MAX_NUMBER = allocationLimit && allocationLimit.template \r\n        ? allocationLimit.template.once \r\n        : (allocationLimit && allocationLimit.other && allocationLimit.other.once) || 1000;\r\n    \r\n    const MAX_ROWS = allocationLimit && allocationLimit.number_list \r\n        ? allocationLimit.number_list.once \r\n        : (allocationLimit && allocationLimit.other && allocationLimit.other.once) || 1000;\r\n\r\n    useEffect(() => {\r\n        if (show && !isTableReady) {\r\n            setTimeout(() => {setIsTableReady(true)}, 1000);\r\n        } else if (!show && isTableReady) {\r\n            setIsTableReady(false)\r\n        }\r\n    }, [show, isTableReady]);\r\n\r\n    useEffect(() => {\r\n        onChangeTrunkId(selectedTrunkId);\r\n    }, [selectedTrunkId, show]);\r\n\r\n    \r\n    let form_left;\r\n    let form_right;\r\n    const {formatMessage} = useIntl();\r\n    const rtl = false;\r\n    \r\n    \r\n    const formLeftSchema = Schema.Model({\r\n        template: StringType()\r\n            .pattern(/^[1-9](?:\\d*[xX]*(\\[((\\d)|(\\d-\\d))((,\\d-\\d)?(,\\d)?)*\\])?)*$/, formatMessage(m.pleaseEnterValidNumbers))\r\n            .addRule((value) => {\r\n                let replacedValue = value.replace( /\\[[\\d\\,\\-]+\\]/g, 'X');\r\n                if (replacedValue.length > MAX_CHARACTERS || replacedValue.length < MIN_CHARACTERS) {\r\n                    return false\r\n                }\r\n            }, formatMessage(m.templateShouldBeSize, {minNumber: MIN_CHARACTERS, maxNumber: MAX_CHARACTERS}))\r\n            .isRequired(formatMessage(m.thisFieldIsRequired)),\r\n        numbers: NumberType(formatMessage(m.pleaseEnterValidNumber))\r\n            .min(MIN_NUMBER, formatMessage(m.tooFewNumbers))\r\n            .max(MAX_NUMBER, formatMessage(m.tooMuchNumbers))\r\n            .isRequired(formatMessage(m.thisFieldIsRequired)),\r\n    });\r\n\r\n    const formRightSchema = Schema.Model({\r\n        num_list: StringType()\r\n            .addRule((value) => {\r\n                const stringRowList = value.trim().split('\\n');\r\n                for (const row of stringRowList) {\r\n                    if (row.length > MAX_CHARACTERS || row.length < MIN_CHARACTERS) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }, formatMessage(m.eachRowShouldBeSize, {minNumber: MIN_CHARACTERS, maxNumber: MAX_CHARACTERS}))\r\n            .addRule((value) => {\r\n                const stringRowList = value.trim().split('\\n');\r\n                return !(stringRowList.length > MAX_ROWS);\r\n            }, formatMessage(m.numberOfPhoneNumbersExceeds, {number: MAX_ROWS}))\r\n            .pattern(/^(?: *\\d+ *(?:\\n|$))+$/, formatMessage(m.pleaseEnterValidNumbers))\r\n            .isRequired(formatMessage(m.thisFieldIsRequired))\r\n    });\r\n\r\n    const chooseRequest = (param) => {\r\n        return {\r\n            form_left: {\r\n                func: onAllocateNumbersTemplate, \r\n                form: form_left, \r\n                model: formLeftSchema\r\n            },\r\n            form_right: {\r\n                func: onAllocateNumberList,\r\n                form: form_right, \r\n                model: formRightSchema\r\n            }\r\n        }[param];\r\n    };\r\n\r\n    const clearForm = () => {\r\n        onChangeRightFormValue({\r\n            num_list: null\r\n        });\r\n        \r\n        onChangeLeftFormValue({\r\n            template: null, numbers: 3\r\n        });\r\n\r\n        onChangeRandomNumber(false);\r\n    };\r\n\r\n\r\n    const checkForm = (form, formSchema, formData, formError) => {\r\n        if (!form.check()) {\r\n            return true;\r\n\r\n        } else {\r\n            \r\n            const checker = Object.keys(formSchema.check(formData))\r\n                    .map(i => formSchema.check(formData)[i].hasError)\r\n                    .every(value => value === false) && ((formData.hasOwnProperty('num_list') || formData.hasOwnProperty('template')));\r\n\r\n            if (checker) {\r\n                onSubmit();\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n\r\n    const onCheckFormError = (error, errorChanger) => {\r\n        if (!trunkId) {\r\n            onChangeTrunkId(selectedTrunkId);\r\n        }\r\n        errorChanger(error);\r\n    };\r\n\r\n    \r\n    const onSubmit = async () => {\r\n\r\n        const chosenRequest = chooseRequest(formResponse);\r\n\r\n        const chosenResponseFunction = chosenRequest['func'];\r\n        const chosenResponseDataRef = chosenRequest['form'].getFormValue();\r\n        const randomNumberValue = formDisableState !== \"form_left\" \r\n            ? randomNumber \r\n            : undefined;\r\n\r\n        const response = await chosenResponseFunction({\r\n            ...chosenResponseDataRef, \r\n            random_order: randomNumberValue,\r\n            trunk_id: trunkId, \r\n        });\r\n\r\n        if (response === undefined) {\r\n            return;\r\n        }\r\n\r\n        if (response.status === 0) {\r\n            clearForm();\r\n            return;\r\n        }\r\n                \r\n        const trunk = trunks.filter( trunk => trunk.id === trunkId );\r\n\r\n        props.setReasonModalProps({\r\n            reasonCode: response.reason_code,\r\n            reasonHash: response.reason_hash,\r\n            isRandom: randomNumber,\r\n            method: formResponse === \"form_left\"\r\n                ? ALLOCATION_TEMPLATE_DIALER_API\r\n                : ALLOCATION_NUMBER_LIST_DIALER_API,\r\n            trunk: trunk[0],\r\n            template: leftFormValue.template,\r\n            numbersAmount: leftFormValue.numbers,\r\n        });\r\n    };\r\n\r\n    const onSubmitFromValue = (ref, schema, formValue, formError) => {\r\n        checkForm(ref, schema, formValue, formError);\r\n    };\r\n\r\n    const trunkSelectData = trunks.filter(trunk => !trunk.sp_otp_type && !trunk.closed);\r\n\r\n\r\n    const TemplateForm = (\r\n        <Form\r\n            formValue={leftFormValue}\r\n            ref={ref => form_left = ref}\r\n            model={formLeftSchema}\r\n            onChange={formValue => {\r\n                onChangeLeftFormValue(formValue);\r\n            }}\r\n            onCheck={formError => {\r\n                onCheckFormError(formError, onChangeLeftFormError);\r\n            }}\r\n        >\r\n\r\n            {/* Description */}\r\n            <S.FormTitle disabled={formDisableState === 'form_left'}>\r\n                {formatMessage(m.allocatePerTemplate)}\r\n            </S.FormTitle>\r\n\r\n\r\n            {/* FormGroup: Template */}\r\n            <FormGroup>\r\n\r\n                <S.Label disabled={formDisableState === 'form_left'}>\r\n                    {formatMessage(m.template)}\r\n                </S.Label>\r\n\r\n                <S.Field\r\n                    accepter={BaseInputField}\r\n                    name='template'\r\n                    placeholder={'12356789XXXXXX'}\r\n                    disabled={formDisableState === 'form_left'}\r\n                />\r\n\r\n            </FormGroup>\r\n\r\n\r\n            {/* FormGroup: Amount */}\r\n            <FormGroup>\r\n                <S.Label\r\n                    disabled={formDisableState === 'form_left'}\r\n                >\r\n                    {formatMessage(m.amount)}\r\n                </S.Label>\r\n\r\n                <S.Field\r\n                    accepter={BaseInputNumberField}\r\n                    name='numbers'\r\n                    disabled={!leftFormValue.template || formDisableState === 'form_left'}\r\n                    placeholder={'3'}\r\n                />\r\n\r\n            </FormGroup>\r\n\r\n            {/* checkbox: Random Order */}\r\n            <BaseCheckboxField\r\n                disabled={!leftFormValue.template || formDisableState === 'form_left'}\r\n                defaultChecked={randomNumber}\r\n                onChange={(_, checked) => {\r\n                    onChangeRandomNumber(checked)\r\n                }}\r\n            >\r\n                {formatMessage(m.randomOrder)}\r\n            </BaseCheckboxField>\r\n\r\n        </Form>\r\n    );\r\n\r\n\r\n    const ListForm = (\r\n        <Form\r\n            ref={ref => form_right = ref}\r\n            model={formRightSchema}\r\n            onChange={formValue => {\r\n                onChangeRightFormValue(formValue);\r\n            }}\r\n            onCheck={formError => {\r\n                onCheckFormError(formError, onChangeRightFormError);\r\n            }}\r\n            formValue={rightFormValue}\r\n        >\r\n            <FormGroup>\r\n                <S.FormTitle\r\n                    as={ControlLabel}\r\n                    disabled={formDisableState === 'form_right'}\r\n                >\r\n                    {formatMessage(m.putListOfOwnNumbers)}\r\n                </S.FormTitle>\r\n                <Whisper \r\n                    placement={resizedWidth > maxWidth ? (rtl ? \"rightStart\" : \"leftStart\") : 'auto'}\r\n                    trigger=\"click\"\r\n                    speaker={<Tooltip>{formatMessage(m.eachPhoneNumberConditions, {\r\n                            break: str => <br key=\"break\"/>,\r\n                            wrapt: str => <span key=\"wrapt\">&lt;{str}&gt;</span>\r\n                    })}</Tooltip>}\r\n                >\r\n                        \r\n                    <S.Field\r\n                        accepter={BaseInputField}\r\n                        name=\"num_list\"\r\n                        componentClass=\"textarea\"\r\n                        wrap=\"off\"\r\n                        errorPlacement={rtl ? \"topStart\" : \"topEnd\"}\r\n                        disabled={formDisableState === 'form_right'}\r\n                    />\r\n\r\n                </Whisper>\r\n            </FormGroup>\r\n        </Form>\r\n    );\r\n\r\n    return (\r\n        <S.FormModal\r\n            show={show}\r\n            title={formatMessage(m.allocateNumbers)}\r\n            width={maxWidth}\r\n            showFooter={true}\r\n            confirmButtonText={formatMessage(m.submit)}\r\n            loading={loading}\r\n            disabled={trunkId === null}\r\n            onConfirm={() => {\r\n                if (formDisableState === 'form_left') {\r\n                    onSubmitFromValue(form_right, formRightSchema, rightFormValue, rightFormError);\r\n                } else {\r\n                    onSubmitFromValue(form_left, formLeftSchema, leftFormValue, leftFormError);\r\n                }\r\n            }}\r\n            onClose={() => {\r\n                clearForm();\r\n                // onChangeTrunkId was able only when formDisableState === 'form_right'\r\n                onChangeTrunkId(null);\r\n                onClose(false);\r\n            }}\r\n        >\r\n\r\n            {/* Select Trunk */}\r\n            <S.FormColumns>\r\n                <S.FormColumn>\r\n                    <TrunksList\r\n                        data={trunkSelectData}\r\n                        defaultValue={selectedTrunkId}\r\n                        cleanable={false}\r\n                        onChange={(value) => {\r\n                            onChangeTrunkId(value);\r\n                        }}\r\n                    />\r\n                </S.FormColumn>\r\n            </S.FormColumns>\r\n            \r\n            <Spacer size={30}/>\r\n\r\n            {resizedWidth > maxWidth \r\n            \r\n                ?\r\n\r\n                    // Desktop Form\r\n                    <S.FormColumns>\r\n                        <S.FormColumn>\r\n\r\n                            {formDisableState === 'form_left' &&\r\n                                <FormWhisper\r\n                                    onClick={() => {\r\n                                        onChangeAllocatedMethod(true);\r\n                                        onChangeFocusForm('form_right');\r\n                                        onChangeFocusResponseForm('form_left');\r\n                                    }}\r\n                                />\r\n                            }\r\n\r\n                            {TemplateForm}\r\n\r\n                        </S.FormColumn>\r\n                        <S.FormColumn divider>\r\n                            \r\n                            <S.FormDivider>\r\n                                <span className=\"divider__text\">\r\n                                    {formatMessage(m.or)}\r\n                                </span>\r\n                                <Divider className=\"divider\" vertical/>\r\n                            </S.FormDivider>\r\n\r\n                        </S.FormColumn>\r\n                        <S.FormColumn>\r\n\r\n                            {formDisableState === 'form_right' &&\r\n                                <FormWhisper\r\n                                    onClick={() => {\r\n                                        onChangeAllocatedMethod(false);\r\n                                        onChangeFocusForm('form_left');\r\n                                        onChangeFocusResponseForm('form_right');\r\n                                    }}\r\n                                />\r\n                            }\r\n\r\n                            {ListForm}\r\n\r\n                        </S.FormColumn>\r\n                    </S.FormColumns>\r\n                :\r\n\r\n                    // Mobile Form\r\n\r\n                    <S.FormColumns>\r\n                        <S.FormColumn>\r\n\r\n                            <S.FormToggle\r\n                                size=\"lg\"\r\n                                checkedChildren={formatMessage(m.template)}\r\n                                unCheckedChildren={formatMessage(m.numberList)}\r\n                                defaultChecked={allocatedMethodChecked}\r\n                                onChange={value => {\r\n                                    onChangeAllocatedMethod(value);\r\n\r\n                                    if (value) {\r\n                                        onChangeFocusForm('form_right');\r\n                                        onChangeFocusResponseForm('form_left');\r\n                                    } else {\r\n                                        onChangeFocusForm('form_left');\r\n                                        onChangeFocusResponseForm('form_right');\r\n                                    }\r\n                                }\r\n                                }\r\n                            />\r\n\r\n                            {allocatedMethodChecked\r\n                                ? TemplateForm\r\n                                : ListForm\r\n                            }\r\n\r\n                        </S.FormColumn>\r\n                    </S.FormColumns>\r\n            }\r\n\r\n        </S.FormModal>\r\n    );\r\n};","import React from 'react';\r\nimport {FlexboxGrid, Dropdown, ButtonToolbar, Loader} from 'rsuite';\r\nimport {\r\n    LOCAL_STORAGE_NUMBERS_FILTERS_DIALER,\r\n    LOCAL_STORAGE_NUMBERS_PER_PAGE_DIALER,\r\n    LOCAL_STORAGE_USER_INFO_DIALER,\r\n    MAX_RATE_DIALER,\r\n    MIN_PER_PAGE_DIALER,\r\n    MIN_RATE_DIALER\r\n} from '../../const';\r\nimport PageHeader from './../../components/base/PageHeader';\r\nimport TrunkTable from './TrunkTable';\r\nimport NumbersFilters from './NumbersFilters/';\r\nimport AllocatedNumbersTable from './AllocatedNumbersTable';\r\nimport ModalResponseHandler from '../../components/client/Modal/ModalResponseHandler';\r\nimport {\r\n    objectIsEmpty,\r\n    copyToClipboard,\r\n    onDownloadCompleteOnlyNumbersCSV,\r\n    saveFileBlob,\r\n    makeRangeFromPrefixesToCsv,\r\n    getBlobContent\r\n} from '../../utils/helpers';\r\nimport {FormattedMessage, injectIntl} from 'react-intl';\r\nimport NumbersRevokeModal from './NumbersRevokeModal';\r\nimport {api, getFileResponse} from '../../api/loginRoutes';\r\nimport {ALLOCATION_GOOGLE_OTP_DIALER_API, ALLOCATION_TEMPLATE_DIALER_API} from '../../const/apiMethods';\r\nimport {FlexGrid, FlexGridItem} from '../../components/base/FlexGrid';\r\nimport {Spacer} from '../../components/base/Spacer';\r\nimport {Alert} from 'rsuite';\r\nimport {SCREEN_MEDIA} from './../../const';\r\nimport NumbersAllocateModal from './NumbersAllocateModal';\r\nimport styled, {css} from 'styled-components';\r\nimport GoogleOTPAllocateModal from './GoogleOTPAllocateModal';\r\nimport ModalAllocationResult from '../../components/client/Modal/ModalAllocationResult';\r\nimport {ButtonPrimary, ButtonFixedBottom, ButtonSecondary, BaseButton} from '../../components/base/BaseButton';\r\nimport m from \"../../definedMessages\";\r\nimport PanelLayout from \"../../components/base/PanelLayout\";\r\n\r\nconst {sm, md} = SCREEN_MEDIA;\r\n\r\nconst NUMBER_KEY = 'trn_key';\r\nconst RANGE_KEY = 'pr_key';\r\nconst SUBDEST_KEY = 'sde_key';\r\n\r\n\r\nclass Numbers extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.tableRef = null;\r\n\r\n        this.filter = {};\r\n        this.defaultFilter = {\r\n            str: '',\r\n            rate_min: MIN_RATE_DIALER,\r\n            rate_max: MAX_RATE_DIALER\r\n        };\r\n\r\n        this.curPerPage = null;\r\n\r\n        const accountInfo = localStorage.getItem(LOCAL_STORAGE_USER_INFO_DIALER);\r\n        const parsedAccountInfo = accountInfo !== null ? JSON.parse(accountInfo) : {};\r\n\r\n        this.formatMessage = this.props.intl.formatMessage.bind(this.props.intl);\r\n\r\n        let storagedPerPage = JSON.parse(localStorage.getItem(LOCAL_STORAGE_NUMBERS_PER_PAGE_DIALER));\r\n        if ( storagedPerPage && !isNaN(storagedPerPage) && storagedPerPage > 100 ) {\r\n            localStorage.setItem(LOCAL_STORAGE_NUMBERS_PER_PAGE_DIALER, 100);\r\n            storagedPerPage = 100;\r\n        }\r\n\r\n        this.state = {\r\n            firstTrunkId: null,\r\n            activeTrunkId: null,\r\n            permissionList: parsedAccountInfo && parsedAccountInfo.session ? parsedAccountInfo.session.account.permission_list : null,\r\n            savedTableFilter: JSON.parse(localStorage.getItem(LOCAL_STORAGE_NUMBERS_FILTERS_DIALER)),\r\n            savedPerPage: storagedPerPage,\r\n            showNumbersModal: null,\r\n            showGoogleOTPModal: false,\r\n            showNumbersListModal: null,\r\n            showNumbersRevokeModal: null,\r\n            numbersRevokeModalLoading: false,\r\n            showModalResponseHandler: null,\r\n            searchLoading: false,\r\n            selectedAllocatedNumbers: [],\r\n            resizedWidth: window.innerWidth,\r\n            selectedData: {all: false, list: []},\r\n\r\n            templateFormValue: {numbers: 3},\r\n            listFormValue: {},\r\n            googleOTPFormValue: {numbers: 100},\r\n            randomNumber: false,\r\n            reasonModalProps: {},\r\n\r\n            activeFiltersCount: 0,\r\n            selectedItems: new Map(),\r\n\r\n            filtersValue: JSON.parse(localStorage.getItem(LOCAL_STORAGE_NUMBERS_FILTERS_DIALER)),\r\n            currentDisplay: 'trunk_number',\r\n\r\n            trunkAllocatedByOTP: false,\r\n            csvContent: null,\r\n            transactionId: null,\r\n            notAllocatedNumbers: null,\r\n            allocatedNumbersCount: 0,\r\n            prefixViewNumbers: null\r\n        };\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        const {getNumberTrunksList, account} = this.props;\r\n\r\n        this.setActiveFiltersCount(this.state.savedTableFilter);\r\n\r\n        getNumberTrunksList();\r\n    }\r\n\r\n\r\n    componentWillMount() {\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize);\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const {trunks} = this.props;\r\n        if (prevProps.trunks !== trunks) {\r\n            const filteredTrunks = trunks.filter(trunk => !trunk.closed);\r\n            if (filteredTrunks.length) {\r\n                this.setState({prefixViewNumbers: filteredTrunks[0].sp_auth})\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        const {trunks} = nextProps;\r\n        const id = this.state.firstTrunkId;\r\n\r\n        const filteredTrunks = trunks.filter(trunk => !trunk.closed);\r\n\r\n        if (filteredTrunks.length && !id) {\r\n            this.setState({\r\n                firstTrunkId: filteredTrunks[0].id,\r\n                activeTrunkId: filteredTrunks[0].id\r\n            });\r\n            this.onGetTrunkNumbers(filteredTrunks[0].id);\r\n        }\r\n    };\r\n\r\n\r\n    handleResize = () => {\r\n        this.setState({resizedWidth: window.innerWidth});\r\n    };\r\n\r\n\r\n    onCopyList = (text) => {\r\n        copyToClipboard(text);\r\n        Alert.success('Copied!')\r\n    };\r\n\r\n\r\n    onGetTrunkNumbers = (trunk_id, sp_auth) => {\r\n        const {savedPerPage, savedTableFilter, currentDisplay} = this.state;\r\n        const {getTrunkNumbers, per_page} = this.props;\r\n        let pickedFilter;\r\n\r\n        this.curPerPage = savedPerPage;\r\n\r\n        if (!objectIsEmpty(savedTableFilter)) {\r\n            pickedFilter = savedTableFilter;\r\n        } else if (!objectIsEmpty(this.filter)) {\r\n            pickedFilter = this.filter;\r\n        } else {\r\n            pickedFilter = this.defaultFilter;\r\n        }\r\n\r\n        getTrunkNumbers(trunk_id, savedPerPage || per_page, pickedFilter, 1, currentDisplay);\r\n        this.setState({prefixViewNumbers: sp_auth});\r\n        this.tableRef.clear();\r\n        this.clearSelectedNumbers();\r\n        this.setActiveTrunk(trunk_id);\r\n    };\r\n\r\n\r\n    setActiveTrunk = (trunk_id) => {\r\n        this.setState({\r\n            activeTrunkId: trunk_id\r\n        });\r\n    };\r\n\r\n\r\n    combineFilters = (filter, savedFilter) => {\r\n        return {\r\n\r\n            rate_min: filter && filter.rate_min \r\n                ? filter.rate_min \r\n                : savedFilter && savedFilter.rate_min \r\n                    ? savedFilter.rate_min \r\n                    : MIN_RATE_DIALER,\r\n                    \r\n            rate_max: filter && filter.rate_max \r\n                ? filter.rate_max \r\n                : savedFilter && savedFilter.rate_max \r\n                    ? savedFilter.rate_max \r\n                    : MAX_RATE_DIALER,\r\n\r\n            str: filter && (filter.str || filter.str === '') \r\n                ? filter.str \r\n                : savedFilter && (savedFilter.str || savedFilter.str === '') \r\n                    ? savedFilter.str \r\n                    : ''\r\n        };\r\n    };\r\n    \r\n\r\n    setActiveFiltersCount = (value = null) => {\r\n        if (!value)\r\n            return;\r\n\r\n        const filters = Object.keys(value);\r\n        const activeFilters = filters.filter(item => {\r\n            if (value[item] === this.defaultFilter[item] || (!value[item] && value[item] !== 0)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n\r\n        this.setState({\r\n            activeFiltersCount: activeFilters.length\r\n        });\r\n    };\r\n\r\n\r\n    onChangeGroup = (currentDisplay) => {\r\n        const {activeTrunkId, savedPerPage} = this.state;\r\n        const {getTrunkNumbers, per_page} = this.props;\r\n\r\n        this.setState({\r\n            currentDisplay\r\n        });\r\n\r\n        if (activeTrunkId) {\r\n            getTrunkNumbers(\r\n                activeTrunkId, \r\n                savedPerPage || this.curPerPage || per_page, \r\n                this.filter, \r\n                1, \r\n                currentDisplay\r\n            );\r\n        }\r\n\r\n        this.tableRef.clear();\r\n        this.clearSelectedNumbers();\r\n    };\r\n\r\n\r\n    onChangeFilters = (filtersObj) => {\r\n        const {activeTrunkId, savedPerPage, currentDisplay} = this.state;\r\n        const {getTrunkNumbers, per_page} = this.props;\r\n\r\n        this.setActiveFiltersCount(filtersObj);\r\n\r\n        this.filter = filtersObj;\r\n        localStorage.setItem(LOCAL_STORAGE_NUMBERS_FILTERS_DIALER, JSON.stringify(this.filter));\r\n        this.setState({\r\n            savedTableFilter: filtersObj\r\n        });\r\n\r\n        if (activeTrunkId) {\r\n            getTrunkNumbers(activeTrunkId, savedPerPage || this.curPerPage || per_page, this.filter, 1, currentDisplay);\r\n        }\r\n        this.tableRef.clear();\r\n        this.clearSelectedNumbers();\r\n    };\r\n\r\n\r\n    onChangePerPage = (perPage) => {\r\n        const {activeTrunkId, currentDisplay} = this.state;\r\n        const {getTrunkNumbers} = this.props;\r\n\r\n        const savedPerPage = perPage ? null : this.curPerPage;\r\n        this.setState({savedPerPage: savedPerPage});\r\n\r\n        const pickedFilter = this.getActiveFilter();\r\n        const per_page = Number(perPage) || this.curPerPage;\r\n        this.curPerPage = per_page <= 0 ? MIN_PER_PAGE_DIALER : per_page > 100 ? 100 : per_page;\r\n        localStorage.setItem(LOCAL_STORAGE_NUMBERS_PER_PAGE_DIALER, JSON.stringify(this.curPerPage));\r\n\r\n        getTrunkNumbers(activeTrunkId, this.curPerPage, pickedFilter, 1, currentDisplay);\r\n    };\r\n\r\n\r\n    onChangePage = (pageNumber) => {\r\n        const {activeTrunkId, savedPerPage, currentDisplay} = this.state;\r\n        const {getTrunkNumbers, per_page} = this.props;\r\n        \r\n        const pickedFilter = this.getActiveFilter();\r\n\r\n        getTrunkNumbers(activeTrunkId, savedPerPage || this.curPerPage || per_page, pickedFilter, pageNumber, currentDisplay);\r\n    };\r\n\r\n    \r\n    onDownloadNumbers = (trunk_id) => this.props.downloadNumbers(trunk_id);\r\n\r\n    \r\n    getActiveFilter = () => {\r\n        const {savedTableFilter} = this.state;\r\n        const combinedFilter = this.combineFilters(this.filter, savedTableFilter);\r\n\r\n        return (!objectIsEmpty(this.filter) || !objectIsEmpty(savedTableFilter)) \r\n            ? combinedFilter \r\n            : this.defaultFilter;\r\n    };\r\n\r\n\r\n    onAllocationGetResult = (response) => {\r\n        const {setTrunkNumberTransaction, setLoadingAllocatedNumbers} = this.props;\r\n\r\n        setTrunkNumberTransaction(response.trunk_number_transaction || {});\r\n        const trunkNumberTransaction = response.trunk_number_transaction;\r\n        const notAllocatedNumbers = response.not_allocated_numbers;\r\n\r\n        if (trunkNumberTransaction) {\r\n            const transactionId = trunkNumberTransaction.id;\r\n            const allocatedNumbersCount = trunkNumberTransaction.numbers;\r\n            this.setState({transactionId, allocatedNumbersCount});\r\n\r\n            getFileResponse('trunk_number:get_list', {target: {trunk_number_transaction_id: transactionId}}, true).then(\r\n                (response) => {\r\n                    setLoadingAllocatedNumbers(false);\r\n                    const csvText = getBlobContent(response);\r\n                    csvText.then((text) => {\r\n                        this.setState({\r\n                            csvContent: text,\r\n                        })\r\n                    })\r\n                }\r\n            )\r\n        }\r\n        notAllocatedNumbers && this.setState({notAllocatedNumbers});\r\n    };\r\n\r\n\r\n    onAllocateNumbersTemplate = async (formValue) => {\r\n        const {allocateTrunkNumbersByTemplate} = this.props;\r\n\r\n        this.setState({\r\n            activeTrunkId: formValue.trunk_id, \r\n            trunkAllocatedByOTP: false\r\n        });\r\n\r\n        const response = await allocateTrunkNumbersByTemplate(\r\n            formValue.trunk_id,\r\n            formValue.template,\r\n            Number(formValue.numbers),\r\n            formValue.random_order\r\n        );\r\n\r\n        if (response === undefined || (response.code && !response.reason_code))\r\n            return;\r\n\r\n        this.setShowNumbersModal(false);\r\n\r\n        // reason_code recieved in an error message or with no numbers\r\n        if ( response.reason_code && (!response.trunk_number_transaction || !response.trunk_number_transaction.numbers) ) {\r\n            this.setModalResponseHandler(true);\r\n            return {\r\n                status: 1,\r\n                reason_code: response.reason_code,\r\n                reason_hash: response.hash\r\n            };\r\n        }\r\n\r\n        this.onAllocationGetResult(response);\r\n        this.setShowNumbersListModal(true);\r\n        return {status: 0};\r\n    };\r\n\r\n\r\n    onAllocateNumberList = async (formValue) => {\r\n        const {allocateTrunkNumbersByNumberList} = this.props;\r\n        const {activeTrunkId} = this.state;\r\n\r\n        let numbers = formValue.num_list.trim().split('\\n');\r\n        this.setState({\r\n            activeTrunkId: formValue.trunk_id, \r\n            trunkAllocatedByOTP: false\r\n        });\r\n\r\n        const response = await allocateTrunkNumbersByNumberList(activeTrunkId, numbers);\r\n\r\n        if (response === undefined || (response.code && !response.reason_code))\r\n            return;\r\n\r\n        this.setShowNumbersModal(false);\r\n\r\n        // reason_code recieved in an error message or with no numbers\r\n        if ( (!response.not_allocated_numbers || !response.not_allocated_numbers.length) && \r\n        (!response.trunk_number_transaction || !response.trunk_number_transaction.numbers) ) {\r\n            this.setModalResponseHandler(true);\r\n            return {\r\n                status: 1,\r\n                reason_code: 'default_numbers_list',\r\n                reason_hash: response.hash,\r\n            };\r\n        }\r\n\r\n        this.onAllocationGetResult(response);\r\n        this.setShowNumbersListModal(true);\r\n        return {status: 0};\r\n    };\r\n\r\n\r\n    onAllocateGoogleOTP = async (formValue) => {\r\n        const {allocateGoogleOTPTrunkNumbers} = this.props;\r\n\r\n        this.setState({\r\n            activeTrunkId: formValue.trunk_id, \r\n            trunkAllocatedByOTP: true\r\n        });\r\n\r\n        const response = await allocateGoogleOTPTrunkNumbers(\r\n            {...formValue}\r\n        );\r\n\r\n        if (response === undefined || (response.code && !response.reason_code))\r\n            return;\r\n\r\n        this.setShowGoogleOTPModal(false);\r\n\r\n        // reason_code recieved in an error message or with no numbers\r\n        if ( response.reason_code && (!response.trunk_number_transaction || !response.trunk_number_transaction.numbers) ) {\r\n            this.setModalResponseHandler(true);\r\n            return {\r\n                status: 1,\r\n                reason_code: response.reason_code,\r\n                reason_hash: response.hash\r\n            };\r\n        }\r\n\r\n        this.onAllocationGetResult(response);\r\n        this.setShowNumbersListModal(true);\r\n        return {status: 0};\r\n    };\r\n\r\n\r\n    setShowNumbersModal = (value) => {\r\n        this.setState({showNumbersModal: value});\r\n    };\r\n\r\n\r\n    setShowGoogleOTPModal = (value) => {\r\n        this.setState({showGoogleOTPModal: value});\r\n    };\r\n\r\n\r\n    setShowNumbersListModal = (value) => {\r\n        this.setState({showNumbersListModal: value});\r\n    };\r\n\r\n\r\n    setShowNumbersRevokeModal = (value) => {\r\n        this.setState({showNumbersRevokeModal: value});\r\n    };\r\n\r\n\r\n    setModalResponseHandler = (value) => {\r\n        this.setState({showModalResponseHandler: value});\r\n    };\r\n\r\n\r\n    onShowNumbersModal = (trunk_id) => {\r\n        this.setShowNumbersModal(true);\r\n        this.setState({activeTrunkId: trunk_id});\r\n    };\r\n\r\n\r\n    onShowGoogleOTPModal = (trunk_id) => {\r\n        const {googleOTPFormValue} = this.state;\r\n\r\n        this.setShowGoogleOTPModal(true);\r\n        this.setState({\r\n            activeTrunkId: trunk_id,\r\n            googleOTPFormValue: {...googleOTPFormValue, trunk_id: trunk_id}\r\n        });\r\n    };\r\n\r\n\r\n    handleRevokeNumbersSubmit = async () => {\r\n        const {savedTableFilter} = this.state;\r\n        const {all, list} = this.state.selectedData;\r\n        const trunkId = this.state.activeTrunkId;\r\n\r\n        const request = 'trunk_number__filter:revoke';\r\n        const params = {\r\n            target: {\r\n                trunk_id: trunkId\r\n            }\r\n        };\r\n\r\n        if (all) {\r\n            params.filterAll = true;\r\n            if (savedTableFilter) {\r\n                params.filter = savedTableFilter;\r\n            }\r\n        }\r\n\r\n        if (!all) {\r\n            const key = this.getRowKeyList();\r\n            params[key] = list;\r\n        }\r\n\r\n        this.setState({numbersRevokeModalLoading: true});\r\n\r\n        await api(request, params);\r\n\r\n        this.setState({numbersRevokeModalLoading: false});\r\n\r\n        this.onGetTrunkNumbers(trunkId);\r\n        this.setShowNumbersRevokeModal(false);\r\n    };\r\n\r\n    \r\n    downloadNumberList = (csvNumberList, trunkId, setUploadingLoading) => {\r\n        const encodedUri = encodeURI(csvNumberList);\r\n        const link = document.createElement('a');\r\n\r\n        link.setAttribute('href', encodedUri);\r\n        link.setAttribute('download', 'allocated_numbers.csv');\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        setUploadingLoading(trunkId, false);\r\n    };\r\n\r\n    downloadNumberListTxt = (csvNumberList, trunkId, setUploadingLoading) => {\r\n        const encodedUri = encodeURI(csvNumberList);\r\n        const link = document.createElement('a');\r\n\r\n        link.setAttribute('href', encodedUri);\r\n        link.setAttribute('download', 'allocated_numbers.txt');\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        setUploadingLoading(trunkId, false);\r\n    };\r\n\r\n\r\n    setSelectedData = (selected) => {\r\n        this.setState({selectedData: selected});\r\n    };\r\n\r\n\r\n    getRowKey = () => {\r\n        const {currentDisplay} = this.state;\r\n        switch (currentDisplay) {\r\n            case 'trunk_number':\r\n                return NUMBER_KEY;\r\n            case 'price_range':\r\n                return RANGE_KEY;\r\n            case 'subdestination':\r\n                return SUBDEST_KEY;\r\n        }\r\n    };\r\n\r\n\r\n    getRowKeyList = () => {\r\n        const {currentDisplay} = this.state;\r\n        switch (currentDisplay) {\r\n            case 'trunk_number':\r\n                return 'trn_key_list';\r\n            case 'price_range':\r\n                return 'pr_key_list';\r\n            case 'subdestination':\r\n                return 'sde_key_list';\r\n        }\r\n    };\r\n\r\n\r\n    setTableRef = (ref) => {\r\n        this.tableRef = ref;\r\n    };\r\n\r\n\r\n    setTemplateFormValue = (value) => {\r\n        this.setState({\r\n            templateFormValue: {...value}\r\n        });\r\n    };\r\n\r\n\r\n    setListFormValue = (value) => {\r\n        this.setState({\r\n            listFormValue: {...value}\r\n        });\r\n    };\r\n\r\n\r\n    setGoogleOTPFormValue = (value) => {\r\n        this.setState({\r\n            googleOTPFormValue: {...value}\r\n        });\r\n    };\r\n\r\n\r\n    setRandomNumber = (value) => {\r\n        this.setState({\r\n            randomNumber: value\r\n        });\r\n    };\r\n\r\n\r\n    setReasonModalProps = (props) => {\r\n        this.setState({\r\n            reasonModalProps: {...props}\r\n        });\r\n    };\r\n\r\n\r\n    /* section: Count Selected Numbers */\r\n\r\n    keepSelectedItems = (data, checked) => {\r\n        const {selectedItems} = this.state;\r\n        const updatedCollection = new Map(selectedItems);\r\n\r\n        const rowKey = this.getRowKey();\r\n\r\n        for (const item of data) {\r\n            if (checked) {\r\n                updatedCollection.set(item[rowKey], item);\r\n            } else {\r\n                updatedCollection.delete(item[rowKey]);\r\n            }\r\n        }\r\n\r\n        this.setState({selectedItems: updatedCollection});\r\n    };\r\n\r\n\r\n    getSelectedNumbersCount = () => {\r\n        const {selectedItems, selectedData: {all}} = this.state;\r\n\r\n        if (all)\r\n            return this.props.totalNumbersCount;\r\n\r\n        const rowKey = this.getRowKey();\r\n        let key = 'id';\r\n        switch (rowKey) {\r\n            case NUMBER_KEY:\r\n                key = 'numbers_count';\r\n                break;\r\n            case RANGE_KEY:\r\n                key = 'price_range_trunk_numbers';\r\n                break;\r\n            case SUBDEST_KEY:\r\n                key = 'subdestination_trunk_numbers';\r\n                break;\r\n        }\r\n\r\n        let count = 0;\r\n        for (const item of selectedItems) {\r\n            count += item[1][key];\r\n        }\r\n\r\n        return count;\r\n    };\r\n    \r\n\r\n    clearSelectedNumbers = () => {\r\n        this.setState({\r\n            selectedItems: new Map()\r\n        });\r\n    };\r\n\r\n    clearAllocatedData = () => {\r\n        this.setState({\r\n            csvContent: null,\r\n            allocatedNumbersCount: 0\r\n        })\r\n    };\r\n    downloadCompleteNumbersCSV = async (trunkId, setUploadingLoading, filter = null) => {\r\n        const {allocated_numbers_google} = this.props;\r\n        await getFileResponse('trunk_number__get_list', {\r\n            target: {\r\n                trunk_id: trunkId\r\n            },\r\n            filter: {...(filter ? filter : {})}\r\n        })\r\n            .then((response) => {\r\n                const csvText = getBlobContent(response);\r\n                csvText.then((text) => {\r\n                    const csvContent = allocated_numbers_google ? makeRangeFromPrefixesToCsv(text) : text;\r\n                    const csvHeaderList = csvContent.split('\\n')[0].split(';');\r\n                    const csvDataList = csvContent.split('\\n').slice(1).map(line => {\r\n                        const items = line.split(';');\r\n                        return [items[0], ...items.slice(2)].join(';')\r\n                    });\r\n                    const csvHeaders = [csvHeaderList[0], ...csvHeaderList.slice(2)].join(';');\r\n                    csvDataList.unshift(csvHeaders);\r\n                    const csvData = csvDataList.join('\\n');\r\n\r\n                    saveFileBlob(csvData, 'allocated_numbers.csv');\r\n                    setUploadingLoading(trunkId, false);\r\n                });\r\n            });\r\n    };\r\n    render() {\r\n        const {\r\n            activeTrunkId,\r\n            permissionList,\r\n            showModalResponseHandler,\r\n            showNumbersModal,\r\n            showNumbersRevokeModal,\r\n            showNumbersListModal,\r\n            showGoogleOTPModal,\r\n            searchLoading,\r\n            savedPerPage,\r\n            savedTableFilter,\r\n            resizedWidth,\r\n            activeFiltersCount,\r\n            currentDisplay,\r\n\r\n            reasonModalProps,\r\n            trunkAllocatedByOTP,\r\n            csvContent,\r\n            allocatedNumbersCount,\r\n            notAllocatedNumbers,\r\n            prefixViewNumbers,\r\n            numbersRevokeModalLoading\r\n        } = this.state;\r\n\r\n        const {list: selectedList, all: selectedAll} = this.state.selectedData;\r\n\r\n        const {\r\n            trunks, allocatedNumbers, numberTrunkLoading, allocatedNumbersLoading, page, count, per_page, allocated_numbers_num_list,\r\n            allocated_numbers_temp, allocated_numbers_google, loadingAllocation, uploadLoading, accountDialerState, allocation_limit,\r\n            trunk_number_transaction, account, setUploadingLoading\r\n        } = this.props;\r\n\r\n        const isMobile = resizedWidth < md.min;\r\n\r\n        const onChangePage = this.onChangePage;\r\n        const onChangePerPage = this.onChangePerPage;\r\n        const onChangeFilters = this.onChangeFilters;\r\n        const onChangeGroup = this.onChangeGroup;\r\n        const onDownloadNumbers = this.onDownloadNumbers;\r\n        const onAllocateNumbersTemplate = this.onAllocateNumbersTemplate;\r\n        const onAllocateNumberList = this.onAllocateNumberList;\r\n        const onAllocateGoogleOTP = this.onAllocateGoogleOTP;\r\n        const onShowNumbersModal = this.onShowNumbersModal;\r\n        const onShowGoogleOTPModal = this.onShowGoogleOTPModal;\r\n        const setSelectedData = this.setSelectedData;\r\n        const getRowKey = this.getRowKey;\r\n        const keepSelectedItems = this.keepSelectedItems;\r\n        const getSelectedNumbersCount = this.getSelectedNumbersCount;\r\n\r\n        const activeFilter = this.getActiveFilter();\r\n        const revokeButton = (\r\n            <BaseButton\r\n                buttonStyle=\"primary\"\r\n                as={!isMobile ? BaseButton : ButtonSecondary}\r\n                onClick={() => {\r\n                    this.setShowNumbersRevokeModal(true);\r\n                }}\r\n                loading={false}\r\n                disabled={!selectedList.length && !selectedAll}\r\n            >\r\n                <>\r\n                    {!isMobile\r\n                        ? <FormattedMessage id=\"common.revoke\" defaultMessage=\"Revoke\"/>\r\n                        : <FormattedMessage\r\n                            id=\"common.revokeCountNumbers\"\r\n                            defaultMessage=\"Revoke {count} items\"\r\n                            values={{count: this.getSelectedNumbersCount()}}\r\n                        />\r\n                    }\r\n                </>\r\n    \r\n            </BaseButton>\r\n        );\r\n\r\n        return (\r\n            <PanelLayout>\r\n                {/* Trunks */}\r\n                <FlexboxGrid justify=\"space-between\">\r\n                    <FlexboxGrid.Item>\r\n                        <PageHeader title={<FormattedMessage id=\"numbers.trunks\" defaultMessage=\"Trunks\"/>}/>\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n\r\n                <TrunkTable\r\n                    data={trunks}\r\n                    loading={numberTrunkLoading || allocatedNumbersLoading}\r\n                    onClickTrunk={this.onGetTrunkNumbers}\r\n                    activeTrunk={activeTrunkId}\r\n                    accountDialerState={accountDialerState}\r\n                    onChangeActiveTrunk={this.setActiveTrunk}\r\n                    {...{\r\n                        onDownloadNumbers,\r\n                        onShowNumbersModal,\r\n                        onShowGoogleOTPModal,\r\n                        permissionList,\r\n                        uploadLoading\r\n                    }}\r\n                />\r\n\r\n                <Spacer/>\r\n\r\n                {/* Numbers */}\r\n\r\n                <FlexboxGrid align=\"middle\" justify=\"space-between\">\r\n                    <FlexboxGrid.Item>\r\n                        <PageHeader title={<FormattedMessage id=\"numbers.allocatedNumbers\" defaultMessage=\"Allocated numbers\"/>}/>\r\n                    </FlexboxGrid.Item>\r\n\r\n                    {isMobile &&\r\n                    <FlexboxGrid.Item>\r\n                        <NumbersFilters\r\n                            {...{\r\n                                onChangeFilters,\r\n                                onChangeGroup,\r\n                                savedTableFilter,\r\n                                allocatedNumbersLoading,\r\n                                activeFiltersCount,\r\n                                currentDisplay\r\n                            }}\r\n                            isMobile={isMobile}\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                    }\r\n\r\n                </FlexboxGrid>\r\n\r\n                {!isMobile &&\r\n                <>\r\n                    <FlexGrid justify=\"space-between\">\r\n                        <FlexGridItem>\r\n                            <NumbersFilters\r\n                                {...{\r\n                                    onChangeFilters,\r\n                                    onChangeGroup,\r\n                                    savedTableFilter,\r\n                                    allocatedNumbersLoading,\r\n                                    currentDisplay\r\n                                }}\r\n                            />\r\n                        </FlexGridItem>\r\n                        <FlexGridItem>\r\n                            <StyledButtonToolbar>\r\n                                <StyledDropdown\r\n                                    onSelect={() => setUploadingLoading(activeTrunkId, true)}\r\n                                    title={<>{uploadLoading[activeTrunkId] \r\n                                        ? <StyledLoader/> \r\n                                        : this.formatMessage(m.download)\r\n                                    }</>} appearance=\"default\"\r\n                                    disabled={currentDisplay !== \"trunk_number\" || !activeTrunkId || uploadLoading[activeTrunkId]}\r\n                                >\r\n                                    <Dropdown.Item \r\n                                        onClick={() => this.downloadCompleteNumbersCSV(activeTrunkId, setUploadingLoading, activeFilter)}\r\n                                    >\r\n                                        <FormattedMessage\r\n                                            id=\"common.downloadAllocatedNumbersAs\"\r\n                                            defaultMessage=\"Download allocated numbers as {type}\"\r\n                                            values={{type: 'csv'}}\r\n                                        />\r\n                                    </Dropdown.Item>\r\n\r\n                                    <Dropdown.Item\r\n                                        onClick={() => onDownloadCompleteOnlyNumbersCSV(activeTrunkId, setUploadingLoading, activeFilter)}\r\n                                    >\r\n                                        <FormattedMessage\r\n                                            id=\"common.downloadAllocatedOnlyNumbersAs\"\r\n                                            defaultMessage=\"Download only numbers as {type}\"\r\n                                            values={{type: 'csv'}}\r\n                                        />\r\n                                    </Dropdown.Item>\r\n\r\n                                </StyledDropdown>\r\n                            </StyledButtonToolbar>\r\n                            \r\n                            {revokeButton}\r\n\r\n                        </FlexGridItem>\r\n                    </FlexGrid>\r\n                    <Spacer/>\r\n                </>\r\n                }\r\n\r\n                <AllocatedNumbersTable\r\n                    data={allocatedNumbers}\r\n                    setRef={this.setTableRef}\r\n                    loading={allocatedNumbersLoading || searchLoading}\r\n                    useSelectedData={keepSelectedItems}\r\n                    {...{\r\n                        page,\r\n                        count,\r\n                        per_page,\r\n                        savedPerPage,\r\n                        currentDisplay,\r\n                        getRowKey,\r\n                        onChangePage,\r\n                        onChangePerPage,\r\n                        setSelectedData,\r\n                    }}\r\n                />\r\n\r\n                {isMobile &&\r\n                    <StyledButtonToolbar>\r\n                        <StyledDropdown\r\n                            onSelect={() => setUploadingLoading(activeTrunkId, true)}\r\n                            title={<>{uploadLoading[activeTrunkId] ? <StyledLoader/> : this.formatMessage(m.download)}</>} appearance=\"default\"\r\n                            disabled={currentDisplay !== \"trunk_number\" || !activeTrunkId || uploadLoading[activeTrunkId]}\r\n                            placement={'topStart'}\r\n                        >\r\n                            \r\n                            <Dropdown.Item \r\n                                onClick={() => this.downloadCompleteNumbersCSV(activeTrunkId, setUploadingLoading, activeFilter)}\r\n                            >\r\n                                <FormattedMessage\r\n                                    id=\"common.downloadAllocatedNumbersAs\"\r\n                                    defaultMessage=\"Download allocated numbers as {type}\"\r\n                                    values={{type: 'csv'}}\r\n                                />\r\n                            </Dropdown.Item>\r\n                            \r\n\r\n                            <Dropdown.Item\r\n                                onClick={() => onDownloadCompleteOnlyNumbersCSV(activeTrunkId, setUploadingLoading, activeFilter)}\r\n                            >\r\n                                <FormattedMessage\r\n                                    id=\"common.downloadAllocatedOnlyNumbersAs\"\r\n                                    defaultMessage=\"Download only numbers as {type}\"\r\n                                    values={{type: 'csv'}}\r\n                                />\r\n                            </Dropdown.Item>\r\n\r\n                        </StyledDropdown>\r\n                    </StyledButtonToolbar>\r\n\r\n                }\r\n\r\n                {isMobile && (selectedList.length || selectedAll) &&\r\n                <>\r\n                    <Spacer size={40}/>\r\n                    <FlexboxGrid.Item>\r\n\r\n                        {revokeButton}\r\n\r\n                    </FlexboxGrid.Item>\r\n                </>\r\n                }\r\n\r\n\r\n                {/* Modals */}\r\n\r\n                <NumbersRevokeModal\r\n                    show={showNumbersRevokeModal}\r\n                    loading={numbersRevokeModalLoading}\r\n                    onClose={this.setShowNumbersRevokeModal}\r\n                    getCount={getSelectedNumbersCount}\r\n                    onSuccess={() => {\r\n                        this.handleRevokeNumbersSubmit();\r\n                    }}\r\n                >\r\n                </NumbersRevokeModal>\r\n\r\n                <NumbersAllocateModal\r\n                    show={showNumbersModal}\r\n                    setReasonModalProps={this.setReasonModalProps}\r\n                    onClose={this.setShowNumbersModal}\r\n\r\n                    leftFormValue={this.state.templateFormValue}\r\n                    onChangeLeftFormValue={this.setTemplateFormValue}\r\n\r\n                    rightFormValue={this.state.listFormValue}\r\n                    onChangeRightFormValue={this.setListFormValue}\r\n\r\n                    randomNumber={this.state.randomNumber}\r\n                    onChangeRandomNumber={this.setRandomNumber}\r\n\r\n                    loading={loadingAllocation}\r\n                    selectedTrunkId={this.state.activeTrunkId}\r\n                    allocationLimit={allocation_limit}\r\n                    {...{\r\n                        onAllocateNumbersTemplate,\r\n                        onAllocateNumberList,\r\n                        trunks\r\n                    }}\r\n                />\r\n\r\n                <GoogleOTPAllocateModal\r\n                    show={showGoogleOTPModal}\r\n                    formValue={this.state.googleOTPFormValue}\r\n                    loading={loadingAllocation}\r\n                    allocationLimit={allocation_limit}\r\n                    onClose={this.setShowGoogleOTPModal}\r\n                    onChangeFormValue={this.setGoogleOTPFormValue}\r\n                    setReasonModalProps={this.setReasonModalProps}\r\n                    activeField={this.state.googleOTPFormValue.sde_key ? \"sde_key\" : \"template\"}\r\n                    {...{\r\n                        onAllocateGoogleOTP,\r\n                        trunks\r\n                    }}\r\n                />\r\n\r\n                <ModalAllocationResult\r\n                    show={showNumbersListModal}\r\n                    maxWidth={!trunk_number_transaction || trunk_number_transaction.method2 !== \"google_otp\" ? 760 : 850}\r\n                    onCopy={this.onCopyList}\r\n                    downloadNumbers={this.downloadNumberList}\r\n                    downloadNumbersTxt={this.downloadNumberListTxt}\r\n                    onDownloadNumbers={onDownloadNumbers}\r\n                    uploadLoading={uploadLoading}\r\n                    loading={loadingAllocation}\r\n                    trunkId={this.state.activeTrunkId}\r\n                    trunkAllocatedByOTP={trunkAllocatedByOTP}\r\n                    methodName={'Trunks'}\r\n                    account={account}\r\n                    csvContent={csvContent}\r\n                    prefixViewNumbers={prefixViewNumbers}\r\n                    notAllocatedNumbers={notAllocatedNumbers}\r\n                    trunkNumberTransaction={trunk_number_transaction}\r\n                    allocatedNumbersCount={allocatedNumbersCount}\r\n                    setUploadingLoading={setUploadingLoading}\r\n                    onClose={() => {\r\n                        this.clearAllocatedData();\r\n                        this.setState({notAllocatedNumbers: null});\r\n                        this.setShowNumbersListModal(false);\r\n                    }}\r\n                />\r\n\r\n                <ModalResponseHandler\r\n                    show={showModalResponseHandler}\r\n                    onClose={this.setModalResponseHandler}\r\n                    onSuccess={reasonModalProps.method !== ALLOCATION_GOOGLE_OTP_DIALER_API\r\n                        ? this.setShowNumbersModal \r\n                        : this.setShowGoogleOTPModal\r\n                    }\r\n                    changeRandom={this.setRandomNumber}\r\n                    method={ALLOCATION_TEMPLATE_DIALER_API}\r\n                    params={reasonModalProps}\r\n                />\r\n            </PanelLayout>\r\n        );\r\n    }\r\n};\r\n\r\n\r\nexport default injectIntl(Numbers);\r\n\r\n\r\nconst StyledButtonToolbar = styled(ButtonToolbar)`\r\n    width: 140px;\r\n    display: inline-block; \r\n    margin-right: 10px;\r\n    ${props =>\r\n        props.width && css`\r\n            width: ${props.width};\r\n        `\r\n    }\r\n    .rtl & {\r\n        margin-right: 0;\r\n        margin-left: 10px;\r\n    }\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n        margin-top: 10px;\r\n        text-align: center;\r\n    }\r\n`;\r\n\r\nconst StyledDropdown = styled(Dropdown)`\r\n    width: 100%;\r\n    height: 36px;\r\n    \r\n    &&&&& {\r\n        .rs-btn {\r\n            background-color: var(--color-brand2);\r\n            width: 100%;\r\n            color: white;\r\n            height: 36px;\r\n            padding: 8px 20px 8px 12px;\r\n            \r\n            &:hover {\r\n                background-color: #5f2bb3;\r\n                color: white;\r\n            }\r\n            \r\n            .rtl & {\r\n                padding: 8px 12px 8px 32px;\r\n            }\r\n        }\r\n        \r\n        .rs-dropdown-menu {\r\n            background-color: #fdfdfd !important;\r\n        }\r\n        \r\n        & > .rs-dropdown-item > .rs-dropdown-item-content:hover {\r\n            background-color: #cfcfcf !important;\r\n            color: #5c5c5c !important;\r\n        }\r\n        \r\n        &.rs-dropdown-disabled > a.rs-dropdown-toggle.rs-btn {\r\n            background-color: #D5D4D4 !important;\r\n            color: white;\r\n        }\r\n        \r\n        &.rs-dropdown-disabled > a.rs-dropdown-toggle.rs-btn {\r\n            background-color: #D5D4D4 !important;\r\n            color: white;\r\n        }\r\n        \r\n        @media (max-width: 768px) {\r\n            width: 140px;\r\n        }\r\n    }\r\n`;\r\nconst StyledLoader = styled(Loader)`\r\n  & span.rs-loader-spin {\r\n    margin-top: 3px;\r\n    margin-right: 5px;\r\n  }\r\n`;","import {connect} from 'react-redux';\r\nimport {\r\n    allocateTrunkNumbersByTemplate,\r\n    allocateTrunkNumbersByNumberList,\r\n    allocateGoogleOTPTrunkNumbers,\r\n\r\n    setAllocatedNumbersByTemplate,\r\n    setAllocatedNumbersByNumberList,\r\n    setAllocatedGoogleOTPNumbers,\r\n    setLoadingAllocatedNumbers,\r\n    setUploadingLoading,\r\n    downloadNumbers,\r\n    downloadFilteredNumbers,\r\n    getAllAllocatedNumbers,\r\n    getNumberTrunksList,\r\n    getTrunkNumbers,\r\n    setTrunkNumberTransaction,\r\n\r\n} from '../../actions/client/numbers';\r\nimport Numbers from './Numbers';\r\n\r\n\r\nconst mapState = ({client_numbers, auth, auth_dialer, references}) => ({\r\n    trunks: client_numbers.numberTrunks,\r\n    numberTrunkLoading: client_numbers.numberTrunkLoading,\r\n    allocatedNumbers: client_numbers.allocatedNumbers,\r\n    allocatedNumbersLoading: client_numbers.allocatedNumbersLoading,\r\n    loadingAllocation: client_numbers.loadingAllocatedNumbers,\r\n    count: client_numbers.count,\r\n    totalNumbersCount: client_numbers.totalNumbersCount,\r\n    page: client_numbers.page,\r\n    per_page: client_numbers.per_page,\r\n    uploadLoading: client_numbers.uploadTrunkLoading,\r\n\r\n    allocated_numbers_temp: client_numbers.allocated_numbers_by_template,\r\n    allocated_numbers_num_list: client_numbers.allocated_numbers_by_number_list,\r\n    allocated_numbers_google: client_numbers.allocated_google_otp_numbers,\r\n    trunk_number_transaction: client_numbers.trunk_number_transaction,\r\n\r\n    accountDialerState: auth_dialer.dialerInfo,\r\n    account: auth.authInfo,\r\n    permittedMethods: auth.permittedMethods,\r\n    allocation_limit: auth_dialer.dialerInfo\r\n        ? auth_dialer.dialerInfo.allocation_limit\r\n        : references.client_allocation_limit\r\n});\r\n\r\nexport default connect(mapState,\r\n    {\r\n        getNumberTrunksList,\r\n        getTrunkNumbers,\r\n        getAllAllocatedNumbers,\r\n        downloadNumbers,\r\n        downloadFilteredNumbers,\r\n        allocateTrunkNumbersByNumberList,\r\n        allocateTrunkNumbersByTemplate,\r\n        allocateGoogleOTPTrunkNumbers,\r\n        setAllocatedNumbersByNumberList,\r\n        setAllocatedNumbersByTemplate,\r\n        setAllocatedGoogleOTPNumbers,\r\n        setLoadingAllocatedNumbers,\r\n        setTrunkNumberTransaction,\r\n        setUploadingLoading\r\n    })(Numbers);","import React, {createRef, useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {confirmPaymentDetails} from '../../actions/paymentDetails';\r\nimport Header from '../../components/base/PageHeader';\r\nimport {\r\n    Header as PageHeader,\r\n    Container,\r\n    Content,\r\n    FlexboxGrid,\r\n    Icon,\r\n    Nav,\r\n    Navbar,\r\n    Loader,\r\n    Divider,\r\n    Form\r\n} from 'rsuite';\r\nimport {Link, withRouter} from 'react-router-dom';\r\nimport './PaymentDetails.css';\r\nimport Button from 'rsuite/es/Button';\r\nimport {flaser} from 'object-flaser';\r\nimport fields, {\r\n    // organization field groups\r\n    customerConfirmFields,\r\n    companyConfirmFields,\r\n    // payment method field groups\r\n    bankTransferConfirmFields,\r\n    paypalFields,\r\n    bitcoinFields,\r\n    hawalaFields,\r\n    otherTransferSystemsConfirmFields\r\n} from \"./ModalAddPaymentDetail/fields\";\r\nimport {FieldInput, FieldSelectCountry, FieldTextArea} from \"./ModalAddPaymentDetail/Field\";\r\nimport * as S from '../../pages/PaymentDetails/ModalAddPaymentDetail/styled';\r\nimport {useIntl} from 'react-intl';\r\nimport m from \"../../definedMessages\";\r\n\r\n\r\nconst methodFields = [\r\n    bankTransferConfirmFields,\r\n    paypalFields,\r\n    otherTransferSystemsConfirmFields,\r\n    otherTransferSystemsConfirmFields,\r\n    hawalaFields,\r\n    bitcoinFields\r\n];\r\n\r\nconst styleContainer = {\r\n    minHeight: '100vh'\r\n};\r\n\r\nconst CONFIRMED = false;\r\nconst ALREADY_CONFIRMED = true;\r\n\r\n\r\nconst CONFIRM_STATUS__DELETED = 3;\r\n\r\nconst PaymentDetailConfirm = ({\r\n    auth, \r\n    loading, \r\n    history, \r\n    confirmPayment, \r\n    confirmStatus, \r\n    countryList, \r\n    confirmPaymentDetails,\r\n})=> {\r\n\r\n    const {formatMessage} = useIntl();\r\n\r\n    const statusLabels = [\r\n        formatMessage(m.confirmed),\r\n        formatMessage(m.alreadyHasBeenConfirmed),\r\n        formatMessage(m.alreadyHasBeenRejected),\r\n        formatMessage(m.alreadyHasBeenDeleted),\r\n    ];\r\n    \r\n    const tokenId = history.location.pathname.split('/').filter(item => item)[1];\r\n    let textAreaRef = createRef();\r\n\r\n\r\n    const setFormFields = (organizationType, paymentMethod) => {\r\n        // company + hawala\r\n        if (organizationType === 2 && paymentMethod === 5) {\r\n            return [[], []];\r\n        }\r\n        // private person + hawala\r\n        if (organizationType === 1 && paymentMethod === 5) {\r\n            return [[], ['hawala_description']];\r\n        }\r\n        // default\r\n        const organizationFields = organizationType === 1 ? customerConfirmFields : companyConfirmFields;\r\n        return [organizationFields, methodFields[paymentMethod - 1]];\r\n    };\r\n\r\n\r\n    const renderFields = (fieldNames = [], formValue) => (\r\n\r\n        fieldNames.map((fieldName) => {\r\n\r\n            const {type, name, label: defaultLabel, labelId, componentClass, hideOn, ...props} = fields[fieldName];\r\n\r\n            // hide on option\r\n            if (hideOn && Array.isArray(hideOn)) {\r\n                for (const conditionItem of hideOn) {\r\n                    const keys = Object.keys(conditionItem || {});\r\n                    const status = keys.map(key => {\r\n                        return formValue[key] && formValue[key] === conditionItem[key];\r\n                    });\r\n\r\n                    if (!status.includes(false))\r\n                        return null;\r\n                }\r\n            }\r\n\r\n            // get label\r\n            const label = labelId && m[labelId] ? formatMessage(m[labelId]) : defaultLabel;\r\n\r\n            const formField = formValue.find(field => Object.keys(field).includes(name));\r\n\r\n            if (componentClass === 'textarea') \r\n                return (\r\n                    <FieldTextArea \r\n                        value={formField[name]} \r\n                        readOnly={true} \r\n                        key={name} \r\n                        name={name} \r\n                        label={label} \r\n                        {...props} \r\n                    />\r\n                );\r\n            \r\n            if (type === 'select_country') \r\n                return (\r\n                    <FieldSelectCountry \r\n                        key={name} \r\n                        name={name} \r\n                        label={label} \r\n                        data={countryList} \r\n                        {...props} \r\n                    />\r\n                );\r\n            \r\n            if (type !== 'file') \r\n                return (\r\n                    <FieldInput \r\n                        readOnly={true} \r\n                        key={name} \r\n                        name={name} \r\n                        label={label} \r\n                        {...props} \r\n                    />\r\n                )\r\n\r\n        })\r\n    );\r\n\r\n    const confirmForm = (data) => {\r\n        return  <Form formValue={flaser(data)}>\r\n            <S.FormColumns>\r\n                {setFormFields(data.ot_key, data.pm_key).map((fieldsGroup, index, arr) => {\r\n                    if (!fieldsGroup.length)\r\n                        return null;\r\n                    return (\r\n                        <>\r\n                            {\r\n                                index > 0 && arr[0].length > 0 &&\r\n                                <Divider style={{width: 0}} vertical />\r\n                            }\r\n                            <S.FormColumn colWidth=\"50%\">\r\n                                {renderFields(fieldsGroup, [data])}\r\n                            </S.FormColumn>\r\n                        </>\r\n                    )\r\n                })}\r\n            </S.FormColumns>\r\n        </Form>\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        if (!confirmPayment || confirmPayment && !confirmPayment.length) {\r\n            confirmPaymentDetails(tokenId);\r\n        }\r\n    }, []);\r\n\r\n    const statusHeader = Number.isInteger(confirmStatus) && statusLabels[confirmStatus];\r\n    return (\r\n        !auth \r\n\r\n        ? <Container style={styleContainer}>\r\n            <PageHeader>\r\n                <Navbar appearance=\"inverse\">\r\n                    <Navbar.Header>\r\n                    </Navbar.Header>\r\n                    <Navbar.Body>\r\n                        <Nav>\r\n                            <Link to={'/login'}>< Nav.Item icon={<Icon icon=\"home\"/>}>Login</Nav.Item></Link>\r\n                        </Nav>\r\n                    </Navbar.Body>\r\n                </Navbar>\r\n            </PageHeader>\r\n            <Content>\r\n                <FlexboxGrid justify=\"center\" style={{width: '100%'}}>\r\n                    <FlexboxGrid.Item>\r\n                        {loading || !Object.keys(confirmPayment).length\r\n                            ? <Header\r\n                                className=\"unlogin_loader\"\r\n                                title={<>{formatMessage(m.confirmation)}... <Loader/></>}\r\n                            />\r\n                            : <div className=\"unlogin_confirm_payment_content\">\r\n                                <Header title={statusHeader} />\r\n                                {confirmForm(confirmPayment)}\r\n                                <Link className=\"link\" to={'/login'}><Button appearance=\"primary\">Please log in to continue</Button></Link>\r\n                            </div>\r\n                        }\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n            </Content>\r\n        </Container>\r\n\r\n        : loading || !Object.keys(confirmPayment).length\r\n            ? <Header>{formatMessage(m.confirmation)}... <Loader/></Header>\r\n            : <div className=\"login_confirm_payment_content\">\r\n                <Header title={statusHeader}/>\r\n                {confirmStatus !== CONFIRM_STATUS__DELETED ? confirmForm(confirmPayment) : <></>}\r\n            </div>\r\n    );\r\n};\r\n\r\n\r\nconst mapState = ({auth, references, paymentDetails}) => ({\r\n    auth: auth.auth,\r\n    loading: auth.loading,\r\n    confirmPayment: paymentDetails.confirm_payment,\r\n    confirmStatus: paymentDetails.confirm_status,\r\n    countryList: references.country_list\r\n});\r\n\r\nexport default withRouter(connect(mapState, {\r\n    confirmPaymentDetails\r\n})(PaymentDetailConfirm));\r\n","import React from \"react\";\r\nimport {Redirect, Route, Switch} from \"react-router\";\r\nimport _ from \"lodash\";\r\nimport {DEFAULT_AUTH_PATH_CLIENT, DEFAULT_AUTH_PATH_CLIENT_TEST} from \"../const\";\r\nimport AuthRoute from \"../components/Router/AuthRoute\";\r\nimport LiveCalls from \"../pagesClient/LiveCalls\";\r\nimport TestCalls from \"../pagesClient/TestCalls\";\r\nimport TrafficStat from \"../pagesClient/Traffic\";\r\nimport Price from \"../pagesClient/Price\";\r\nimport Accesses from \"../pagesClient/Accesses\";\r\nimport CLI from \"../pagesClient/CLI\";\r\nimport IVR from \"../pagesClient/IVR\";\r\nimport ApiPage from \"../pagesClient/ApiPage\";\r\nimport PaymentDetails from \"../pagesClient/PaymentDetails\";\r\nimport Payments from \"../pagesClient/Payments\";\r\nimport Numbers from \"../pagesClient/Numbers\";\r\nimport PaymentDetailConfirm from \"../pagesClient/PaymentDetails/PaymentDetailConfirm\";\r\n\r\n\r\nexport default ({authInfo, auth}) => {\r\n\r\n    const isTest = _.get(authInfo, 'session.account.is_test', false);\r\n\r\n    return (\r\n        <Switch>\r\n            {!isTest && <AuthRoute exact path=\"/numbers\" component={Numbers}/>}\r\n            {!isTest && <AuthRoute exact path=\"/api\" component={ApiPage}/>}\r\n            {!isTest && <AuthRoute exact path=\"/payments\" component={Payments}/>}\r\n            {!isTest && <AuthRoute exact path=\"/traffic\" component={TrafficStat}/>}\r\n            {!isTest && <AuthRoute exact path=\"/cli\" component={CLI}/>}\r\n            {!isTest && <AuthRoute exact path=\"/payment-details\" component={PaymentDetails}/>}\r\n            {!isTest && <AuthRoute exact path=\"/payment-detail/:token\" component={PaymentDetailConfirm}/>}\r\n\r\n            <AuthRoute exact path=\"/test-calls\" component={TestCalls}/>\r\n            <AuthRoute exact path=\"/live-calls\" component={LiveCalls}/>\r\n            <AuthRoute exact path=\"/price\" component={Price}/>\r\n            <AuthRoute exact path=\"/accesses\" component={Accesses}/>\r\n            <AuthRoute exact path=\"/ivr\" component={IVR}/>\r\n            {isTest\r\n                ? <Redirect to={DEFAULT_AUTH_PATH_CLIENT_TEST}/>\r\n                : <Redirect to={DEFAULT_AUTH_PATH_CLIENT}/>\r\n            }\r\n        </Switch>\r\n    )\r\n}","import en from './en.json';\r\nimport ar from './ar.json';\r\n\r\nexport default {en, ar};","import en from './en_US.js';\r\nimport ar from './ar_EG.js';\r\n\r\nexport default { en, ar };","import styled, { css } from \"styled-components\";\r\nimport Modal from \"../../components/Modal\";\r\nimport { FormGroup, ControlLabel, FormControl, Button } from \"rsuite\";\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport Icon from 'rsuite/es/Icon'\r\nimport Form from 'rsuite/es/Form'\r\n\r\nexport const FormModalWrapper = styled.div`\r\n    &&& {\r\n        overflow: hidden;\r\n    }\r\n    .rs-modal-body {\r\n        overflow: hidden;\r\n    }\r\n    \r\n    .rs-modal-content {\r\n        display: flex;\r\n        flex-direction: column;\r\n        overflow: hidden;\r\n        padding: 20px 20px 50px 20px;\r\n    }\r\n\r\n    .rs-modal-footer {\r\n        margin-top: auto;\r\n        padding-bottom: 30px;\r\n        padding-top: 40px;\r\n    }\r\n    \r\n    .grecaptcha-badge {\r\n        display: none;\r\n \r\n    }\r\n`;\r\n\r\nexport const RegistrationSubmitButton = styled(Button)`\r\n  &&& {\r\n        margin-top: 20px;\r\n        margin-left: 10px;\r\n  }\r\n`;\r\n\r\nexport const RegistrationCancelButton = styled(Button)`\r\n    margin-top: 20px;\r\n    margin-left: 10px;\r\n`;\r\n\r\nexport const RegistrationButtonWrapper = styled.div`\r\n\r\n`;\r\n\r\nexport const FormModal = styled(Modal)`\r\n    &&& {\r\n        margin-bottom: 40px !important;\r\n        overflow: hidden;\r\n    }\r\n    .rs-modal-body {\r\n        overflow: hidden;\r\n    }\r\n    .rs-modal-content {\r\n        display: flex;\r\n        flex-direction: column;\r\n        overflow: hidden;\r\n    }\r\n\r\n    .rs-modal-footer {\r\n        margin-top: auto;\r\n        padding-bottom: 20px;\r\n        padding-top: 20px;\r\n    }\r\n    .grecaptcha-badge {\r\n        right: -30%;\r\n        position: absolute;\r\n        box-shadow: none;\r\n        border: none;\r\n    }\r\n`;\r\n\r\nexport const CommentIcon = styled(Icon)`\r\n    margin-left: 10px;\r\n`;\r\n\r\nexport const GroupExtendedComment = styled(FormGroup)`\r\n    &&& {\r\n        .extended {\r\n          width: 100%;\r\n        }\r\n        .extended .rs-form-control-wrapper {\r\n          padding-left: 10px;\r\n        }\r\n    }\r\n    margin-bottom: 15px;\r\n    \r\n    @media (min-width: 768px) {\r\n        align-items: center;\r\n        display: flex;\r\n    }\r\n`;\r\n\r\nexport const Group = styled(FormGroup)`\r\n    //margin-bottom: 15px;\r\n    \r\n    @media (min-width: 768px) {\r\n        align-items: center;\r\n        display: flex;\r\n    }\r\n`;\r\n\r\nexport const Label = styled(ControlLabel)`\r\n    flex-shrink: 0;\r\n    font-weight: 600;\r\n    padding-right: 20px;\r\n    text-align: left;\r\n    width: auto;\r\n\r\n    .rtl & {\r\n        padding-left: 20px;\r\n        padding-right: 0;\r\n        text-align: right;\r\n    }\r\n    \r\n    && {\r\n        \r\n        @media (min-width: 768px) {\r\n            margin-bottom: 0;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Field = styled(FormControl)`\r\n    &&& {\r\n        min-width: 100%;\r\n        width: 100%;\r\n    } \r\n`;\r\nexport const FieldNumber = styled(FormControl)`\r\n  .rs-input-number.without-buttons .rs-input-number-btn-group-vertical {\r\n    display: none;\r\n  }\r\n`;\r\nexport const GroupNumber = styled(Group)`\r\n`;\r\nexport const FieldTextAreaAutoResize = styled(TextareaAutosize)`\r\n    &&& {\r\n        min-width: 100%;\r\n        width: 100%;\r\n        overflow: hidden;\r\n        resize: none;\r\n    } \r\n`;\r\n\r\nexport const LabelWrapper = styled.div`\r\n    flex-shrink: 0;\r\n    width: 160px;\r\n    \r\n    ${props => props.vAlign &&\r\n        css`\r\n            align-self: ${props.vAlign};\r\n        `\r\n    }\r\n\r\n    ${props => props.top &&\r\n        css`\r\n            margin-top: ${props.top}px;\r\n        `\r\n    }\r\n`;\r\n\r\nexport const FormColumns = styled.div`\r\n    align-items: stretch;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const FormColumn = styled.div`\r\n    flex: 0 0 auto;\r\n    padding: 0 20px;\r\n    position: relative;\r\n    width: 100%;\r\n\r\n    ${props => \r\n        props.flexGrow && css`\r\n            flex-grow: ${props.flexGrow};\r\n        `\r\n    }\r\n\r\n    @media (min-width: 600px) {\r\n        flex-grow: 1;\r\n        width: 1px;\r\n        \r\n        &&& {\r\n            .rs-form-control-wrapper {\r\n                max-width: 450px;\r\n                min-width: 1px;\r\n                width: 100%;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const FlexBlock = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const FlexChild = styled.div`\r\n    padding-left: 20px;\r\n    padding-right: 20px;\r\n`;","import React, {useState} from 'react'\r\nimport {SelectPicker, Uploader, Icon, FormControl} from \"rsuite\";\r\nimport * as S from \"./styled\";\r\nimport InputNumber from 'rsuite/es/InputNumber'\r\n\r\n\r\nexport const FieldInput = ({name, label,  ...props}) => {\r\n    return (<S.Group>\r\n        {label &&\r\n        <S.LabelWrapper>\r\n            <S.Label>{label}</S.Label>\r\n        </S.LabelWrapper>\r\n        }\r\n        <S.Field\r\n            name={name}\r\n            {...props}\r\n        />\r\n    </S.Group>)\r\n};\r\nexport const FieldNumber = ({name, label, type, ...props}) => {\r\n    return (<S.Group>\r\n        {label &&\r\n        <S.LabelWrapper>\r\n            <S.Label>{label}</S.Label>\r\n        </S.LabelWrapper>\r\n        }\r\n        <S.FieldNumber\r\n            accepter={InputNumber}\r\n            name={name}\r\n            {...props}\r\n        />\r\n    </S.Group>)\r\n}\r\n\r\nexport const FieldSelect = ({name, label, type, data, valueKey, labelKey, ...props}) => (\r\n    <S.Group>\r\n        {label &&\r\n            <S.LabelWrapper>\r\n                <S.Label>{label}</S.Label>\r\n            </S.LabelWrapper>\r\n        }\r\n        <S.Field\r\n            name={name}\r\n            accepter={SelectPicker}\r\n            cleanable={false}\r\n            data={data}\r\n            valueKey={valueKey}\r\n            labelKey={labelKey}\r\n            {...props}\r\n        />\r\n    </S.Group>\r\n);\r\n\r\n\r\nexport const FieldSelectComment = ({name, label, type, data, valueKey, labelKey, ...props}) => {\r\n    const [otherMessage, onSetOtherMessage] = useState(null);\r\n    const [showOtherMessage, onShowOtherMessage] = useState(false);\r\n    return (<S.GroupExtendedComment>\r\n        {label &&\r\n        <S.LabelWrapper>\r\n            <S.Label>{label}</S.Label>\r\n        </S.LabelWrapper>\r\n        }\r\n        {!showOtherMessage ? <S.Field\r\n            name={name}\r\n            accepter={SelectPicker}\r\n            cleanable={false}\r\n            data={data}\r\n            valueKey={valueKey}\r\n            labelKey={labelKey}\r\n            onSelect={(value) => {\r\n                if (value === 'Other') {\r\n                    onShowOtherMessage(true)\r\n                } else {\r\n                    onShowOtherMessage(false)\r\n                }\r\n            }}\r\n            {...props}\r\n        /> : <S.CommentIcon icon=\"close\" onClick={() => {onShowOtherMessage(false)}}/>}\r\n        {showOtherMessage && <div className=\"extended\">\r\n            <S.Field\r\n                name={name}\r\n                formValue={otherMessage}\r\n                onChange={(value) => {\r\n                    onSetOtherMessage(value)\r\n                }}\r\n                {...props}\r\n            />\r\n        </div>}\r\n    </S.GroupExtendedComment>)\r\n};\r\n\r\nexport default FieldInput","import React, {useState, useEffect, createRef, useRef} from 'react'\r\nimport {useWindowWidth} from \"../../hooks\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    registerCreate\r\n} from \"../../actions/registration\";\r\nimport {getAllReferences} from '../../actions/references';\r\nimport {parse} from 'object-flaser';\r\nimport {Form,  Schema, Divider, Alert} from \"rsuite\";\r\nimport Modal from \"../../components/Modal\";\r\nimport * as S from \"./styled\";\r\nimport Recaptcha from 'react-google-invisible-recaptcha';\r\n\r\nimport {\r\n    FieldInput, FieldNumber,\r\n    FieldSelect,\r\n    FieldSelectComment\r\n} from './RegistrationField'\r\n\r\nimport fields, {\r\n    selectableFields,\r\n    registrationFormFields\r\n} from \"./RegistrationFormFields\";\r\nimport {CustomModalClient} from \"../../components/base\";\r\n\r\nconst {StringType, NumberType} = Schema.Types;\r\n\r\n\r\nconst RegistrationModal = ( ({\r\n    show=false,\r\n    onClose,\r\n    maxWidth = 1000,\r\n    defaultFormValue = null,\r\n    countryList,\r\n    currencyList,\r\n    registerCreate,\r\n    getAllReferences,\r\n}) => {\r\n\r\n    // const recaptchaState = ReCAPTCHA.\r\n    const formModel = Schema.Model({\r\n        // type fields\r\n        name: StringType().maxLength(256, 'Max length exceeded')\r\n            .isRequired( 'This field is required'),\r\n        skype: StringType().maxLength(256, 'Max length exceeded')\r\n            .isRequired( 'This field is required'),\r\n        email: StringType().isEmail().maxLength(1024, 'Max length exceeded')\r\n            .isRequired( 'This field is required'),\r\n        cntr_code: StringType().isRequired( 'This field is required'),\r\n        comment:  StringType().maxLength(40, 'Max length exceeded'),\r\n        month_traffic_minute: NumberType().min(1, 'Min amount exceeded').max(99999, 'Max amount exceeded'),\r\n        cur_key: NumberType(),\r\n        traffic_type: NumberType()\r\n    });\r\n\r\n    const formData = useRef(null);\r\n    let formRef = null;\r\n    let recaptchaRef = useRef(null);\r\n\r\n    const [formState, setFormValue] = useState(defaultFormValue ? defaultFormValue : {});\r\n    const [trafficState, onChangeTraffic] = useState(0);\r\n    const resizedWidth = useWindowWidth();\r\n    const [loading, setLoading] = useState(false);\r\n    const [verifyToken, setVerifyCaptcha] = useState(null);\r\n    const [registerBody, setRegisteredBody] = useState(null);\r\n\r\n    // effect: change form data by defaults\r\n    useEffect(() => {\r\n        getAllReferences()\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (defaultFormValue) {\r\n            setFormValue({...defaultFormValue});\r\n        }\r\n    }, [defaultFormValue]);\r\n\r\n    useEffect(() => {\r\n        if (verifyToken && registerBody) {\r\n\r\n\r\n        }\r\n        setLoading(false);\r\n    }, [verifyToken, registerBody])\r\n\r\n    const handleFormSubmit = () => {\r\n        const formValues = formRef.getFormValue();\r\n\r\n        if (formValues && Object.keys(formValues).length) {\r\n\r\n            const fieldsValidity = [];\r\n            for (const fieldName of registrationFormFields) {\r\n                fieldsValidity.push(formRef.checkForField(fieldName));\r\n            }\r\n            if (fieldsValidity.includes(false)) {\r\n                if (recaptchaRef !== null)\r\n                    recaptchaRef.current.reset()\r\n                return;\r\n            }\r\n\r\n            setLoading(true);\r\n\r\n            const formValue = {...formValues, month_traffic_minute: trafficState || 0};\r\n            formData.current = formValue;\r\n            setRegisteredBody(formValue);\r\n\r\n            if (recaptchaRef !== null) {\r\n                recaptchaRef.current.execute();\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    const renderFields = (fieldNames = [], formValue) => (\r\n\r\n        fieldNames.map((fieldName) => {\r\n            const {type, name, label, labelId, hideOn, ...props} = fields[fieldName];\r\n\r\n            // hide on option\r\n            if (hideOn && Array.isArray(hideOn)) {\r\n                for (const conditionItem of hideOn) {\r\n                    const keys = Object.keys(conditionItem || {});\r\n                    const status = keys.map(key => {\r\n                        return formValue[key] && formValue[key] === conditionItem[key];\r\n                    });\r\n\r\n                    if (!status.includes(false))\r\n                        return null;\r\n                }\r\n            }\r\n\r\n            // get label\r\n            switch (type) {\r\n                case 'select_cntr_code':\r\n                    return <FieldSelect\r\n                        key={name}\r\n                        name={name}\r\n                        label={label}\r\n                        data={countryList}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"cntr_code\"\r\n                    />;\r\n                case 'select_cur_key':\r\n                    return <FieldSelect\r\n                        key={name}\r\n                        name={name}\r\n                        label={label}\r\n                        searchable={false}\r\n                        data={currencyList}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"cur_key\"\r\n                        {...props}\r\n                    />;\r\n                case 'select_comment':\r\n                    return <FieldSelectComment\r\n                        key={name}\r\n                        name={name}\r\n                        label={label}\r\n                        searchable={false}\r\n                        data={selectableFields[type]}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"id\"\r\n                        {...props}\r\n                    />;\r\n                case 'select_traffic_type':\r\n                    return <FieldSelect\r\n                        key={name}\r\n                        name={name}\r\n                        label={label}\r\n                        searchable={false}\r\n                        data={selectableFields[type]}\r\n                        labelKey=\"name\"\r\n                        valueKey=\"id\"\r\n                        {...props}\r\n                    />;\r\n                case 'integer':\r\n                    return (<S.GroupNumber>\r\n                        <FieldNumber\r\n                            key={name}\r\n                            name={name}\r\n                            label={label}\r\n                            onChange={(value) => {onChangeTraffic(parseInt(value))}}\r\n                            {...props}\r\n                        />\r\n                    </S.GroupNumber>);\r\n                default:\r\n                    return <FieldInput key={name} name={name} label={label} {...props} />\r\n            }\r\n        })\r\n    );\r\n\r\n    const clearForm = () => {\r\n        setFormValue({});\r\n    };\r\n\r\n    const cleanErrors = () => {\r\n        if (formRef) {\r\n            formRef.cleanErrors();\r\n        }\r\n    };\r\n\r\n    const onResolveCaptcha = (token) => {\r\n        setVerifyCaptcha(token)\r\n        return new Promise((resolve, reject) => {\r\n            if (token) {\r\n                resolve()\r\n            } else {\r\n                reject()\r\n            }\r\n        })\r\n    }\r\n\r\n    return ( <CustomModalClient\r\n            {...{show, onClose}}\r\n            title=\"Registration form\"\r\n            width={resizedWidth > maxWidth ? maxWidth : resizedWidth}\r\n            showFooter={false}\r\n            confirmButtonText=\"Success\"\r\n            loading={loading}\r\n            keyboard={false}\r\n            onClose={() => {\r\n                cleanErrors()\r\n                clearForm();\r\n                if (recaptchaRef)\r\n                    recaptchaRef.current.reset()\r\n                onClose(false);\r\n            }}\r\n        >\r\n            <S.FormModalWrapper>\r\n                <Form\r\n                    ref={ref => formRef = ref}\r\n                    model={formModel}\r\n                    formValue={formState}\r\n                    onChange={setFormValue}\r\n                >\r\n                    <S.FormColumns>\r\n                        <>\r\n                            <S.FormColumn colWidth=\"50%\">\r\n                                {renderFields(registrationFormFields, formState)}\r\n                            </S.FormColumn>\r\n                            <Divider style={{width: 0}} vertical />\r\n                        </>\r\n                    </S.FormColumns>\r\n                    <S.RegistrationButtonWrapper>\r\n                        <S.RegistrationSubmitButton onClick={handleFormSubmit} appearance=\"primary\" type=\"submit\">Submit</S.RegistrationSubmitButton>\r\n                        {resizedWidth < 1200 ? <S.RegistrationCancelButton onClick={() => {onClose()}}>Close</S.RegistrationCancelButton> : null}\r\n                    </S.RegistrationButtonWrapper>\r\n                    <Recaptcha\r\n                        ref={recaptchaRef}\r\n                        sitekey={process.env.REACT_APP_SITE_KEY}\r\n                        onResolved={ (token) => {\r\n                            const promise = onResolveCaptcha(token);\r\n                            promise.then(() => {\r\n                                const params = formData.current || {};\r\n                                registerCreate(parse({...params, token})).then((response) => {\r\n                                    if (response) {\r\n                                        if (response.code && response.code === 1) {\r\n                                            Alert.error(\"Bot verification failed\")\r\n                                        } else if (response.code && response.code > 1) {\r\n                                            Alert.error(\"No permissions\");\r\n                                        } else if ( response.reg_key) {\r\n                                            Alert.success(\"Registration request has been sent\")\r\n                                        }\r\n                                        cleanErrors();\r\n                                        clearForm();\r\n                                        onClose(false);\r\n                                    }\r\n                                    if (recaptchaRef)\r\n                                        recaptchaRef.current.reset()\r\n                                });\r\n                            }, () => {\r\n                                Alert.error(\"Bot verification failed\")\r\n                                if (recaptchaRef)\r\n                                    recaptchaRef.current.reset()\r\n                            })\r\n                        } }\r\n                    />\r\n                </Form>\r\n            </S.FormModalWrapper>\r\n        </CustomModalClient>\r\n    )\r\n} );\r\n\r\nconst mapState = ({references}) => ({\r\n    countryList: references.country_list,\r\n    currencyList: references.currency_list\r\n});\r\n\r\nexport default connect(mapState, {\r\n    registerCreate,\r\n    getAllReferences\r\n})(RegistrationModal);","import React from \"react\";\r\nimport {FormControl, SelectPicker} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\n\r\nconst LangSwitcher = ({name, placeholder, ...props}) => {\r\n\r\n    const langs = [\r\n        {lang_key: 'en', lang_name: 'English'},\r\n        {lang_key: 'ar', lang_name: 'اللغة العربية'}\r\n    ];\r\n\r\n    return (\r\n        <Switcher\r\n            name={name || 'lang'}\r\n            accepter={SelectPicker}\r\n            data={langs}\r\n            labelKey=\"lang_name\"\r\n            valueKey=\"lang_key\"\r\n            placeholder={placeholder || 'Select Language'}\r\n            searchable={false}\r\n            cleanable={false}\r\n            {...props}\r\n        />\r\n    )\r\n};\r\n\r\nexport default LangSwitcher;\r\n\r\nconst Switcher = styled(FormControl) `\r\n    width: 180px;\r\n`;","import React, {useEffect, useState} from 'react'\r\nimport {\r\n    Badge,\r\n    Button,\r\n    Container,\r\n    Content,\r\n    ControlLabel,\r\n    Form,\r\n    FormControl,\r\n    FormGroup,\r\n    Header,\r\n    Icon, Message,\r\n    Nav,\r\n    Navbar,\r\n    Panel,\r\n    Schema\r\n} from 'rsuite';\r\nimport {Link} from 'react-router-dom';\r\nimport VersionLabel from '../../components/VersionLabel/VersionLabel';\r\nimport {connect} from 'react-redux';\r\nimport {loginUser} from '../../actions/auth';\r\nimport styled, {css} from \"styled-components\";\r\nimport RegistrationModal from './RegistrationModal';\r\nimport {LOCAL_STORAGE_USER_INFO} from \"../../const/localStorageKeys\";\r\nimport {APP_TYPE_ADMIN, APP_TYPE_DEFAULT} from \"../../const\";\r\nimport LangSwitcher from \"../../components/LangSwitcher\";\r\nimport {RtlContext} from \"../../App\";\r\nimport {\r\n    BaseButton,\r\n    ButtonToolbar,\r\n} from \"../../components/base/BaseButton\";\r\nimport _ from \"lodash\";\r\nimport {Spacer} from \"../../components/base/Spacer\";\r\nimport SkypeWidget from \"../../components/SkypeWidget\";\r\n\r\nconst {StringType} = Schema.Types;\r\n\r\n\r\n\r\nexport const loginModel = Schema.Model({\r\n    login: StringType().isRequired('Required'),\r\n    password: StringType().isRequired('Required'),\r\n});\r\n\r\n\r\nexport const secondAuthModel = Schema.Model({\r\n    second_password: StringType()\r\n        .isRequired('Required')\r\n        .maxLength(8, 'The maximum of this field is 8 characters')\r\n});\r\n\r\n\r\nconst Login = (\r\n    {\r\n        loginUser,\r\n        loading,\r\n        secondAuthType,\r\n        secondAuthLink,\r\n        secondAuthEmail,\r\n        lang\r\n    }\r\n) => {\r\n\r\n    let form;\r\n\r\n    const [showPassword, onChangeShowPassword] = useState(true);\r\n    const [showRegistration, onShowRegistrationModal] = useState(false);\r\n    const [emailPending, setEmailPending] = useState(null);\r\n\r\n    useEffect(() => {\r\n        document.body.classList.remove(\"rtl\");\r\n    }, []);\r\n\r\n    const submit = () => {\r\n        if (!form.check())\r\n            return;\r\n        loginUser( form.getFormValue() )\r\n            .then((r) => {\r\n                if (_.isError(r)) {\r\n                    const reasonCode = _.get(r.response, \"data.error.reason_code\", null);\r\n                    if (\"not_confirmed\" === reasonCode) {\r\n                        setEmailPending( _.get(r.response, \"data.error.data.email\", null) );\r\n                    }\r\n                }\r\n            } )\r\n    };\r\n\r\n    let {account_name, name, login} = localStorage.getItem(LOCAL_STORAGE_USER_INFO)\r\n        ? JSON.parse( localStorage.getItem(LOCAL_STORAGE_USER_INFO) )\r\n        : {};\r\n\r\n    const defaultValue = APP_TYPE_DEFAULT === APP_TYPE_ADMIN\r\n        ? ({login})\r\n        : ({login, lang});\r\n\r\n    return (\r\n        <RtlContext.Provider value={false}>\r\n            <StyledContainer>\r\n\r\n                <Header>\r\n                    <Navbar appearance=\"inverse\">\r\n                        <Navbar.Header>\r\n                            {account_name && name &&\r\n                                <StyledMenuUserInfo>\r\n                                    <StyledMenuCompanyInfo>\r\n                                        <StyledBadge />\r\n                                        {account_name}\r\n                                    </StyledMenuCompanyInfo>\r\n                                    {name}\r\n                                </StyledMenuUserInfo>\r\n                            }\r\n                        </Navbar.Header>\r\n\r\n                        <Navbar.Body>\r\n                            <Nav pullRight>\r\n                                <StyledNavItem\r\n                                    icon={<Icon icon=\"sign-in\"/>}\r\n                                >\r\n                                    Log in\r\n                                </StyledNavItem>\r\n                            </Nav>\r\n                        </Navbar.Body>\r\n\r\n                    </Navbar>\r\n                </Header>\r\n\r\n                <Content>\r\n                    <StyledPanel\r\n                        header={<h3>Login</h3>}\r\n                        style={{marginTop: '15vh'}}\r\n                        bordered\r\n                    >\r\n\r\n                        {!secondAuthType &&\r\n                            <Form\r\n                                fluid\r\n                                ref={ref => (form = ref)}\r\n                                formDefaultValue={defaultValue}\r\n                                model={loginModel}\r\n                            >\r\n                                <FormGroup>\r\n                                    <ControlLabel>Email address or login</ControlLabel>\r\n                                    <FormControl autoFocus={!login} name=\"login\"/>\r\n                                </FormGroup>\r\n\r\n                                <FormGroup>\r\n                                    <ControlLabel>Password</ControlLabel>\r\n                                    <FormControl\r\n                                        autoFocus={!!login}\r\n                                        name=\"password\"\r\n                                        type={showPassword ? 'password' : 'text'}\r\n                                    />\r\n                                    <Button\r\n                                        onClick={() => onChangeShowPassword(!showPassword)}\r\n                                        style={{\r\n                                            position: 'absolute',\r\n                                            marginLeft: '-38px',\r\n                                            background: 'transparent'\r\n                                        }}>\r\n                                        <Icon icon={showPassword ? 'eye' : 'eye-slash'}/>\r\n                                    </Button>\r\n                                </FormGroup>\r\n\r\n                                {APP_TYPE_DEFAULT !== APP_TYPE_ADMIN &&\r\n                                    <FormGroup>\r\n                                        <ControlLabel>Language</ControlLabel>\r\n                                        <LangSwitcher\r\n                                            name=\"lang\"\r\n                                            menuClassName=\"no-rtl\"\r\n                                        />\r\n                                    </FormGroup>\r\n                                }\r\n\r\n                                <FormGroup>\r\n                                    <ButtonToolbar>\r\n                                        <StyledButton\r\n                                            onClick={submit}\r\n                                            type=\"submit\"\r\n                                            disabled={loading}\r\n                                        >\r\n                                            Sign in\r\n                                        </StyledButton>\r\n\r\n\r\n                                        <Link to=\"/reset-password\">Forgot password?</Link>\r\n                                    </ButtonToolbar>\r\n                                    <ButtonToolbar>\r\n                                        {APP_TYPE_DEFAULT !== APP_TYPE_ADMIN &&\r\n                                        <StyledSignUpButton\r\n                                            appearance=\"link\"\r\n                                            onClick={() => {\r\n                                                onShowRegistrationModal(true)\r\n                                            }}\r\n                                            disabled={loading}\r\n                                        >\r\n                                            Looking to sign up? Contact us!\r\n                                        </StyledSignUpButton>\r\n                                        }\r\n                                    </ButtonToolbar>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        }\r\n\r\n                        {secondAuthType &&\r\n                            <Form\r\n                                ref={ref => (form = ref)}\r\n                                formDefaultValue={{email: secondAuthEmail}}\r\n                                model={secondAuthModel}\r\n                                style={{display: 'block'}}\r\n                            >\r\n                                <div role=\"alert\" className=\"alert alert-warning\">\r\n                                    Your account is under two factor authentication, please enter code which we sent to\r\n                                    your {secondAuthType} <b>{secondAuthLink}</b>\r\n                                </div>\r\n\r\n                                <FormControl\r\n                                    name=\"email\"\r\n                                    hidden={true}\r\n                                />\r\n\r\n                                <FormControl\r\n                                    name=\"second_password\"\r\n                                    placeholder=\"Enter your code here\"\r\n                                    autoFocus={true}\r\n                                    style={{\r\n                                        display: 'block',\r\n                                        width: '100%',\r\n                                        marginBottom: '20px'\r\n                                    }}\r\n                                />\r\n\r\n                                <FormGroup>\r\n                                    <ButtonToolbar>\r\n                                        <StyledButton\r\n                                            onClick={submit}\r\n                                            type=\"submit\"\r\n                                            disabled={loading}\r\n                                        >\r\n                                            Confirm\r\n                                        </StyledButton>\r\n                                    </ButtonToolbar>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        }\r\n\r\n                        <Spacer/>\r\n\r\n                        {emailPending &&\r\n                        <>\r\n                            <Message\r\n                                showIcon\r\n                                closable\r\n                                type=\"warning\"\r\n                                onClose={() => setEmailPending(null)}\r\n                                description={<>Email is not verified. Please check your address <b>{emailPending}</b> for details</>}\r\n                            />\r\n                        </>\r\n                        }\r\n\r\n                    </StyledPanel>\r\n                </Content>\r\n\r\n                <SkypeWidget/>\r\n                <VersionLabel/>\r\n\r\n                <RegistrationModal\r\n                    maxWidth={700}\r\n                    show={showRegistration}\r\n                    onClose={onShowRegistrationModal }\r\n                />\r\n            </StyledContainer>\r\n        </RtlContext.Provider>\r\n    );\r\n};\r\n\r\nconst mapState = ({auth}) => ({\r\n    loading: auth.loading,\r\n    secondAuthType: auth.secondAuthType,\r\n    secondAuthLink: auth.secondAuthLink,\r\n    secondAuthEmail: auth.secondAuthEmail,\r\n    lang: auth.lang,\r\n});\r\n\r\n\r\nexport default connect(mapState, {\r\n    loginUser\r\n})(Login);\r\n\r\nconst StyledSignUpButton = styled(Button)`\r\n    font-size: 13px !important;\r\n    margin-top: 18px;\r\n    padding: 0 !important;\r\n`;\r\n\r\nconst StyledContainer = styled(Container)`\r\n    min-height: 100vh;\r\n`;\r\n\r\nconst StyledPanel = styled(Panel)`\r\n    margin-top: 15vh;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    max-width: 500px;\r\n    min-width: 340px;\r\n    width: 100%;\r\n`;\r\n\r\nconst StyledMenuCompanyInfo = styled.div`\r\n    position: absolute;\r\n    left: 4px;\r\n    top: 4px;\r\n    font-size: 8px;\r\n`;\r\n\r\nconst StyledMenuUserInfo = styled.li`\r\n    display: inline-block\r\n    padding: 19px 16px;\r\n    height: 56px;\r\n    font-size: 13px;\r\n    color: #fff;\r\n`;\r\n\r\nconst StyledBadge = styled(Badge)`\r\n    &&& {\r\n        margin-right: 2px;\r\n        width: 4px;\r\n        height: 4px;\r\n        position: relative;\r\n        top: -4px;\r\n    }\r\n`;\r\n\r\nconst StyledButton = styled(BaseButton).attrs(() => ({\r\n    buttonStyle: APP_TYPE_DEFAULT === APP_TYPE_ADMIN ? \"secondary\" : \"primary\"\r\n}))`\r\n    && {\r\n        min-width: 0;\r\n    }\r\n`;\r\n\r\nconst StyledNavItem = styled(Nav.Item)`\r\n    .rs-nav-item-content {\r\n    \r\n        &:hover,\r\n        &:active,\r\n        &:focus {\r\n            background-color: #5f2bb3 !important;\r\n            \r\n            .app-client & {\r\n                background-color: #20b188 !important;\r\n            }\r\n        }\r\n    }\r\n`;","import React, {Component} from 'react';\r\nimport {\r\n    ButtonToolbar,\r\n    Container,\r\n    Content,\r\n    ControlLabel,\r\n    FlexboxGrid,\r\n    Form,\r\n    FormControl,\r\n    FormGroup,\r\n    Header,\r\n    Icon,\r\n    Nav,\r\n    Navbar, \r\n    Panel, \r\n    Schema,\r\n    Alert\r\n} from \"rsuite\";\r\nimport {Link, withRouter} from 'react-router-dom';\r\nimport {notAuthApi} from \"../../api/auth\";\r\nimport history from \"../../config/history\";\r\nimport {APP_TYPE_ADMIN, APP_TYPE_DEFAULT, DEFAULT_ERROR_MESSAGE, DEFAULT_NOT_AUTH_PATH} from \"../../const\";\r\nimport VersionLabel from \"../../components/VersionLabel/VersionLabel\";\r\nimport styled from \"styled-components\";\r\nimport {BaseButton} from \"../../components/base/BaseButton\";\r\n\r\nconst {StringType} = Schema.Types;\r\nconst MIN_PASSWORD_LENGTH = 8;\r\nconst MAX_EMAIL_LENGTH = 120;\r\nconst resetPasswordFormModel = Schema.Model({\r\n        password: StringType()\r\n            .pattern(\r\n                /^(?=.*[a-z])(?=.*[A-Z])(?=.*[\\d])[A-Za-z'\\d#?!_@$%^&*-]{8,}$/,\r\n                'Must contain at least one number and one uppercase and lowercase letter'\r\n            )\r\n            .minLength(MIN_PASSWORD_LENGTH, `Password must be at least ${MIN_PASSWORD_LENGTH} characters`)\r\n            .isRequired('This field is required'),\r\n        confirm_password: StringType()\r\n            .isRequired('This field is required')\r\n            .addRule((value, formValues) => (\r\n                value === formValues.password\r\n            ), 'Passwords must be same')\r\n    }\r\n);\r\nexport const requestFormModel = Schema.Model({\r\n    email: StringType()\r\n        .isRequired('Required')\r\n        .maxLength(MAX_EMAIL_LENGTH, 'Too long email address')\r\n        .isEmail('Please enter an email address'),\r\n});\r\n\r\n\r\nclass ResetPassword extends Component {\r\n    formRef = null;\r\n\r\n    state = {\r\n        isTokenValid: false,\r\n        formValues: {},\r\n    };\r\n\r\n    componentDidMount() {\r\n        const token = this.props.match.params.token;\r\n        document.body.classList.remove(\"rtl\");\r\n\r\n        if (token) {\r\n            this.checkToken(token);\r\n        }\r\n    }\r\n\r\n    checkToken = (token) => {\r\n        notAuthApi('account_user__reset_password:check', {token}).then(() => {\r\n            this.setState({isTokenValid: true});\r\n        }).catch(() => {\r\n            Alert.error('Token expired, please try to reset password again');\r\n        });\r\n    };\r\n\r\n    handleSubmitResetRequest = () => {\r\n        const formValues = this.formRef.getFormValue();\r\n\r\n        if(this.formRef.check()){\r\n            notAuthApi('account_user__reset_password:request', {...formValues, site: 1})\r\n                .then(response => {\r\n                    if (response !== undefined) {\r\n                        Alert.success('Email was successfully sent! Check your SPAM folder');\r\n                        history.push(DEFAULT_NOT_AUTH_PATH);\r\n                    }\r\n                })\r\n                .catch(() => {\r\n                    Alert.error('Incorrect email');\r\n                });\r\n        }\r\n    };\r\n\r\n    handleSubmitNewPassword = () => {\r\n        const password = this.formRef.getFormValue().password;\r\n        const token = this.props.match.params.token;\r\n\r\n        if(this.formRef.check()){\r\n            notAuthApi('account_user__reset_password:modify', {password, token}).then((response) => {\r\n                Alert.success('Password successfully changed');\r\n                history.push(DEFAULT_NOT_AUTH_PATH);\r\n            }).catch(() => {\r\n                Alert.error(DEFAULT_ERROR_MESSAGE);\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const isTokenValid = this.state.isTokenValid;\r\n\r\n        return (\r\n            <Container style={{height: '100vh'}}>\r\n                <Header>\r\n                    <Navbar appearance=\"inverse\">\r\n                        <Navbar.Header>\r\n                        </Navbar.Header>\r\n                        <Navbar.Body>\r\n                            <Nav pullRight>\r\n                                <StyledNavItem\r\n                                    componentClass={Link}\r\n                                    icon={<Icon icon=\"sign-in\"/>}\r\n                                    to=\"/login\"\r\n                                >\r\n                                    Log in\r\n                                </StyledNavItem>\r\n                            </Nav>\r\n                        </Navbar.Body>\r\n                    </Navbar>\r\n                </Header>\r\n                <Content >\r\n                    <FlexboxGrid justify=\"center\" >\r\n                        <FlexboxGrid.Item colspan={12} >\r\n                            <Panel \r\n                                header={<h3>Reset Password</h3>}\r\n                                bordered \r\n                                style={{marginTop: '15vh'}}\r\n                            >\r\n\r\n                                <>\r\n                                    {!isTokenValid &&\r\n                                        <Form fluid ref={ref => (this.formRef = ref)} model={requestFormModel}>\r\n                                            <FormGroup>\r\n                                                <ControlLabel>Please, enter an email address</ControlLabel>\r\n                                                <FormControl autoFocus={true} name=\"email\"/>\r\n                                            </FormGroup>\r\n                                            <FormGroup>\r\n                                                <ButtonToolbar>\r\n                                                    <StyledButton\r\n                                                        type=\"submit\"\r\n                                                        onClick={this.handleSubmitResetRequest}\r\n                                                    >\r\n                                                        Reset\r\n                                                    </StyledButton>\r\n                                                </ButtonToolbar>\r\n                                            </FormGroup>\r\n                                        </Form>\r\n                                    }\r\n\r\n                                    {isTokenValid &&\r\n                                        <Form fluid\r\n                                            ref={ref => (this.formRef = ref)}\r\n                                            model={resetPasswordFormModel}\r\n                                            formValue = {this.state.formValues}\r\n                                            onChange={(formValues) => this.setState({formValues})}\r\n                                        >\r\n                                            <FormGroup>\r\n                                                <ControlLabel>Password</ControlLabel>\r\n                                                <FormControl autoFocus={true} name=\"password\" type=\"password\"/>\r\n                                            </FormGroup>\r\n                                            <FormGroup>\r\n                                                <ControlLabel>Confirm Password</ControlLabel>\r\n                                                <FormControl name=\"confirm_password\" type=\"password\"/>\r\n                                            </FormGroup>\r\n                                            <FormGroup>\r\n                                                <ButtonToolbar>\r\n                                                    <StyledButton\r\n                                                        type=\"submit\"\r\n                                                        onClick={this.handleSubmitNewPassword}\r\n                                                    >\r\n                                                        Reset Password\r\n                                                    </StyledButton>\r\n                                                </ButtonToolbar>\r\n                                            </FormGroup>\r\n                                        </Form>\r\n                                    }\r\n                                </>\r\n\r\n                            </Panel>\r\n                        </FlexboxGrid.Item>\r\n                    </FlexboxGrid>\r\n                </Content>\r\n                <VersionLabel/>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter((ResetPassword));\r\n\r\nconst StyledButton = styled(BaseButton).attrs(() => ({\r\n    buttonStyle: APP_TYPE_DEFAULT === APP_TYPE_ADMIN ? \"secondary\" : \"primary\"\r\n}))`\r\n    && {\r\n        min-width: 0;\r\n    }\r\n`;\r\n\r\nconst StyledNavItem = styled(Nav.Item)`\r\n    .rs-nav-item-content {\r\n    \r\n        &:hover,\r\n        &:active,\r\n        &:focus {\r\n            background-color: #20b188 !important;\r\n        }\r\n    }\r\n`;","import {APP_TYPE_ADMIN, APP_TYPE_CLIENT} from \"../const\";\r\n\r\nconst colors = {\r\n    violet: '#8256C8',\r\n    green: '#20BA88',\r\n    bg: '#E5E5E5',\r\n    text: '#575757',\r\n    info: '#299AF3',\r\n    warning: '#FFB300',\r\n    statusBadge: '#00ffa1',\r\n};\r\n\r\nexport const themeAdmin = {\r\n    appType: APP_TYPE_ADMIN,\r\n    colors: {\r\n        brand1: colors.violet,\r\n        brand2: colors.green,\r\n        primary: colors.violet,\r\n        secondary: colors.green,\r\n        bg: colors.bg,\r\n        text: colors.text,\r\n        info: colors.info,\r\n        warning: colors.warning,\r\n        statusBadge: colors.statusBadge,\r\n        activeRow: '#F0E7FF',\r\n    }\r\n};\r\nexport const themeClient = {\r\n    appType: APP_TYPE_CLIENT,\r\n    colors: {\r\n        brand1: colors.green,\r\n        brand2: colors.violet,\r\n        primary: colors.green,\r\n        secondary: colors.violet,\r\n        bg: colors.bg,\r\n        text: colors.text,\r\n        info: colors.info,\r\n        warning: colors.warning,\r\n        statusBadge: colors.statusBadge,\r\n        activeRow: '#d9d9f2',\r\n    }\r\n};\r\n\r\nexport default {\r\n    [APP_TYPE_ADMIN]: themeAdmin,\r\n    [APP_TYPE_CLIENT]: themeClient\r\n}","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Icon, Message} from \"rsuite\";\r\nimport {BaseButton, ButtonToolbar} from \"../../components/base/BaseButton\";\r\nimport {Spacer} from \"../../components/base/Spacer\";\r\nimport {DEFAULT_NOT_AUTH_PATH} from \"../../const\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nexport default ({success, token}) => {\r\n\r\n    return (\r\n        <StyledMessage\r\n            type=\"error\"\r\n            title=\"\"\r\n            success={success}\r\n            description={(\r\n                <div>\r\n                    {success\r\n                        ? <ContentSuccess {...{token}}/>\r\n                        : <ContentReject />\r\n                    }\r\n                    {!token &&\r\n                        <>\r\n                            <Spacer size={30}/>\r\n                            <BaseButton\r\n                                componentClass={Link}\r\n                                buttonStyle=\"primary\"\r\n                                to={\"/reset-password\"}\r\n                            >\r\n                                Send verification again\r\n                            </BaseButton>\r\n                        </>\r\n                    }\r\n                </div>\r\n            )}\r\n        />\r\n    )\r\n};\r\n\r\n\r\nconst ContentReject = () => (\r\n    <>\r\n        <p><Icon icon=\"warning\" size=\"2x\"/></p>\r\n        <Spacer size={20}/>\r\n        <h5>Email is not verified</h5>\r\n        <p>Verification link is wrong. Please, reset your password or contact your manager</p>\r\n    </>\r\n);\r\n\r\nconst ContentSuccess = ({token}) => (\r\n    <>\r\n        <p><Icon icon=\"check-circle\" size=\"2x\"/></p>\r\n        <Spacer size={20}/>\r\n        <h5>Verification Success</h5>\r\n        <p>Your email address was successfully verified.</p>\r\n        {token &&\r\n            <>\r\n                <p>Please, follow the link below to set your account password</p>\r\n                <Spacer size={30}/>\r\n                <p>\r\n                    <BaseButton\r\n                        componentClass={Link}\r\n                        buttonStyle=\"primary\"\r\n                        to={\"/reset-password/\" + token}\r\n                    >\r\n                        Set password\r\n                    </BaseButton>\r\n                </p>\r\n            </>\r\n        }\r\n    </>\r\n);\r\n\r\n\r\nconst StyledMessage = styled(Message)`\r\n    .rs-message-container {\r\n        border: 2px solid #cdcdcd;\r\n        border-radius: 5px;\r\n        background-color: #ffffff;\r\n        text-align: center;\r\n        \r\n        body & {\r\n            padding-bottom: 30px;\r\n            padding-top: 30px;\r\n        }\r\n        \r\n        h5 {\r\n            margin-bottom: 15px;\r\n        }\r\n        \r\n        .rs-icon {\r\n            color: ${props => props.success \r\n                ? 'var(--color-success)' \r\n                : 'var(--color-error)'};\r\n        }\r\n    }\r\n`;","import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Loader,\r\n    Message,\r\n    Alert,\r\n    Container,\r\n    Header,\r\n    Navbar,\r\n    Nav,\r\n    Icon,\r\n    Content,\r\n    FlexboxGrid,\r\n    Panel\r\n} from \"rsuite\";\r\nimport {notAuthApi} from \"../../api/auth\";\r\nimport {Link} from 'react-router-dom';\r\nimport VersionLabel from \"../../components/VersionLabel/VersionLabel\";\r\nimport styled from \"styled-components\";\r\nimport EmailVerificationResult from \"./EmailVerificationResult\";\r\n\r\n\r\nexport default ({\r\n    match,\r\n}) => {\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [success, setSuccess] = useState(false);\r\n    const [tokenResetPassword, setTokenResetPassword] = useState(false);\r\n\r\n    useEffect(() => {\r\n        notAuthApi('account_user:verify_email_modify', {token: match.params.token})\r\n            .then((r) => {\r\n                if (r.token_reset_password) {\r\n                    setTokenResetPassword(r.token_reset_password);\r\n                }\r\n                setSuccess(true);\r\n            }).catch(() => {\r\n                // Alert.error('Email verification token expired, please try to reset password again');\r\n            }).finally(() => {\r\n                setLoading(false);\r\n            });\r\n\r\n    }, [match]);\r\n\r\n    return (\r\n        <Container style={{height: '100vh'}}>\r\n            <Header>\r\n                <Navbar appearance=\"inverse\">\r\n                    <Navbar.Header>\r\n                    </Navbar.Header>\r\n                    <Navbar.Body>\r\n                        <Nav pullRight>\r\n                            <StyledNavItem\r\n                                componentClass={Link}\r\n                                icon={<Icon icon=\"sign-in\"/>}\r\n                                to=\"/login\"\r\n                            >\r\n                                Log in\r\n                            </StyledNavItem>\r\n                        </Nav>\r\n                    </Navbar.Body>\r\n                </Navbar>\r\n            </Header>\r\n            <Content >\r\n                <FlexboxGrid justify=\"center\" >\r\n                    <FlexboxGrid.Item colspan={12} >\r\n                        <StyledPanel\r\n                            header={<h3>Email Verification</h3>}\r\n                            bordered\r\n                        >\r\n                            {loading\r\n                                ? <Loader size=\"md\" content=\"Email Verification\" />\r\n                                : <EmailVerificationResult\r\n                                    token={tokenResetPassword}\r\n                                    success={success}\r\n                                />\r\n                            }\r\n                        </StyledPanel>\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n            </Content>\r\n            <VersionLabel/>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nconst StyledNavItem = styled(Nav.Item)`\r\n    .rs-nav-item-content {\r\n    \r\n        &:hover,\r\n        &:active,\r\n        &:focus {\r\n            background-color: #20b188 !important;\r\n        }\r\n    }\r\n`;\r\n\r\nconst StyledPanel = styled(Panel)`\r\n    margin-top: 15vh;\r\n    max-width: 700px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n`;","import React, {useEffect} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Router, Route, Switch, Redirect} from \"react-router-dom\";\r\nimport history from './config/history';\r\nimport {getReferences} from \"./actions/references\";\r\nimport {getPermission} from \"actions/auth\";\r\nimport Maintenance from 'pages/Maintenance/Maintenance';\r\nimport CacheBooster from 'components/CacheBooster';\r\nimport AdminRoutes from \"./routes/RoutesAdmin\";\r\nimport ClientRoutes from \"./routes/RoutesClient\";\r\nimport {\r\n    APP_TYPE_ADMIN,\r\n    APP_TYPE_CLIENT,\r\n    APP_TYPE_DEFAULT,\r\n    DEFAULT_NOT_AUTH_PATH\r\n} from \"./const\";\r\nimport locales from \"./locales\";\r\nimport localesRsuite from \"./locales-rsuite\";\r\nimport {IntlProvider as RSIntlProvider} from \"rsuite\";\r\nimport {IntlProvider} from \"react-intl\";\r\nimport {getAccountDialerInfo} from \"./actions/auth_dialer\";\r\nimport {setBodyClassNames} from \"./utils\";\r\nimport Login from \"./pages/Login\";\r\nimport ResetPassword from \"./pages/ResetPassword/ResetPassword\";\r\nimport {ThemeProvider} from \"styled-components\";\r\nimport themeContext from \"./context/themeContext\";\r\nimport EmailVerification from \"./pages/EmailVerification/EmailVerification\";\r\nimport PaymentDetailConfirm from \"./pagesClient/PaymentDetails/PaymentDetailConfirm\";\r\n\r\nexport const AppTypeContext = React.createContext(APP_TYPE_DEFAULT);\r\nexport const RtlContext = React.createContext(false);\r\n\r\n\r\nfunction App(\r\n    {\r\n        auth,\r\n        authInfo,\r\n        lang,\r\n        rtl,\r\n        appType,\r\n        getReferences,\r\n        getPermission,\r\n        maintenanceMode,\r\n        getAccountDialerInfo\r\n    }\r\n) {\r\n\r\n    useEffect(() => {\r\n        if (auth && !maintenanceMode) {\r\n            getReferences(appType);\r\n            getPermission();\r\n\r\n            if (appType === APP_TYPE_CLIENT) {\r\n                getAccountDialerInfo();\r\n            }\r\n        }\r\n    }, [appType, auth, maintenanceMode]);\r\n\r\n    useEffect(() => {\r\n        setBodyClassNames(authInfo || {});\r\n    }, [authInfo]);\r\n\r\n    const locale = lang || \"en\";\r\n    const messages = locales[locale];\r\n    const rsMessages = localesRsuite[locale];\r\n\r\n    return (\r\n        <IntlProvider locale={locale} messages={messages}>\r\n            <RSIntlProvider locale={rsMessages}>\r\n                <ThemeProvider theme={themeContext[appType]}>\r\n                    <AppTypeContext.Provider value={appType}>\r\n                        <RtlContext.Provider value={rtl}>\r\n\r\n                             {/*проверить redirect и history.push (multiple switches between numbers and login)*/}\r\n                            <Router history={history}>\r\n\r\n                                <Switch>\r\n\r\n                                    {maintenanceMode &&\r\n                                        <Route path=\"/\" component={Maintenance} />\r\n                                    }\r\n\r\n                                    <Route path=\"/login\" component={Login}/>\r\n                                    <Route path=\"/reset-password/:token?\" component={ResetPassword}/>\r\n                                    <Route path=\"/verify-mail/:token?\" component={EmailVerification}/>\r\n                                    {!auth && appType !== APP_TYPE_ADMIN &&\r\n                                        <Route exact path=\"/payment-detail/:token\" component={PaymentDetailConfirm}/>\r\n                                    }\r\n                                    {!auth &&\r\n                                        <Redirect to={DEFAULT_NOT_AUTH_PATH}/>\r\n                                    }\r\n\r\n                                    {appType === APP_TYPE_ADMIN\r\n                                        ? <AdminRoutes auth={auth}/>\r\n                                        : <ClientRoutes auth={auth} authInfo={authInfo}/>\r\n                                    }\r\n\r\n                                </Switch>\r\n\r\n                            </Router>\r\n\r\n                            <CacheBooster />\r\n\r\n                        </RtlContext.Provider>\r\n                    </AppTypeContext.Provider>\r\n                </ThemeProvider>\r\n            </RSIntlProvider>\r\n        </IntlProvider>\r\n    );\r\n}\r\n\r\nconst mapState = ({auth})=> ({\r\n    appType: auth.appType,\r\n    authInfo: auth.authInfo,\r\n    auth: auth.auth,\r\n    lang: auth.lang,\r\n    rtl: auth.rtl,\r\n    maintenanceMode: auth.maintenanceMode\r\n});\r\n\r\nexport default connect(mapState, {\r\n    getReferences,\r\n    getPermission,\r\n    getAccountDialerInfo\r\n})(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport './config/Alert';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './scss/index.scss';\r\nimport './scss/rtl.scss';\r\nimport store from \"./store\";\r\nimport packageJson from '../package.json';\r\n\r\nexport const APP_VERSION = packageJson.version;\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"CustomField_label__37v0Q\",\"inline\":\"CustomField_inline__3B5J0\",\"field\":\"CustomField_field__tSIzq\",\"input\":\"CustomField_input__2J3Qt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Pagination_wrapper__32BFZ\",\"form\":\"Pagination_form__IC-Es\",\"pagination\":\"Pagination_pagination__12rx9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckboxBadgeWrapper\":\"CheckboxBadge_CheckboxBadgeWrapper__qMLyZ\",\"CheckboxBadge\":\"CheckboxBadge_CheckboxBadge__1_TTe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"showColumnsIcon\":\"Table_showColumnsIcon__35Sim\",\"columnHeaderWithIcon\":\"Table_columnHeaderWithIcon__2hZi5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"versionLabel\":\"VersionLabel_versionLabel__3bhxQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loaderWrapper\":\"Loader_loaderWrapper__1Ex5h\"};","// \"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nexports.__esModule = true;\r\nexports.default = void 0;\r\n\r\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\r\n\r\nvar Calendar = {\r\n  sunday: 'Su',\r\n  monday: 'Mo',\r\n  tuesday: 'Tu',\r\n  wednesday: 'We',\r\n  thursday: 'Th',\r\n  friday: 'Fr',\r\n  saturday: 'Sa',\r\n  ok: 'OK',\r\n  today: 'Today',\r\n  yesterday: 'Yesterday',\r\n  hours: 'Hours',\r\n  minutes: 'Minutes',\r\n  seconds: 'Seconds',\r\n  formattedMonthPattern: 'MMM, YYYY',\r\n  formattedDayPattern: 'MMM DD, YYYY'\r\n};\r\nvar _default = {\r\n  Pagination: {\r\n    more: 'More',\r\n    prev: 'Previous',\r\n    next: 'Next',\r\n    first: 'First',\r\n    last: 'Last'\r\n  },\r\n  Table: {\r\n    emptyMessage: 'No data found',\r\n    loading: 'Loading...'\r\n  },\r\n  TablePagination: {\r\n    lengthMenuInfo: '{0} / page',\r\n    totalInfo: 'Total: {0}'\r\n  },\r\n  Calendar: Calendar,\r\n  DatePicker: (0, _extends2.default)({}, Calendar),\r\n  DateRangePicker: (0, _extends2.default)({}, Calendar, {\r\n    last7Days: 'Last 7 Days'\r\n  }),\r\n  Picker: {\r\n    noResultsText: 'No results found',\r\n    placeholder: 'Select',\r\n    searchPlaceholder: 'Search',\r\n    checkAll: 'All'\r\n  },\r\n  InputPicker: {\r\n    newItem: 'New item',\r\n    createOption: 'Create option \"{0}\"'\r\n  },\r\n  Uploader: {\r\n    inited: 'Initial',\r\n    progress: 'Uploading',\r\n    error: 'Error',\r\n    complete: 'Finished',\r\n    emptyFile: 'Empty',\r\n    upload: 'Upload'\r\n  }\r\n};\r\nexports.default = _default;\r\nmodule.exports = exports.default;","// \"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nexports.__esModule = true;\r\nexports.default = void 0;\r\n\r\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\r\n\r\nvar Calendar = {\r\n    sunday: 'ح',\r\n    monday: 'ن',\r\n    tuesday: 'ث',\r\n    wednesday: 'ر',\r\n    thursday: 'خ',\r\n    friday: 'ج',\r\n    saturday: 'س',\r\n    ok: 'حسناً',\r\n    today: 'اليوم',\r\n    yesterday: 'أمس',\r\n    hours: 'ساعات',\r\n    minutes: 'دقائق',\r\n    seconds: 'ثواني',\r\n    formattedMonthPattern: 'MM, YYYY',\r\n    formattedDayPattern: 'MMM DD, YYYY'\r\n};\r\n\r\nvar _default = {\r\n\r\n    Pagination: {\r\n        more: 'المزيد',\r\n        prev: 'السابق',\r\n        next: 'التالي',\r\n        first: 'الأول',\r\n        last: 'الأخير'\r\n    },\r\n\r\n    Table: {\r\n        emptyMessage: 'لا يوجد المزيد من البيانات',\r\n        loading: 'جاري التحميل...'\r\n    },\r\n\r\n    TablePagination: {\r\n        lengthMenuInfo: 'صفحة / {0}',\r\n        totalInfo: 'الإجمالي: {0}'\r\n    },\r\n\r\n    Calendar: Calendar,\r\n    DatePicker: (0, _extends2.default)({}, Calendar),\r\n    DateRangePicker: (0, _extends2.default)({}, Calendar, {\r\n        last7Days: 'أخر 7 أيام'\r\n    }),\r\n\r\n    Picker: {\r\n        noResultsText: 'لا يوجد نتائج',\r\n        placeholder: 'إختيار',\r\n        searchPlaceholder: 'البحث',\r\n        checkAll: 'الجميع'\r\n    },\r\n\r\n    InputPicker: {\r\n        newItem: 'عنصر جديد',\r\n        createOption: 'إنشاء العنصر \"{0}\"'\r\n    },\r\n\r\n    Uploader: {\r\n        inited: 'تم البدء',\r\n        progress: 'جاري الرفع',\r\n        error: 'خطأ',\r\n        complete: 'تم الإنتهاء',\r\n        emptyFile: 'فارغ',\r\n        upload: 'رفع'\r\n    }\r\n};\r\n\r\nexports.default = _default;\r\nmodule.exports = exports.default;"],"sourceRoot":""}
<!DOCTYPE html>
<!--
* Copyright (C) 2012-2018 Doubango Telecom <http://www.doubango.org>
* License: BSD
* This file is part of Open Source sipML5 solution <http://www.sipml5.org>
-->
<html>
<!-- head -->
<head>
    <meta charset="utf-8" />
    <title>sipML5 live demo</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="Keywords" content="doubango, sipML5, VoIP, HTML5, WebRTC, RTCWeb, SIP, IMS, Video chat, VP8, live demo " />
    <meta name="Description" content="HTML5 SIP client using WebRTC framework" />
    <meta name="author" content="Doubango Telecom" />

    <script src="SIPml-api.js?svn=252" type="text/javascript"> </script>

    <!-- Styles -->
    <link href="./assets/css/bootstrap.css" rel="stylesheet" />
    <style type="text/css">
        body {
            padding-top: 80px;
            padding-bottom: 40px;
        }
    </style>
    <link href="./assets/css/bootstrap-responsive.css" rel="stylesheet" />
    <!-- Le fav and touch icons -->
    <link rel="shortcut icon" href="./assets/ico/favicon.ico" />
    <link rel="apple-touch-icon-precomposed" sizes="114x114" href="./assets/ico/apple-touch-icon-114-precomposed.png" />
    <link rel="apple-touch-icon-precomposed" sizes="72x72" href="./assets/ico/apple-touch-icon-72-precomposed.png" />
    <link rel="apple-touch-icon-precomposed" href="./assets/ico/apple-touch-icon-57-precomposed.png" />

    <!-- Javascript code -->
    <script type="text/javascript">

        var oSipStack, oSipSessionRegister, oSipSessionCall;
        var oConfigCall;
        var oReadyStateTimer;
        var txtPhoneNumberValue = "111";



        window.onload = function () {
            oReadyStateTimer = setInterval(function () {
                console.log(document.readyState);
                if (document.readyState === "complete") {
                    clearInterval(oReadyStateTimer);
                    // initialize SIPML5
                    SIPml.init(postInit);
                }
            }, 500);
        };



        function postInit() {
            btnRegister.disabled = false;

            oConfigCall = {
                audio_remote: document.getElementById("audio_remote"),
                video_local: undefined,
                video_remote: undefined,
                screencast_window_id: 0x00000000, // entire desktop
                bandwidth: { audio: undefined, video: undefined },
                video_size: { minWidth: undefined, minHeight: undefined, maxWidth: undefined, maxHeight: undefined },
                events_listener: { events: '*', listener: onSipEventSession },
                sip_caps: [
                    { name: '+g.oma.sip-im' },
                    { name: 'language', value: '\"en,fr\"' }
                ]
            };
        };



        function sipRegister() {
            // catch exception for IE (DOM not ready)
            try {

                btnRegister.disabled = true;

                // create SIP stack
                oSipStack = new SIPml.Stack({
                    realm: "asterisk",
                    impi: "201",
                    impu: "sip:201@10.0.22.9:5060",
                    password: "7001sip1007",
                    display_name: "201",
                    websocket_proxy_url: "wss://web-call.lexico-telecom.com:8089/ws",
                    outbound_proxy_url: "udp://web-call.lexico-telecom.com:5060",
                    ice_servers: "[]",
                    enable_rtcweb_breaker: false,
                    events_listener: { events: '*', listener: onSipEventStack },
                    enable_early_ims: false,
                    enable_media_stream_cache: true,
                    bandwidth: undefined,
                    video_size: undefined,
                    sip_headers: [
                        { name: 'User-Agent', value: 'IM-client/OMA1.0 sipML5-v1.2016.03.04' },
                        { name: 'Organization', value: 'Doubango Telecom' }
                    ]
                });

                if (oSipStack.start() != 0) {
                    txtRegStatus.innerHTML = '<b>Failed to start the SIP stack</b>';
                } else {
                    return;
                }

            } catch (e) {

                txtRegStatus.innerHTML = "<b>2:" + e + "</b>";

            }

            btnRegister.disabled = false;
        }



        // sends SIP REGISTER (expires=0) to logout
        function sipUnRegister() {
            if (oSipStack) {
                oSipStack.stop(); // shutdown all sessions
            }
        }



        // makes a call (SIP INVITE)
        function sipCall(s_type) {
            if (oSipStack && !oSipSessionCall) {
                btnCall.disabled = true;
                btnHangUp.disabled = false;

                // create call session
                oSipSessionCall = oSipStack.newSession(s_type, oConfigCall);

                // make call
                if (oSipSessionCall.call(txtPhoneNumberValue) != 0) {
                    oSipSessionCall = null;
                    txtCallStatus.value = 'Failed to make call';
                    btnCall.disabled = false;
                    btnHangUp.disabled = true;
                    return;
                }
            } else if (oSipSessionCall) {
                txtCallStatus.innerHTML = '<i>Connecting...</i>';
                oSipSessionCall.accept(oConfigCall);
            }
        }



        // terminates the call (SIP BYE or CANCEL)
        function sipHangUp() {
            if (oSipSessionCall) {
                txtCallStatus.innerHTML = '<i>Terminating the call...</i>';
                oSipSessionCall.hangup({ events_listener: { events: '*', listener: onSipEventSession } });
            }
        }


        function uiOnConnectionEvent(b_connected, b_connecting) { // should be enum: connecting, connected, terminating, terminated
            btnRegister.disabled = b_connected || b_connecting;
            btnUnRegister.disabled = !b_connected && !b_connecting;
            btnCall.disabled = !(b_connected && tsk_utils_have_webrtc() && tsk_utils_have_stream());
            btnHangUp.disabled = !oSipSessionCall;
        }


        function uiCallTerminated(s_description) {
            btnHangUp.value = 'HangUp';
            btnCall.disabled = false;
            btnHangUp.disabled = true;
            if (window.btnBFCP) window.btnBFCP.disabled = true;

            oSipSessionCall = null;
            txtCallStatus.innerHTML = "<i>" + s_description + "</i>";

            setTimeout(function () { if (!oSipSessionCall) txtCallStatus.innerHTML = ''; }, 2500);
        }



        // Callback function for SIP Stacks
        function onSipEventStack(e) {

            console.log("stack: ", e.type);

            switch (e.type) {

                case 'started':
                {
                    // catch exception for IE (DOM not ready)
                    try {
                        // LogIn (REGISTER) as soon as the stack finish starting
                        oSipSessionRegister = this.newSession('register', {
                            expires: 200,
                            events_listener: { events: '*', listener: onSipEventSession },
                            sip_caps: [
                                { name: '+g.oma.sip-im', value: null },
                                { name: '+audio', value: null },
                                { name: 'language', value: '\"en,fr\"'}
                            ]
                        });
                        oSipSessionRegister.register();
                    }
                    catch (e) {
                        txtRegStatus.value = txtRegStatus.innerHTML = "<b>1:" + e + "</b>";
                        btnRegister.disabled = false;
                    }
                    break;
                }

                case 'stopping':
                case 'stopped':
                case 'failed_to_start':
                case 'failed_to_stop':
                {
                    var bFailure = (e.type == 'failed_to_start') || (e.type == 'failed_to_stop');
                    oSipStack = null;
                    oSipSessionRegister = null;
                    oSipSessionCall = null;

                    uiOnConnectionEvent(false, false);

                    txtCallStatus.innerHTML = '';
                    txtRegStatus.innerHTML = bFailure ? "<i>Disconnected: <b>" + e.description + "</b></i>" : "<i>Disconnected</i>";
                    break;
                }

                case 'm_permission_requested':
                {
                    break;
                }

                case 'm_permission_accepted':
                case 'm_permission_refused':
                {
                    if (e.type == 'm_permission_refused') {
                        uiCallTerminated('Media stream permission denied');
                    }
                    break;
                }

                case 'starting':
                default:
                    break;
            }
        };


        // Callback function for SIP sessions (INVITE, REGISTER, MESSAGE...)
        function onSipEventSession(e) {

            console.log("session: ", e.type);

            switch (e.type) {

                case 'connecting':
                case 'connected':
                {
                    var bConnected = (e.type == 'connected');
                    if (e.session == oSipSessionRegister) {
                        uiOnConnectionEvent(bConnected, !bConnected);
                        txtRegStatus.innerHTML = "<i>" + e.description + "</i>";
                    }
                    else if (e.session == oSipSessionCall) {
                        btnHangUp.value = 'HangUp';
                        btnCall.disabled = true;
                        btnHangUp.disabled = false;
                        if (window.btnBFCP) window.btnBFCP.disabled = false;

                        txtCallStatus.innerHTML = "<i>" + e.description + "</i>";

                        if (SIPml.isWebRtc4AllSupported()) { // IE don't provide stream callback
                        }
                    }
                    break;
                }

                case 'terminating':
                case 'terminated':
                {
                    if (e.session == oSipSessionRegister) {
                        uiOnConnectionEvent(false, false);

                        oSipSessionCall = null;
                        oSipSessionRegister = null;

                        txtRegStatus.innerHTML = "<i>" + e.description + "</i>";
                    }
                    else if (e.session == oSipSessionCall) {
                        uiCallTerminated(e.description);
                    }
                    break;
                }

                case 'i_ao_request':
                {
                    if (e.session == oSipSessionCall) {
                        var iSipResponseCode = e.getSipResponseCode();
                        if (iSipResponseCode == 180 || iSipResponseCode == 183) {
                            startRingbackTone();
                            txtCallStatus.innerHTML = '<i>Remote ringing...</i>';
                        }
                    }
                    break;
                }

                case 'm_early_media':
                {
                    if (e.session == oSipSessionCall) {
                        txtCallStatus.innerHTML = '<i>Early media started</i>';
                    }
                    break;
                }
            }
        }

    </script>
</head>



<body>
<div class="navbar navbar-fixed-top">
    <div id="divNavbarInner" class="navbar-inner">
        <div class="container">
            <img alt="sipML5" class="brand" src="./images/sipml-34x39.png" />
        </div>
    </div>
</div>


<div class="container">
    <div class="row-fluid">


        <div class="span4 well">
            <label id="txtRegStatus"></label>
            <h2>Registration</h2>
            <p>
                <input type="button" class="btn btn-success" id="btnRegister" value="LogIn" disabled onclick='sipRegister();' />
                <input type="button" class="btn btn-danger" id="btnUnRegister" value="LogOut" disabled onclick='sipUnRegister();' />
            </p>
            <div>
                <label id="txtCallStatus"></label>
                <div class="btn-toolbar">
                    <div id="divBtnCallGroup" class="btn-group">
                        <button id="btnCall" disabled class="btn btn-primary" onclick='sipCall("call-audio");'>Call</button>
                    </div>
                    <div class="btn-group">
                        <input type="button" id="btnHangUp" class="btn btn-primary" value="HangUp" onclick='sipHangUp();' disabled />
                    </div>
                </div>
            </div>
            <audio id="audio_remote" autoplay="autoplay"> </audio>
        </div>

    </div>
</div>

</body>

</html>